<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-06-10T13:39:27-03:00</updated><id>/feed.xml</id><title type="html">CGomesu</title><subtitle>A blog and portfolio website built with Jekyll and hosted on Github Pages</subtitle><author><name>Carlos Gomes</name></author><entry><title type="html">Towards a smarter Home Assistant: Getting started on the analytical tools (and moving beyond)</title><link href="/blog/smarter-hass/" rel="alternate" type="text/html" title="Towards a smarter Home Assistant: Getting started on the analytical tools (and moving beyond)" /><published>2021-06-04T10:40:00-03:00</published><updated>2021-06-04T10:40:00-03:00</updated><id>/blog/smarter-hass</id><content type="html" xml:base="/blog/smarter-hass/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;June 4th, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt; (HASS) is a free and open-source software (FOSS) that provides a feature-rich environment for managing, controlling, and automating smart home devices, such as light bulbs, blinders, and LED strips.  In addition, it provides a highly customizable system for collecting and organizing a multitude of data (e.g., on/off device states, local temperature, GPS tracking, exchange rates), as provided by &lt;strong&gt;more than a thousand &lt;a href=&quot;https://www.home-assistant.io/integrations&quot;&gt;integrations&lt;/a&gt;&lt;/strong&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_of_things&quot;&gt;Internet of things&lt;/a&gt; (IoT) devices (e.g., &lt;a href=&quot;https://sonoff.tech/&quot;&gt;Sonoff&lt;/a&gt;, &lt;a href=&quot;https://wyze.com/&quot;&gt;Wyze&lt;/a&gt;, &lt;a href=&quot;https://www.z-wave.com/&quot;&gt;Z-Wave&lt;/a&gt;), local sensors (e.g., micro-controllers or single-board computers connected to sensor modules), and cloud-based services (e.g., weather and financial web APIs).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-demo.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-demo.jpg&quot; alt=&quot;HASS demo frontend&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More often than not, people use HASS to view or modify the &lt;strong&gt;current state and value&lt;/strong&gt; of integrated devices and sensors via manual triggers (e.g., pressing a button to turn off the AC) or automations (e.g., if the temperature is lower than 14°C, then turn on the heat).  However, the &lt;a href=&quot;https://www.home-assistant.io/integrations#utility&quot;&gt;HASS utility integrations&lt;/a&gt; offer users the possibility to go (way) beyond with the help of built-in mathematical and statistical tools.  More specifically, such &lt;strong&gt;analytical tools&lt;/strong&gt; allow users to summarize past states and measurements to answer questions such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many times has the front door been opened over the last 24hrs and for how long?&lt;/li&gt;
  &lt;li&gt;How much energy (kWh) has my uninterrupted power supply used over the last month?&lt;/li&gt;
  &lt;li&gt;What was the average temperature in the living-room during yesterday’s morning, afternoon, and evening?  What about last week?&lt;/li&gt;
  &lt;li&gt;What is the average level of volatile organic compounds (VOC) measured by the &lt;a href=&quot;https://www.bosch-sensortec.com/products/environmental-sensors/gas-sensors/bme680/&quot;&gt;BME680 sensor&lt;/a&gt; in my bedroom?  How much does it change over the day?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/voc-plot.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/voc-plot.jpg&quot; alt=&quot;VOC plot&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, the same analytical tools can be used to make statistical, data-driven inferences about the &lt;strong&gt;future states&lt;/strong&gt; of smart devices and sensors to create what I call &lt;em&gt;inferential automations&lt;/em&gt;. Inferential automations determine actions based on abnormal states and measurements, for example, or reliable tendencies over a user-specified period of time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if the water level is &lt;em&gt;significantly lower than yesterday&lt;/em&gt;, then __ .&lt;/li&gt;
  &lt;li&gt;if the number of detected cars on my camera is &lt;em&gt;significantly higher than thirty minutes ago&lt;/em&gt;, then __ .&lt;/li&gt;
  &lt;li&gt;if the temperature started &lt;em&gt;decreasing significantly over the last five minutes&lt;/em&gt;, then __ .&lt;/li&gt;
  &lt;li&gt;if the VOC started &lt;em&gt;increasing significantly over the last fifteen minutes&lt;/em&gt;, then __ .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/voc-plot-linear-fit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/voc-plot-linear-fit.jpg&quot; alt=&quot;VOC plot linear fit&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, according to the HASS website, the &lt;a href=&quot;https://www.home-assistant.io/integrations/statistics/&quot;&gt;Statistics&lt;/a&gt; and related utilities are currently used by less than 5% of the HASS userbase.  I feel there is much to be explored and gained from the application of &lt;strong&gt;dynamic statistical inferences&lt;/strong&gt; in home automation systems.  To mention a few reasons, sensors are susceptible to measurement error and many user-defined events (e.g., Carlos is at home) are multidimensional and frequently determined by more factors than integrated with a home automation system (e.g., my cellphone connected to my home’s private network is not a sufficient condition to tell that I’m at home but it does inform about the likelihood that I am at home).  This creates uncertainty about the current and future states of things but fortunately, the uncertainty can be quantified and taken into account by various statistical tools that have already been developed.&lt;/p&gt;

&lt;p&gt;Furthermore, the fact that HASS integrations are written in the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python programming language&lt;/a&gt; makes HASS a prime candidate for exploring the use of statistical inference in home automation systems because many mathematical and statistical packages are already available in Python and are widely used and well-maintained (e.g., &lt;a href=&quot;https://pypi.org/project/numpy/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/scipy/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scipy&lt;/code&gt;&lt;/a&gt;). Therefore, porting new and more sophisticated analytical tools to HASS should be fairly straightforward.  (More on this in the &lt;a href=&quot;#development&quot;&gt;Development&lt;/a&gt; section).&lt;/p&gt;

&lt;p&gt;If you find these ideas interesting and want to get started on their implementation in your own personal HASS instances, then read on.  As in my previous guides and tutorials, I tried to unpack and digest as much of the content as possible, the goal being to make it accessible to experts as well as novices.  Check the &lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt; for updates and if you ever get stuck on something or just want to share a few ideas and opinions, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;TODO: General picture of the structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;The implementation of analytical tools in HASS has the following basic requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;a href=&quot;#hass-core&quot;&gt;HASS &lt;strong&gt;Core&lt;/strong&gt;&lt;/a&gt; instance;&lt;/li&gt;
  &lt;li&gt;Understanding of &lt;a href=&quot;#hass-configuration-files&quot;&gt;the &lt;strong&gt;configuration&lt;/strong&gt; files and the &lt;strong&gt;YAML&lt;/strong&gt; syntax&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Understanding the &lt;a href=&quot;#hass-database&quot;&gt;HASS &lt;strong&gt;database&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;And of course, &lt;a href=&quot;#statistics&quot;&gt;basic &lt;strong&gt;statistics&lt;/strong&gt;&lt;/a&gt; knowledge.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those four topics are described separately next.  If you are already familiar with them, feel free to skip straight to the main &lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt; section.  However, at the very least, I suggest to glance over each topic to make sure we are on the same page before moving on.&lt;/p&gt;

&lt;h2 id=&quot;hass-core&quot;&gt;HASS Core&lt;/h2&gt;
&lt;p&gt;Structurally, HASS can be divided into three main layers: (a) Core; (b) Supervisor; and (c) Operating System (OS).  The folks at the HASS wiki were kind enough to put together a plethora of &lt;a href=&quot;https://www.home-assistant.io/installation/&quot;&gt;installation methods&lt;/a&gt; for all sorts of OSes and environments (bare-metal vs. virtual).  For this guide, however, only the most basic layer of the HASS system is needed, namely the &lt;strong&gt;HASS Core&lt;/strong&gt;, which is available in &lt;em&gt;any&lt;/em&gt; installation method.&lt;/p&gt;

&lt;p&gt;Instead of using an existing HASS instance, I &lt;strong&gt;strongly&lt;/strong&gt; recommend to &lt;strong&gt;create a containerized (Docker) HASS instance&lt;/strong&gt; for testing purposes.  This will be much safer than playing with an existing HASS instance and its database.&lt;/p&gt;

&lt;p&gt;To create a HASS Docker container, follow the instructions in the &lt;strong&gt;official documentation&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Install &lt;strong&gt;Docker Engine - Community Edition&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Optional&lt;/em&gt;.) &lt;a href=&quot;https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/&quot;&gt;Install &lt;strong&gt;Portainer - Community Edition&lt;/strong&gt;&lt;/a&gt; to manage your Docker containers;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/installation/linux#install-home-assistant-container&quot;&gt;Install &lt;strong&gt;HASS Docker container&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of note, after deploying the HASS container, use a host’s text editor (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluma&lt;/code&gt;) to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file and related configuration files.  Whenever you create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; file, make sure that the HASS user will have permission to read it at the very least, or you will run into issues.  Finally, in the HASS webUI, your HASS user must be able to access the &lt;a href=&quot;https://www.home-assistant.io/docs/tools/dev-tools/&quot;&gt;&lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; Services&lt;/a&gt; tab to check the state of each entity and their attributes.  The default admin user should have access to such a resource.&lt;/p&gt;

&lt;h2 id=&quot;hass-configuration-files&quot;&gt;HASS configuration files&lt;/h2&gt;
&lt;p&gt;The configuration files in HASS use a human-readable data serialization language called &lt;a href=&quot;https://yaml.org/&quot;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt; (YAML Ain’t Markup Language).  In this guide, we will use YAML to edit and create configuration files for HASS that will customize database settings and new entities to collect data and help with their visualization.&lt;/p&gt;

&lt;p&gt;If you are new to YAML, take a few minutes right now to familiarize yourself with it.  The HASS wiki has a straight to the point explanation that I invite everyone to read:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/configuration/yaml/&quot;&gt;https://www.home-assistant.io/docs/configuration/yaml/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To highlight a few important points about the configuration files and the YAML syntax:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Indentation and spacing in general are &lt;strong&gt;very&lt;/strong&gt; important in YAML. Use only the spacebar and maintain consistency across all configuration files. If at all possible, use an editor that shows whitespaces when editing any YAML files;&lt;/li&gt;
  &lt;li&gt;UPPER and lower cases matter;&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; to add comments;&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; (double quotation marks) for escaping special characters in sequences (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hey! What's up?&quot;&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;''&lt;/code&gt; (single quotation marks) when escaping is not necessary (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Nothing much.'&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!include&lt;/code&gt; for splitting up your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;. For instance, instead of adding all your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor:&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensor:&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file itself, create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensors.yaml&lt;/code&gt; files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/&lt;/code&gt; directory and then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!include&lt;/code&gt; to add them automatically to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensors&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensors.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;binary_sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary_sensors.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!secret&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.yaml&lt;/code&gt; for managing passwords.  (See more in the HASS wiki called &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/secrets/&quot;&gt;Storing secrets&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, after making any changes to any YAML file (and saving them), it is necessary to &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/#reloading-changes&quot;&gt;&lt;strong&gt;reload&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file&lt;/a&gt;.  If your installation method does not allow for selective reloading, then go ahead and reload the entire HASS.  However, &lt;em&gt;before reloading any configuration file&lt;/em&gt;, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hass --script check_config&lt;/code&gt; script to make sure your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file is okay, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From within the HASS webUI, navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Server Controls&lt;/strong&gt; &amp;gt; Configuration validation.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-validation.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-validation.jpg&quot; alt=&quot;HASS config validation&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-reload.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-reload.jpg&quot; alt=&quot;HASS config reload&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, if running the HASS Docker container, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec homeassistant python -m homeassistant --script check_config --config /config&lt;/code&gt; to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_config&lt;/code&gt; script from your host machine.  (This assumes that your HASS container is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homeassistant&lt;/code&gt;. If this is not the case, change it accordingly.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Always keep an eye on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home-assistant.log&lt;/code&gt; file for errors.  This will greatly help you troubleshooting most issues on your own (e.g., incorrect references or operations in templates).&lt;/p&gt;

&lt;h2 id=&quot;hass-database&quot;&gt;HASS database&lt;/h2&gt;
&lt;p&gt;HASS uses a relational database (DB) management system (RDBMS) based on the &lt;strong&gt;SQL engine&lt;/strong&gt; and by default, it creates a &lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;&lt;strong&gt;SQLite DB&lt;/strong&gt;&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/home-assistant_v2.db&lt;/code&gt; to track events and parameters over time.  If you want to learn more about and dive into the HASS DB, including how to create your own SQL backend, take a look at the two following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/backend/database/&quot;&gt;https://www.home-assistant.io/docs/backend/database/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/recorder/&quot;&gt;https://www.home-assistant.io/integrations/recorder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, most users won’t need to learn RDBMSes and SQL to take advantage of analytical tools in HASS because the default SQLite DB is usually enough.  However, there are a few aspects about the &lt;strong&gt;default settings&lt;/strong&gt; that can affect the way the data are analyzed.  Those aspects are described in more detail next.&lt;/p&gt;

&lt;h3 id=&quot;default-database&quot;&gt;Default database&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file, the &lt;strong&gt;default SQLite DB&lt;/strong&gt; is created along with many of the other default settings by the following configuration variable:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To change the default DB settings, it is necessary to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; configuration variable to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Customized DB settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;recorder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The documentation of the specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; variables can be found at the HASS wiki:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/recorder/&quot;&gt;https://www.home-assistant.io/integrations/recorder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In brief, by default, the HASS DB &lt;strong&gt;keeps historical data up to 10 days&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purge_keep_days: 10&lt;/code&gt;), running an automatic purge of the database every night to prevent the DB from increasing in size indefinitely (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto_purge: true&lt;/code&gt;).  Therefore, &lt;em&gt;if you want to keep data from one or more entities for longer than 10 days&lt;/em&gt;, then you must edit the DB default settings.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exclude&lt;/code&gt; filter parameters are particularly useful whenever working with non-default settings, as they help you specify which entities should be tracked.  &lt;a href=&quot;https://www.home-assistant.io/integrations/recorder/#common-filtering-examples&quot;&gt;Check the HASS wiki Configure Filter for examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, as mentioned before, the default DB is stored in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/&lt;/code&gt; directory and also by default, &lt;strong&gt;changes are committed to the DB every 1 sec&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit_interval: 1&lt;/code&gt;). This matters because if you are collecting data over a time window lower than 1 sec, then you might want to change the commit interval to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (zero, or as soon as possible) instead. At this point, it is also important to consider where the DB is being physically stored (SD card, eMMC, HDD, or SSD), owing to &lt;strong&gt;disk I/O&lt;/strong&gt; and &lt;strong&gt;wear and tear&lt;/strong&gt; considerations.  (More advanced aspects come into play if HASS is not the only application committing to the DB but I trust that if this is your case, then you probably know how to customize the HASS DB accordingly.)&lt;/p&gt;

&lt;p&gt;For advanced users who want to browse and manually add/edit entries from the default (SQLite) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home-assistant_v2.db&lt;/code&gt;, it is possible to use the &lt;a href=&quot;https://sqlitebrowser.org/&quot;&gt;SQLite Database Browser&lt;/a&gt;.  Just keep in mind that the default HASS DB might have permissions (ownership and group membership) that are incompatible with your current host user and therefore, you might be unable even to read the DB without first editing the permissions–in Linux, appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlitebrowser&lt;/code&gt; should give you access no matter what though.&lt;/p&gt;

&lt;h3 id=&quot;resetting-entity-data-in-the-db&quot;&gt;Resetting entity data in the DB&lt;/h3&gt;
&lt;p&gt;In addition to the SQL browser method of editing the HASS DB, HASS allow users to run a &lt;a href=&quot;https://www.home-assistant.io/docs/scripts/service-calls/&quot;&gt;service call&lt;/a&gt; from within the webUI to manually run a &lt;strong&gt;purge task&lt;/strong&gt;. This is particularly useful to run once you are done making changes to a newly created template entity and want to clean any previous (and possibly erroneous) records from the DB.  To remove all the data from a list of entities, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Go to YAML mode&lt;/strong&gt; and paste the following:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;recorder.purge_entities&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.my_template_entity_01&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.my_template_entity_02&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.my_template_entity*&lt;/code&gt; are the target template entities you want to purge;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;Call Service&lt;/strong&gt; to purge their data from the DB. The new data will be collected as soon as an update is triggered (see the &lt;a href=&quot;#sampling&quot;&gt;Sampling&lt;/a&gt; section).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, there are other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder&lt;/code&gt; services available in the Developer Tools &amp;gt; Services tab. Feel free to explore them.&lt;/p&gt;

&lt;h2 id=&quot;statistics&quot;&gt;Statistics&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/humor-stats.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/humor-stats.png&quot; alt=&quot;Humor about stats&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don’t need to be a mathematician who specialized in statistics to make use of it.  In this guide, we will only make reference to very introductory statistical knowledge, such as measures of central tendency (e.g., mean, median), variability (e.g., variance, standard deviation) and simple (univariate) linear regression (e.g., gradient/slope). Similarly, math-wise, I will briefly talk about first-order derivatives (the ratio of the increment) and integrals (the area under the curve).&lt;/p&gt;

&lt;p&gt;The goal in this guide is to present a starting point for more advanced usage of analytical tools in home automation systems.  The possibilities are endless for knowledgeable users (e.g., application of Bayesian methods, dynamic mixed-effects modeling) and how far you will go along these paths is up to you.&lt;/p&gt;

&lt;p&gt;Fortunately, it doesn’t take much to create really good inferential automations for your HASS instances. If you want to refresh your stats knowledge or dig deeper into it, save some time and take a look at the following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic calculus refresher:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;TODO: Embed videos? Series + Derivative + Integration&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basic stats refresher:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;TODO: Embed videos? Probability + Basic stats&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reading material:
    &lt;ul&gt;
      &lt;li&gt;Introduction:
        &lt;ul&gt;
          &lt;li&gt;&lt;em&gt;TODO: Link to papers and books&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Advanced topics:
        &lt;ul&gt;
          &lt;li&gt;&lt;em&gt;TODO: Link to papers and books&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;The main functionalities in HASS are extended by the configuration of new &lt;strong&gt;integrations&lt;/strong&gt;.  According to the &lt;a href=&quot;https://www.home-assistant.io/docs/glossary/&quot;&gt;HASS Glossary&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/&quot;&gt;Integrations&lt;/a&gt; provide the core logic for the functionality in Home Assistant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, the analytical tools covered in this guide are implemented by one or more of the &lt;strong&gt;1800&lt;/strong&gt; integrations that are currently supported by a community of home automation enthusiasts.  More specifically, most of the analytical tools are grouped under &lt;a href=&quot;https://www.home-assistant.io/integrations/#utility&quot;&gt;Utility&lt;/a&gt; integrations and in this guide, I will cover the following four:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#statistics-1&quot;&gt;Statistics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trend&quot;&gt;Trend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#integration&quot;&gt;Integration&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The current set of analytical integrations is fairly limited in what it can do.  For the most part, the tools can be used to create summary statistics of the past states and measurements of integrated devices and sensors.  Inference-wise, a lot can be done via &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/&quot;&gt;templates&lt;/a&gt; but moving forward, there is a need for more advanced analytical integrations.  For this reason, at the end of this guide, I added a section about &lt;a href=&quot;#development&quot;&gt;Development&lt;/a&gt; for anyone interested in helping out.  First, however, we need to talk about &lt;a href=&quot;#data&quot;&gt;Data&lt;/a&gt; and &lt;a href=&quot;#sampling&quot;&gt;Sampling&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;data&quot;&gt;Data&lt;/h2&gt;
&lt;p&gt;Before delving into any analytical integration, there are at least three things that we need to do. First, we need to think about the nature of the data.  For example, consider the default &lt;a href=&quot;https://www.home-assistant.io/integrations/sun/&quot;&gt;Sun&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt;) entity in HASS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-sun.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-sun.jpg&quot; alt=&quot;Sun entity&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; &lt;em&gt;state&lt;/em&gt; is a &lt;strong&gt;discrete&lt;/strong&gt; variable (it’s either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;above_horizon&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;below_horizon&lt;/code&gt;), its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; &lt;em&gt;attribute&lt;/em&gt; is actually &lt;strong&gt;continuous&lt;/strong&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;35.84&lt;/code&gt;° between the sun and the horizon) and therefore, it doesn’t make sense to use the same tools to analyze both of them.  Nonetheless, discrete variables can be transformed into continuous ones (e.g., the sun was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;above_horizon&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;34.1&lt;/code&gt;% of the day), and similarly, continuous variables can be discretised (e.g., the elevation is either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;negative&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;positive&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero&lt;/code&gt;) in order to better answer our questions of interest.&lt;/p&gt;

&lt;p&gt;Second, we need to check whether HASS is keeping track of the data we need. There are multiple ways of doing that but by far, the easiest method is to navigate to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States and then make sure that the entities whose states and attributes we would like to keep track of are being listed there.  (Alternatively, you can open the HASS DB with a SQL browser and look for the entity in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; Table.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-developer-tools.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-developer-tools.jpg&quot; alt=&quot;HASS developer tools&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Third, we need to check how the data are being represented in the DB.  As in the previous example, some variables might be an attribute of an existing entity in the HASS DB.  If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; settings for such entity are fine for the type of analysis you want to automate (e.g., purge every 10 days), then you should be fine.  However, notice that &lt;em&gt;attributes&lt;/em&gt; cannot be displayed the same way as the &lt;em&gt;states&lt;/em&gt; of an entity in the HASS webUI.  In addition, you might want to &lt;strong&gt;pre-process&lt;/strong&gt; the attributes (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round(2)&lt;/code&gt;) or perform transformations before running the analysis.&lt;/p&gt;

&lt;p&gt;For all such a reasons, I always create &lt;strong&gt;new entities&lt;/strong&gt; for the variables that will be analyzed. This is accomplished with the &lt;a href=&quot;https://www.home-assistant.io/integrations/template/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template&lt;/code&gt; integration&lt;/a&gt;.  Per the HASS wiki:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The template integration allows creating entities which derive their values from other data. This is done by specifying templates for properties of an entity, like the name or the state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/#building-templates&quot;&gt;Building templates&lt;/a&gt; is fairly easy once you get the hang of the syntax.  In short, templates follow the &lt;a href=&quot;https://palletsprojects.com/p/jinja&quot;&gt;&lt;strong&gt;Jinja2&lt;/strong&gt; templating engine&lt;/a&gt; and are mainly used to perform mathematical operations (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;) and logic tests (if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; , then __ ) but can also do loops (for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states.sensor&lt;/code&gt;), for example.  As a result, templates give users a scripting tool to go beyond the HASS built-in functionalities.&lt;/p&gt;

&lt;p&gt;As an example, let’s create an entity to store and round to zero the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute.  First, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;, &lt;strong&gt;append&lt;/strong&gt; (add to the bottom) a reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Templates&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;templates.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, use a text editor to create an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; file and create a sensor template for the sun elevation, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensor templates&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;°&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('sun.sun', 'elevation') | float | round(0) }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state:&lt;/code&gt;, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state_attr()&lt;/code&gt; to retrieve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; entity. Then, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; to force the output to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic&quot;&gt;floating point number&lt;/a&gt;, which ensures that the output is interpreted as a number, and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round(0)&lt;/code&gt; on the numeric output to round the decimals to zero cases.  The result should be an &lt;a href=&quot;https://en.wikipedia.org/wiki/Integer&quot;&gt;integer&lt;/a&gt; of the Sun elevation.  (Alternatively, we could simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; to convert the output to an integer, of course.)&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;I find the use of the folded style (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;) very helpful in keeping the templates organized. Refer to the &lt;a href=&quot;https://yaml.org/spec/1.2/spec.html&quot;&gt;YAML - Scalars&lt;/a&gt; documentation for more information.&lt;/p&gt;

&lt;p&gt;Check your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file for errors (Configuration &amp;gt; Server Controls &amp;gt; Configuration validation), and finally, &lt;strong&gt;reload your HASS&lt;/strong&gt;.  Afterwards, navigate to Developers Tools &amp;gt; States and if everything is correct, you should see a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation&lt;/code&gt; entity:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-template-sun-elevation.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-template-sun-elevation.jpg&quot; alt=&quot;HASS template sun elevation&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the values of this newly created entity will update as soon as the Sun &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute changes. However, it is also possible to configure different &lt;strong&gt;triggers&lt;/strong&gt; for &lt;strong&gt;template entities&lt;/strong&gt;.  This is particularly relevant for the next topic, namely data sampling.&lt;/p&gt;

&lt;h2 id=&quot;sampling&quot;&gt;Sampling&lt;/h2&gt;
&lt;p&gt;Devices, sensors, and services measure and transmit data with a certain frequency, which I refer by the term &lt;strong&gt;measurement resolution&lt;/strong&gt;.  Such a frequency might be determined by a time-based rule (e.g., every 1 sec) or an event (HTTP request) or a combination of both.  Regardless of the nature of the trigger, the &lt;em&gt;higher&lt;/em&gt; the measurement resolution, the more frequent the measurement and transmission are.  For example, an &lt;a href=&quot;https://www.espressif.com/en/products/devkits&quot;&gt;ESP32 Development board&lt;/a&gt; connected to a &lt;a href=&quot;https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/&quot;&gt;BME280 environmental sensor&lt;/a&gt; might send a temperature measurement &lt;em&gt;every 5 minutes&lt;/em&gt; to a MQTT broker.  Therefore, for all intended purposes, the measurement resolution of such a temperature sensor is &lt;em&gt;at best&lt;/em&gt; 5 minutes.  Now, if a second ESP32 measures and send data &lt;em&gt;every 1 minute&lt;/em&gt; instead, then the measurement resolution of the latter ESP32 is higher than the former (i.e., we can expect it to send temperature data more frequently).&lt;/p&gt;

&lt;p&gt;As mentioned before, in HASS, &lt;strong&gt;template entities&lt;/strong&gt; follow state-based updates by default–that is, they update as soon as the data of any of the referenced entities change.  Let’s say that over a 20-min window, none of the referenced data changed.  This means that the template entity also didn’t change and more importantly, in the DB, there will be a &lt;em&gt;single data point&lt;/em&gt; over the 20-min window.  However, let’s say that over the same 20-min window, one of the referenced data changed twice. This means that the template entity now changed twice and more importantly, in the DB, there will be &lt;em&gt;three data points&lt;/em&gt; over the 20-min window.  This a very efficient way of storing data but you can probably see how this might affect the usage of analytical tools, owing to an inconsistent number of data points over equal time-frames as well as the under-representation of data over time.&lt;/p&gt;

&lt;p&gt;Fortunately, just like we specify triggers for automations, HASS offers the possibility to specify &lt;a href=&quot;https://www.home-assistant.io/integrations/template/#trigger-based-template-sensors&quot;&gt;triggers for template entities&lt;/a&gt;.  There’s a large variety of triggers that can be used here (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mqtt&lt;/code&gt;) but for &lt;strong&gt;longitudinal analysis&lt;/strong&gt;, the most useful one is the &lt;a href=&quot;https://www.home-assistant.io/docs/automation/trigger#time-pattern-trigger&quot;&gt;&lt;strong&gt;time pattern&lt;/strong&gt; trigger&lt;/a&gt;, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_pattern&lt;/code&gt;.  Time pattern triggers can be specified for hours (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hours:&lt;/code&gt;), minutes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minutes:&lt;/code&gt;), and seconds (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seconds:&lt;/code&gt;), and for each one, it’s possible to prefix the value with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; to match whenever the current value is divisible by the specified value (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hours: &quot;/2&quot;&lt;/code&gt; will match every 2 hours) or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; to match any value (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minutes: &quot;*&quot;&lt;/code&gt; to match every minute).&lt;/p&gt;

&lt;p&gt;To create a time pattern trigger for one or more template entity sensor, simply add a list of time-based &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor:&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensor:&lt;/code&gt; under a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger:&lt;/code&gt; configuration in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; configuration file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Time pattern trigger&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;time_pattern&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Update every 5 minutes&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/5&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Sensor templates&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;time-based&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;°&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('sun.sun', 'elevation') | float | round(0) }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ as_timestamp(now()) }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of note, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timestamp:&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes:&lt;/code&gt; forces HASS to create a new entry on the DB (update) whenever the template is triggered.  This keeps the number of data points constant over time and each one of them will have a timestamp as attribute.  (In the DB, you will also see that if the state remained unchanged, it maintains the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_changed&lt;/code&gt; date and updates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_updated&lt;/code&gt; variable.)&lt;/p&gt;

&lt;p&gt;Also, notice that it does not make sense to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_pattern&lt;/code&gt; trigger rule that has higher resolution than the device’s &lt;em&gt;measurement&lt;/em&gt; resolution because then, there’s no chance for a new value to occur and the DB would just repeat the last transmitted measurement.  Ideally, the time pattern should &lt;strong&gt;match the measurement resolution&lt;/strong&gt; but to save space, you might want to set a lower time pattern resolution (as in 1:2, or 1:4, and so on).&lt;/p&gt;

&lt;p&gt;Finally, there is also the topic of statistical sampling (representativeness) when it comes to making generalizations from a couple of samples (e.g., environmental sensors in my bedroom and kitchen) to a population (temperature and humidity in my entire house).  In this guide, however, we will only make extrapolations about the devices, sensors, and services themselves, rather than any population that they might belong.&lt;/p&gt;

&lt;h2 id=&quot;utilities&quot;&gt;Utilities&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Tools to prepare the collected data for inferential automations&lt;/li&gt;
  &lt;li&gt;Each covered utility includes an usage example that anyone can follow along using a fresh or existing HASS instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;history-stats&quot;&gt;History Stats&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Counting, compute ratios and state duration over a user-specified time&lt;/li&gt;
  &lt;li&gt;Overview of the doc and configuration&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Illustrate usage with an example anyone can use and follow along&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Additional content
    &lt;ul&gt;
      &lt;li&gt;Codes and docs:
        &lt;ul&gt;
          &lt;li&gt;HASS doc: https://www.home-assistant.io/integrations/history_stats/&lt;/li&gt;
          &lt;li&gt;HASS Github: https://github.com/home-assistant/core/tree/dev/homeassistant/components/history_stats&lt;/li&gt;
          &lt;li&gt;Methods defined by the integration itself (no external dependencies)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;statistics-1&quot;&gt;Statistics&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Multiple, general purpose descriptive statistics&lt;/li&gt;
  &lt;li&gt;Overview of the doc and configuration&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Illustrate with an example&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Additional content
    &lt;ul&gt;
      &lt;li&gt;Codes and docs:
        &lt;ul&gt;
          &lt;li&gt;HASS doc: https://www.home-assistant.io/integrations/statistics/&lt;/li&gt;
          &lt;li&gt;HASS Github: https://github.com/home-assistant/core/blob/dev/homeassistant/components/statistics/sensor.py&lt;/li&gt;
          &lt;li&gt;Python (statistics core pkg): https://docs.python.org/3/library/statistics.html&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;trend&quot;&gt;Trend&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Of note, depends on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt; Python pkg.  More specifically, uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.polyfit(time, values, degree=1)&lt;/code&gt; method to estimate the slope of a linear function over a user-speficied time period (gradient).&lt;/li&gt;
  &lt;li&gt;Note about the comparison between the Trend utility vs. Derivative: Derivative is just for the last two values over the last two time points; trend can accomplish the same thing for n=2 and can.&lt;/li&gt;
  &lt;li&gt;Overview of the doc&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Illustrate with an example anyone can use and follow along&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Additional content
    &lt;ul&gt;
      &lt;li&gt;Codes and docs:
        &lt;ul&gt;
          &lt;li&gt;HASS doc: https://www.home-assistant.io/integrations/trend/&lt;/li&gt;
          &lt;li&gt;HASS Github: https://github.com/home-assistant/core/blob/dev/homeassistant/components/trend/binary_sensor.py&lt;/li&gt;
          &lt;li&gt;Python (NumPy): https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;integration&quot;&gt;Integration&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Area under the curve; cumulative measures, such as kWh for energy consumption&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additional content&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Codes and docs:
        &lt;ul&gt;
          &lt;li&gt;HASS doc: https://www.home-assistant.io/integrations/integration/&lt;/li&gt;
          &lt;li&gt;HASS Github: https://github.com/home-assistant/core/blob/dev/homeassistant/components/integration/sensor.py&lt;/li&gt;
          &lt;li&gt;Methods defined by the integration itself (no external dependencies)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;statistical-inference&quot;&gt;Statistical inference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Where your statistics knowledge comes in&lt;/li&gt;
  &lt;li&gt;At the very basic level:
    &lt;ul&gt;
      &lt;li&gt;Confidence intervals (CI): https://www.statology.org/test-significance-regression-slope/&lt;/li&gt;
      &lt;li&gt;Distance from the mean in SD units&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Notes on sample, power, and null hypothesis testing for robust dynamic predictions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;visualizing-inferences&quot;&gt;Visualizing inferences&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Making use of HASS built-in visualization tools
    &lt;ul&gt;
      &lt;li&gt;Historical plots&lt;/li&gt;
      &lt;li&gt;Filters (state_filter gradients) to create heatmaps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Customized plots
    &lt;ul&gt;
      &lt;li&gt;Mini-graph card (https://github.com/kalkih/mini-graph-card)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inferential-automations&quot;&gt;Inferential automations&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Automations based on future states&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;development&quot;&gt;Development&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;A lot more can be done via templating but consider developing and porting new analytic tools as utility integrations
    &lt;ul&gt;
      &lt;li&gt;Develop new integrations: https://developers.home-assistant.io/docs/development_index/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ideas
    &lt;ul&gt;
      &lt;li&gt;Generalized polynomial fits for the Trend utility, instead of the forced linear
        &lt;ul&gt;
          &lt;li&gt;default degree = 1 assures backward compatibility&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Correlations (linear, rank)&lt;/li&gt;
      &lt;li&gt;Genrealized linear models and other common statistical models&lt;/li&gt;
      &lt;li&gt;Endless possibilities for analytic tool development; most require simple porting to the HASS environment because we already have many Python pkgs for statistical analysis (e.g., SciPy)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is all served via a beautiful and configurable web interface that can be accessed both locally and remotely using either any of the popular web browsers or its official app for &lt;a href=&quot;https://play.google.com/store/apps/details?id=io.homeassistant.companion.android&quot;&gt;Android&lt;/a&gt; and &lt;a href=&quot;https://apps.apple.com/us/app/home-assistant/id1099568401&quot;&gt;iOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="hass" /><category term="iot" /><category term="automation" /><category term="math" /><category term="stats" /></entry><entry><title type="html">How to make a chimarrão Gaúcho</title><link href="/blog/chimarrao-gaucho/" rel="alternate" type="text/html" title="How to make a chimarrão Gaúcho" /><published>2021-03-09T12:30:00-03:00</published><updated>2021-03-09T12:30:00-03:00</updated><id>/blog/chimarrao-gaucho</id><content type="html" xml:base="/blog/chimarrao-gaucho/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Mar 9th, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this guide, I will provide all the essential information on how to make the same &lt;strong&gt;&lt;em&gt;chimarrão Gaúcho&lt;/em&gt;&lt;/strong&gt;–pronounced &lt;a href=&quot;https://en.wikipedia.org/wiki/Help:IPA/Portuguese&quot;&gt;ʃimɐˈʁɐ̃w̃ ɡaˈuʃu&lt;/a&gt; in Portuguese or roughly, &lt;em&gt;shemaHaoom gaOOshoo&lt;/em&gt;–that I drink almost on a daily basis.  I feel my previous posts have focused too much on tech-related content, so this should provide a nice change of pace.  If you enjoy hot tea and would like to learn and try a different one, then read on.  The required ingredients and utensils can be found worldwide (or easily imported) and the preparation takes less than 5 min.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao.jpg&quot; alt=&quot;Chimarrão&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not a historian and do not claim to have a deep understanding of the &lt;em&gt;Gaúcho&lt;/em&gt; culture and history.  To be very honest, I do not share the opinion that such knowledge is required to appreciate a &lt;em&gt;chimarrão&lt;/em&gt; at all.  In fact, some of the drinking customs/etiquette are arguably unhygienic (e.g., sharing the same drink with multiple individuals) or petty (e.g., the way one holds the container or positions the straw inside the container) and you definitely do not need to abide to any such customs if all that you want is to enjoy the drink.  Therefore, I won’t delve too much into history, culture, and etiquette but will provide external sources in the appropriate sections.&lt;/p&gt;

&lt;p&gt;However, if you want to have a taste of the culture and get in the mood for a &lt;em&gt;mate&lt;/em&gt;, here is a song by the Brazilian &lt;em&gt;payador&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Jaime_Caetano_Braun&quot;&gt;Jayme Guilherme Caetano Braun&lt;/a&gt;, called &lt;strong&gt;&lt;em&gt;Mateando&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/ewfIVyRJDFk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;(If you liked it, you might want to listen to the album &lt;a href=&quot;https://www.youtube.com/watch?v=52X4H6KZ5Qc&quot;&gt;&lt;em&gt;Payador&lt;/em&gt;&lt;/a&gt; while you read the remaining part of this guide.) As usual, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt; if you have suggestions on how to improve this guide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This guide was organized as follows.  First, I presented the definition of &lt;em&gt;chimarrão&lt;/em&gt; and more specifially, the &lt;em&gt;Gaúcho&lt;/em&gt; style of preparing a &lt;em&gt;chimarrão&lt;/em&gt;.  Next, I covered the ingredients and utensils that are necessary to prepare the traditional &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;, as well as alternatives more commonly found worldwide.  Then, at the end, there is a step-by-step procedure describing how I make my chimarrão that anyone can follow along.  If you are already familiar with &lt;em&gt;chimarrão&lt;/em&gt; and just want to check the method I use to prepare mine, then skip to the last part of this guide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;definition&quot;&gt;Definition&lt;/h1&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mate_(drink)&quot;&gt;Wikipedia entry for &lt;em&gt;Mate&lt;/em&gt;&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mate or maté, also known as chimarrão or cimarrón, is a traditional South American caffeine-rich infused drink. It is made by soaking dried leaves of the holly species &lt;a href=&quot;https://en.wikipedia.org/wiki/Yerba_mate&quot;&gt;Ilex paraguariensis&lt;/a&gt; in hot water and is served with a metal straw in a container typically made from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Calabash_gourd&quot;&gt;calabash gourd&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this guide, the Brazilian Portuguese term &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; refers to the infused drink commonly prepared in the Southern states of Brazil, typically in the state of &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rio_Grande_do_Sul&quot;&gt;Rio Grande do Sul&lt;/a&gt;&lt;/em&gt;.  Its main ingredient is the &lt;strong&gt;yerba mate&lt;/strong&gt;, which is the &lt;em&gt;dried, toasted, and shredded&lt;/em&gt; leaf of the &lt;em&gt;Ilex paraguariensis&lt;/em&gt;.  As opposed to the yerba mate often used in &lt;a href=&quot;https://en.wikipedia.org/wiki/Argentina&quot;&gt;Argentina&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Uruguay&quot;&gt;Uruguay&lt;/a&gt;, and other regions in South America, the yerba mate used to make a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is packed just a few days after processing to prevent oxidation, which gives it a characteristic &lt;strong&gt;bright green color&lt;/strong&gt; from the higher concentration of &lt;a href=&quot;https://en.wikipedia.org/wiki/Chlorophyll&quot;&gt;chlorophyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-mate-types.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-mate-types.jpg&quot; alt=&quot;Chimarrão&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flavor-wise, the yerba mate used to make the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is &lt;strong&gt;less bitter&lt;/strong&gt; and &lt;strong&gt;less toasted&lt;/strong&gt; than its aged counterparts.  This makes it well-suited for people who have never tried yerba mate before, for example, or for anyone who finds the other yerba mates too strong.  This is the main ingredient of the &lt;em&gt;chimarrão&lt;/em&gt; and as such, it cannot be replaced; otherwise, you would be making a different infused drink.&lt;/p&gt;

&lt;p&gt;The yerba mate is a well-known source of &lt;strong&gt;caffeine&lt;/strong&gt; and vitamins B and C, and has slightly higher concentration of antioxidants than &lt;a href=&quot;https://en.wikipedia.org/wiki/Green_tea&quot;&gt;green tea&lt;/a&gt;.  As far as I am aware, it is not prohibited by any food and drugs agency and therefore, it can be found and commercialized worldwide.  That said, if you drink it outdoors in a country where it is not popular, you are bound to draw a little bit of attention but in my case, it’s been more of a conversation piece than a trouble maker.  Psychologically, the effects are very much similar to drinking coffee or black tea, and as such, the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is best when consumed early in the morning and during cold days.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;This drink &lt;strong&gt;will not&lt;/strong&gt; get you high.  At most, some people report upset stomach and acid reflux.  Of course, stop consuming &lt;em&gt;chimarrão&lt;/em&gt; if you experience such symptoms and it might be a good idea to see a physician because those symptoms might be related to an undiagnosed and treatable medical condition.  The risks associated with the consumption this drink are the same as any common tea.&lt;/p&gt;

&lt;p&gt;Another noteworthy difference between the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; and other yerba mate drinks is the container used, called &lt;strong&gt;&lt;em&gt;cuia&lt;/em&gt;&lt;/strong&gt; in Portuguese.  More specifically, the &lt;em&gt;cuia&lt;/em&gt; used in a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is made of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Calabash&quot;&gt;calabash&lt;/a&gt; (&lt;em&gt;Lagenaria siceraria&lt;/em&gt;) gourd that has thicker walls than the more traditional mate gourds and a larger neck as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd.jpg&quot; alt=&quot;Calabash gourd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd-dry.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd-dry.jpg&quot; alt=&quot;Dry calabash gourd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-cuia.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-cuia.jpg&quot; alt=&quot;Cuia de chimarrão&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, there is the metal/wooden straw used to drink, called &lt;strong&gt;&lt;em&gt;bomba&lt;/em&gt;&lt;/strong&gt; in Portuguese.  The &lt;em&gt;bomba&lt;/em&gt; is not a utensil exclusively used in the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; and therefore, it is more easily found worldwide than the &lt;em&gt;cuia&lt;/em&gt; and the yerba mate for &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;, for example.  It comes in various sizes, shapes, and with none or multiple decorations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-bomba.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-bomba.jpg&quot; alt=&quot;Cuia de chimarrão&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;history-myths-and-folklore&quot;&gt;History, Myths, and Folklore&lt;/h1&gt;
&lt;p&gt;There are many stories about the &lt;strong&gt;origins of the mate&lt;/strong&gt; that predate the &lt;em&gt;Gaúcho&lt;/em&gt; culture and the Portuguese and Spanish colonization.  The &lt;a href=&quot;https://en.wikipedia.org/wiki/Tupi_people&quot;&gt;&lt;em&gt;Tupi&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Guaran%C3%AD_people&quot;&gt;&lt;em&gt;Guarani&lt;/em&gt;&lt;/a&gt; tribes (indigenous peoples of South America), for example, tell several tales about how the moon, the sun, and tribe warriors where involved in gifting the &lt;em&gt;mate&lt;/em&gt; to humanity.  If you want to learn more about the history and myths, take a look at the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Native Leaf’s article on the &lt;a href=&quot;https://www.nativeleaf.co.uk/the-history-of-yerba-mate/&quot;&gt;&lt;strong&gt;History of Yerba Mate&lt;/strong&gt;&lt;/a&gt;: A short article about the early and modern history of the yerba mate, including its use in the Middle East, which I was not aware of.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;earthstOriez’s article about &lt;a href=&quot;https://www.earthstoriez.com/legend-mate/&quot;&gt;&lt;strong&gt;the origins of mate&lt;/strong&gt;&lt;/a&gt;: Contains multiple tales from indigenous peoples about the origins of the yerba mate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ClicRBS’ article on &lt;a href=&quot;/assets/pdf/clicrbs-lenda-da-erva-mate.pdf&quot;&gt;&lt;strong&gt;the legend of the yerba mate&lt;/strong&gt;&lt;/a&gt;: This article focuses on the &lt;em&gt;Guarani&lt;/em&gt; tales about the origins of the mate and how it became part of the &lt;em&gt;Gaúcho&lt;/em&gt; culture.  Unfortunately, it is in Portuguese.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ingredients-and-utensils&quot;&gt;Ingredients and Utensils&lt;/h1&gt;

&lt;h2 id=&quot;where-to-buy&quot;&gt;Where to buy&lt;/h2&gt;
&lt;p&gt;If you happen to be in Southern Brazil, then you will likely find everything you need in any large retail grocery store chain (e.g., Zaffari, Carrefour, Walmart, Bourbon) or specialized stores in any major cities.  However, I figure that most of you are nowhere near this part of the world.  Fortunately, big online &lt;strong&gt;marketplaces&lt;/strong&gt; are available worldwide and come handy in these cases but you will need to be willing to pay a little more for the convenience of buying imported goods online.  So, let me tell you about a few alternatives I have used in the past:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/&quot;&gt;Amazon&lt;/a&gt;: The largest marketplace out there.  In the US, you can find everything you will need to make a &lt;em&gt;chimarrão&lt;/em&gt; right here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mercadolibre.com/&quot;&gt;Mercado Libre&lt;/a&gt;: One of the largest marketplace in South and Cental America.  Chances are you can find everything here as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.walmart.com&quot;&gt;Walmart&lt;/a&gt;: A possible alternative to Amazon for people in Europe.  You can find everything at Walmart as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aliexpress.com&quot;&gt;AliExpress&lt;/a&gt;: An alternative to Amazon for people in Asia and Oceania.  However, you will only find utensils at AliExpress.  Check your local marketplaces for yerba mate.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there are many other options out there.  Dig around &lt;strong&gt;the marketplaces available in your country&lt;/strong&gt; before trying the global-scale ones because the former probably has better prices than the latter.&lt;/p&gt;

&lt;p&gt;Lastly, if your city has a large public market or stores that specialized in selling organic products, teas, herbs, etc., &lt;strong&gt;do not be afraid to ask them&lt;/strong&gt; about yerba mate and related utensils.  Even if they do not have any of them, most will go above and beyond to find out where to buy in your city.&lt;/p&gt;

&lt;p&gt;In the next section, I will talk about all the traditional items and a few alternatives for those not willing to buy the real deal just yet.&lt;/p&gt;

&lt;h2 id=&quot;items&quot;&gt;Items&lt;/h2&gt;
&lt;p&gt;To make a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;, you will need the following ingredients and utensils:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Yerba mate for &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;&lt;/strong&gt;: As mentioned before, this is the &lt;strong&gt;main ingredient&lt;/strong&gt; and it is not replaceable.  The quality of your &lt;em&gt;chimarrão&lt;/em&gt; is highly dependent on the quality of the &lt;em&gt;mate&lt;/em&gt; used to prepare it.  Some people like to mix it with herbs and teas to create a more complex flavor (see below) but that is definitely optional.  (I drink mine plain but it is fairly common to add chamomile and lemon grass, for example.)&lt;/p&gt;

    &lt;p&gt;When buying online, make sure there is a photo of the product showing that the yerba mate has a &lt;strong&gt;bright green&lt;/strong&gt; color and that the yerba &lt;strong&gt;does not contain sugar&lt;/strong&gt; (&lt;em&gt;sem açúcar&lt;/em&gt; in Portuguese).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-yerba-mate.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-yerba-mate.jpg&quot; alt=&quot;Yerba Mate for Chimarrao&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Use the following keywords to help selecting the right type of yerba mate: “&lt;strong&gt;yerba mate for chimarrao&lt;/strong&gt;”, “&lt;strong&gt;brazilian yerba mate&lt;/strong&gt;”, or language-specific variations of those.&lt;/p&gt;

    &lt;p&gt;These items have a &lt;strong&gt;long shelf life&lt;/strong&gt;, so if you start enjoying the drink, buy lots of yerba mate (between 3kg and 6kg, or roughly 105-215 ounces) and store them at home.  &lt;strong&gt;Vacuum sealed&lt;/strong&gt; packages (&lt;em&gt;embalada a vácuo&lt;/em&gt; in Portuguese) are the best ones for long-term storage.&lt;/p&gt;

    &lt;p&gt;The following are three of my favorite brands that I have seen being sold abroad:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.ximango.com.br/&quot;&gt;&lt;strong&gt;Ximango&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-ximango.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-ximango.jpg&quot; alt=&quot;Yerba Ximango&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://www.madrugada.com.br/&quot;&gt;&lt;strong&gt;Madrugada&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-madrugada.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-madrugada.jpg&quot; alt=&quot;Yerba Madrugada&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.baraoervamate.com.br/en/&quot;&gt;&lt;strong&gt;Barão de Cotegipe&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-barao.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-barao.jpg&quot; alt=&quot;Yerba Barao&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;I suggest you to buy a brand name because in Brazil, those companies must comply with health regulations in order to distribute their product.  There are other details about the selection of yerba mates for &lt;em&gt;chimarrão&lt;/em&gt; but they are non-essential for most people.  They include leaf-to-stem ratios, maturation, and various processing techniques, for example.  (If planning on consuming for long periods, it might be worth looking into the processing methods and making sure it &lt;strong&gt;does not&lt;/strong&gt; involve smoke from burning wood, as the latter can produce carcinogenic compounds.)&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;It goes without saying that yerba mate sold in &lt;em&gt;tea bags&lt;/em&gt; are &lt;strong&gt;no good&lt;/strong&gt; here.  The taste of &lt;em&gt;chimarrão&lt;/em&gt; is actually &lt;strong&gt;very&lt;/strong&gt; different from the tea.  In fact, I drink &lt;em&gt;chimarrão&lt;/em&gt; every day but I do not like the yerba mate tea at all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;strong&gt;&lt;em&gt;Cuia&lt;/em&gt;&lt;/strong&gt;: The traditional &lt;em&gt;cuia&lt;/em&gt; made of a galash gourd (&lt;em&gt;porongo&lt;/em&gt; in Portuguese) can be bought online or via specialized stores.  A single one can be used and re-used multiple times, even for years if well maintained.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-traditional.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-traditional.jpg&quot; alt=&quot;Traditional Cuia&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;After acquiring a &lt;strong&gt;brand-new&lt;/strong&gt; &lt;em&gt;cuia&lt;/em&gt;, it is &lt;strong&gt;required to curate&lt;/strong&gt; it before use. The &lt;a href=&quot;https://yerbamatero.com/&quot;&gt;Yerb Matero&lt;/a&gt; has a fairly good guide on &lt;a href=&quot;https://yerbamatero.com/blogs/guides/taking-care-of-your-yerba-mate-kit&quot;&gt;curating, cleaning, and mainting the &lt;em&gt;cuia&lt;/em&gt;&lt;/a&gt;; or check this &lt;a href=&quot;https://www.youtube.com/watch?v=8l7li3PVYL4&quot;&gt;Youtube video that illustrates the entire process&lt;/a&gt;.  In brief, go over the following steps to curate a brand-new &lt;em&gt;cuia&lt;/em&gt; made of a galash gourd:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Wash the inside of the &lt;em&gt;cuia&lt;/em&gt; with &lt;strong&gt;boiling&lt;/strong&gt; water (be careful!). Remove all the water before moving on;&lt;/li&gt;
      &lt;li&gt;Fill 1/3 of the &lt;em&gt;cuia&lt;/em&gt; with yerba mate, fill the remaining with &lt;strong&gt;warm&lt;/strong&gt; water, and using a spoon, gently mix it. Then, &lt;strong&gt;let it sit for 24h&lt;/strong&gt; with the mate inside.  If you notice that the water level has dropped (the galash gourd should absorb a little bit), add more warm water to try to keep the &lt;em&gt;cuia&lt;/em&gt; always full;&lt;/li&gt;
      &lt;li&gt;After 24h, remove the contents of the &lt;em&gt;cuia&lt;/em&gt; with the help of a spoon and &lt;strong&gt;repeat steps #1 and #2&lt;/strong&gt; at least once;&lt;/li&gt;
      &lt;li&gt;Rinse it well (&lt;strong&gt;only use running water&lt;/strong&gt;; &lt;strong&gt;never&lt;/strong&gt; use cleaning products) and &lt;strong&gt;let it dry&lt;/strong&gt;.  If your &lt;em&gt;cuia&lt;/em&gt; does not have leather, let it dry in the sun;&lt;/li&gt;
      &lt;li&gt;(Optional.) For better results, repeat steps #1 and #2 and after rinsing, add a little bit of yerba mate to &lt;strong&gt;coat the internal surface of the &lt;em&gt;cuia&lt;/em&gt;&lt;/strong&gt; and let it dry this way for 12h.&lt;/li&gt;
      &lt;li&gt;When you are done, you should notice that inside the &lt;em&gt;cuia&lt;/em&gt;, there is now a slightly green color from the yerba mate and a few greener spots.  If you find &lt;strong&gt;any mold&lt;/strong&gt;, don’t worry.  Just curate it again and you are ready to go.  The more you use the &lt;em&gt;cuia&lt;/em&gt;, the more evenly curated it becomes.  After a few weeks of use, it should be much darker in the inside.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Contrary to the yerba mate for &lt;em&gt;chimarrão&lt;/em&gt;, the traditional &lt;em&gt;cuia&lt;/em&gt; is actually replaceable.  In fact, you can use pretty much any container that you would normally use with hot beverages.  The preparation method described in this guide should work even with flat, non-porous surfaces, like a standard coffee mug.  A coffee mug won’t look as good as the &lt;em&gt;cuia&lt;/em&gt; but it should work.  I have even managed to make a &lt;em&gt;chimarrão&lt;/em&gt; using a 5cm-long coffee mug:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-experimental.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-experimental.jpg&quot; alt=&quot;Experimental Cuia&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;More common variations include &lt;em&gt;cuias&lt;/em&gt; made of wood (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/Ocotea_porosa&quot;&gt;&lt;em&gt;Imbuia&lt;/em&gt;&lt;/a&gt;), ceramic, or glass.  Of course, you don’t need to curate any such types of &lt;em&gt;cuia&lt;/em&gt; (but make sure to rinse very well before using it for the first time).  They are more expensive, though.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-imbuia.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-imbuia.jpg&quot; alt=&quot;Cuia made of Wood&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;strong&gt;&lt;em&gt;Bomba&lt;/em&gt;&lt;/strong&gt;: The traditional &lt;em&gt;bomba&lt;/em&gt; is a metal (stainless steel) straw that has a filter at its bottom.  It is re-usable and if well-maintained, can last several years.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-tradicional.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-tradicional.jpg&quot; alt=&quot;Bomba Tradicional&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;As mentioned before, a traditional &lt;em&gt;bomba&lt;/em&gt; comes in many shapes and sizes.  The size of it depends on the size of the &lt;em&gt;cuia&lt;/em&gt;.  More specifically, the &lt;em&gt;bomba&lt;/em&gt; should be roughly &lt;strong&gt;twice the size&lt;/strong&gt; of the &lt;em&gt;cuia&lt;/em&gt;–or at the very least, taller than the &lt;em&gt;cuia&lt;/em&gt;.  The decorations are a personal choice.  You &lt;strong&gt;do not&lt;/strong&gt; need a &lt;em&gt;bomba&lt;/em&gt; with a spoon-like filter head to drink a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;.  Any &lt;em&gt;bomba&lt;/em&gt; that fits your &lt;em&gt;cuia&lt;/em&gt; will do just fine.  Personally, I am a fan of the ones that have a &lt;strong&gt;removable filter head&lt;/strong&gt; because they are easier to maintain than the non-removable ones.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-removable-filter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-removable-filter.jpg&quot; alt=&quot;Bomba Removable Filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The traditional &lt;em&gt;bomba&lt;/em&gt; is replaceable though. If you cannot find one in your country, you might want to try looking for &lt;strong&gt;wooden straws&lt;/strong&gt;, usually made of bamboo.  I have never used them before but if they do not have a filter, you &lt;strong&gt;have to add an external filter&lt;/strong&gt; to it (see below).  The latter type of straw is not always reusable though (depends on the type of wood), so I strongly recommend to stick to metal straws for long-term use.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-wooden.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-wooden.jpg&quot; alt=&quot;Wooden Bomba&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=portable+insulated+beverage+dispenser&quot;&gt;&lt;strong&gt;Portable and insulated beverage dispenser&lt;/strong&gt;&lt;/a&gt;: Anything that can hold at least 1l (52oz) of hot water will do.  Make sure there is enough space to serve your &lt;em&gt;cuia&lt;/em&gt;–prefer the ones with a dispenser at the top, instead of bottom, for example.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/hot-water-dispenser.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/hot-water-dispenser.jpg&quot; alt=&quot;Insulated Beverage Dispenser&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1l-3l of &lt;strong&gt;hot water&lt;/strong&gt;: As in most traditional infused drinks, we will need hot water.  &lt;strong&gt;Do not&lt;/strong&gt; use boiling water–it will ruin the yerba mate and it is unhealthy for you.  The water needs to be hot, as in a black tea or hot coffee.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;strong&gt;Dinner spoon&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/spoon.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/spoon.jpg&quot; alt=&quot;Spoon&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional.) External filters for the &lt;em&gt;bomba&lt;/em&gt;: If you dislike when an ocasional mate leaf passes the &lt;em&gt;bomba&lt;/em&gt; filter, or your &lt;em&gt;chimarrão&lt;/em&gt; clogs too often, you might want to try an external filter for your &lt;em&gt;bomba&lt;/em&gt;.  These filters are reusable (usually between 2-3 weeks) and are tied around the filter head of your &lt;em&gt;bomba&lt;/em&gt;.  This is &lt;strong&gt;required if using straws without a built-in filter&lt;/strong&gt;, such as common wooden straws.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-filter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-filter.jpg&quot; alt=&quot;External Filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional.) Herbs/teas: If you ever get bored with the taste of plain &lt;em&gt;chimarrão&lt;/em&gt;, you might want to make its flavor a little bit more complex by adding tea to the water or mixing herbs with your yerba mate.  Here are a few herbs/teas that are often mixed with &lt;em&gt;chimarrão&lt;/em&gt;:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Organge (or any other citrus) peel&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/orange-peel.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/orange-peel.jpg&quot; alt=&quot;Orange peel&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chamomile&quot;&gt;Chamomile (&lt;em&gt;Matriacaria chamomilia&lt;/em&gt;, &lt;em&gt;Chamaemelum nobile&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chamomile.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chamomile.jpg&quot; alt=&quot;Chamomile&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cymbopogon_citratus&quot;&gt;Lemon grass (&lt;em&gt;Cymbopogon citratus&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/lemon-grass.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/lemon-grass.jpg&quot; alt=&quot;Lemon grass&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Anise&quot;&gt;Anise (&lt;em&gt;Pimpinella anisum&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/anise.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/anise.jpg&quot; alt=&quot;Anise bush&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Illicium_verum&quot;&gt;Star anise (&lt;em&gt;Illicium verum&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/star-anise.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/star-anise.jpg&quot; alt=&quot;Dried star anise&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p class=&quot;notice notice--danger&quot;&gt;Many herbs can cause &lt;strong&gt;allergic reactions&lt;/strong&gt; or have &lt;strong&gt;adverse interactions&lt;/strong&gt; with other herbal products and prescription drugs.  Before trying anything unusual, make sure to check it is safe for you to use.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;making-the-chimarrão-gaúcho&quot;&gt;Making the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Once you have acquired all the ingredients and utensils, it is time to make your first &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;.  There are many different ways of making a &lt;em&gt;chimarrão&lt;/em&gt;.  The following is the fastest, the most fool-proof and efficient way of making a &lt;em&gt;chimarrão&lt;/em&gt; that I am aware of and the technique that I have been using over the last ten years.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-000.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-000.jpg&quot; alt=&quot;How-to 000&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This is a hot beverage, so start by &lt;strong&gt;warming up between 1l (35oz) and 3l (105z) of water&lt;/strong&gt;, depending on how much liquid you can store on your insulated beverage dispenser.  If you want to boil the water first, then let it cool down until it is hot but not burning hot when it finally reaches your body.  &lt;strong&gt;Store at a temperature between 55°C (131°F) and 70°C (158°F)&lt;/strong&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;You might want to compensate for room temperature as well.  If it is a really cold day, you might want to store the water at a higher temperature than you would in a hot, sunny day, because your &lt;em&gt;chimarrão&lt;/em&gt; will lose heat much faster when exposed to low temperatures.  Similarly, different types of &lt;em&gt;cuia&lt;/em&gt; will be more or less prone to lose heat over time, and wind also plays a role in decreasing the temperature when consuming &lt;em&gt;chimarrão&lt;/em&gt; outdoors.  As you can see, there are multiple factors to take into account if you want to keep your &lt;em&gt;chimarrão&lt;/em&gt; warm. However, &lt;strong&gt;never&lt;/strong&gt; drink or pour boiling water in your &lt;em&gt;chimarrão&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill your insulated beverage dispenser with the hot water.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab your &lt;strong&gt;curated&lt;/strong&gt; &lt;em&gt;cuia&lt;/em&gt;, yerba mate for &lt;em&gt;chimarrão&lt;/em&gt;, and a kitchen spoon.  If you have not cureated your &lt;em&gt;cuia&lt;/em&gt; yet, review the procedure described in the &lt;a href=&quot;#items&quot;&gt;items&lt;/a&gt; section; Otherwise, go the next step.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-001.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-001.jpg&quot; alt=&quot;How-to 001&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using a spoon, fill 1/10 of the &lt;em&gt;cuia&lt;/em&gt; with yerba mate.  This will create a thin layer of yerba mate at the bottom of your &lt;em&gt;chimarrão&lt;/em&gt; that will help giving it its characteristic taste.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-002.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-002.jpg&quot; alt=&quot;How-to 002&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill between 5/10 and 6/10 of the cuia with warm water.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-003.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-003.jpg&quot; alt=&quot;How-to 003&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-004.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-004.jpg&quot; alt=&quot;How-to 004&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab your &lt;em&gt;bomba&lt;/em&gt;.  (If you want to add an external filter to it, this is the time.) Then, using your &lt;strong&gt;thumb&lt;/strong&gt;, cover its mouthpiece &lt;strong&gt;to prevent the air from escaping the bomba&lt;/strong&gt; and thus, prevent the water from getting inside the bomba while you insert and position it into the &lt;em&gt;cuia&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-01.jpg&quot; alt=&quot;How to hold the bomba 001&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-02.jpg&quot; alt=&quot;How to hold the bomba 002&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-03.jpg&quot; alt=&quot;How to hold the bomba 003&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, &lt;strong&gt;while still holding the mouthpiece with your thumb&lt;/strong&gt;, insert the &lt;em&gt;bomba&lt;/em&gt; into the &lt;em&gt;cuia&lt;/em&gt; until its filter head reaches the opposite side of the bottom of the &lt;em&gt;cuia&lt;/em&gt;.  Then, lay the &lt;em&gt;bomba&lt;/em&gt; diagonally on the inner wall of the &lt;em&gt;cuia&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-005.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-005.jpg&quot; alt=&quot;How-to 005&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using a spoon, start adding yerba mate on top of the water until the inside of the &lt;em&gt;cuia&lt;/em&gt; is completely covered with yerba mate.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-006.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-006.jpg&quot; alt=&quot;How-to 006&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the bottom side of the spoon, gently distribute the yerba mate over the entire top of the &lt;em&gt;cuia&lt;/em&gt;.  Do so until there is a flat surface of yerba mate.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-007.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-007.jpg&quot; alt=&quot;How-to 007&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point, you can do all sorts of things to create an entrance to refill your &lt;em&gt;chimarrão&lt;/em&gt; with water.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-decorated.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-decorated.jpg&quot; alt=&quot;Decorated Chimarrao&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;If you are not feeling adventurous, then do the following:  In the side opposite to where your &lt;em&gt;bomba&lt;/em&gt; is, use the spoon to push the yerba mate &lt;em&gt;towards&lt;/em&gt; the side where the &lt;em&gt;bomba&lt;/em&gt; is.  The goal is to dig the surface until you find the water laying underneath.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-008.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-008.jpg&quot; alt=&quot;How-to 008&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-009.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-009.jpg&quot; alt=&quot;How-to 009&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you have found the water, fill the entrance with more warm water.  The yerba mate directly in contact with the water will start absorbing it.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-010.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-010.jpg&quot; alt=&quot;How-to 006&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the spoon, mold the entrance and gently increase the bottom part of the layer by pushing it a little further towards the direction where your &lt;em&gt;bomba&lt;/em&gt; is.  This will create a cleaner entrance to refill your &lt;em&gt;chimarrão&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-011.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-011.jpg&quot; alt=&quot;How-to 011&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-012.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-012.jpg&quot; alt=&quot;How-to 012&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That is it!  Now, enjoy your drink.  The first batch is much stronger than the next ones.  Some people find it too strong and discard the first one (suck and spit until it is empty; then, refill and drink the next one).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-013.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-013.jpg&quot; alt=&quot;How-to 013&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the &lt;em&gt;chimarrão&lt;/em&gt; is empty, you will start sucking air from the &lt;em&gt;bomba&lt;/em&gt;, which should make a sound because the filter head is not completely submerged into water anymore.  Whenever you hear it, you should refill the &lt;em&gt;chimarrão&lt;/em&gt; to prevent it from getting cold–this is particularly important during the winter or when drinking outdoors–and help preserving its taste a little longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not&lt;/strong&gt; move your &lt;em&gt;bomba&lt;/em&gt; around. In fact, never hold/touch the &lt;em&gt;bomba&lt;/em&gt; once you are done making the &lt;em&gt;chimarrão&lt;/em&gt;.  This will very likely clog your &lt;em&gt;chimarrão&lt;/em&gt; even further and completely ruin it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not&lt;/strong&gt; blow air through your &lt;em&gt;bomba&lt;/em&gt;.  If it gets clogged, try using an &lt;strong&gt;external filter&lt;/strong&gt;, or a different type of yerba mate, or a &lt;em&gt;bomba&lt;/em&gt; with a different filter head, or any combination of those.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes my guide on how to make a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;.  If you find it interesting, give it a try yourself!  The ingredients and utensils are fairly easy to find nowadays and the &lt;em&gt;chimarrão&lt;/em&gt; is a fantastic way of keeping yourself hydrated, especially for those of us who spend a lot of time in front of a computer screen.  It is also a conversation piece for socializing and in my opinion, one of the best drinks for cold days.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="culture" /><category term="food" /><category term="beverage" /><category term="brazil" /></entry><entry><title type="html">Flashing Tasmota firmware onto Sonoff devices over-the-air: “How-to” using just a terminal and web-browser</title><link href="/blog/ota-tasmota-sonoff/" rel="alternate" type="text/html" title="Flashing Tasmota firmware onto Sonoff devices over-the-air: “How-to” using just a terminal and web-browser" /><published>2021-02-01T10:20:00-03:00</published><updated>2021-02-01T10:20:00-03:00</updated><id>/blog/ota-tasmota-sonoff</id><content type="html" xml:base="/blog/ota-tasmota-sonoff/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Feb 1st, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://sonoff.tech/&quot;&gt;Sonoff&lt;/a&gt;&lt;/strong&gt; devices are very popular home-automation devices developed by a Chinese company called &lt;a href=&quot;https://www.itead.cc&quot;&gt;ITEAD&lt;/a&gt;. By default, they are controlled by a closed-source application developed by ITEAD–called &lt;a href=&quot;https://www.itead.cc/wiki/EWeLink_Introduction&quot;&gt;EWeLink&lt;/a&gt;–that can be installed onto iOS and Android cellphones, for example, making use of cloud services.  However, this makes it hard to integrate with existing home-automation servers, such as &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt; and &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;, or to simply control the devices locally–that is, without access to the Internet.&lt;/p&gt;

&lt;p&gt;Fortunately, there are alternatives that require flashing a different firmware onto Sonoff devices. The &lt;strong&gt;&lt;a href=&quot;https://github.com/arendst/tasmota/&quot;&gt;Tasmota&lt;/a&gt; firmware&lt;/strong&gt;, for example, is a well-known alternative that provides easy integration with existing home-automation servers and let users control devices via multiple methods, such as webUI, HTTP requests, and MQTT, all of which can be accessed either locally or remotely or both.  On top of that, it is &lt;strong&gt;free and open-source&lt;/strong&gt;.  Traditionally, flashing a Tasmota firmware onto a Sonoff device involves finding a &lt;strong&gt;serial connection&lt;/strong&gt;, soldering a few cables/pins, and connecting the device to a &lt;strong&gt;serial-to-USB&lt;/strong&gt; adapter.  However, more often than not, this takes time, knowledge about electronics, and soldering very small components.&lt;/p&gt;

&lt;p&gt;ITEAD is aware that many users do not user their app or even their firmware for Sonoff devices.  Instead of forcing the use of their own software, recently, they have taken the much smarter path of &lt;em&gt;making it easier&lt;/em&gt; for users to control Sonoff devices independently of their software via the release of a &lt;strong&gt;&lt;a href=&quot;https://github.com/itead/Sonoff_Devices_DIY_Tools&quot;&gt;DIY mode&lt;/a&gt;&lt;/strong&gt; in the latest firmware versions.  In DIY mode, it is possible to use the device’s &lt;strong&gt;RESTful API&lt;/strong&gt; to monitor and control a variety of attributes, such as toggle a relay ON/OFF, checking the wireless signal quality, and more importantly for any Tasmota enthusiast, &lt;strong&gt;flashing custom firmware over-the-air (OTA)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will describe how to flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; binary onto &lt;strong&gt;Sonoff Mini&lt;/strong&gt; relays and any other &lt;strong&gt;Sonoff device that can operate in DIY mode&lt;/strong&gt;.  This will be done OTA (wirelessly) using only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; to send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests and then either the BusyBox HTTP Daemon (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busybox httpd&lt;/code&gt;) or a common webserver application (e.g., Apache, Nginx) to create a simple webserver to serve the Tasmota binary to the local network. There is no need to install and run any other application, executable, or whatever.  Software-wise, we just need a terminal and web-browser.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;.The procedure described in this tutorial is &lt;strong&gt;one-way&lt;/strong&gt;.  That is, once flashed the Tasmota firmware, it is &lt;strong&gt;not possible to go back&lt;/strong&gt; to the original ITEAD firmware.&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;. From this part and on, the tutorial describes procedures that involve working with &lt;strong&gt;mains power&lt;/strong&gt;.  If you have not taken the necessary time to learn how to work with it safely, &lt;strong&gt;stop right now&lt;/strong&gt; and ask for someone knowledgeable to assist and teach you.  &lt;strong&gt;Do not take this warning lightly&lt;/strong&gt;.  Mains power can kill you or set your house on fire or both (or worse).  &lt;strong&gt;Be safe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;
&lt;p&gt;Only follow this tutorial if your Sonoff device satisfies all of the following criteria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-basicr3-wifi-diy-smart-switch.html&quot;&gt;Sonoff Basic R3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-rfr3.html&quot;&gt;Sonoff RF R3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-mini.html&quot;&gt;Sonoff Mini&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ITEAD firmware&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.5&lt;/code&gt; or higher&lt;/p&gt;

        &lt;p class=&quot;notice notice--info&quot;&gt;If running version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.3&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.4&lt;/code&gt;, you can try the &lt;a href=&quot;https://github.com/itead/Sonoff_Devices_DIY_Tools/blob/master/SONOFF%20DIY%20MODE%20Protocol%20Doc%20v1.4.md#diy-mode-description&quot;&gt;protocol v&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.4&lt;/code&gt; documentation&lt;/a&gt; instead. The procedure does not require soldering but you need to open the device to connect the OTA jumper manually.  The interaction with the RESTful API is the same as described here, so come back to follow the procedure for flashing Tasmota OTA with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;.&lt;/p&gt;

        &lt;p class=&quot;notice notice--info&quot;&gt;Alternatively, if running an outdated version, install the EWeLink app, create a bogus acount, update the firmware to latest, uninstall the app, come back and follow this guide.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, it’s possible that this tutorial is partially or completely applicable to other Sonoff devices that can operate in &lt;strong&gt;DIY mode&lt;/strong&gt;.  The ones listed here are the ones that &lt;a href=&quot;https://github.com/itead/Sonoff_Devices_DIY_Tools&quot;&gt;ITEAD listed as supported&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;additional-hardware-requirements&quot;&gt;Additional hardware requirements&lt;/h2&gt;
&lt;p&gt;You &lt;strong&gt;won’t need&lt;/strong&gt; to do any soldering and won’t even need to open the device.  However, we will need to &lt;strong&gt;power the device using mains (110-220v AC) power&lt;/strong&gt;.  For the &lt;strong&gt;Sonoff Mini&lt;/strong&gt;, for example, you need to wire it as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-mini-wiring.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-mini-wiring.jpg&quot; alt=&quot;Sonoff Mini Wiring&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that color conventions, outlet format, etc., are not always the same accross countries.  Check (and double check) the ones in your country and property &lt;strong&gt;before wiring the Sonoff device to mains&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For other Sonoff devices, check their manual.  At this point, you just need to provide power to the device itself–there is no need to connect it to whatever the relay is going to control, for example, or any switches.&lt;/p&gt;

&lt;p&gt;Therefore, the only additional hardware requirements are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stripped mains power cable&lt;/strong&gt; with live (&lt;strong&gt;L&lt;/strong&gt;) and neutral (&lt;strong&gt;N&lt;/strong&gt;) wires;&lt;/li&gt;
  &lt;li&gt;A wifi capable &lt;strong&gt;laptop or PC&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-software-requirements&quot;&gt;Additional software requirements&lt;/h2&gt;
&lt;p&gt;I wrote this tutorial for &lt;strong&gt;GNU/Linux&lt;/strong&gt; users.  That is, unless otherwise specified, the instructions assume that you are running a Linux distribution on your PC/laptop that will be used to interact with (and serve files to) the Sonoff device.  If running iOS, you might be able to adapt the procedure more easily than if you were running Windows or other OS.&lt;/p&gt;

&lt;p&gt;Therefore, the only additional software requirement is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GNU/Linux distro&lt;/strong&gt; installed on the host machine, preferrably &lt;strong&gt;apt&lt;/strong&gt;-based distros, such as Debian or Ubuntu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;
&lt;p&gt;This section describes how to flash the Tasmota firmware onto a Sonoff device OTA.  In brief, the procedure consists of (a) putting the Sonoff device in DIY mode, (b) configuring it to access your existing wireless network, (c) using a set of GNU/Linux utilities to interact with the device’s RESTful API, (d) creating a simple webserver to serve the Tasmota firmware locally, and finally, (e) flashing the Tasmota firmware OTA.  Each of those steps is explained in more detail next.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-sonoff-device&quot;&gt;Preparing the Sonoff device&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Turn ON&lt;/strong&gt; your Sonoff device by connecting it to the mains power;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enable the &lt;strong&gt;DIY mode&lt;/strong&gt; by pressing its button for at &lt;strong&gt;least 5 seconds&lt;/strong&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Once the DIY mode is enabled, the device will create a wireless access point (WAP) with the following credentials:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSID: ITEAD-X
Password: 12345678
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Using your laptop/PC, find the SSID and enter the credentials to &lt;strong&gt;join the ITEAD WAP&lt;/strong&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The Sonoff device will assign an IP to your laptop/PC in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.7.0/24&lt;/code&gt; network, which you can check with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;.  If it does, then &lt;strong&gt;open a web-browser and type the following IP&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.10.7.1:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If your laptop/PC was assigned to a different IP pool than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.7.0/24&lt;/code&gt;, then simply try the first address of whichever pool it was assigned to (e.g., if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.1.0/24&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.1.1&lt;/code&gt;);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the inscructions on the screen to &lt;strong&gt;let the Sonoff device join your local network&lt;/strong&gt; via an existing WAP. &lt;strong&gt;Save and let it reboot&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;In the meantime, tell your laptop/PC to &lt;strong&gt;join the same local network&lt;/strong&gt; you configured in the Sonoff device webUI;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Go to your DHCP server&lt;/strong&gt; and find out which IP address it assigned to the Sonoff device on the local network.  From now on, I will refer to its local IP address as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt;.  Change it too its actual IP addr before running any command.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interacting-with-the-restful-api&quot;&gt;Interacting with the RESTful API&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Now, we will start using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; to send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests and pipe the output to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; output.  Later on, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; to download the Tasmota binary from its latest release.  To make sure all utlities are installed on your distro and you are running their latest version, &lt;strong&gt;open a terminal&lt;/strong&gt; and run the following command:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install curl jq wget -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;If not using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distro, simply adapt the code to use your package manager instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s check that the Sonoff device’s API is working and &lt;strong&gt;get information&lt;/strong&gt; about it, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{&quot;data&quot;: {}}&quot; IP_SONOFF:8081/zeroconf/info | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should output something like this:&lt;/p&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;seq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;switch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulseWidth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;otaUnlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fwVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;deviceid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ID_DEVICE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BSSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signalStrength&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Of note, check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otaUnlock&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, which means that currently, it is not possible to flash a custom firmware OTA.  To enable it, we need to &lt;strong&gt;set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otaUnlock&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{&quot;data&quot;: {}}&quot; IP_SONOFF:8081/zeroconf/ota_unlock | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and we can now verify that OTA is unlocked by getting the device’s info once again, as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{&quot;data&quot;: {}}&quot; IP_SONOFF:8081/zeroconf/info | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should indicate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otaUnlock&lt;/code&gt; is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;seq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;switch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulseWidth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;otaUnlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fwVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;deviceid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ID_DEVICE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BSSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signalStrength&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If you are not seeing this, review your steps until now.  You can still reset the device powering it OFF and back ON, and the device should come back in DIY mode once again (test with the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; command, for example).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Download the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; binary&lt;/strong&gt; from the Tasmota Github repository to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota&lt;/code&gt; directory, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /home/${USER}/Downloads/tasmota
wget -P /home/${USER}/Downloads/tasmota $(curl -s https://api.github.com/repos/arendst/Tasmota/releases/latest | grep '\&quot;browser_download_url.*tasmota-lite.bin\&quot;' | cut -d '&quot;' -f 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This should write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; file onto your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota/&lt;/code&gt; directory. If it does not, please &lt;a href=&quot;/contact&quot;&gt;let me know about it&lt;/a&gt; and in the meantime, try downloading the file manually from the &lt;a href=&quot;https://github.com/arendst/Tasmota/releases&quot;&gt;Tasmota Github repo&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; SHA256 signature and save it to file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite-sha256.txt&lt;/code&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sha256sum &quot;/home/${USER}/Downloads/tasmota/tasmota-lite.bin&quot; &amp;gt; &quot;/home/${USER}/Downloads/tasmota/tasmota-lite-sha256.txt&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;Take note of the signature&lt;/strong&gt; and paste it whenever I refer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BIN_SHA256&lt;/code&gt;.  You can find the signature with the following command (or just open the text file and copy the first string):&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cat &quot;/home/${USER}/Downloads/tasmota/tasmota-lite-sha256sum.txt&quot; | cut -d ' ' -f 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This signature is used to check the firmware integrity after the Sonoff device is done downloading it from a webserver. This is done to prevent the device from flashing a corrupted firmware, for example, because a corrupted file will likely yield a different SHA256 signature.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;webserver-configuration&quot;&gt;Webserver configuration&lt;/h2&gt;
&lt;p&gt;The webserver has a few peculiar requirements (e.g., needs to accept the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ranges&lt;/code&gt; header, run in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;) that does not allow us to point to Tasmota’s OTA website, Github releases, or any other official source of the Tasmota firmware binary. Fortunately, we can run a webserver on the local network that satisfies all requirements by the ITEAD firmware and in my experience, the easiest way to do that is to either use the &lt;strong&gt;BusyBox HTTP Daemon&lt;/strong&gt; or run an &lt;strong&gt;Apache&lt;/strong&gt; webserver–or lighttp or Nginx, for instance, but &lt;strong&gt;do not&lt;/strong&gt; try Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.server&lt;/code&gt; or PHP because they do not accept partial content.&lt;/p&gt;

&lt;p&gt;BusyBox and Apache are the easiest applications to get up and running because they often come pre-installed in several Linux distros, such as Debian, which means that all you need to do is run a simple command or enable a systemd service that controls the webserver application.  Here, I will focus on the former (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busybox&lt;/code&gt;) rather than the latter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache2&lt;/code&gt;) because in my opinion, BusyBox makes this step rather trivial.&lt;/p&gt;

&lt;p&gt;If you have never heard of &lt;a href=&quot;https://www.busybox.net/&quot;&gt;BusyBox&lt;/a&gt; before, it is a sort of Swiss Army knife for Linux, Android, and many other POSIX environments.  It encapsulates multiple Unix utilities into a single and small executable, and for this reason, it is often used in resource limited applications (e.g., routers/modems, other embedded systems, cellphones).  Here, we will take advantage of one of its utilities, namely the &lt;strong&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/services/webserver/http.httpd&quot;&gt;HTTP Daemon&lt;/a&gt;&lt;/strong&gt;, to create a minimal webserver to serve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; firmware to the Sonoff device.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, make sure you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busybox&lt;/code&gt; &lt;strong&gt;installed&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt update &amp;amp;&amp;amp; sudo apt install busybox -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;If not using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distro, simply adapt the code to use your package manager instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Then, &lt;strong&gt;create a webserver&lt;/strong&gt; with your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota&lt;/code&gt; directory as root and using port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;busybox httpd -p 2020 -h &quot;/home/${USER}/Downloads/tasmota/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;If you are running a &lt;strong&gt;firewall&lt;/strong&gt; on your laptop/PC, make sure to allow incoming TCP/UDP to port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020&lt;/code&gt; as well.  Otherwise, other devices on your local network won’t be able to access the webserver you just created.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the local &lt;strong&gt;IP address of your laptop/PC&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.100&lt;/code&gt;).  The address should be reachable by the Sonoff device (e.g., it is on the same subnet).  From this point forward, I will refer to the host IP address by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_HOST&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Optional.&lt;/em&gt; Using another wifi capable device, test that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite-bin&lt;/code&gt; file is &lt;strong&gt;available to the local network&lt;/strong&gt; by typing the following on a web-browser:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://IP_HOST:2020/tasmota-lite.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If correctly configured, the device should be able to download the binary.  Otherwise, review your steps.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;If you would like to use one of the most common webservers, such as Apache, Lighttpd, and Nginx, install any one of them using your system’s package manager and then &lt;em&gt;copy the files in your user’s&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota&lt;/code&gt; &lt;em&gt;dir to the webserver’s root&lt;/em&gt;, which by default is usually on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;flashing-the-tasmota-firmware&quot;&gt;Flashing the Tasmota firmware&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; binary onto the Sonoff device via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;: (Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_HOST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BIN_SHA256&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt; &lt;strong&gt;before running the command&lt;/strong&gt;.  Double check everything to make sure it is correct as well.)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d '{&quot;data&quot;: {&quot;downloadUrl&quot;: &quot;http://IP_HOST:2020/tasmota-lite.bin&quot;, &quot;sha256sum&quot;: &quot;BIN_SHA256&quot;}}' IP_SONOFF:8081/zeroconf/ota_flash | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You should get an HTTP response fairly quickly.  The following codes indicate that there was an &lt;strong&gt;error&lt;/strong&gt; and you should review your steps until now:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;403&lt;/strong&gt;: The operation failed and the OTA function was not unlocked.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;408&lt;/strong&gt;: The operation failed and the pre-download firmware timed out.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;413&lt;/strong&gt;: The operation failed and the request body size is too large.  Make sure the tasmota firmware is the right size for your device.  You should try the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; before anything else.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;424&lt;/strong&gt;: The operation failed and the firmware could not be downloaded. Check that your webserver and firmware file are both reachable by other devices on the same local network; check for typos in the URL.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;471&lt;/strong&gt;: The operation failed and the firmware integrity check failed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wait 2 minutes&lt;/strong&gt; or so.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Once the device is done flashing the new firmware, &lt;strong&gt;open a web-browser&lt;/strong&gt; and try reaching the Tasmota webUI at the following URL:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IP_SONOFF:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If corretcly installed, you will be greeted by the following Tasmota webUI:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-webui.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-webui.jpg&quot; alt=&quot;Sonoff webUI&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;and then, see the next section for the basic settings; Otherwise, review your steps and try reflashing the firmware.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;basic-tasmota-configuration&quot;&gt;Basic Tasmota configuration&lt;/h1&gt;
&lt;p&gt;Before wiring your device to anything else, you should first &lt;strong&gt;configure&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; it.  Configuration-wise, there is a lot of possibilities with a Tasmota firmware.  If you’ve never used Tasmota before, check Robbert’s (&lt;a href=&quot;https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ&quot;&gt;The Hook Up&lt;/a&gt;) introduction video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/08_GBROKQH0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;At the very least, you should &lt;strong&gt;update the firmware Template&lt;/strong&gt; to use the one appropriate for your device.  Templates are device-specific definitions of how their GPIO pins are assigned.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Copy the template&lt;/strong&gt; for your Sonoff device:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-basicr3-wifi-diy-smart-switch.html&quot;&gt;Sonoff Basic R3&lt;/a&gt;:
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sonoff Basic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-rfr3.html&quot;&gt;Sonoff RF R3&lt;/a&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sonoff RF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-mini.html&quot;&gt;Sonoff Mini&lt;/a&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sonoff Mini&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open a web-browser&lt;/strong&gt; and navigate to the Tasmota webUI.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the webUI, go to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure other&lt;/strong&gt; and then &lt;strong&gt;paste the tempalte&lt;/strong&gt; into the &lt;em&gt;Template field&lt;/em&gt;, check the &lt;em&gt;Activate&lt;/em&gt; box and hit &lt;strong&gt;Save&lt;/strong&gt;.  The device will then reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the device is back up, check that its name is now the same as in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAME&lt;/code&gt; property value.  For the Sonoff mini template, for example, it should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sonoff Mini&lt;/code&gt;.  You can further configure your template at &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Template&lt;/strong&gt; to assign new components, if at all possible.  (The Mini does have an exposed GPIO available that was previously used by the ITEAD firmware for flashing mode, which is not going to be used anymore.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fixing-the-timezone&quot;&gt;Fixing the timezone&lt;/h2&gt;
&lt;p&gt;If you installed a pre-compilled firmware, there’s a chance your device is using the incorrect timezone.  To check the current timezone, go to the webUI main page and then &lt;strong&gt;Console&lt;/strong&gt;. Now, type the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and if that is incorrect, to change it, enter the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone&lt;/code&gt; command with a value equal to your region’s &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png&quot;&gt;standardized time zone&lt;/a&gt; timezone.  For America/Sao_Paulo, for example, that would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-3&lt;/code&gt;, which can be set in your Tasmota device as follows&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone -3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final remarks&lt;/h1&gt;
&lt;p&gt;Tasmota is a &lt;strong&gt;featureful firmware&lt;/strong&gt; and it is worth taking a look at the &lt;strong&gt;&lt;a href=&quot;https://tasmota.github.io/docs/&quot;&gt;official documentation&lt;/a&gt;&lt;/strong&gt; to learn about the possibilities.  If you run into issues, go to their &lt;a href=&quot;https://github.com/arendst/tasmota/&quot;&gt;Github repository&lt;/a&gt;, search their open and closed issues, and if you do not find an answer to your problem, open a new one.&lt;/p&gt;

&lt;p&gt;Come back to this website every once in a while to check for changes in the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt;.  I try to keep all my guides up-to-date as much as possible because I actually use them myself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="iot" /><category term="tasmota" /><category term="sonoff" /><category term="wireless" /><category term="automation" /><category term="firmware" /></entry><entry><title type="html">TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink</title><link href="/blog/Tvhlink/" rel="alternate" type="text/html" title="TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink" /><published>2021-01-21T12:20:00-03:00</published><updated>2021-01-21T12:20:00-03:00</updated><id>/blog/Tvhlink</id><content type="html" xml:base="/blog/Tvhlink/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 21st, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In my previous post titled &lt;a href=&quot;/blog/Youtube-as-IPTV-with-TVH/&quot;&gt;Youtube live as IPTV channels for TVHeadend&lt;/a&gt;, I mentioned a method for capturing a Youtube livestream and feeding it into a &lt;strong&gt;&lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;TVHeadend&lt;/a&gt;&lt;/strong&gt; (TVH) server via a Python utility called &lt;strong&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;Streamlink&lt;/a&gt;&lt;/strong&gt;.  In this tutorial, I will present an easier and more reliable method of doing that for Youtube as well as &lt;a href=&quot;https://streamlink.github.io/plugin_matrix.html&quot;&gt;&lt;em&gt;any&lt;/em&gt; other supported sources&lt;/a&gt;.  I called this integration &lt;strong&gt;TVHlink&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The simplified TVHlink integration is largely due to the release of a new version of the Streamlink utility (&lt;strong&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink/releases/tag/2.0.0&quot;&gt;Streamlink v2.0.0&lt;/a&gt;&lt;/strong&gt;) that includes many bug fixes and more flexible plugins for Youtube, Twitch, and other livestream sources.  For Youtube, for example, it’s now possible to simply point to a channel URL and the parser will automatically try to grab its livestream, instead of using the old method of pointing to the exact livestream URL, which often changes from time to time.  This is basically what I was doing with my &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;youtube4tvh&lt;/a&gt; utility but now that the improved content parser has been implemented into Streamlink, we don’t need youtube4tvh anymore because the livestream URL is found upon each TVH client request, rather than previously stored into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.m3u&lt;/code&gt; playlist.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;. All the software used here is &lt;strong&gt;free and open-source&lt;/strong&gt; and &lt;strong&gt;all livestream sources are publicly available&lt;/strong&gt; and are provided by the copyright owners themselves via either plataforms such as &lt;a href=&quot;https://www.youtube.com/&quot;&gt;Youtube&lt;/a&gt;, &lt;a href=&quot;https://www.twitch.tv/&quot;&gt;Twitch&lt;/a&gt;, &lt;a href=&quot;https://www.dailymotion.com/&quot;&gt;Dailymotion&lt;/a&gt;, etc., or their official channels (e.g., &lt;a href=&quot;https://www.cbsnews.com/&quot;&gt;CBS News&lt;/a&gt;,  &lt;a href=&quot;https://www.dw.com/&quot;&gt;DW&lt;/a&gt;, &lt;a href=&quot;https://www.reuters.com/&quot;&gt;Reuters&lt;/a&gt;) for anyone to use. If you enjoy the content, &lt;strong&gt;please consider supporting the developers, streamers, and providers&lt;/strong&gt; who make this possible.&lt;/p&gt;

&lt;h2 id=&quot;client-demo&quot;&gt;Client demo&lt;/h2&gt;
&lt;p&gt;Here is a preview of how the TVHlink integration looks like for mulitple TVH clients.  This is a &lt;em&gt;non-exhaustive&lt;/em&gt; list because there are &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Clients&quot;&gt;other TVH compatible clients&lt;/a&gt;.  For more information about TVH client configuration, refer to the &lt;a href=&quot;#tvh-clients&quot;&gt;TVH clients&lt;/a&gt; section in this tutorial.&lt;/p&gt;

&lt;p&gt;For reference, all client demos were tested with a modest connection of D:&lt;strong&gt;10Mbps&lt;/strong&gt; / U:&lt;strong&gt;150Kbps&lt;/strong&gt;, which shows that the TVHlink integration works fairly well even if you have limited connectivity.  However, if your connection is better than that, you can &lt;strong&gt;expect much better performance than demonstrated&lt;/strong&gt; in the videos, and fine-tuning the source quality via stream profiles will greatly improve performance as well (the demos used 720p for all streams).  Performance is also very much client-dependent.  The &lt;strong&gt;TVH client addon for Kodi&lt;/strong&gt; has been the one that provided me the best experience so far.  It uses the HTSP protocol, which was designed for streaming, and allows the use of predictive tuning, which pre-loads channels before you access them, making the transition between channels next to each other much smoother than via webUI or VLC, as you can see in the demos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#tvh-kodi-pvr-addon&quot;&gt;Kodi&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/uZw3M3by2tI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#tvh-clients&quot;&gt;Web-browser (TVH webUI)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/EjJCRwiHXwY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#vlc-and-other-m3u-players&quot;&gt;VLC player&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/RBvuZXWxDMU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This tutorial is organized into six main sections.  The first two sections introduce a few reasons two implement the TVH link integration (&lt;a href=&quot;#motivation&quot;&gt;motivation&lt;/a&gt;) and a general picture of how it works (&lt;a href=&quot;#client-server-flow&quot;&gt;client-server flow&lt;/a&gt;).  The third section, called &lt;a href=&quot;#hardware&quot;&gt;hardware&lt;/a&gt;, contains a brief discussion about the hardware requirements to run a TVH server and my personal recommendation for new and experienced home users looking for hardware to buy.&lt;/p&gt;

&lt;p&gt;The last three sections contain the actual how-to guide for the &lt;a href=&quot;#software&quot;&gt;software&lt;/a&gt; components, such as the installation of a TVH server and Streamlink on a GNU/Linux host or Docker container, as well as their basic configuration.  Afterwards, the &lt;a href=&quot;#tvhlink&quot;&gt;TVHlink&lt;/a&gt; integration was described in detail, showing how to build customized IPTV networks of livestream channels.  The &lt;a href=&quot;#tvh-clients&quot;&gt;TVH clients&lt;/a&gt; were discussed at the end of the tutorial, with a focus on my two favorite ones–namely, the Kodi PVR addon and VLC/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; players.&lt;/p&gt;

&lt;p&gt;If you have already read my previous post called &lt;a href=&quot;/blog/Youtube-as-IPTV-with-TVH/&quot;&gt;Youtube live as IPTV channels for TVHeadend&lt;/a&gt;, you might want to skip straight to the &lt;a href=&quot;#software&quot;&gt;software&lt;/a&gt; discussion and &lt;a href=&quot;#tvhlink&quot;&gt;TVHlink integration&lt;/a&gt;.  Note that the installation sections are much more detailed than before and the TVHlink integration was greatly simplified because now, we do not need to generate and update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists outside of the TVH server environment.  That said, the current TVHlink tutorial is self-contained and does not require anyone to have read my previous post in order to implement the TVHlink integration.&lt;/p&gt;

&lt;p&gt;If you are new to all of this, don’t panic!  Grab a towel, save some time, and read through. Then, give it a try on your own first and if you run into an “unsolvable” issue, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.  I am glad to help out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There are multiple reasons to watch livestreams as if they were IPTV channels via a centralized server such as TVH.  To mention a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is &lt;strong&gt;free and all programs are open-source&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;There is at least one &lt;strong&gt;24/7 livestream&lt;/strong&gt; that you enjoy. For example, the following Youtube channels:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;News&lt;/strong&gt;: ABC News, Sky News, DW, France 24&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: NASA TV, Space Videos&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Nature&lt;/strong&gt;: Cornell Bird Cams, Monterey Bay Aquarium, Explore Nature&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Other&lt;/strong&gt;: earthTV, I Love You Venice, Railway&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Radio&lt;/strong&gt;:  BGM channel, Cafe del Mar, Stay See&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;More options to access content from multiple networks using a single client;&lt;/li&gt;
  &lt;li&gt;Keep your streaming services as centralized as possible.  That is, instead of multiple applications, you can manage everything from a single server;&lt;/li&gt;
  &lt;li&gt;Record livestreams with the push of a button on any client or via a schedule;&lt;/li&gt;
  &lt;li&gt;Take advantage of fast and reliable content delivery networks (e.g., Akamai, Youtube CDN).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;client-server-flow&quot;&gt;Client-server flow&lt;/h1&gt;
&lt;p&gt;The client-server flow underlying the TVHlink integration is illustrated next.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/client-server-flow.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/client-server-flow.jpg&quot; alt=&quot;Client-server-flow&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is, the TVH server stores one or more IPTV networks as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists that contain one or more (livestreaming) channels as a track.  When a TVH client (any IPTV/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; player) connects to the TVH server, the server executes a Streamlink command, which will in turn try to find the livestream data.  If successful, streamlink will output the data into the TVH server, which will then send back to the client that requested the livestream.  Otherwise, the request will either return an error or timeout.&lt;/p&gt;

&lt;p&gt;A TVH server is not capable of multicasting any livestream.  This requires a third software component to the client-server flow, such as &lt;a href=&quot;https://www.videolan.org/vlc/&quot;&gt;VLC&lt;/a&gt;.  This topic is beyond the scope of the current tutorial but if interested, check the following guide: &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/VLC_Multicasting#VLC-Multicasting-for-IPTV-into-TVHeadend&quot;&gt;VLC Multicasting for IPTV into TVHeadend&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;The hardware requirement to run a TVH server depends largely on its usage.  It runs on a huge variety of devices, from a tiny ARM-based single-board computer (SBC) to a powerful AMD/Intel x86-64 machine.  (Users have even managed to run TVH on a &lt;a href=&quot;https://tvheadend.org/boards/4/topics/16579&quot;&gt;travel router&lt;/a&gt; with 8MB of flash storage, 64MB of RAM, and a 600 MHz MIPS CPU.)  However, if you want to use TV tuners in addition to the TVHlink integration, I strongly suggest you to use a x86-64 machine with at least one PCIe interface instead of a SBC.  This will give you more options to choose from than relying exclusively on USB tuners.&lt;/p&gt;

&lt;p&gt;Most of the resource requirements to run TVH come from transcoding and networking.  For example, while a &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspbery Pi 3B&lt;/a&gt; (RPi) will be more than enough to run a TVH server and use the TVHlink integration with default settings, CPU-wise, the RPi will strugle if you enable transcoding via different streaming profiles and feed it to multiple clients.  Fortunately, you can avoid transcoding altogether by configuring Streamlink to grab and feed lower resolution streams &lt;strong&gt;directly from the source&lt;/strong&gt;, or even better, create &lt;strong&gt;_HD&lt;/strong&gt; and &lt;strong&gt;_SD&lt;/strong&gt; channels for the same livestream source and let the client choose what works best for them (e.g., in the pipe command to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt;, use the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--default-stream 1080p,720p,best&lt;/code&gt; for HD channels, and the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--default-stream 480p,360p,worst&lt;/code&gt; for SD).&lt;/p&gt;

&lt;p&gt;Networking-wise, a 100Mbit ethernet port can get easily saturated if serving high-resolution streams to more than one client at once.  Wireless connections are okay for clients but your TVH server should not rely on them because too many things can interfere with wireless communication.  An alternative is to use the wireless interface for management (i.e., to access the webUI) and reserve one or more ethernet ports for streaming.  My suggestion is that at the very least, reserve a &lt;strong&gt;1Gbit ethernet port&lt;/strong&gt; for TVH.&lt;/p&gt;

&lt;p&gt;The RAM requirement is pretty low if not transcoding or recording to RAM.  In general, plan on dedicating &lt;strong&gt;at least 1GB of RAM&lt;/strong&gt; to the TVH server.  Similarly, the TVH server &lt;strong&gt;uses less than 100MB of storage space&lt;/strong&gt;.  However, TVH let’s you record videos from any of your sources and depending on the recording profile, this can use a lot of space.&lt;/p&gt;

&lt;p&gt;The hardware requirements for Streamlink are negligible.&lt;/p&gt;

&lt;h2 id=&quot;device-recomendations&quot;&gt;Device recomendations&lt;/h2&gt;
&lt;p&gt;If you are new to all of this and are looking for cheap and efficient hardware to get started, take a look at the &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-4-model-b/&quot;&gt;Raspberry Pi 4B&lt;/a&gt; and the &lt;a href=&quot;https://www.hardkernel.com/shop/odroid-c2/&quot;&gt;Odroid C2&lt;/a&gt; or its latest iteration, the &lt;a href=&quot;https://www.hardkernel.com/shop/odroid-c4/&quot;&gt;Odroid C4&lt;/a&gt;, for example.  They are solid, low-power devices that you can buy for less than US$ 50 and that meet the requirements to run a TVH server and more.  They can even be used as an &lt;strong&gt;all-in-one&lt;/strong&gt; box–that is, TVH server and client at the same time.  All such boards are well-known and sold world-wide via AliExpress, Amazon, and the like.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/rpi4b-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/rpi4b-board.jpg&quot; alt=&quot;RPi 4B&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc2-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc2-board.jpg&quot; alt=&quot;Odroid C2&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc4-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc4-board.jpg&quot; alt=&quot;Odroid C4&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, if you are an experienced user, consider using &lt;strong&gt;virtualization&lt;/strong&gt; with your existing hardware.  This will save you money and provide an easy to manage plataform for TVH and other services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;As the name suggests, there are two main software components to the TVHlink integration, namely &lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;TVH&lt;/a&gt; and &lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;Streamlink&lt;/a&gt;. The minor components are all their dependencies (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;) but their installation packages will take care of them in most cases.  As mentioned before, both projects are free and open-source, so anyone can download, install, use, and help developing and maintaining the projects.  (You don’t need to be a programmer to help out.  Check if they need assistance with translations, for example, and check how to report bugs via the Github repositories whenever you find one.)  &lt;strong&gt;Please consider supporting both projects&lt;/strong&gt; if you find them useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TVH Donations&lt;/strong&gt;: &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/donate&quot;&gt;https://tvheadend.org/projects/tvheadend/wiki/donate&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Streamlink Donations&lt;/strong&gt;: &lt;a href=&quot;https://streamlink.github.io/donate.html&quot;&gt;https://streamlink.github.io/donate.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this section of the tutorial, I will go over the installation process of the related software, their basic usage, concepts, and configuration.  Unless otherwise specified, I will assume the host is a &lt;strong&gt;GNU/Linux OS&lt;/strong&gt; and more specifically, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distribution, such as &lt;strong&gt;Debian&lt;/strong&gt; or &lt;strong&gt;Ubuntu&lt;/strong&gt;.  If this is not the case, simply adapt the commands to use your OS pkg manager instead.  In any case, a reference to the official documentation is always provided, which includes instructions for other distros as well.  However, make sure that by the end of the installation, you are running &lt;strong&gt;the latest version&lt;/strong&gt; of both programs.  Otherwise, you will run into issues with the TVHlink integration.&lt;/p&gt;

&lt;h2 id=&quot;tvheadned&quot;&gt;TVHeadned&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Tvheadend is a TV streaming server for Linux supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, IPTV,SAT&amp;gt;IP and other formats through the unix pipe as input sources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal of this section is to cover the &lt;strong&gt;installation&lt;/strong&gt; and &lt;strong&gt;basic configuration&lt;/strong&gt; of a TVH server in order to use the TVHlink integration.  Therefore, tuners, drivers, and electronic program guide (EPG) data usage won’t be covered here, even though they are all supported by a TVH server.  Fortunately, the configuration of such aspects and the TVHlink integration are &lt;strong&gt;not&lt;/strong&gt; mutually exclusive–that is, you can configure your tuners and EPG data however you like after implementing the TVHlink integration. Similarly, if you use IPTV services, you can also run them in parallel to the TVHlink integration.&lt;/p&gt;

&lt;h3 id=&quot;concepts&quot;&gt;Concepts&lt;/h3&gt;
&lt;p&gt;In addition to the &lt;a href=&quot;#client-server-flow&quot;&gt;client-server flow&lt;/a&gt; illustrated before, there are four key concepts related to how TVH organizes its content–namely, the notions of &lt;strong&gt;networks&lt;/strong&gt;, &lt;strong&gt;muxes&lt;/strong&gt;, &lt;strong&gt;services&lt;/strong&gt;, and &lt;strong&gt;channels&lt;/strong&gt;.  In brief, a network is composed of one or more muxes, which define services that are mapped onto channels.&lt;/p&gt;

&lt;p&gt;In the TVHlink and IPTV context, a &lt;em&gt;network&lt;/em&gt; defines a meaningful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist (e.g., a livestreaming platform, like Youtube or Twitch) or the name of the IPTV service provider.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist contain &lt;em&gt;tracks&lt;/em&gt;, which are translated into &lt;em&gt;muxes&lt;/em&gt; in TVH lingo.  A mux carries and defines properties of each track, such as its name, icon, EPG source, provider, and so on.  Once a mux is verified to contain valid streaming data, it creates a corresponding &lt;em&gt;service&lt;/em&gt;, and services are then mapped onto specific &lt;em&gt;channels&lt;/em&gt; that will be accessible to a TVH client.&lt;/p&gt;

&lt;p&gt;The mapping of services onto channels is usually manual.  However, in this guide, we use &lt;em&gt;bouquets&lt;/em&gt; to automatically map services to channels and generate their tags.  In the TVHlink/IPTV context, bouquets are just meaningful channel groupings with customized settings.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Here is a list of various installation procedures.  Read the notes before following the official installation procedure.  Whatever method you choose, &lt;em&gt;after the installation&lt;/em&gt;, check that your TVH server is either version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3&lt;/code&gt; or higher.  Otherwise, review your installation or choose a different method because you are using an outdated version and compatibility is uncertain.&lt;/p&gt;

&lt;h4 id=&quot;host-installation&quot;&gt;Host installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/AptRepositories&quot;&gt;Install on host Linux machine via APT&lt;/a&gt;: Suitable for Debian and Debian-based distros (e.g., Raspberry Pi OS, Ubuntu).  This is the recommended procedure for compatible devices because it allows you to keep your TVH updated via APT along with the other installed packages on your OS.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;In the &lt;strong&gt;apt source&lt;/strong&gt; for tvheadend (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/tvheadend.list&lt;/code&gt;), use the &lt;strong&gt;&lt;a href=&quot;https://apt.tvheadend.org/unstable/&quot;&gt;Unstable&lt;/a&gt;&lt;/strong&gt; repository instead of the Stable one. The latter is too outdated.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;Before&lt;/strong&gt; running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install tvheadend&lt;/code&gt;, check the repo’s package version with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt policy tvheadend&lt;/code&gt;.  The package version must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3*&lt;/code&gt; or higher.  If it’s not, double check your installation procedure or use a different installation method (see below).&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;Specific package versions can be installed via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install tvheadend=&amp;lt;version&amp;gt;&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is an exact match to a repo’s valid version (version table avaliable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt policy tvheadend&lt;/code&gt;). This is useful if the candidate version (i.e., what would be installed by defeault) is not the latest one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/RpmRepository&quot;&gt;Install on host Linux machine via RPM&lt;/a&gt;: Suitable for Fedora and CentOS.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config-manager&lt;/code&gt; command, add either the &lt;strong&gt;&lt;a href=&quot;https://dl.bintray.com/tvheadend/fedora/:bintray-tvheadend-fedora-unstable.repo&quot;&gt;Fedora Unstable&lt;/a&gt;&lt;/strong&gt; (if FedoraOS) or the &lt;strong&gt;&lt;a href=&quot;https://dl.bintray.com/tvheadend/centos/bintray-tvheadend-centos-unstable.repo&quot;&gt;CentOS Unstable&lt;/a&gt;&lt;/strong&gt; (if CentOS) repository instead of the other ones.  The other repos contain outdated releases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Building&quot;&gt;Install on host Linux machine from the Github source&lt;/a&gt;: &lt;em&gt;Alternative&lt;/em&gt; to using the APT/RPM repositories.  It takes some time to build from the source because dependencies and conflits have to be fixed manually and it’s much harder to keep TVH updated this way.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;Always build from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of the Github repo.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-installation&quot;&gt;Docker installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.linuxserver.io/images/docker-tvheadend&quot;&gt;Install as a Docker Container with the LinuxServer image&lt;/a&gt;: &lt;em&gt;Alternative&lt;/em&gt; to anyone who is not running a Linux host, for example, or already have other Dockerized services up and running.  The image is provided by an unofficial but well-known source–namely, &lt;a href=&quot;https://www.linuxserver.io/&quot;&gt;LinuxServer&lt;/a&gt;.  The TVHlink integration is &lt;strong&gt;non-trivial&lt;/strong&gt; because the container does not include Streamlink by default.  However, I’ve covered this in the section about &lt;a href=&quot;#docker-installation-1&quot;&gt;running Streamlink in a TVH Docker container&lt;/a&gt;.  In short, it uses &lt;a href=&quot;https://blog.linuxserver.io/2019/09/14/customizing-our-containers/#custom-scripts&quot;&gt;custom script execution&lt;/a&gt; to install and update Streamlink in the container.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt; image tag for your architecture. This is the default, so you should not need to change anything to pull the right image.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and navigate to the &lt;strong&gt;TVH webUI&lt;/strong&gt;. If the web-browser is running on the same host as TVH, then the webUI will be at &lt;strong&gt;&lt;a href=&quot;http://127.0.0.1:9981&quot;&gt;http://127.0.0.1:9981&lt;/a&gt;&lt;/strong&gt;; Otherwise, it will be at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://HOST_IP:9981&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HOST_IP&lt;/code&gt; is the IP address of the machine hosting the TVH server.&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;It goes without saying that the machine hosting the TVH server should have a &lt;strong&gt;fixed IP address&lt;/strong&gt; at the local network because all the clients will be pointing to it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you provided admin credentials during the installation, you will be prompted to enter the credentials now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;TVH will start &lt;strong&gt;the wizard&lt;/strong&gt; the first time you access the webUI but go ahead and skip it altogether:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Cancel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Notice that there are several tabs in the webUI but many options will not show up if the &lt;strong&gt;View level&lt;/strong&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic&lt;/code&gt;. Change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expert&lt;/code&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; General &amp;gt; Base &amp;gt; Web Interface Settings &amp;gt; Default view level
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config01.jpg&quot; alt=&quot;TVH config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Optional.&lt;/em&gt; In the same tab as before, change the &lt;strong&gt;Authentication type&lt;/strong&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Both plain and digest&lt;/code&gt; to make the TVH server compatible with more clients than before.  (VLC, for example, is unable to authenticate if type is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest&lt;/code&gt;.)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; General &amp;gt; Base &amp;gt; HTTP Server Settings &amp;gt; Authentication type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config02.jpg&quot; alt=&quot;TVH config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;Note on exposing TVH to WAN&lt;/strong&gt;. This configuration allows clients to send all their credentials &lt;em&gt;in plain text&lt;/em&gt;.  This is &lt;em&gt;not a problem&lt;/em&gt; if your TVH server is only used locally.  However, &lt;em&gt;this is a problem&lt;/em&gt; if your TVH server is reachable outside your private network because the credentials will be accessible to anyone able to intercept the packets between client and server–you should always assume that this is the case when sending packets over the WAN.  If you want to use your TVH server remotely, my suggestion is to either use (a) vpn or (b) wireguard or (c) ssh tunnel (key-based auth) or (d) a reverse proxy with SSL termination (TLS) and independent and hardened credentials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Clients can access TVH using the same credentials as you (admin access). However, as a general rule of thumb, that is not a good practice. Also, if you have multiple clients, it is nice to know what each one is trying to access on your TVH server.  To create a single &lt;strong&gt;user&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; with password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; and permission to only access streaming, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Users &amp;gt; Access Entries &amp;gt; Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then in the &lt;strong&gt;Add Access Entry&lt;/strong&gt; window:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Username: client
# Streaming: Basic,Advanced,HTSP
# Comment: default streaming client user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config03.jpg&quot; alt=&quot;TVH config 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Now create a &lt;strong&gt;password&lt;/strong&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; user:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Users &amp;gt; Passwords &amp;gt; Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then in the &lt;strong&gt;Add Password&lt;/strong&gt; window:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Username: client
# Password: client
# Comment: default streaming client password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config04.jpg&quot; alt=&quot;TVH config 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;If you want to &lt;strong&gt;add more users&lt;/strong&gt;, just repeat this step as many times as necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional.&lt;/em&gt; By default, TVH will attempt to grab EPG data from any channel added to it at start-up.  In the TVHlink context, however, EPG data either don’t make sense or there is no simple way of grabbing them.&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;Because some of the 24/7 news channels actually follow the same EPG as their Cable/Satellite broadcast, it is possible to use EPG tools like &lt;a href=&quot;http://webgrabplus.com/&quot;&gt;WebGrab+Plus&lt;/a&gt; to configure TVH to use them.  However, this is way beyond the scope of this tutorial.&lt;/p&gt;

    &lt;p&gt;Therefore, you can safely &lt;strong&gt;disable automatic EPG grabbing at start-up&lt;/strong&gt;, as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; EPG Grabber
# Uncheck all 'grab at start-up' options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config05.jpg&quot; alt=&quot;TVH config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;In addition, because you won’t be using any tuner for the TVHlink integration, you can also &lt;strong&gt;disable all EPG Grabber Modules&lt;/strong&gt;, as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; EPG Grabber Modules
# For each enabled module (green icon), make sure enabled is unchecked (red icon)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config06.jpg&quot; alt=&quot;TVH config 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it. There are &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Documentation&quot;&gt;many other things you can do configuration-wise&lt;/a&gt; but the ones covered are sufficient for the TVHlink integration.  Other things you might want to take a look at are the &lt;strong&gt;&lt;a href=&quot;https://docs.tvheadend.org/webui/config_dvr/&quot;&gt;recording&lt;/a&gt;&lt;/strong&gt; settings and &lt;strong&gt;&lt;a href=&quot;https://docs.tvheadend.org/webui/config_streamprofile/&quot;&gt;stream profiles&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;streamlink&quot;&gt;Streamlink&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Streamlink is a command-line utility which pipes video streams from various services into a video player, such as VLC. The main purpose of Streamlink is to avoid resource-heavy and unoptimized websites, while still allowing the user to enjoy various streamed content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an awesome Python utility and if you have never used it before, make sure to check their &lt;strong&gt;&lt;a href=&quot;https://streamlink.github.io/&quot;&gt;documentation&lt;/a&gt;&lt;/strong&gt;.  In the TVHlink context, it is used to pipe data from a livestream channel to a TVH server, as &lt;a href=&quot;#client-server-flow&quot;&gt;illustrated in the client-server flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Streamlink has plugins for most of the major streaming platforms (Youtube, Twitch, Dailymotion, etc.) as well as a few specific websites (CBS News, NBC News, Reuters, etc.).  For an exhaustive list of the available plugins, check their &lt;a href=&quot;https://streamlink.github.io/plugin_matrix.html#plugins&quot;&gt;plugin matrix&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;The official docs contain detailed instructions about &lt;a href=&quot;https://streamlink.github.io/install.html&quot;&gt;how to install Streamlink on a variety of platforms&lt;/a&gt;.  However, a few of the package repositories contain &lt;strong&gt;outdated versions&lt;/strong&gt; of the Streamlink utility.  If you choose to install via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pacman&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnf&lt;/code&gt;, and other common Linux distro package manager, make sure to install Streamlink version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.0&lt;/code&gt; or higher.  In my experience, keeping Streamlink up-to-date is more important than the TVH server because the former is more prone to changes than the latter, owning to required fixes/updates to content parsers.&lt;/p&gt;

&lt;p&gt;Once installed, you can find the version by running&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which should be at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.0&lt;/code&gt; or higher, as mentioned before.  You can find the latest version number and a summary of the changes on their &lt;strong&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink/releases&quot;&gt;Releases page&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;host-installation-1&quot;&gt;Host installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://streamlink.github.io/install.html#linux-and-bsd&quot;&gt;Install on host Linux or BSD machine via the system’s package manager&lt;/a&gt;: At the time this tutorial was originally published, this was compatible with Arch, Debian, Fedora, Gentoo, NetBSD, NixOS, OpenBSD, Solus, Ubuntu, and Void.  This is the recommended procedure for compatible devices because it allows you to keep your Streamlink updated along with other packages installed on your OS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://streamlink.github.io/install.html#pypi-package-and-source-code&quot;&gt;Install via Python’s package manager, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;&lt;/a&gt;: &lt;em&gt;Alternative&lt;/em&gt; to other installation methods when Streamlink is not available in the system’s package manager or the version is outdated. This offers the highest cross-plataform compatibility–that is, as long as you can install Python, you can install Streamlink this way.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;Starting Streamlink version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.*&lt;/code&gt;, the utility is only compatible with &lt;strong&gt;Python 3&lt;/strong&gt; (and I strongly recommend to use Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.7&lt;/code&gt; or higher).  Therefore, first, install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; and its package manager, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt;.  Then, install Streamlink via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt; to make sure it is installed as a Python 3 package instead of Python 2.&lt;/p&gt;

    &lt;p&gt;On Linux distributions, Python’s package manager will install user-related packages on the user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.local/bin&lt;/code&gt; directory, which by default, is not part of the user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.  This means that if you try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; after a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3 install --user streamlink&lt;/code&gt; install, for example, your shell might not find the executable.  To fix this, you need to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.local/bin&lt;/code&gt; to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export &quot;PATH=$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.profile&quot; &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then logoff and back on to apply the changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-installation-1&quot;&gt;Docker installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/cgomesu/tvhlink/blob/master/tools/docker/streamlink_for_tvh_container.sh&quot;&gt;Install on the LinuxServer TVH docker container&lt;/a&gt;: &lt;strong&gt;Required for containerized TVH server installations&lt;/strong&gt; because by deafult, the LinuxServer TVH container does not include Streamlink.  I created a repo called &lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink&lt;/a&gt;&lt;/strong&gt; where I wrote a script to handle the automatic installation and update of the Streamlink utility via LinuxServer’s &lt;a href=&quot;https://blog.linuxserver.io/2019/09/14/customizing-our-containers/#custom-scripts&quot;&gt;custom script execution feature&lt;/a&gt;.  To use it, do the following:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;Install git&lt;/strong&gt; on the docker &lt;em&gt;host machine&lt;/em&gt; (&lt;em&gt;not&lt;/em&gt; the container):
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt update &amp;amp;&amp;amp; sudo apt install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Clone the tvhlink repo&lt;/strong&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt;:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd /opt &amp;amp;&amp;amp; sudo git clone https://github.com/cgomesu/tvhlink.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Go to your TVH container’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; directory (edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;TVH_CONTAINER&amp;gt;&lt;/code&gt; below before running the command; this is the dir where the TVH’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; subdir is) and &lt;strong&gt;create a new dir&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-cont-init.d&lt;/code&gt;. Any scripts in this dir are automatically executed at the container’s start-up:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd &amp;lt;TVH_CONTAINER&amp;gt;/config &amp;amp;&amp;amp; sudo mkdir custom-cont-init.d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink_for_tvh_container.sh&lt;/code&gt; script from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tvhlink&lt;/code&gt; repo to the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-cont-init.d&lt;/code&gt; dir:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo cp /opt/tvhlink/tools/docker/streamlink_for_tvh_container.sh custom-cont-init.d/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Fix the dir and script ownership&lt;/strong&gt; to match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUID&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1010&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PGID&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100&lt;/code&gt;) of your TVH container (edit the values before running the command below; if uncertain, then type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id &amp;lt;TVH_USER&amp;gt;&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;TVH_USER&amp;gt;&lt;/code&gt; is the user running the TVH container):
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo chown -R 1010:100 custom-cont-init.d/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Restart your TVH container&lt;/strong&gt; and the script should automatically install and update Streamlink at every startup.  Check the logs for any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[TVHlink]&lt;/code&gt; messages.  If you don’t see any, just &lt;strong&gt;recreate the container&lt;/strong&gt; and wait until it’s done installing–it can take a few minutes.&lt;/p&gt;

        &lt;p class=&quot;notice notice--warning&quot;&gt;Because the script is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; dir, it should persist after a TVH container update and will automatically be triggered at start-up to reinstall the required packages and Streamlink.  If you notice it’s broken, check the &lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink repo&lt;/a&gt; for an update or open an issue to let me know about it.  The script also updates Streamlink after it has been installed, so it makes sure your container is always runnig the latest version of it.  However, the script only triggers at start-up, so it will only try to update Streamlink then.  Therefore, if there’s a &lt;a href=&quot;https://github.com/streamlink/streamlink/releases/&quot;&gt;new Streamlink release&lt;/a&gt; and you want to update it in the TVH container, simply restart the container and the script should take care of it.  (The script uses Python’s package manager, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;, so it will only install the latest version available there.)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;For other TVH docker images, either go to my &lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink repo&lt;/a&gt; and open an issue to request support or you will need to install Streamlink manually and then disable automatic container updates.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;standalone-usage&quot;&gt;Standalone usage&lt;/h3&gt;
&lt;p&gt;After installing Streamlink, you should be able to run it by itself with&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink [OPTIONS] &amp;lt;URL&amp;gt; [STREAM]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;URL&amp;gt;&lt;/code&gt; is a livestreaming channel (e.g., &lt;em&gt;Explore Live Nature Cams&lt;/em&gt; Youtube channel: &lt;a href=&quot;https://www.youtube.com/channel/UC-2KSeUU5SMCX6XLRD-AEvw&quot;&gt;https://www.youtube.com/channel/UC-2KSeUU5SMCX6XLRD-AEvw&lt;/a&gt;) or &lt;a href=&quot;https://streamlink.github.io/plugin_matrix.html&quot;&gt;a parsable website&lt;/a&gt; URL; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[STREAM]&lt;/code&gt; is a streaming quality profile (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;worst&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;720p&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;360p&lt;/code&gt;)–if you omit the latter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; will show a list of all available profiles for the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;URL&amp;gt;&lt;/code&gt;.  You can find a complete list of additional options (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[OPTIONS]&lt;/code&gt;) with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; usage argument, as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Streamlink is compatible with multiple popular video players, such as &lt;a href=&quot;https://videolan.org/&quot;&gt;VLC&lt;/a&gt; and &lt;a href=&quot;https://mpv.io/&quot;&gt;MPV&lt;/a&gt;.  For a non-exhaustive compatibility list and their transport modes, check the &lt;a href=&quot;https://streamlink.github.io/players.html#player-compatibility&quot;&gt;official player compatibility table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvhlink&quot;&gt;TVHlink&lt;/h1&gt;
&lt;p&gt;Now that you have installed both TVH and Streamlink, the TVHlink integration is rather trivial.  In fact, the only difference between its implementation and the implementation of any IPTV is that in the configuration of each &lt;em&gt;mux&lt;/em&gt; in the TVH server, we will be using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command with our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; utility, instead of pointing it to an external &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MPEG-TS&lt;/code&gt; or similar file.&lt;/p&gt;

&lt;h2 id=&quot;single-livestream-channel&quot;&gt;Single livestream channel&lt;/h2&gt;
&lt;p&gt;To add a single livestream channel to your TVH server, first, you need to manually create an IPTV network and then add muxes to it.  We will configure the network to automatically create services for the muxes, instead of scanning them one by one, and then enable a bouquet to automatically map services to channels.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open your TVH webUI and go to the &lt;strong&gt;Networks&lt;/strong&gt; tab of your TV inputs settings:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; DVB Inputs &amp;gt; Networks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;new network&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In the &lt;strong&gt;Add Network&lt;/strong&gt; window, select the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Type: IPTV Network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config01.jpg&quot; alt=&quot;TVHlink config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Now, in the &lt;strong&gt;Add IPTV Network&lt;/strong&gt; window, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Network name: Youtube
# Create bouquet: Checked
# Provider name: Youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Skip startup scan: Checked
# Service ID: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config02.jpg&quot; alt=&quot;TVHlink config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;new mux&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;France 24 English&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; DVB Inputs &amp;gt; Muxes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and in &lt;strong&gt;Add Mux&lt;/strong&gt; window, select the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Network: Youtube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config03.jpg&quot; alt=&quot;TVHlink config 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Then, change the following settings:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Enable
# EPG scan: Disabled
# URL: pipe:///usr/bin/env streamlink --stdout --default-stream best --url https://www.youtube.com/user/france24english
# Mux name: Youtube - France 24 English
# Channel number: 1
# Service name: France 24 English
# Icon URL: https://yt3.ggpht.com/ytc/AAUvwnjQokqv8-b-XLH34XJulaY0W27AzlCmyeEY7TayMw=s176-c-k-c0x00ffffff-no-rj
# Channel tags: News
# Accept zero value for TSID: Checked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config04.jpg&quot; alt=&quot;TVHlink config 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command in &lt;em&gt;URL&lt;/em&gt;. In brief, it tells your TVH server to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; with the options:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stdout&lt;/code&gt;: Output the stream data to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, which will be read by your TVH server&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--default-stream&lt;/code&gt;: Stream quality, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best&lt;/code&gt; but could be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;720p&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;480p&lt;/code&gt;, or whatever is acceptable by the source (Youtube)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--url&lt;/code&gt;: France 24 English Youtube channel URL. Sometimes, this will be the channelID instead of an alias.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;It is possible to include additional options but these are both necessary and sufficient to get the TVHlink integration working.  Also, I tend to use the &lt;em&gt;Icon URL&lt;/em&gt; from the official Youtube channels because the address has proved to be quite reliable and the image format is perfect for what we are doing.  Lastly, &lt;em&gt;Channel tags&lt;/em&gt; are optional but it will help your clients finding what they want more efficiently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the &lt;strong&gt;Tvheadend log&lt;/strong&gt; window in the webUI (at the bottom) and check that the TVH is correctly requesting and reading data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt;.  If it is, you should see something like this:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot; alt=&quot;TVH Kodi config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2021-01-21 10:31:51.171 bouquet: new bouquet 'Youtube'
2021-01-21 10:55:26.380 mpegts: Youtube - France 24 English in Youtube - tuning on IPTV #1
2021-01-21 10:55:26.381 subscription: 0001: &quot;scan&quot; subscribing to mux &quot;Youtube - France 24 English&quot;, weight: 5, adapter: &quot;IPTV #1&quot;, network: &quot;Youtube&quot;, service: &quot;Raw PID Subscription&quot;
2021-01-21 10:55:26.381 spawn: Executing &quot;/usr/bin/env&quot;
2021-01-21 10:55:27.575 spawn: [cli][info] Found matching plugin youtube for URL https://www.youtube.com/user/france24english
2021-01-21 10:55:30.524 spawn: [cli][info] Available streams: 144p (worst), 240p, 360p, 480p, 720p, 1080p (best)
2021-01-21 10:55:30.524 spawn: [cli][info] Opening stream: 1080p (hls)
2021-01-21 10:55:41.380 mpegts: Youtube - France 24 English in Youtube scan complete
2021-01-21 10:55:41.380 subscription: 0001: &quot;scan&quot; unsubscribing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;And in the &lt;em&gt;Scan result&lt;/em&gt; of the mux, you should now see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; status, which means we can configure the bouquet to automap the service to a channel that any TVH client will be able to watch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube&lt;/code&gt; &lt;strong&gt;bouquet&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Scroll down until you find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube&lt;/code&gt; and enable it:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config05.jpg&quot; alt=&quot;TVHlink config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;And in the &lt;strong&gt;Tvheadend log&lt;/strong&gt;, you should see a message confirming that the service was mapped:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2021-01-21 11:02:41.575 bouquet: Youtube/Youtube - France 24 English/{PMT:0}: mapped service from Youtube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which will then show up in the &lt;strong&gt;Channels&lt;/strong&gt; tab:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config06.jpg&quot; alt=&quot;TVHlink config 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To test your new channel using the webUI itself, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Electronic Program Guide &amp;gt; Watch TV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Select channel: 1 France 24 English
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The webUI playback is not very reliable because lots of things depend on the web-browser you are using and how it handles the video playback.  (In other words, even if you’re unable to see the video or hear the sound using the webUI, chances are the stream is working just fine when using a &lt;em&gt;proper video player&lt;/em&gt;.)  If you really want to test the connection at this point, then skip to the &lt;a href=&quot;#tvh-clients&quot;&gt;TVH clients&lt;/a&gt; section and use one of the methods described there.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;automatic-network-of-livestream-channels&quot;&gt;Automatic network of livestream channels&lt;/h2&gt;
&lt;p&gt;If you were paying attention to the IPTV network creation step described before, you might have noticed that there is an &lt;strong&gt;IPTV Automatic Network&lt;/strong&gt; option in the network &lt;em&gt;Type&lt;/em&gt;.  In this type of network, we &lt;strong&gt;import&lt;/strong&gt; an external &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; file to the TVH server and it reads its &lt;em&gt;tracks&lt;/em&gt; as &lt;em&gt;muxes&lt;/em&gt;, which means that we don’t need to create muxes one by one.  The drawback is that you need to know the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; syntax in order to build one yourself or find someone who has already done that for you and made the file available.  In this section, I will describe both alternatives.&lt;/p&gt;

&lt;h3 id=&quot;building-m3u-playlists&quot;&gt;Building m3u playlists&lt;/h3&gt;
&lt;p&gt;Anyone can create and edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists using any simple text editor, such as Pluma, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, Vim, and so on.  For example, open a text editor of your choice and copy and paste the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#EXTM3U
#EXTINF:-1 tvg-name=&quot;France 24 English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnjQokqv8-b-XLH34XJulaY0W27AzlCmyeEY7TayMw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,France 24 English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/france24english
#EXTINF:-1 tvg-name=&quot;France 24&quot; tvg-language=&quot;French&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngwSBIFO5UNdycjzkUjIRFEq0n5YWKTOgsfbgKdoQ=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,France 24
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/france24
#EXTINF:-1 tvg-name=&quot;DW English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;DE&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngnDcvUkm6jCn6TEENsvO8bdy60g-T4lCgUWOyemCs=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,DW English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/deutschewelleenglish
#EXTINF:-1 tvg-name=&quot;DW Deutsch&quot; tvg-language=&quot;German&quot; tvg-country=&quot;DE&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnhXY-iIvV4naxL4WWuS_JQKOqfjqwSgzMswGp4aJUc=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,DW Deutsch
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/deutschewelle
#EXTINF:-1 tvg-name=&quot;Euronews English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnja_dPZdy_el5IhBkj9BJUAd29fZzSs4-vaws_uPLw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/Euronews
#EXTINF:-1 tvg-name=&quot;Euronews Spanish&quot; tvg-language=&quot;Spanish&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnh8LYxyL6VKfHAGYV0qCJ4hqaWDO5GympC7lRIViw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews Spanish
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/euronewses
#EXTINF:-1 tvg-name=&quot;Euronews Portuguese&quot; tvg-language=&quot;Portuguese&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngxE0l-vGHBafT-fP7WfCq_Xo7QfDLATRspf0agKA=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews Portuguese
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/euronewspt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, observe that&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first row always contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTM3U&lt;/code&gt; to identify this file as being an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The remaining rows contain two distinct rows, namely (a) one starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTINF:&lt;/code&gt; that defines properties of a mux, and (b) another immediately below it that contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command to request the stream data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regarding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTINF:&lt;/code&gt; row, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; next to it simply indicates that this &lt;em&gt;track&lt;/em&gt; has infinite length; the meaning of the other variables is quite intuitive. Of note, however, I’ve ommitted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tvg-id&lt;/code&gt; variable that is often found in such files because it has no useful meaning outside the context of EPG data.  If you choose to play around with EPG, then you might want to add one that matches the channel’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; in a given EPG data provider, for example.&lt;/p&gt;

&lt;p&gt;As long as you follow the structure in the example, you can add as many livestreaming channels as you want.  When you are done, you can import your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist to the TVH server as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist&lt;/strong&gt; with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube.m3u&lt;/code&gt; on a dir &lt;strong&gt;accessible to your TVH server&lt;/strong&gt;. In Dockerized installations, I suggest to create a subdir on the container’s appdata (next to its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; dir, for example) and in the container’s settings, add a new volume bind pointing to the new dir you created. Make sure to fix permissions, so that the new dir and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; files match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PGID&lt;/code&gt; of the TVH server;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your TVH webUI and naviagate to the &lt;strong&gt;Networks&lt;/strong&gt; tab:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; DVB Inputs &amp;gt; Networks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;new network&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube Auto&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In the &lt;strong&gt;Add Network&lt;/strong&gt; window, select the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Type: IPTV Automatic Network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now, in the &lt;strong&gt;Add IPTV Network&lt;/strong&gt; window, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Network name: Youtube Auto
# Create bouquet: Checked
# URL: file:///full/path/to/youtube.m3u
# Channel numbers from: 101
# Accept zero value for TSID: Checked
# Provider name: Youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Content character set: UTF-8
# Skip startup scan: Checked
# Service ID: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config07.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config07.jpg&quot; alt=&quot;TVHlink config 07&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube Auto&lt;/code&gt; &lt;strong&gt;bouquet&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Scroll down until you find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube Auto&lt;/code&gt; and enable it:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should map all services to channels in the &lt;strong&gt;Channels&lt;/strong&gt; tab:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To test your new channels using the webUI itself, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Electronic Program Guide &amp;gt; Watch TV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it!  You have learned how to build and import a customized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist of livestreams to your TVH server.  If you think this is a lot of work, check the following section then.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;curated-m3u-playlists&quot;&gt;Curated m3u playlists&lt;/h3&gt;
&lt;p&gt;I create a Github repository called &lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink&lt;/a&gt;&lt;/strong&gt; that contains &lt;a href=&quot;https://github.com/cgomesu/tvhlink/tree/master/tools&quot;&gt;tools&lt;/a&gt; and &lt;a href=&quot;https://github.com/cgomesu/tvhlink/tree/master/m3u&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists&lt;/a&gt; I personally use for my TVHlink integration.  You are all welcome to use my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists and contribute to keep them up-to-date (&lt;a href=&quot;https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/&quot;&gt;fork, make changes, push commits, and submit a PR with a description of what and why&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To add one of my curated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists to your TVH server, follow the same steps as in the previous section, with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You &lt;strong&gt;do not need to save any playlist locally&lt;/strong&gt;, unless you want to edit them before importing to the TVH server.  Instead, you can tell your TVH server to automatically &lt;strong&gt;fetch from the tvhlink repo&lt;/strong&gt;, as follows:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;In the &lt;strong&gt;Add IPTV Automatic Network&lt;/strong&gt; copy and paste the following on the &lt;em&gt;URL&lt;/em&gt; option to fetch my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube.m3u&lt;/code&gt; playlist:&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; https://raw.githubusercontent.com/cgomesu/tvhlink/master/m3u/youtube.m3u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;or alternatively, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;direct.m3u&lt;/code&gt; playlist:&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; https://raw.githubusercontent.com/cgomesu/tvhlink/master/m3u/direct.m3u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is it! Your TVH server will automatically check the &lt;strong&gt;tvhlink&lt;/strong&gt; repo every hour for changes and if detected, it will update all your channels accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-clients&quot;&gt;TVH clients&lt;/h1&gt;
&lt;p&gt;Now that there is a TVH server up and running with the TVHlink integration enabled, you should configure at least one TVH &lt;em&gt;client&lt;/em&gt; for testing purpose.  There are &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Clients&quot;&gt;multiple ways to watch the channels on your TVH server&lt;/a&gt;, including directly from the &lt;strong&gt;TVH webUI&lt;/strong&gt; itself:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Electronic Program Guide &amp;gt; Watch TV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-webui-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-webui-config01.jpg&quot; alt=&quot;TVH webUI config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The webUI player uses a very specific streaming profile though, and because it requires access to the webUI, it’s not possible to test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; user this way (because it doesn’t have permission to access the webUI).&lt;/p&gt;

&lt;p&gt;There are clients (apps) for &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;Android&lt;/strong&gt;, for example.  They can be clients developed &lt;em&gt;for&lt;/em&gt; a TVH server–such as Robert’s &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.tvheadend.tvhclient&quot;&gt;TVHClient&lt;/a&gt; for Android or Luis’ &lt;a href=&quot;https://apps.apple.com/us/app/tvhclient/id638900112&quot;&gt;TvhClient&lt;/a&gt; for iOS–or general use &lt;em&gt;IPTV players&lt;/em&gt;.  The latter works because the TVH server can provide a parsable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; file to such players–see the section about the &lt;a href=&quot;#vlc-player&quot;&gt;VLC player&lt;/a&gt; for an example of how to obtain such file.&lt;/p&gt;

&lt;p&gt;Here, however, I will show how to configure my two preferred clients.  Specifically, the &lt;strong&gt;&lt;a href=&quot;#tvh-kodi-pvr-addon&quot;&gt;Kodi PVR addon&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;#vlc-and-other-m3u-players&quot;&gt;VLC and other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; players&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tvh-kodi-pvr-addon&quot;&gt;TVH Kodi PVR addon&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://kodi.wiki/view/add-on:Tvheadend_HTSP_Client&quot;&gt;TVH HTSP client addon&lt;/a&gt; for the &lt;a href=&quot;https://kodi.tv/download&quot;&gt;&lt;strong&gt;Kodi Media Center&lt;/strong&gt;&lt;/a&gt; is &lt;em&gt;by far&lt;/em&gt; my favorite client.  It uses the proper protocol for streaming (HTSP) and has &lt;strong&gt;predictive tuning&lt;/strong&gt;, which makes the channel transitions very smooth because it loads neighboring channels in advance, threfore reducing the initial livestream request time (but this also greatly incrases bandwidth usage).&lt;/p&gt;

&lt;p&gt;You can install Kodi on pretty much any OS.  The &lt;a href=&quot;https://kodi.tv/&quot;&gt;official Kodi website&lt;/a&gt; provides a variety of installation packages to &lt;a href=&quot;https://kodi.tv/download&quot;&gt;download&lt;/a&gt; and you will find a &lt;em&gt;HOW-TO&lt;/em&gt; button for each one of them. Choose one of them and follow the installation instructions.  When you are done, come back to see &lt;strong&gt;how to install the &lt;a href=&quot;https://kodi.wiki/view/addon:Tvheadend_HTSP_Client&quot;&gt;TVH PVR addon&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To install the PVR addon, open Kodi and try to install via the &lt;strong&gt;official repo&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Addons &amp;gt; Install from repo &amp;gt; PVR clients
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config01.jpg&quot; alt=&quot;TVH Kodi config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If you find&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PVR clients&lt;/code&gt; option, then select it, then select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tvheadend HTSP Client&lt;/code&gt; and install it.  However, if you &lt;strong&gt;do not find&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PVR clients&lt;/code&gt; option, this means the PVR clients binary was not packaged with your Kodi version, which happens with a few &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;-based distributions.  The solution is to manually install the missing addon.  Close Kodi and open a terminal, then with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; user, type the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install kodi-pvr-hts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Restart Kodi and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PVR clients&lt;/code&gt; option should be available and will contain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tvheadend HTSP Client&lt;/code&gt; installed.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config02.jpg&quot; alt=&quot;TVH Kodi config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;Another option to install a missing addon is to download a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; of it from a public website and in the Kodi addons tab, choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install from zip&lt;/code&gt;.  However, do not go around installing addons from random websites.  &lt;strong&gt;Do your research first&lt;/strong&gt;.  Unofficial addons can contain all sorts of bad stuff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, to configure the PVR addon, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Addons &amp;gt; My addons &amp;gt; PVR clients &amp;gt; Tvheadend HTSP Client &amp;gt; Configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and in the &lt;strong&gt;Connection settings&lt;/strong&gt; tab, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# IP address: &amp;lt;IP of the machine hosting the TVH server&amp;gt;
# HTTP port: 9981
# HTSP port: 9982
# Username: client
# Password: client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config03.jpg&quot; alt=&quot;TVH Kodi config 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;and in the &lt;strong&gt;Streaming settings&lt;/strong&gt;, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Profile to use: htsp
# Use predictive tuning: Enabled
# Number of subscriptions: 3
# Unused subscription delay: 50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config04.jpg&quot; alt=&quot;TVH Kodi config 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Every time you change the client configuration, you will be required to &lt;strong&gt;restart Kodi&lt;/strong&gt; to see the changes.  So, restart your Kodi now. Once it comes back, all the channels will show up in
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# TV &amp;gt; Channels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go ahead and test a few of them.  If you want to debug the connection, open a web-browser and navigate to your TVH webUI.  At the bottom of the webUI, there’s a button to open the TVH log.  Press the buttom and see the log updates live.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot; alt=&quot;TVH Kodi config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config06.jpg&quot; alt=&quot;TVH Kodi config 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Lastly, &lt;strong&gt;additional Kodi PVR settings&lt;/strong&gt; can be changed in
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Settings &amp;gt; PVR &amp;amp; Live TV settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it!  Enjoy your TVHlink integration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;vlc-and-other-m3u-players&quot;&gt;VLC and other m3u players&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;VLC media player (previously the VideoLAN Client and commonly known as simply VLC) is a free and open-source, portable, cross-platform media player software, and streaming media server developed by the VideoLAN project. VLC is available for desktop operating systems, and mobile platforms, such as Android, iOS, iPadOS, Tizen, Windows 10 Mobile, and Windows Phone. VLC is also available on digital distribution platforms such as Apple’s App Store, Google Play, and Microsoft Store.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The VLC player is available to a variety of platforms and can be &lt;a href=&quot;https://www.videolan.org/vlc/#download&quot;&gt;downloaded from the official website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://github.com/BtbN/vlc-htsp-plugin&quot;&gt;unofficial TVH HTSP plugin for VLC&lt;/a&gt; but the repository has been archived and according to the author:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I am no longer working on this (..). Also, if you export an m3u playlist of your channels from tvh, and open it in VLC, you have the same set of features this plugin offers, just without all the weird bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fortunately, it is very easy to export your TVH channels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist and use it with the VLC player or any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; capable player:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and navigate to your TVH webUI;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/playlist&lt;/code&gt; to the TVH webUI address, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://TVH_HOST_IP:9981/playlist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config01.jpg&quot; alt=&quot;TVH VLC config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This will request an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist from your TVH server called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channels&lt;/code&gt;.  It contains all currently configured channels from your server.  &lt;strong&gt;Save it&lt;/strong&gt; on a directory accessible to your VLC player or other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; player.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;If you open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist with a text editor, you will see that below each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTINF&lt;/code&gt;, there is a network address (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://...&lt;/code&gt;).  If the address does not contain the IP address of your TVH server host, go ahead and replace them.  Please do not do this manually; use the editor’s &lt;em&gt;find a replace&lt;/em&gt; tool instead.  For example, if your client is not running on the same host as the TVH server, then instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1&lt;/code&gt;, you would want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://TVH_IP&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVH_IP&lt;/code&gt; is the IP address of the TVH server host in your local network.  When you’re done making the changes, just save the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your VLC player and open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channels&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Media &amp;gt; Open files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then, in the &lt;strong&gt;Select on or more files to open&lt;/strong&gt; window, select &lt;em&gt;All Files&lt;/em&gt; type, navigate to where you stored the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channels&lt;/code&gt; playlist and open it.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config02.jpg&quot; alt=&quot;TVH VLC config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You should be prompted to authenticate yourself now.  Use your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; credentials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it! Enjoy your TVHlink integration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;You have reached the end of this tutorial.  If you have not started configuring your TVH server, this is the perfect time to do so.  I have been using this integration for multiple months now and it has been absolutely great.  I strongly recommend it for any cord-cutters out there and in my opinion, it is a &lt;em&gt;must have&lt;/em&gt; if you already have a TVH server up and running.&lt;/p&gt;

&lt;p&gt;Streamlink v2.0 made the implementation of Youtube channels so much simpler than before and in my experience, Youtube provides the most reliable 24/7 livestream channels (mostly news, webcams, and music).  I am not a big fan of gaming streams in general, so I don’t ever watch Twitch streams, for example.  But as pointed out previously, Streamlink has plugins able to parse content from many sources other than Youtube and you are welcome to try them out.&lt;/p&gt;

&lt;p&gt;That is it for now.  If you enjoyed or have a few suggestions, &lt;a href=&quot;/contact&quot;&gt;let me know&lt;/a&gt;.  Every once in a while, come back and check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="tvhlink" /><category term="streamlink" /><category term="tvheadend" /><category term="github" /><category term="iptv" /><category term="kodi" /><category term="youtube" /><category term="streaming" /><category term="livestream" /></entry><entry><title type="html">Tasmota webcam server for the ESP32-cam</title><link href="/blog/Esp32cam-tasmota-webcam-server/" rel="alternate" type="text/html" title="Tasmota webcam server for the ESP32-cam" /><published>2021-01-15T09:00:00-03:00</published><updated>2021-01-15T09:00:00-03:00</updated><id>/blog/Esp32cam-tasmota-webcam-server</id><content type="html" xml:base="/blog/Esp32cam-tasmota-webcam-server/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--success&quot;&gt;&lt;strong&gt;April 6th, 2021&lt;/strong&gt;, Update #2: Created a bonus content section at the end called &lt;a href=&quot;#bonus-content-firmware-customization&quot;&gt;&lt;strong&gt;Firmware customization&lt;/strong&gt;&lt;/a&gt;. The new section describes how to create a customized Tasmota firmware to use any supported I2C or other peripherals that are not available in the pre-compiled binary. The &lt;em&gt;BME280&lt;/em&gt; sensor–a cheap and very reliable ambient temperature, humidity, and pressure sensor–was used as an example but the same procedure applies for displays and other I2C sensors that you might wish to use with your ESP32-cam board. This provides a very easy way to turn a simple webcam server into a weather station, smoke detector, relay controller, and more.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;April 6th, 2021&lt;/strong&gt;, Update #1: Added a pinout diagram for the ESP32-cam AI-Thinker board to the &lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt; section.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 26th, 2021&lt;/strong&gt;: Added an alternative source for the Tasmota32 binaries to the &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt; section.  I few individuals reported issues flashing the latest (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware&lt;/code&gt; branch) binaries, so I added a reference to the more stable (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release-firmware&lt;/code&gt; branch) binaries instead.  A list of currently active branches can be found in the official Github repo’s &lt;a href=&quot;https://github.com/arendst/Tasmota/branches/active&quot;&gt;active branches&lt;/a&gt; website.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 16th, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The ESP32 is a cheap and low-power microcontroller developed by &lt;a href=&quot;https://www.espressif.com&quot;&gt;Espressif&lt;/a&gt;.  In addition to its low-cost, the ESP32 is known for its tiny and robust design, the versatility of its applications, and for having onboard Wi-Fi and Bluetooth.  It is sold world-wide (e.g., &lt;a href=&quot;https://www.amazon.com/s?k=esp32&quot;&gt;Amazon&lt;/a&gt;, &lt;a href=&quot;https://aliexpress.com/wholesale?SearchText=esp32&quot;&gt;Aliexpress&lt;/a&gt;, &lt;a href=&quot;https://lista.mercadolivre.com.br/esp32&quot;&gt;Mercado Livre&lt;/a&gt;) in a variety of boards (e.g., NodeMCU, TTGO, Lolin32).&lt;/p&gt;

&lt;p&gt;In this tutorial, I will talk about one type of ESP32 board that has an &lt;strong&gt;integrated camera module&lt;/strong&gt;, called the &lt;strong&gt;ESP32-cam&lt;/strong&gt;, which can be found for &lt;a href=&quot;https://www.amazon.com/s?k=esp32+cam&amp;amp;s=price-asc-rank&amp;amp;ref=sr_st_price-asc-rank&quot;&gt;less than US$10&lt;/a&gt;.  The goal is to build a cheap alternative to commercial wireless cameras using an open-source firmware that can be easily controlled via HTTP or MQTT and integrated to an existing camera surveillance server (e.g., &lt;a href=&quot;https://github.com/ccrisan/motioneye/&quot;&gt;MotionEye&lt;/a&gt;, &lt;a href=&quot;https://shinobi.video/&quot;&gt;Shinobi&lt;/a&gt;, &lt;a href=&quot;https://www.zoneminder.com/&quot;&gt;ZoneMinder&lt;/a&gt;, &lt;a href=&quot;https://www.ispyconnect.com/&quot;&gt;iSpy&lt;/a&gt;) or multi-purpose automation server (e.g., &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;HomeAssistant&lt;/a&gt;, &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;, &lt;a href=&quot;https://nodered.org/&quot;&gt;NodeRed&lt;/a&gt;) by capturing its live stream from a simple MJPEG URL.  All that can be accomplished with &lt;strong&gt;&lt;a href=&quot;https://tasmota.github.io/&quot;&gt;Tasmota&lt;/a&gt;&lt;/strong&gt; and its (beta) &lt;strong&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota/tree/firmware/firmware/tasmota32&quot;&gt;webcam server firmware for the ESP32-cam&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re new to &lt;strong&gt;ESP32&lt;/strong&gt; boards, check Bill’s (&lt;a href=&quot;https://www.youtube.com/channel/UCzml9bXoEM0itbcE96CB03w&quot;&gt;DroneBot Workshop&lt;/a&gt;) review video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/xPlN_Tk3VLQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;For a comparison of a few different &lt;strong&gt;ESP32-cam&lt;/strong&gt; boards, check &lt;a href=&quot;https://www.youtube.com/channel/UCu7_D0o48KbfhpEohoP7YSQ&quot;&gt;Andreas Spiess’&lt;/a&gt; video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/5IhhyJjjCxo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This tutorial was organized as follows.  First, I presented the motivation behind the use of Tasmota32 webcam server over one of the most common firmwares for the ESP32-cam, the Espressif CameraWebServer Arduino sketch.  This is followed by a list of the main hardware components involved into flashing a firmware onto the ESP32-cam.  Most of the tutorial focused on the installation and configuration of the Tasmota32 webcam server using a GNU/Linux OS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-tasmota&quot;&gt;Why Tasmota?&lt;/h1&gt;
&lt;p&gt;Tasmota was created and it is still maintanted by &lt;a href=&quot;https://github.com/arendst&quot;&gt;Theo Arends&lt;/a&gt;. It started as hacky alternative to the &lt;a href=&quot;https://sonoff.tech/&quot;&gt;Sonoff&lt;/a&gt; commercial firmware and moved onto an independent, &lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;free and open-source project&lt;/a&gt; that provides multiple firmwares for ESP8266-based devices.  The firmwares come with a simple webUI that let’s you control and configure the board main modules as well as integration with a MQTT server and more. Even though Tasmota &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/&quot;&gt;support for the ESP32 is still in beta development&lt;/a&gt;, my experience with it has been very positive.&lt;/p&gt;

&lt;p&gt;One of the main webcam firmwares for the &lt;strong&gt;ESP32-cam&lt;/strong&gt; is the one provided by Espressif themselves, the &lt;a href=&quot;https://github.com/espressif/arduino-esp32/tree/master/libraries/ESP32/examples/Camera/CameraWebServer&quot;&gt;CameraWebServer&lt;/a&gt; Arduino sketch.  This one has features that the Tasmota32 webcam firmware does not offer, such as face recognition and motion detection.  However, my experience with the &lt;strong&gt;video streaming&lt;/strong&gt; has been negative.  Specifically, the streaming runs smoothly when the video resolution is low (640x480) but it strugles quite a bit when running at medium to high resolutions–that is, the number of frames per second decreases noticeably.  I’ve also noticed that the board runs very hot when running the CameraWebServer Arduino sketch, even when the most CPU intensive tasks (motion detection and face reconition) are disabled.&lt;/p&gt;

&lt;p&gt;On the other hand, the &lt;strong&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota/tree/firmware/firmware/tasmota32&quot;&gt;Tasmota32 webcam server&lt;/a&gt;&lt;/strong&gt; seems to perform much better in the areas the CameraWebServer Arduino sketch strugles with.  More specifically, the streaming is smoother and the board does not seem to get as hot.  I’ve not had a chance to investigate why this happens and to measure the actual difference in frames per second and temperature, so don’t take my opinion too seriously.  Also, I cannot tell if this happens for all ESP32-cam boards because I’ve only tested with the &lt;strong&gt;AI-Thinker&lt;/strong&gt; module.  Overall, however, my experience with the Tasmota32 firmware has been better than with the Espressif firmware in the area that I think is the most relevant one for a camera module, namely video streaming performance.  On top of that, the Tasmota firmware offers a multitude of methods to interact with the ESP32-cam remotely, while the Espressif sketch is very limited in that regard.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’ve never heard of Tasmota before, check Robbert’s (&lt;a href=&quot;https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ&quot;&gt;The Hook Up&lt;/a&gt;) introduction video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/08_GBROKQH0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;To make a single wireless camera based on the ESP32-cam board, you’ll need at least the following items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Board:
    &lt;ul&gt;
      &lt;li&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=esp32cam+ai-thinker&quot;&gt;ESP32-CAM, AI-Thinker board&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam.jpg&quot; alt=&quot;ESP32cam&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-pinout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-pinout.jpg&quot; alt=&quot;ESP32cam pinout&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;USB to TTL adapter:
    &lt;ul&gt;
      &lt;li&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=ftdi+ft232RL+usb+to+ttl&quot;&gt;FTDI FT232RL USB to TTL/serial module with 5v/3v3 voltage jumper&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/ftdi-usb-ttl.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/ftdi-usb-ttl.jpg&quot; alt=&quot;FTDI FT232RL&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Cables:
    &lt;ul&gt;
      &lt;li&gt;05x &lt;a href=&quot;https://www.amazon.com/s?k=female+dupont+wires&quot;&gt;Female-Female dupont/jumper wires&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/female-dupont.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/female-dupont.jpg&quot; alt=&quot;Female dupont wires&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;01x USB cable compatible with your USB to TTL adapter: Check the USB type and use a short cable to decrease resistance as much as possible because initially, we will be powering the ESP32-cam via your computer’s USB port.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-cable.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-cable.jpg&quot; alt=&quot;USB cable&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Optional.&lt;/em&gt; If you wish to add a case to your ESP32-cam project, there are many &lt;a href=&quot;https://duckduckgo.com/?q=esp32-cam+case&quot;&gt;3D printed options to choose from&lt;/a&gt;.  (Notice that the use of an external antenna requires (de)soldering very small components.  If you plan on installing the camera on an area with good wireless coverage, don’t bother with an external antenna.  Otherwise, plan accordingly.)  In addition, you might want to add a &lt;a href=&quot;https://www.amazon.com/s?k=USB+to+DIP&quot;&gt;USB to DIP adapter&lt;/a&gt; to your shopping list in order to power your ESP32-cam without the USB to TTL adapter.  The USB to DIP adapter is highly dependent on the casing choice and most 3D printed enclosure projects for the ESP32-cam include assembly instructions.  &lt;strong&gt;Casing and assembly are not covered in this tutorial&lt;/strong&gt;, owing to the plethora of alternatives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;
&lt;p&gt;This guide assumes you’re running a &lt;strong&gt;Linux&lt;/strong&gt; distribution, and more specifically, an &lt;strong&gt;apt-based distro&lt;/strong&gt;, such as Debian or Ubuntu.  If you’re running a different distro, simply change the apt code to reflect your system’s package manager.  For non-Linux users, check &lt;a href=&quot;https://tasmota.github.io/docs/Getting-Started/&quot;&gt;Tasmota’s Getting Started&lt;/a&gt; but use the binaries mentioned here and come back for the post-flashing configuration of the webcam server.&lt;/p&gt;

&lt;h2 id=&quot;required-packages-and-user-permissions&quot;&gt;Required packages and user permissions&lt;/h2&gt;
&lt;p&gt;Before we can flash the Tasmota32 webcam server onto the ESP32-cam, we will need to install a few packages and configure the permissions of our Linux user.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a terminal and install the required packages:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install wget python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install esptool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Find out if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; can be found in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;. (Alternatively, when required to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt;, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py OPTIONS&lt;/code&gt;, run as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 -m esptool OPTIONS&lt;/code&gt;. If you choose to do this, skip this and the next step.)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whereis esptool.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; was not found, it means your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.local/bin&lt;/code&gt; is not in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.  Add it as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.bashrc&quot; &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your ESP32-cam to the USB to TTL/serial adapter in flash mode:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg&quot; alt=&quot;ESP32cam flash mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;Attention.&lt;/strong&gt; Make sure your USB to TTL adapter has &lt;strong&gt;VCC in 5V mode&lt;/strong&gt; and in the ESP32, the VCC cable is connected to the 5V pin.  Double check the wiring before moving on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Connect the adapter to a USB port on your computer and check the new device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /dev/ttyUSB*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USER&lt;/code&gt; to the same group as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/ttyUSB*&lt;/code&gt; (it’s usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dialout&lt;/code&gt; but if different, change in the command below) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tty&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -a -G dialout ${USER} &amp;amp;&amp;amp; sudo usermod -a -G tty ${USER}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Log off and back on.  (If you continue to run into permission issues, try rebooting instead.  You can check your user’s permissions with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id ${USER}&lt;/code&gt;.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/h2&gt;
&lt;p&gt;We are now ready to flash the Tasmota firmware.  For reference, the official information is available at &lt;a href=&quot;https://tasmota.github.io/docs/ESP32&quot;&gt;https://tasmota.github.io/docs/ESP32&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tasmota32&lt;/code&gt; dir in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt &amp;amp;&amp;amp; sudo mkdir Tasmota32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; binary and the needed ESP32 Tasmota binaries from the official Github repo via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;.  The most stable binaries are available in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release-firmware&lt;/code&gt; branch and can be downloaded via the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo wget -P Tasmota32/ https://github.com/arendst/Tasmota/raw/release-firmware/firmware/tasmota32/tasmota32-webcam.bin https://github.com/arendst/Tasmota/raw/release-firmware/firmware/tasmota32/ESP32_needed_files/boot_app0.bin https://github.com/arendst/Tasmota/raw/release-firmware/firmware/tasmota32/ESP32_needed_files/bootloader_dout_40m.bin https://github.com/arendst/Tasmota/raw/release-firmware/firmware/tasmota32/ESP32_needed_files/partitions.bin 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;However, if you want to try the latest (development) binaries, then download the binaries from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware&lt;/code&gt; branch via the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo wget -P Tasmota32/ https://github.com/arendst/Tasmota/raw/firmware/firmware/tasmota32/tasmota32-webcam.bin https://github.com/arendst/Tasmota/raw/firmware/firmware/tasmota32/ESP32_needed_files/boot_app0.bin https://github.com/arendst/Tasmota/raw/firmware/firmware/tasmota32/ESP32_needed_files/bootloader_dout_40m.bin https://github.com/arendst/Tasmota/raw/firmware/firmware/tasmota32/ESP32_needed_files/partitions.bin 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;My recommendation is to try the latest (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware&lt;/code&gt;) first. Then, if you run into issues, go back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release-firmware&lt;/code&gt;.  You can find a list of active branches at &lt;a href=&quot;https://github.com/arendst/Tasmota/branches/active&quot;&gt;https://github.com/arendst/Tasmota/branches/active&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Change ownership to your user instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R ${USER} Tasmota32/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure your ESP32-cam is still connected to your computer in &lt;strong&gt;flash mode&lt;/strong&gt; (GPIO0-GND jumper).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Erase the current firmware (or whatever data) from your ESP32-cam. Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--port /dev/ttyUSB&lt;/code&gt; to the port your device is connected to, which you can find via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l /dev/ttyUSB*&lt;/code&gt;. For example, if your device is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/ttyUSB0&lt;/code&gt;, then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--port /dev/ttyUSB0&lt;/code&gt; in the options of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; utility.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --port /dev/ttyUSB erase_flash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wait until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; is done&lt;/strong&gt;. Then, press the &lt;strong&gt;reset button on the ESP32-cam&lt;/strong&gt;.  Now, check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/ttyUSB&lt;/code&gt; is available again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; webcam server binary and the required Tasmota binaries to the ESP32-cam. (As before, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--port&lt;/code&gt; before running the command.)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --chip esp32 --port /dev/ttyUSB --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 /opt/Tasmota32/bootloader_dout_40m.bin 0x8000 /opt/Tasmota32/partitions.bin 0xe000 /opt/Tasmota32/boot_app0.bin 0x10000 /opt/Tasmota32/tasmota32-webcam.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wait until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; is done&lt;/strong&gt;. Then, &lt;strong&gt;remove the flash mode (GPIO0-GND) jumper&lt;/strong&gt; from the ESP32-cam.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-nonflash-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-nonflash-mode.jpg&quot; alt=&quot;ESP32cam nonflash mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now &lt;strong&gt;press the reset button&lt;/strong&gt; on your ESP32-cam.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;
&lt;p&gt;By default, the Tasmota firmware will create a wireless access point for your ESP32-cam.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use a wifi-capable device (e.g., laptop) and connect to it. The ESP32-cam will give your device an IP address, which you can check via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;. Usually, the device’s IP address is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.4.0/24&lt;/code&gt; pool, which means the ESP32-cam webUI is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.4.1:80&lt;/code&gt;; Otherwise, the webUI will be at the first addr in whichever pool your device connected to after joining the wireless access point created by the Tasmota firmware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser of your choice and navigate to the ESP32-cam webUI. You should be prompted to change the wifi settings to allow your ESP32-cam to connect to your local wifi network.  Change the settings, save it, and wait for the ESP32-cam to reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the &lt;strong&gt;DHCP server&lt;/strong&gt; of your local network and find the IP address assigned to your ESP32-cam.  At this point, it’s a good idea to assign a static address to it as well.  (If you set a static address, then reboot the ESP32-cam before moving on.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the ESP32-cam webUI on your local network.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;updating-the-template&quot;&gt;Updating the template&lt;/h2&gt;
&lt;p&gt;Tasmota templates are device-specific definitions of how their GPIO pins are assigned. As mentioned before, there are multiple ESP32-cam boards out there with different definitions.  In my case, I’m using the &lt;strong&gt;AI-Thinker cam&lt;/strong&gt; module and therefore, I should configure the Tasmota32 webcam server to use the &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/#aithinker-cam&quot;&gt;AITHINKER CAM template&lt;/a&gt; instead of the default one.  (If your ESP32-cam is different, then check &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/&quot;&gt;https://tasmota.github.io/docs/ESP32/&lt;/a&gt; for the appropriate template and use that one instead of the AITHINKER CAM.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the &lt;strong&gt;AITHINKER CAM template&lt;/strong&gt;:
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AITHINKER CAM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4992&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5088&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5089&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5184&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5056&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5092&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5093&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From the ESP32-cam webUI, go to &lt;strong&gt;Configuration &amp;gt; Configure &amp;gt; Configure other&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the template under &lt;strong&gt;Other parameters &amp;gt; Template&lt;/strong&gt;; &lt;strong&gt;Check Activate&lt;/strong&gt;; Save it and wait for the reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The device should now be named ‘AITHINKER CAM’ (or whaterver NAME was in the template).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The MJPEG stream should be accessible at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/stream&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/cam.mjpeg&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A single snapshot can be obtained at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:80/snapshot.jpg&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;auto-enabling-the-webcam-server-at-boot&quot;&gt;Auto-enabling the webcam server at boot&lt;/h2&gt;
&lt;p&gt;If your board is like mine, the stream does not initialize on its own at boot–it requires a request to get webUI to initialize the stream.  This will happen whenever you try to visit the device’s webUI.  However, if you want to automatically initialize the webserver and video stream at boot, we can do so using Tasmota’s &lt;strong&gt;&lt;a href=&quot;https://tasmota.github.io/docs/Rules/&quot;&gt;rules&lt;/a&gt;&lt;/strong&gt;.  More specifically, we will add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rule1&lt;/code&gt; that tells the ESP32-cam to start the stream once Tasmota is fully initialized (i.e., after wifi and MQTT are connected, if configured).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the following rule:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rule1 ON System#Boot DO WcInit ENDON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the ESP32-cam webUI and then &lt;strong&gt;Console&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the rule in the &lt;strong&gt;enter command&lt;/strong&gt; box and press enter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rule1&lt;/code&gt;, enter the following command:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rule1 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart the ESP32-cam with the following command:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Restart 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Once it comes back on, check the console if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RULE 1&lt;/code&gt; was executed.  It should show something similar to the following if the rule is working as expected:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... RUL: SYSTEM#BOOT performs &quot;WcInit&quot;
... SRC: Rule
... CMD: Group 0, Index 1, Command &quot;WCINIT&quot;, Data &quot;&quot;
... CAM: Stream init
... CAM: User template
... CAM: PSRAM found
... CAM: Initialized
... RSL: stat/tasmota_***/RESULT = {&quot;WCInit&quot;:&quot;Done&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The MJPEG stream should now be accessible at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/stream&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/cam.mjpeg&lt;/code&gt; without ever accessing the webUI’s main page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the way, &lt;strong&gt;rules&lt;/strong&gt; are a great way to program your Tasmota device indepedently of any automation server. Make sure to read about &lt;a href=&quot;https://tasmota.github.io/docs/Rules/&quot;&gt;how to add or modify rules&lt;/a&gt; and &lt;a href=&quot;https://tasmota.github.io/docs/Commands/#rules&quot;&gt;the list of available rule commands&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;webcam-server-additional-configurations&quot;&gt;Webcam server additional configurations&lt;/h2&gt;
&lt;p&gt;A full list of commands for ESP32 devices can be found at &lt;a href=&quot;https://tasmota.github.io/docs/Commands/#esp32&quot;&gt;the official docs page&lt;/a&gt;.  However, by the time I finished writing this, many of the commands that are specific to the Tasmota32 webcam server binary were gone… I’m not sure what happened there.  For this reason, I’ve decided to post here all the additional commands (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wc&lt;/code&gt;) that I’m aware of (in alphabetical order):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcBrightness&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image brightness&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcContrast&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image contrast&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WCFlip&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Flips the image vertically&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcInit&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Initializes the webcam server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WCMirror&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Flips the image horizontally&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcResolution&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image resolution&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 96x96&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 160x120&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 176x144&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 240x176&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 240x240&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 320x240&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 400x256&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 480x320&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 640x480&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 800x600&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 1024x768&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcSaturation&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image saturation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcStream&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Controls the video streaming&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: stop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: start&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example, to set the stream resolution to 800x600, go to the &lt;strong&gt;Console&lt;/strong&gt; and enter the following command :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WcResolution 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, it’s possible to send commands via HTTP.  The previous example via web-browser: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP/cm?cmnd=WcResolution%209&lt;/code&gt;.  If using a terminal, you can send via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://DEVICE_IP/cm?cmnd=WcResolution%209
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which should reply with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; parsable by utilities such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;strong&gt;flash LED&lt;/strong&gt; is controlled by &lt;strong&gt;GPIO4&lt;/strong&gt; and the &lt;strong&gt;red LED&lt;/strong&gt; is controlled by &lt;strong&gt;GPIO33&lt;/strong&gt;. Their state can be changed programatically as well.&lt;/p&gt;

&lt;h2 id=&quot;fixing-the-timezone&quot;&gt;Fixing the timezone&lt;/h2&gt;
&lt;p&gt;If you installed a pre-compilled firmware, there’s a chance your device is using the incorrect timezone.  To check the current timezone, go to &lt;strong&gt;Console&lt;/strong&gt; and type&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and to change it, enter the command with a value equal to your region’s &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png&quot;&gt;standardized time zone&lt;/a&gt;.  For America/Sao_Paulo, for example, that would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-3&lt;/code&gt;, which can be set in your Tasmota device as follows&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone -3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h1&gt;
&lt;p&gt;You can now capture the live stream of your ESP32-cam at either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/stream&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/cam.mjpeg&lt;/code&gt;, and a single snapshot at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:80/snapshot.jpg&lt;/code&gt;.  Such URLs can be easily fed into most camera surveillance servers, such as &lt;a href=&quot;https://github.com/ccrisan/motioneye/&quot;&gt;MotionEye&lt;/a&gt;, &lt;a href=&quot;https://shinobi.video/&quot;&gt;Shinobi&lt;/a&gt;, &lt;a href=&quot;https://www.zoneminder.com/&quot;&gt;ZoneMinder&lt;/a&gt;, or &lt;a href=&quot;https://www.ispyconnect.com/&quot;&gt;iSpy&lt;/a&gt;.  As mentioned before, the Tasmota32 webcam server can be configure to connect to a &lt;strong&gt;&lt;a href=&quot;https://mqtt.org/&quot;&gt;MQTT server&lt;/a&gt;&lt;/strong&gt; (see &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure MQTT&lt;/strong&gt;) and then integrated with most home automation servers, such as &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;HomeAssistant&lt;/a&gt;, &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;, or one based on &lt;a href=&quot;https://nodered.org/&quot;&gt;NodeRed&lt;/a&gt;’s flow programming.&lt;/p&gt;

&lt;h2 id=&quot;standalone-wiring&quot;&gt;Standalone wiring&lt;/h2&gt;
&lt;p&gt;If you bought a USB to DIP adapter, you can now power your ESP32-cam independent of your USB to TTL/serial adapter using a cheap &lt;strong&gt;5V (at least 400mA) USB power supply&lt;/strong&gt;, such as an old cellphone charger, as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-standalone-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-standalone-mode.jpg&quot; alt=&quot;ESP32cam standalone mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-firmware-customization&quot;&gt;Bonus content: Firmware customization&lt;/h1&gt;
&lt;p&gt;Even though many of the GPIO pins in the ESP32-cam board are used for the built-in camera module, the board certainly has more than enough pins to interface with additional peripherals.  In other words, while you can use your ESP32-cam as a simple webcam server, it is possible–and as we will see, very easy–to turn it into something more than that, such as a weather station, smoke detector, relay controller, and so on, owning to the multitude of peripherals that are currently supported by the Tasmota firmware.  For an up-to-date list, see the &lt;a href=&quot;https://tasmota.github.io/docs/Supported-Peripherals/#supported-peripherals&quot;&gt;&lt;strong&gt;official Supported Peripherals table&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, due to space limitations, support for some peripherals are not included in pre-compilled binaries.  In the official docs, for example, it says that support for the &lt;a href=&quot;https://tasmota.github.io/docs/BME280/&quot;&gt;&lt;strong&gt;BME280 sensor module&lt;/strong&gt;&lt;/a&gt; is only available in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-sensors.bin&lt;/code&gt; pre-compiled binary.  Fortunately, it is now very easy to customize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; to support the BME280 and any other supported peripherals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/bme280.jpg&quot; alt=&quot;BME280&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following sections, I described how to customize the Tasmota32 firmware to support a BME280 sensor module.  This was accomplished with &lt;a href=&quot;https://www.docker.com/&quot;&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt; and the container &lt;a href=&quot;https://github.com/benzino77/tasmocompiler&quot;&gt;&lt;strong&gt;TasmoCompiler&lt;/strong&gt;&lt;/a&gt;.  At the end, I showed how to update the firmware over-the-air and how to configure the template to interface with peripherals connected to GPIO pins.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;There are &lt;a href=&quot;https://tasmota.github.io/docs/Compile-your-build/&quot;&gt;many different ways of customizing a Tasmota firmware&lt;/a&gt;.  TasmoCompiler is just one of them that does not use an IDE and has a user-friendly GUI.&lt;/p&gt;

&lt;h2 id=&quot;installing-docker-and-running-tasmocompiler&quot;&gt;Installing Docker and running TasmoCompiler&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is a ver well-known, documented, and used virtualization platform. To install Docker, follow the official documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;&lt;strong&gt;Get Docker&lt;/strong&gt; and &lt;strong&gt;install it&lt;/strong&gt; on your OS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have Docker up and running, it is time to pull and run the &lt;strong&gt;TasmoCompiler&lt;/strong&gt; container. TasmoCompiler was developed by user &lt;a href=&quot;https://github.com/benzino77&quot;&gt;benzino77&lt;/a&gt; to do only one thing, namely compile a Tasmota firmware with customized settings via a simple (web) GUI.  To run it in a Docker container, &lt;strong&gt;open a terminal&lt;/strong&gt; and pull the image, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull benzino77/tasmocompiler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-pull.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-pull.jpg&quot; alt=&quot;tasmocompiler pull&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;If you run into permission issues, either append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to any docker command or create and add your current user to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; group, as follows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo groupadd docker &amp;amp;&amp;amp; sudo usermod -aG docker $USER&lt;/code&gt;. Other post-install configurations for Linux users can be found at the official docs: &lt;a href=&quot;https://docs.docker.com/engine/install/linux-postinstall/&quot;&gt;Optional post-install steps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; container, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm --name tasmocompiler -p 3000:3000 -e DEBUG=server,git,compile benzino77/tasmocompiler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-run.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-run.jpg&quot; alt=&quot;tasmocompiler run&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;Of course, if you use &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt; or other application for managing your docker containers, you can also pull and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; via the application instead of a terminal.  In this case, translate the commands to your application.  This also applies to users who are not running Docker on Linux.&lt;/p&gt;

&lt;p&gt;This will create a container named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; that has a web GUI exposed on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt; of the local machine.  To access it, go to the following address using any web-browser:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:3000&quot;&gt;&lt;strong&gt;http://localhost:3000&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;customizing-the-tasmota32-webcam-firmware&quot;&gt;Customizing the tasmota32-webcam firmware&lt;/h2&gt;
&lt;p&gt;Now that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; container is running, we can compile a new customized Tasmota firmware for the ESP32-cam in just a few simple steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open any web-browser and navigate to &lt;a href=&quot;http://localhost:3000&quot;&gt;&lt;strong&gt;http://localhost:3000&lt;/strong&gt;&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;Tasmota source code&lt;/strong&gt;, select &lt;em&gt;Refresh Source&lt;/em&gt; (this can take a few minutes, depending on your connection) and afterwards, &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step01.jpg&quot; alt=&quot;tasmocompiler step 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;WiFi configuration&lt;/strong&gt;, add your wifi credentials and hit &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step02.jpg&quot; alt=&quot;tasmocompiler step 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;Select Features&lt;/strong&gt;, select &lt;strong&gt;ESP32 webcam&lt;/strong&gt; as your board.  For this example, we are adding the &lt;strong&gt;BME280 sensor module&lt;/strong&gt; and therefore, in feature, we add the &lt;em&gt;Temp/Hum sensors&lt;/em&gt; feature to support the BME280 sensor. If you are attaching another device, check the appropriate feature to support it here (e.g., check &lt;em&gt;Displays (I2C/SPI)&lt;/em&gt; to support an OLED display module).  When done, hit &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step03.jpg&quot; alt=&quot;tasmocompiler step 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is not necessary to edit any parameter in &lt;strong&gt;Custom Parameters&lt;/strong&gt;, so hit &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, in &lt;strong&gt;Select Version and Compile&lt;/strong&gt;, choose a Tasmota version (&lt;em&gt;development&lt;/em&gt; is usually fine but if you run into issues later on, try the latest stable) and base language for the interface.  Then, select &lt;strong&gt;Compile&lt;/strong&gt; and wait until it is done (this can take a few minutes);&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step05.jpg&quot; alt=&quot;tasmocompiler step 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step06.jpg&quot; alt=&quot;tasmocompiler step 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it is done compiling, check that the firmware was successfully compiled and if all looks good, &lt;strong&gt;download the firmware&lt;/strong&gt; (and optionally, any of the other files);&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step07.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step07.jpg&quot; alt=&quot;tasmocompiler step 07&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you run into issues, check the &lt;a href=&quot;https://github.com/benzino77/tasmocompiler/issues&quot;&gt;issues tab&lt;/a&gt; of the TasmoCompiler repository for open and closed issues similar to the one you are experiencing. If you do not find anything similar, open a new issue there to warn the developer know about it.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-firmware&quot;&gt;Updating the firmware&lt;/h2&gt;
&lt;p&gt;If you have already flashed a pre-compiled Tasmota binary onto the ESP32-cam, then it is possible to update the firmware over-the-air (OTA).  To update the firmware OTA, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and go to the IP address of your Tasmota ESP32-cam;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then navigate to &lt;strong&gt;Firmware Upgrade&lt;/strong&gt; &amp;gt; &lt;strong&gt;Upgrade by file upload&lt;/strong&gt; &amp;gt; Browse and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware.bin&lt;/code&gt; file you compiled with TasmoCompiler.  Afterwards, select &lt;strong&gt;Start Upgrade&lt;/strong&gt; and wait until it is done;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The device will reboot automatically and once it is back on, it should connect to the wireless network configured with TasmoCompiler.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you have not flashed any pre-compiled Tasmota binary, simply switch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; file mentioned in &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware.bin&lt;/code&gt; file you compiled with TasmoCompiler.&lt;/p&gt;

&lt;h2 id=&quot;wiring-and-template-configuration&quot;&gt;Wiring and template configuration&lt;/h2&gt;
&lt;p&gt;Suppose we have a &lt;strong&gt;BME280 sensor module&lt;/strong&gt; wired to an ESP32-cam (AI-Thinker) board as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-bme280.jpg&quot; alt=&quot;Wiring BME280&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Note that to use the VCC output pin as a 3.3V output pin, you need to make sure the board has a &lt;strong&gt;resistor connecting the two 3v3 pads&lt;/strong&gt; and nothing connecting the two 5V pads. This was indicated by the red arrow in the image above. From my experience, a resistor connecting the 3v3 pads is the default for all ESP32-cam AI-Thinker boards, meaning that it should output 3.3V by default and if you want to change it to 5V, you need to desolder the resistor between the 3v3 pads and solder it between the 5V pads.  However, make sure to double check this before wiring any peripheral that will use the VCC out pin from the board.&lt;/p&gt;

&lt;p&gt;Then, now that the board is running a customized firmware that should support the BME280 sensor module, all that we need to do is to configure its template to inform the program about (a) which GPIO pins the peripheral is using and (b) how the pins should be configured.&lt;/p&gt;

&lt;p&gt;To configure the ESP32-cam template, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and go to the IP address of your Tasmota ESP32-cam;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the instructions in &lt;a href=&quot;#updating-the-template&quot;&gt;&lt;strong&gt;Updating the template&lt;/strong&gt;&lt;/a&gt; if you have not done that before. Afterwards, navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Other&lt;/strong&gt; &amp;gt; &lt;strong&gt;Other parameters&lt;/strong&gt; &amp;gt; &lt;strong&gt;Template&lt;/strong&gt; and make sure the &lt;strong&gt;Activate&lt;/strong&gt; is checked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Template&lt;/strong&gt;.  The name of the template should be the same one you specified in the previous step.  Remember that according to the wiring of the BME280 board, &lt;strong&gt;SDA&lt;/strong&gt; and &lt;strong&gt;SCL&lt;/strong&gt; are connected to pins &lt;strong&gt;GPIO14&lt;/strong&gt; and &lt;strong&gt;GPIO15&lt;/strong&gt;, respectively.  Therefore, &lt;strong&gt;find the GPIO14 pin&lt;/strong&gt; and instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I2C SDA&lt;/code&gt;; and similarly, &lt;strong&gt;find the GPIO15 pin&lt;/strong&gt; and instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I2C SCL&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-template-bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-template-bme280.jpg&quot; alt=&quot;BME280 template&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hit &lt;em&gt;Save&lt;/em&gt; and wait for the device to reboot. Once it comes back on, the firmware should automatically detect and configure the I2C device and on the &lt;strong&gt;Main Page&lt;/strong&gt;, there should be some of the metrics associated with the device.  Because we are connecting the board to a BME280 sensor module, the Main page will show measures for the ambient temperature, humidity, dew point, and pressure.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-bme280.jpg&quot; alt=&quot;ESP32-cam BME280&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Of course, different peripherals will show different metrics, buttons, sliders, etc., on the main page. As before, the camera stream should be available on the main page and via port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;81&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/stream&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cam.mjpeg&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes the tutorial on how to install and configure the Tasmota32 webcam server onto the ESP32-cam.  As usual, if you spot an error or want to share an idea, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.  I try to keep my articles updated as much as possible to reflect my current understanding about the topic.  All such updates are noted in the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="iot" /><category term="esp32" /><category term="tasmota" /><category term="mqtt" /><category term="cam" /><category term="webcam" /><category term="surveillance" /><category term="wifi" /><category term="wireless" /><category term="network" /></entry><entry><title type="html">Repurposing external HDD enclosures into button boxes for the Raspberry Pi</title><link href="/blog/Rpi-button-box-ehdd-enclosure/" rel="alternate" type="text/html" title="Repurposing external HDD enclosures into button boxes for the Raspberry Pi" /><published>2020-12-18T12:08:00-03:00</published><updated>2020-12-18T12:08:00-03:00</updated><id>/blog/Rpi-button-box-ehdd-enclosure</id><content type="html" xml:base="/blog/Rpi-button-box-ehdd-enclosure/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Dec 18th, 2020&lt;/strong&gt;: Publication of the original guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hard disk drives (HDDs) are often sold in an external enclosure with easy-to-use interfaces as a detachable, semi-mobile data storage solution. Every so often, however, their price goes below the market price for an equivalent internal HDD and when that happens, many of us will buy them only to remove the HDD from its external enclosure and use it as a regular HDD in our PCs and servers–a practice called &lt;strong&gt;shucking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/amazon-seagate-4tb-ehdd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/amazon-seagate-4tb-ehdd.jpg&quot; alt=&quot;Amazon ad Seagate expansion 4tb&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what do you do with the external enclosure afterwards? Do you throw it away?  Well, you could do that but here I’ll show that such enclosures can be repurposed into nice looking &lt;strong&gt;button boxes&lt;/strong&gt; for most single board computers (SBCs).  More specifically, I’ll transform an old, shucked &lt;a href=&quot;https://www.newegg.com/seagate-expansion-4tb/p/N82E16822178354&quot;&gt;&lt;strong&gt;Seagate Expansion 4TB USB3.0 HDD&lt;/strong&gt; (STBV4000100)&lt;/a&gt; into a button box for the &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;&lt;strong&gt;Raspberry Pi&lt;/strong&gt; (RPi)&lt;/a&gt;. Here’s a preview of how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons.jpg&quot; alt=&quot;RPi and buttons&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot; alt=&quot;RPi and buttons - Closed 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed-2.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed-2.jpg&quot; alt=&quot;RPi and buttons - Closed 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first section of this tutorial, I described a few general points to consider when &lt;a href=&quot;#assessment&quot;&gt;planning your button box&lt;/a&gt;, such as whether the SBC fits, if it already has holes, and so on.  Then, I go into the specifics of my own case, such as the &lt;a href=&quot;#hardware&quot;&gt;hardware components&lt;/a&gt; of it (e.g., buttons, switches), the &lt;a href=&quot;#software&quot;&gt;software&lt;/a&gt; used (Pi OS and a Python button box controller), and finally, the &lt;a href=&quot;#assembly&quot;&gt;assembly&lt;/a&gt; of hardware and software into a functional button box.  If that sounds good, let’s get started.&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;. I do not recommend to use an external HDD enclosure as a button box to control &lt;strong&gt;mains power&lt;/strong&gt;.  None of those enclosures was designed to have 110-220V AC running inside of it and things might melt and catch fire, and of course, you don’t want someone to get electrocuted because of a loose mains cable.  Even though some of the buttons and switches might be rated 110-220V AC at 10A, for instance, to be safe, stick to &lt;strong&gt;low voltage DC&lt;/strong&gt; inside the button box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;assessment&quot;&gt;Assessment&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Does the enclosure have a &lt;strong&gt;flat surface&lt;/strong&gt; to attach the buttons?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the SBC &lt;strong&gt;fit&lt;/strong&gt; inside of the enclosure?&lt;/p&gt;

    &lt;p&gt;Height-wise, make sure there’s a little bit of room for the jumper cables that will be connected to the GPIO pins–&lt;em&gt;at least&lt;/em&gt; 5cm (roughly 2 inches) of space above the GPIO pins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the buttons fit inside the enclosure?&lt;/p&gt;

    &lt;p&gt;Some buttons have fairly long terminals that could hit the bottom of the enclosure once the lid is closed.  You also need to take into consideration that jumper cables will be soldered to the button’s terminal and might need additional room.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the SBC will go inside of the enclosure, does it have holes to &lt;strong&gt;remove hot air from inside&lt;/strong&gt;?&lt;/p&gt;

    &lt;p&gt;Depending on the SBC and usage, you might need to plan a small fan to remove the hot air generated by the board. However, this is likely not necessary for external HDD enclosures because heat will also harm HDDs and manufacturers will design their external cases with that in mind.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you repurpose some of the &lt;strong&gt;existing holes&lt;/strong&gt;?&lt;/p&gt;

    &lt;p&gt;It’s much easier to use existing holes than making new ones and they usually look better because the case was designed with them in mind, as opposed to the new ones.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is it &lt;strong&gt;safe to drill&lt;/strong&gt; holes in the enclosure?&lt;/p&gt;

    &lt;p&gt;Some materials can crack/break easily and a few can be harmful to you if you do not take the necessary precautions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;SBC:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspberry Pi 3B&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/rpi-model-3b.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/rpi-model-3b.jpg&quot; alt=&quot;RPi model 3B&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External HDD enclosure:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.newegg.com/seagate-expansion-4tb/p/N82E16822178354&quot;&gt;Seagate Expansion 4TB USB3.0 HDD (STBV4000100)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/seagate-external-enclosure.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/seagate-external-enclosure.jpg&quot; alt=&quot;Seagate HDD enclosure&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/s?k=push+button&quot;&gt;Push buttons&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;02x Red push button&lt;/li&gt;
      &lt;li&gt;02x Black push button&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;02x Green push button&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/push-button.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/push-button.jpg&quot; alt=&quot;Push Button&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/s?k=toggle+switch&quot;&gt;Toggle switches&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;03x OFF/on toggle switch&lt;/li&gt;
      &lt;li&gt;02x Red safety cover for the toggle switch&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;01x “ON/OFF” label for the toggle switch&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/toggle-switch.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/toggle-switch.jpg&quot; alt=&quot;Toggle Switch&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;(https://www.amazon.com/s?k=active+buzzer)&quot;&gt;Buzzer&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;01x Active buzzer&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/buzzer.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/buzzer.jpg&quot; alt=&quot;Buzzer&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Cover:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/s?k=carbon+fiber+vinyl+wrap&quot;&gt;Textured vynil/PVC film&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;The size depends on the surface area you want to cover with it.  My suggestion is to use a &lt;strong&gt;thin&lt;/strong&gt; film instead of a thick layer because it is flexible and therefore, easy to attach to the enclosure.  By the way, these things are actually super useful to have around if you are into DIY projets.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/textured-vynil-film.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/textured-vynil-film.jpg&quot; alt=&quot;Vynil Film&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cables and related materials:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;18x &lt;a href=&quot;https://www.amazon.com/s?k=dupont+wires&quot;&gt;Female-X Dupont/jumper wires&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;The female side connects to GPIO pins and the other side can be whatever because is soldered to terminals or otherwise attached to them.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/jumper-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/jumper-cables.jpg&quot; alt=&quot;Jumper Cables&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;06x &lt;a href=&quot;https://www.amazon.com/s?k=heat+shrink+tube&quot;&gt;Heat shrink tube&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;Cut them in half to protect both terminals of each push button&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/heat-shrink-tube.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/heat-shrink-tube.jpg&quot; alt=&quot;Heat Shrink Tube&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=electrical+tape&quot;&gt;Electrical tape&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/electrical-tape.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/electrical-tape.jpg&quot; alt=&quot;Electrical Tape&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other tools
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/s?k=soldering+kit&quot;&gt;Basic soldering kit&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/soldering-kit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/soldering-kit.jpg&quot; alt=&quot;Soldering Kit&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Any low power drill or even a manual &lt;a href=&quot;https://www.amazon.com/s?k=hand+drill&quot;&gt;hand drill&lt;/a&gt;: An electric drill will save you a lot of time.  For better results, use a step drill bit after making the center hole.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/step-drill-bit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/step-drill-bit.jpg&quot; alt=&quot;Step Drill Bit&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Operating System (OS):
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/&quot;&gt;Raspberry Pi OS Lite&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raspbian GNU/Linux 10 (buster)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lite edition&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Kernel: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.4&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Release date: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;December 2nd 2020&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Button box controller:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/cgomesu/rpi-button-box&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt;&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;A custom-made controller written in Python&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controller requirements:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.python.org&quot;&gt;Python&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.7.3&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt;&lt;/a&gt;: An interface to GPIO devices&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argparse&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/logging.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/signal.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess&lt;/code&gt;&lt;/a&gt;: Standard, built-in libraries&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optional:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/logrotate&quot;&gt;Logrotate&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.14.0&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Manage the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.log&lt;/code&gt; log files generated by the controller&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rpi-button-box-controller&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; controller&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Core program for a Raspberry Pi button box controller that uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; Python library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wrote this program with the current project in mind–that is, a 40-pins Raspberry Pi with six push buttons and three switches, one of them being a power on/off for the box–but hopefully, my comments and documentation will be enough to allow adapting the program to multiple types of button boxes.  In this section, I’ll explain the program’s main logic and its functionalities.  The installation procedure and usage examples are described in &lt;a href=&quot;#assembly&quot;&gt;assembly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; library is at the core of the button box controller.  The library makes it very easy to enable GPIO devices with just a few lines of code because it leaves much of the device configuration and cleanup procedures to the background.  All that we need to do is create objects for the GPIO devices of the appropriate class, which in our case is the &lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/api_input.html#button&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt;&lt;/a&gt; class and &lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/api_output.html#buzzer&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buzzer&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; controller’s main logic is explained next.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/opt/rpi-button-box/button-box.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%(asctime)s.%(msecs)03d %(levelname)s %(module)s : %(message)s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;datefmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%Y-%m-%d %H:%M:%S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Started the button box controller'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;The program starts by configuring and initializing the logging of controller-related events, such as whether button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G1&lt;/code&gt; was pressed, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO&lt;/code&gt; pins are being used, and so on. Then, it asks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_buttons&lt;/code&gt; for a list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buttons&lt;/code&gt; to be used by the controller, as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Loading buttons...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green #1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g1_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'black #1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b1_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'red #1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r1_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green #2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g2_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'black #2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b2_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'red #2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r2_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'power'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s1_held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'middle S2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s2_held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'right S3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s3_held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s3_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Buttons loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Notice that it starts by creating &lt;em&gt;new&lt;/em&gt; attributes for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; class, which are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd*&lt;/code&gt;. I found this to be useful when working with multiple buttons because it allows me to define events on a &lt;em&gt;per button basis&lt;/em&gt;.  For example, one might want to set different triggers for &lt;strong&gt;switches&lt;/strong&gt; and &lt;strong&gt;push buttons&lt;/strong&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute will help differentiate those.  Similarly, one might want to execute a different command for a button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt; than a button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt;.  It goes without saying that if your box does not follow the same layout as mine, you have to edit this part of the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Going back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Trying to find a power switch...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'power'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Power switch found at {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Waiting for the power button ({}) to be turned ON...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Power switch was turned ON by user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# wait for the power button to enter is_held state
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In my original design for the button box, I had a toggle, on/off &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt; that I wanted to use to &lt;strong&gt;enable&lt;/strong&gt; and &lt;strong&gt;disable&lt;/strong&gt; the button box controller.  The code above handles the activation of the button box depending on the state of a button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;push_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;switches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_held&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_released&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_held&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_released&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Configured the switch button ({0}) at {1}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_released&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_released&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Configured the push button ({0}) at {1}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here, the program learns what triggers each button.  As mentioend before, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; attr is used to set different triggers for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; buttons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Of note, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_*&lt;/code&gt; properties will pass the device that activated it to a function that takes a single parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btn&lt;/code&gt;), and because there are multiple new attributes for each button object, it is possible to use a single function to control all buttons by reading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btn&lt;/code&gt; attributes.  For example, take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event_held&lt;/code&gt;, in which we have code for invoking an external command/script using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btn.cmdheld&lt;/code&gt; attribute:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;event_held&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The button labeled &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; at {1} was held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Detected a HELD event by {0} : {1} button : {2}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Started running the following command: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Popen'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Finished invoking the script at &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Finished waiting for the following command: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Going back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'buzzer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'buzzer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Configured a buzzer at {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;This configures the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buzzer&lt;/code&gt; object to be activated whenever a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; button is pressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The button box is now turned ON. To close it, release the power button or press Ctrl+C.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The button box is ON and waiting for user input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Received a signal to stop.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOZeroError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GPIOZero error: {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;And finally, at the end of our main logic, the program is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pause&lt;/code&gt;d to wait for a user input to trigger an event (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_pressed&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_held&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_released&lt;/code&gt;). This is a better alternative to using an infinite loop (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while True&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a little bit more to the code than that but this covers the most important aspects of it. &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box&quot;&gt;Check the repo for updates&lt;/a&gt;, &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box/discussions&quot;&gt;start a discussion&lt;/a&gt; if you had an idea, or &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box/issues&quot;&gt;open an issue&lt;/a&gt; if you’re having trouble with the program.&lt;/p&gt;

&lt;h1 id=&quot;assembly&quot;&gt;Assembly&lt;/h1&gt;

&lt;h2 id=&quot;installing-the-software&quot;&gt;Installing the software&lt;/h2&gt;

&lt;h3 id=&quot;raspberry-pi-os&quot;&gt;Raspberry Pi OS&lt;/h3&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&quot;&gt;the official instructions to install the Raspberry Pi OS&lt;/a&gt;. If you don’t feel like it, here’s a brief summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the image file from the official repository.&lt;/li&gt;
  &lt;li&gt;Verify checksum.  On Linux distros, run the following, changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img.zip&lt;/code&gt; for the filename of the downloaded OS zipped image:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sha256sum img.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Flash onto a microSD card with &lt;a href=&quot;https://www.balena.io/etcher/&quot;&gt;balenaEtcher&lt;/a&gt; or similar application.&lt;/li&gt;
  &lt;li&gt;For headless access, add an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; file to the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boot&lt;/code&gt; drive.&lt;/li&gt;
  &lt;li&gt;Insert the microSD card into the RPi and boot it up.&lt;/li&gt;
  &lt;li&gt;Find the RPi IP and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh pi@IP&lt;/code&gt; and the default passwd is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raspberry&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Config the RPi with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo raspi-config&lt;/code&gt; (locale, time, wireless, etc.) then &lt;strong&gt;reboot it&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Reconnect to the RPi and update the package list &amp;amp;&amp;amp; upgrade all eligible pkgs, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot the device once again and you’re done!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;python3-rpi-button-box-and-installing-the-requirements&quot;&gt;Python3, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt;, and installing the requirements&lt;/h3&gt;
&lt;p&gt;The button box controller was developed for the Lite version of the &lt;a href=&quot;https://www.raspberrypi.org/software/&quot;&gt;Raspberry Pi OS&lt;/a&gt; but it should work with other similar systems for single board computers (e.g., &lt;a href=&quot;https://www.armbian.com/&quot;&gt;Armbian&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The following instructions assume you’re logged in with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pi&lt;/code&gt; user with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; permission. (This is not a requirement but if different, make sure to change file permissions accordingly.  This applies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; service file and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logrotate/button-box&lt;/code&gt; config as well.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; to install required programs
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install git python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Clone the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; repo in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo git clone https://github.com/cgomesu/rpi-button-box.git
sudo chown -R pi rpi-button-box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Python libraries from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install -r /opt/rpi-button-box/requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;If you get a warning that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.local/bin&lt;/code&gt; is not in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, then add it to your existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; as follows:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=/home/pi/.local/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;and then append it to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export PATH=/home/pi/.local/bin:$PATH&quot; | tee -a /home/pi/.bashrc &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.py&lt;/code&gt; and read its usage
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/rpi-button-box
./button-box.py -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If you wish to skip to a more detailed description of the button box controller, go to &lt;a href=&quot;#using-the-button-box-controller&quot;&gt;Using the button box controller&lt;/a&gt; section in this tutorial.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;configure-logrotate&quot;&gt;Configure logrotate&lt;/h3&gt;
&lt;p&gt;(Optional.) The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; controller generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.log&lt;/code&gt; file upon execution where it stores a couple of controller-related messages, such as initialization configs and button presses, releases, and so on.  Over time, this file will grow forever unless you manually rotate it.  Obviously, you don’t need to do that.  The easiest way to rotate log files in a GNU/Linux system is to configure &lt;a href=&quot;#&quot;&gt;logrotate&lt;/a&gt; to manage your log files.  I’ve already written such a config file for the button box controller (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logrotate.d/button-box&lt;/code&gt;).  To enable it, just copy the config to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/logrotate.d/&lt;/code&gt; directory, as follows&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /opt/rpi-button-box/logrotate.d/button-box /etc/logrotate.d/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want, you can edit the rotation settings in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box&lt;/code&gt;.  The default should be good enough though.&lt;/p&gt;

&lt;h2 id=&quot;building-the-button-box&quot;&gt;Building the button box&lt;/h2&gt;
&lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;ATTENTION.&lt;/strong&gt;  If you have never used a drill before, take a few minutes to learn about best practices first.  When drilling holes into the case, make sure to secure the case very well before you begin.  When soldering cables to terminals, use a fan to move the fumes away from you and anyone else.  Wash your hands very well afterwards.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;REMINDER.&lt;/strong&gt;  Inside the button box, stick to &lt;strong&gt;low voltage DC&lt;/strong&gt;.  External HDD enclosures were not made to house mains power and unless you have taken the time to learn how to handle it, do not tinker with it.&lt;/p&gt;

&lt;p&gt;After the &lt;a href=&quot;#assessment&quot;&gt;assessment&lt;/a&gt;, it’s DIY time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start by drawing the location of each button on the box.  Use a ruler and pencil.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-drawing.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-drawing.jpg&quot; alt=&quot;Drawing&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Then, drill the holes and check that the buttons fit them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cut the vynil film and attach it to the surface of your button box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the holes by gently pressing the surface of the vynil film.  Then, get a scissors or other cutting tool and either cut a circle where the hole is or cut an X where the hole is and fold the vynil film inwards.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the buttons to the enclosure.  It should look like this now:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-buttons.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-buttons.jpg&quot; alt=&quot;Buttons&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Flip the case and it’s time to solder the jumper cables to each button terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tricks for working with dupont cables:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/eI3fxTH6f6I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Because the buttons use a common ground, you &lt;em&gt;could&lt;/em&gt; solder them together (terminal to terminal or splicing). However, if you want to reuse the buttons for another project in the future, or simply replace one of them, this will make it much harder to do that.  I wanted to make each button detachable without any desoldering, so I used the following idea for a custom-made header:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/OC3aAuhU3og&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If your heat shrinking tubes are pretty long, cut them.  Also, remember to insert the tubes into the cable before soldering.  (For a hobbyist like me, it’s very easy to forget that. Ugh!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If at all possible, use different colors for ground (black, grey) and live/vcc (any thing else).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After it’s all done, it should look like this:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering.jpg&quot; alt=&quot;Soldered Cables&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering-2.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering-2.jpg&quot; alt=&quot;Soldered Cables 2&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you have a &lt;a href=&quot;https://www.amazon.com/s?k=multimeter&quot;&gt;multimeter&lt;/a&gt;, &lt;strong&gt;test all your connections&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the dupont cables to the RPi GPIO pins according to the following wiring schema:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/button-box-wiring.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/button-box-wiring.jpg&quot; alt=&quot;Wiring&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;This uses the &lt;strong&gt;internal pull-up resistor&lt;/strong&gt; to simplify the wiring (&lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/_modules/gpiozero/input_devices.html&quot;&gt;enabled by default in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; class of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; Python library&lt;/a&gt;). Otherwise, check the wiring on my &lt;a href=&quot;https://github.com/cgomesu/rpi-buttons&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-buttons&lt;/code&gt;&lt;/a&gt; repo for an example of how to wire &lt;strong&gt;current-limiting&lt;/strong&gt; (1k ohms) resistors and &lt;strong&gt;pull-down&lt;/strong&gt; (10k ohms) resistors.  However, if you choose the latter alternative, you’ll have to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; deafult settings for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Secure the cables as much as possible:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-secure.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-secure.jpg&quot; alt=&quot;Securing the Cables&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Before closing the box&lt;/strong&gt;, &lt;a href=&quot;#using-the-button-box-controller&quot;&gt;test your button box controller&lt;/a&gt;.  Remember that once closed, these cases are not meant to be (easily) opened.  If there’s anything that needs to be connected to the Raspberry Pi, this is the time to do so.  For example, I wanted to make extra GPIO pins available to an LCD and added power and ethernet cable extensions:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-extra-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-extra-cables.jpg&quot; alt=&quot;Extra Cables&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Once you got everything working as intended&lt;/strong&gt;, close the box.  Try to leave the area where the cpu heatsink is as clear as possible.  Be gentle when closing the box and guide the cables where they should be while closing the box (use a pen or something).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot; alt=&quot;RPi and buttons - Closed 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go play with it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-the-button-box-controller&quot;&gt;Using the button box controller&lt;/h2&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: button-box.py [-h] [--buzzer BUZZER] [--cmd {Popen,run}]
                     [--g1_pressed G1_PRESSED] [--g1_released G1_RELEASED]
                     [--s1_held S1_HELD] [--s1_released S1_RELEASED] [-i] [-d]

RPi button box controller. Repo: https://github.com/cgomesu/rpi-button-box

optional arguments:
  -h, --help            show this help message and exit
  --buzzer BUZZER       If installed, the buzzer's GPIO number.
  --cmd {Popen,run}     Popen: run external scripts in a NON-BLOCKING fashion.
                        run: run external scripts in a BLOCKING fashion.
                        Default=run
  --g1_pressed G1_PRESSED
                        /path/to/script to run when G1 is pressed. The
                        --btn_pressed arg is available to other PUSH buttons
                        as well.
  --g1_released G1_RELEASED
                        /path/to/script to run when G1 is released. The
                        --btn_released arg is available to other PUSH buttons
                        as well.
  --s1_held S1_HELD     /path/to/script to run when S1 is held. The
                        --btn_held arg is available to other SWITCHES as well.
  --s1_released S1_RELEASED
                        /path/to/script to run when S1 is released. The
                        --btn_released arg is available to other SWITCHES as
                        well.
  -i, --info            Show the board information.
  -d, --debug           Print additional messages to the terminal.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned, there are &lt;strong&gt;hidden arguments&lt;/strong&gt; for passing external scripts to be executed upon a button event, such as pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G2&lt;/code&gt;, or releasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3&lt;/code&gt;.  More specifically, in addition to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--g1_*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s1_*&lt;/code&gt; args shown in the help output, the program accepts args for any of the other seven buttons, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;script for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pressed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;released&lt;/code&gt; events: the &lt;strong&gt;push buttons&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--g1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--b1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--r1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--g2_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--b2_*&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--r2_*&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;script for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;held&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;released&lt;/code&gt; events: the &lt;strong&gt;switches&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s2_*&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s3_*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The script generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.log&lt;/code&gt; log file to keep track of controller-related events.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Output info about the board
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the controller in debug mode (prints more messages to the terminal) and enable the buzzer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO4&lt;/code&gt;)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py -d --buzzer 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the controller with a buzzer and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/rpi-button-box/scripts/template.sh&lt;/code&gt; whenever the push button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R2&lt;/code&gt; is &lt;strong&gt;pressed&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py --buzzer 4 \
--r2_pressed '/opt/rpi-button-box/scripts/template.sh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Same as before, but don’t wait for the external script to finish running (&lt;strong&gt;non-blocking&lt;/strong&gt; command execution):
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py --buzzer 4 --cmd Popen \
--r2_pressed '/opt/rpi-button-box/scripts/template.sh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;run-the-controller-as-a-service&quot;&gt;Run the controller as a service&lt;/h3&gt;
&lt;p&gt;If you’re using options different than the default values, first edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd/button-box.service&lt;/code&gt; file to include those options into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecStart=&lt;/code&gt; command execution.  (Reminder: If you’ve installed Python3 libraries with a user different than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pi&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; dir is owned by another user, you’ll have to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd/button-box.service&lt;/code&gt; file to reflect such changes. Otherwise, you will run into errors related to permission.) Then, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.py&lt;/code&gt; as a service, as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd/button-box.service&lt;/code&gt; file to your systemd directory
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /opt/rpi-button-box/systemd/button-box.service /lib/systemd/system/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable the service and start it
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable button-box.service
sudo systemctl start button-box.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Check the service status to make sure it’s running without issues
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status button-box.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bash-script-template&quot;&gt;Bash script template&lt;/h3&gt;
&lt;p&gt;I’ve included a template for bash scripts on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/template.sh&lt;/code&gt; that anyone can use to create their customized set of commands to run upon a button event.  Just copy the template, rename it, edit it according to your needs, and when running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.py&lt;/code&gt; controller, add the full path to the new script to one (or more) of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--btn_*&lt;/code&gt; arguments.  For example:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py --buzzer 4 \
--g1_pressed '/opt/rpi-button-box/scripts/notification.sh' \
--b1_pressed '/opt/rpi-button-box/scripts/switch_cameras.sh' \
--r1_pressed '/opt/rpi-button-box/scripts/lights_toggle.sh' \
--g2_pressed '/opt/rpi-button-box/scripts/test_connectivity.sh' \
--b2_pressed '/opt/rpi-button-box/scripts/shutdown.sh' \
--r2_pressed '/opt/rpi-button-box/scripts/reboot.sh' \
--s2_held '/opt/rpi-button-box/scripts/alarm_on.sh' \
--s2_released '/opt/rpi-button-box/scripts/alarm_off.sh' \
--s3_held '/opt/rpi-button-box/scripts/emergency.sh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;alternatives-to-python&quot;&gt;Alternatives to Python&lt;/h2&gt;
&lt;p&gt;There are many other languages you can use to make your own button box controller. &lt;a href=&quot;https://nodered.org/&quot;&gt;&lt;strong&gt;Node-RED&lt;/strong&gt;&lt;/a&gt;, for example, is a nice alternative to users unfamiliarized with programming languages.  It uses flow-based programming and has built-in input nodes for the RPi GPIO pins, which makes programming a button box a matter of connecting a line between two nodes.  Also, it makes very easy to create a web dashboard for your button-box that you can access from anywhere.  Check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This conlcudes the tutorial on how to repurpose an old external HDD enclosure into a button box for the Raspberry Pi (or any other SBC).  Check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.  If you have any questions, feel free to &lt;a href=&quot;/contact/&quot;&gt;get in touch with me&lt;/a&gt;.  For anything related to the controller, please visit the &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box&quot;&gt;rpi-button-box repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="DIY" /><category term="raspberrypi" /><category term="rpi" /><category term="hdd" /><category term="enclosure" /><category term="button" /><category term="box" /></entry><entry><title type="html">Mesh networking: A guide to using free and open-source software with common hardware</title><link href="/blog/Mesh-networking-openwrt-batman/" rel="alternate" type="text/html" title="Mesh networking: A guide to using free and open-source software with common hardware" /><published>2020-12-07T12:10:00-03:00</published><updated>2020-12-07T12:10:00-03:00</updated><id>/blog/Mesh-networking-openwrt-batman</id><content type="html" xml:base="/blog/Mesh-networking-openwrt-batman/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Feb 17th, 2021&lt;/strong&gt;: Per a reader’s suggestion (Joshua), I added a &lt;a href=&quot;#vi-cheat-table&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; cheat table&lt;/a&gt; that has a summary of the main commands, and in the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/a&gt; section, I included additional instructions on how to copy and paste the configuration files from one mesh node to another using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;.  (Alternatively, it’s also possible to do so using Luci’s backup/restore option.)&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 9th, 2021&lt;/strong&gt;, Update #2: Added instructions on how to automatically upgrade all installed packages with a single command.  This information is in &lt;a href=&quot;#updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 9th, 2021&lt;/strong&gt;, Update #1: Added a new section about &lt;a href=&quot;#hardware-specific-configurations&quot;&gt;hardware-specific configurations&lt;/a&gt; that are sometimes required for enabling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode of operation.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Dec 7th, 2020&lt;/strong&gt;: Publication of the original guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this tutorial, we will learn how to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;&lt;strong&gt;mesh networks&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;IEEE 802.11s&lt;/strong&gt;&lt;/a&gt;) using &lt;a href=&quot;https://openwrt.org/&quot;&gt;&lt;strong&gt;OpenWrt&lt;/strong&gt;&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_link_layer&quot;&gt;layer-2&lt;/a&gt; implementation of the &lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;, called &lt;a href=&quot;https://www.kernel.org/doc/html/v4.15/networking/batman-adv.html&quot;&gt;&lt;strong&gt;batman-adv&lt;/strong&gt;&lt;/a&gt;.  All the software mentioned here is &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;open-source&lt;/strong&gt;, as opposed to commercial alternatives (&lt;a href=&quot;https://unifi-mesh.ui.com&quot;&gt;UniFi Mesh&lt;/a&gt; or &lt;a href=&quot;https://store.google.com/us/product/nest_wifi&quot;&gt;Google’s Nest Wifi&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is not meant to be an exhaustive presentation of any of the covered topics. If you have suggestions on how to improve this guide, feel free to &lt;a href=&quot;/contact/&quot;&gt;get in touch with me&lt;/a&gt;. I’m always eager to learn new things and share them. Also, I plan on updating this article every once in a while to best reflect my knowledge about the topics covered here and to add information provided by the readers. Check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-am-i-writing-this-guide&quot;&gt;Why am I writing this guide?&lt;/h1&gt;
&lt;p&gt;Even though the concept of mesh networking has been around for quite some time now, the documentation of its implementation is still scarce/nichey, proprietary, or outdated.  I don’t feel qualified to speculate on why this is so but I find it odd because many of the radio devices found in popular wireless routers actually support mesh networking–but the original firmware rarely supports it.&lt;/p&gt;

&lt;p&gt;My intention with this tutorial is to help closing the gap between concept and implementation of mesh networking using up-to-date software that anyone can download and install on cheap, commonly available hardware–primarily consumer wireless routers (from old to new, single- or multi-band) but the principles should be extendable to any cellphones, laptops, PCs or servers running &lt;strong&gt;Linux&lt;/strong&gt;.  The content is partially based on my own experience and builds upon the work of other, much more talented individuals who shared their knowledge on the Web.  More specifically, the content is notably influenced by the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brian Innes workshop about using Raspberry Pis to create a mesh network for sharing sensor data wirelessly (&lt;a href=&quot;https://github.com/binnes/WiFiMeshRaspberryPi&quot;&gt;Github repo&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Andreas Spiess &lt;a href=&quot;https://www.youtube.com/watch?v=TY6m6fS8bxU&quot;&gt;LoRa mesh project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maintaners of the &lt;a href=&quot;https://openwrt.org/docs/start&quot;&gt;OpenWRT documentation&lt;/a&gt; and the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;B.A.T.M.A.N. wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Multiple users from the OpenWrt forum who shared their opinions over the years. To name a few,  the users &lt;a href=&quot;https://forum.openwrt.org/u/jeff&quot;&gt;jeff&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/mcarni&quot;&gt;mcarni&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/oavaldezi&quot;&gt;oavaldezi&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/slh&quot;&gt;slh&lt;/a&gt;, and many others. Thanks for keeping the posts public.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Get familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; files in OpenWrt devices (namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireless&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;) to quickly and permanently configure mesh nodes.&lt;/li&gt;
  &lt;li&gt;Edit files directly from the terminal using the default text editor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Configure OpenWrt devices to play one of three possible roles in the network: (a) mesh node, (b) mesh + bridge node, or (c) mesh + gateway node.&lt;/li&gt;
  &lt;li&gt;Install and configure the Kernel module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on an OpenWrt device using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt; package manager.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to test, debug, and monitor connectivity within the mesh.&lt;/li&gt;
  &lt;li&gt;Add encryption to the mesh network with the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use VLANs to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; networks within the mesh using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;From this point forward, the article is divided into four main parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/a&gt;: &lt;em&gt;Optional for advanced users.&lt;/em&gt; Brief introduction to just enough network concepts to allow the implementation of simple mesh networks. When appropriate, a link to the relevant OpenWrt documentation was also provided.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the hardware used in the examples and recommendations for those who are planning on buying new/used devices for their mesh project.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the software used in the examples.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt;: &lt;em&gt;Required&lt;/em&gt;. Step-by-step procedure to configure mesh nodes, bridges, and gateways.  It goes from flashing OpenWrt to configuring VLANs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;. You probably came here for this part.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/h1&gt;

&lt;h2 id=&quot;main-network-definitions&quot;&gt;Main network definitions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mesh &lt;a href=&quot;https://en.wikipedia.org/wiki/Node_(networking)&quot;&gt;node&lt;/a&gt;: Any network device that is connected to the mesh network and that helps routing data to (and from) mesh clients.  Here, however, if a mesh node acts as a bridge or gateway, it will always be referred by the latter role, even though by definition, mesh bridges and mesh gateways are also mesh nodes.&lt;br /&gt;
In addition, even though it’s possible to route mesh traffic via cable, in this tutorial, &lt;em&gt;all mesh nodes are also wireless devices&lt;/em&gt;, meaning that they have access to a radio with &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;mesh point&lt;/strong&gt; (802.11s)&lt;/a&gt; capabilities.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;Learn about the OpenWrt wireless config &lt;strong&gt;/etc/config/wireless&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridging_(networking)&quot;&gt;Bridge&lt;/a&gt;: A network device that joins any two or more network interfaces (e.g., LAN ethernet and wireless) into a single network.  Here, when a device is referred to as a bridge, it means that in addition to being a mesh node, the only other thing it does is bridge interfaces.  But of course, a gateway &lt;em&gt;device&lt;/em&gt;, such as a router with a built-in modem, or a firewall appliance, may also work as a bridge for multiple interfaces. The distinction in the examples is just used to highlight its main role in the network.  Therefore, a mesh bridge in this tutorial is a mesh node that simply bridges the mesh network with a WiFi access point  for non-mesh clients, for example, or its LAN ports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gateway_(telecommunications)&quot;&gt;Gateway&lt;/a&gt;: A network device that translates traffic from one network (LAN) to another (WAN) and here, acts as both a &lt;strong&gt;firewall&lt;/strong&gt; and &lt;strong&gt;DHCP server&lt;/strong&gt;.  (If there’s more than one DHCP server in the same network, they assign IPs to different ranges, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.1-100&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.101-200&lt;/code&gt;, and so on.)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;Learn about the OpenWrt network config &lt;strong&gt;/etc/config/network&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt;: In brief, a system for translating domain names (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgomesu.com&lt;/code&gt;) into IP addresses (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.108.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.109.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.110.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.111.153&lt;/code&gt;). DNS filtering systems, such as &lt;a href=&quot;https://pi-hole.net/&quot;&gt;PiHole&lt;/a&gt;, work by catching such requests–usually sent through port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt;–and checking if the domain is blacklisted or not.  In this tutorial, we will always use an external DNS server, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.1.1.1&lt;/code&gt; (Cloudflare) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt; (Google), but if you have your own DNS resolver, feel free to use it instead when configuring your mesh network but then make sure the mesh network/VLAN has access to its address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&quot;&gt;DHCP&lt;/a&gt;: An IP management system that dynamically assigns layer-3 addresses for devices connected to a network. For instance, it might dynamically assign IPs between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.255&lt;/code&gt; (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) to any devices connected to LAN. Of note, because this is a network layer protocol, it uses IP addresses, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; uses MAC addresses because it works at the data link layer (and therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; actually doesn’t need DHCP and IPs to discover and manage mesh clients but we’re going to use them to make it more intuitive and easier to integrate mesh with non-mesh clients).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;Learn about the OpenWrt DNS and DHCP config &lt;strong&gt;/etc/config/dhcp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Firewall_(computing)&quot;&gt;Firewall&lt;/a&gt;: A network system that monitors and controls network traffic, such as specifying rules for incoming WAN traffic (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deny all&lt;/code&gt;), outgoing LAN traffic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept all&lt;/code&gt;), geoblocking and IP filtering systems, intrusion prevention/detection systems (&lt;a href=&quot;https://suricata-ids.org/&quot;&gt;Suricata&lt;/a&gt;), and so on.  &lt;a href=&quot;https://opnsense.org/&quot;&gt;OpenSense&lt;/a&gt; and &lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense&lt;/a&gt; are examples of dedicated firewall software. If a mesh node is acting as a mesh gateway, it’s imperative to configure the firewall or your mesh network will likely end up without access to external networks (e.g., WAN) and their services (e.g., DNS servers).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;Learn about the OpenWrt firewall config &lt;strong&gt;/etc/config/firewall&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_LAN&quot;&gt;VLAN&lt;/a&gt;: A &lt;em&gt;virtual&lt;/em&gt; LAN that is partitioned and isolated in a network at the layer-2 level.  They are often followed by an integer to differentiate each other (e.g., VLAN 1, VLAN 50) and used to better manage network clients that belong to different groups (e.g., administrators, IoT devices, security cameras, guests).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-topologies&quot;&gt;Network topologies&lt;/h2&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zbqrNg4C98U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;mesh-networks&quot;&gt;Mesh networks&lt;/h2&gt;

&lt;h3 id=&quot;what-are-mesh-networks&quot;&gt;What are mesh networks?&lt;/h3&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/tYLU755T6_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;where-can-i-learn-more-about-mesh-networking&quot;&gt;Where can I learn more about mesh networking?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Wikipedia articles about &lt;a href=&quot;https://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;mesh networking&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;wireless mesh networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scholar.google.com/scholar?q=mesh+networking&quot;&gt;Peer-reviewed papers or books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing-protocols&quot;&gt;Routing protocols&lt;/h3&gt;
&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network#Protocols&quot;&gt;dozens of algorithms&lt;/a&gt; for routing packets in a mesh network.  A few notable ones are the Optimized Link State Routing (OLSR) and the Hybrid Wireless Mesh Protocol (HWMP).&lt;/p&gt;

&lt;p&gt;In this tutorial, however, we will cover only one of them, called &lt;a href=&quot;https://en.wikipedia.org/wiki/B.A.T.M.A.N.&quot;&gt;&lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;B.A.T.M.A.N.&lt;/strong&gt;), because &lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/batman-adv.html&quot;&gt;it has long been incorporated into the Linux Kernel&lt;/a&gt; and is thus easily enabled on Linux devices.  It is also a &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;fairly well-documented&lt;/a&gt; algorithm that &lt;a href=&quot;https://www.open-mesh.org/projects/open-mesh/activity&quot;&gt;has been continuously improved&lt;/a&gt; over the years.  Another noteworthy feature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; is its lack of reliance on layer-3 protocols for managing mesh clients because it works at the layer-2 and its ability to create VLANs.  Think of it as if it were a big, smart, virtual switch, in which its VLANs are port-based segmentations.  If you want an interface to use a particular mesh VLAN, just “plug it” into the approriate port of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; switch (e.g., bridge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-guest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; to give the guest network access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN 2).&lt;/p&gt;

&lt;h4 id=&quot;batman-adv&quot;&gt;batman-adv&lt;/h4&gt;
&lt;p&gt;As mentioned before, B.A.T.M.A.N. has gone through multiple changes over the years, which means that there are actually &lt;em&gt;multiple versions of the algorithm&lt;/em&gt;. I’ve had a good experience with &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/BATMAN_IV&quot;&gt;&lt;strong&gt;B.A.T.M.A.N. IV&lt;/strong&gt;&lt;/a&gt; and therefore, the examples here make use of it.  However, you are free to try whatever version you want and even run them in parallel to each other, by assigning a different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface to each version of the algorithm (versions are chosen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option routing_algo&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file for each enabled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface).&lt;/p&gt;

&lt;p&gt;Config-wise, there’s very little to do because the default settings should work very well in most environments.  One exception is when you have multiple gateways in the network to provide high availability, for example, and you might want to let each mesh node know about them and their speeds to better route the mesh traffic.  This requires setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt;, for example.  Many other tweaks that are not covered here are &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Doc-overview#Protocol-Documentation&quot;&gt;described in their wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;batctl&quot;&gt;batctl&lt;/h4&gt;
&lt;p&gt;Another very cool feature of B.A.T.M.A.N. is the ability to test, debug, monitor, and set settings with the package &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;&lt;/a&gt;.  A few noteworthy options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ping mesh node/client with its MAC address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:00&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/tcpdump&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;&lt;/a&gt; for all mesh traffic in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Prints useful stats for all mesh traffic, such as sent and received bytes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Shows the neighboring mesh nodes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Displays the gateway servers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt;) in the mesh network
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl gwl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It goes without saying that if you want to dive deep into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, you should take a good look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes used in the various implementations had the following hardware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;: &lt;a href=&quot;https://www.tp-link.com/us/home-networking/wifi-router/tl-wr1043nd/&quot;&gt;TP-Link WR-1043ND&lt;/a&gt; v1.8&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Architecture&lt;/strong&gt;: Atheros AR9132 rev 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-wr1043nd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-wr1043nd.jpg&quot; alt=&quot;TP-Link 1043nd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was mainly a matter of convenience–I had a few lying around and they are very, very cheap–and because the examples in the OpenWrt documentation often refer to them as well, so the community support is good.&lt;/p&gt;

&lt;p&gt;However, the general ideas presented here should apply to &lt;strong&gt;any wireless device&lt;/strong&gt; that meets the following criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compatible with the latest OpenWRT version. Refer to their &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Hardware List&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has access to a radio that supports the &lt;strong&gt;mesh point&lt;/strong&gt; (&lt;strong&gt;802.11s&lt;/strong&gt;) mode of operation. If you already have OpenWrt installed on a wireless device, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt; and search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; under &lt;strong&gt;Supported interface modes&lt;/strong&gt;, or simply check if the following command outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* mesh point&lt;/code&gt; below the name of a detected radio (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy1&lt;/code&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list | grep -ix &quot;^wiphy.*\|^.*mesh point$&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If it does, then the associated radio can be configured as a mesh point.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you’re looking for devices to buy and experiment on, my suggestion is to look for dual-band wireless routers to allow a better segmentation of the wireless networks.  If you can afford spending more for a mesh node, look for tri-band devices.  Netgear and Linksys have solid options that are compatible with OpenWrt. For example, the Linksys WRT1900AC (v1/v2) dual-band wireless router would make for a good mesh node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-wrt1900ac.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-wrt1900ac.jpg&quot; alt=&quot;Linksys WRT1900AC&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For single-board computer (SBC) fans like me, you can run OpenWrt with most of them and then use a combination of on-board wireless and USB adapter to create a powerful mesh node. &lt;a href=&quot;https://shop.solid-run.com/product-category/embedded-computers/marvell-family/clearfog-base-pro/&quot;&gt;ClearFog boards&lt;/a&gt; with one or two mini PCIe wireless cards would make very good candidates for such a project, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot; alt=&quot;ClearFog Pro&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you can install OpenWrt on bare metal x86-64 machines (e.g., standard PC or server running Intel/AMD), which will give you lots of options to put together an impressive mesh device. However, if you just want your work/home laptops/PCs to &lt;em&gt;be part of the mesh&lt;/em&gt; (i.e., become a mesh node), there are better alternatives than installing OpenWrt as its OS.  For example, you can run OpenWrt with a &lt;a href=&quot;https://openwrt.org/docs/guide-user/virtualization/start&quot;&gt;virtual machine&lt;/a&gt; or as a &lt;a href=&quot;https://github.com/openwrt/docker&quot;&gt;docker container&lt;/a&gt;.  Naturally, it’s also possible to configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on Linux distributions other than OpenWrt, such as Arch, Debian, and Ubuntu.  See &lt;a href=&quot;#getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on any Linux device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned before, even if the existing/on-board radio of your SBC/laptop/PC/server does not support the mesh point mode of operation, you can always buy a compatible PCIe card or USB adapter to turn your device into a mesh node and then use the other radio for another purpose.  For example, many &lt;a href=&quot;https://www.alfa.com.tw/&quot;&gt;Alfa Network&lt;/a&gt; adapters can operate in mesh point mode, like the cheap AWUS036NH:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot; alt=&quot;Alfa AWUS036NH&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All that said&lt;/strong&gt;, most home users will be &lt;strong&gt;just fine with a cheapo, used, old, single-band router&lt;/strong&gt;.  For a brand reference, TP-Link has good and affordable devices that can be used in a mesh networking project without issues.  If you’re new to this, start from here (small, simple) and think about efficiency over power.  You don’t need to drive a Lamborghini to get a snack at the grocery store.&lt;/p&gt;

&lt;h2 id=&quot;hardware-specific-configurations&quot;&gt;Hardware-specific configurations&lt;/h2&gt;
&lt;p&gt;Every once in a while, I run into hardware that is capable of operating in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode but the default OpenWrt firmware uses a module for the wireless adapter that is loaded with incompatible parameters.  Here is a list of a few of the known ones and their solution.&lt;/p&gt;

&lt;h3 id=&quot;ath9k-modules&quot;&gt;ath9k modules&lt;/h3&gt;
&lt;p&gt;If your device uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt; module, there’s a chance that you’ll need to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; parameter of the module to use the mesh &lt;em&gt;with encryption&lt;/em&gt;.  First, however, try without changing the default module parameters.  After rulling out possible typos in the network and wireless configuration files, try the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules.d/ath9k&lt;/code&gt; file and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt=1&lt;/code&gt; to it.  If there’s something in the file, use a whitespace to separate parameters.&lt;/li&gt;
  &lt;li&gt;Save the file, and &lt;strong&gt;reboot&lt;/strong&gt; your device.&lt;/li&gt;
  &lt;li&gt;Once the device comes back, check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is now enabled by typing
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /sys/module/ath9k/parameters/nohwcrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is enabled, the output will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;; otherwise, it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check your mesh configuration once again and add encryption to your wireless mesh stanza.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Known affected devices:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;brand&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;model&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;WR-1043-ND&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1.8&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ath10k-modules&quot;&gt;ath10k modules&lt;/h3&gt;
&lt;p&gt;I’ve noticed that radio devices that use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; module and more specifically, the ones using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k-firmware-qca988x-ct&lt;/code&gt;, are not able to operate in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode by default.  If you check the syslog, you’ll notice that there will be a few messages stating that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; module must be loaded with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rawmode=1&lt;/code&gt; to allow mesh.  However, I’ve tried that before without much success.  Instead, my current recommendation to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; working with the &lt;strong&gt;QCA988x&lt;/strong&gt; is the following (&lt;strong&gt;Internet connection required&lt;/strong&gt; to download packages via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt;):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Remove the &lt;strong&gt;Candela Tech&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-ct&lt;/code&gt;) modules as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove ath10k-firmware-qca988x-ct kmod-ath10k-ct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the non-ct modules:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update &amp;amp;&amp;amp; opkg install ath10k-firmware-qca988x kmod-ath10k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot your device and then check the status of your mesh network.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Known affected devices:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;brand&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;model&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Archer C7&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Archer C7 (US)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes were running the following software:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot; alt=&quot;OpenWrt default SSH welcome&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Operating System&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Firmware&lt;/strong&gt;: OpenWrt 19.07.4 r11208-ce6496d796&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Linux kernel&lt;/strong&gt;: 4.14.195&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Packages mentioned in the tutorial&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/batctl-default&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;&lt;/a&gt;: 2019.2-7&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/kmod-batman-adv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;&lt;/a&gt;: 4.14.195+2019.2-9&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/wpad-mesh-openssl&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;&lt;/a&gt;: 2019-08-08-ca8c2bd2-4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find out the version of all installed packages, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you prefer to filter the output, use grep.  For example, the following will show the version of all installed packages containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed | grep bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Huge differences in firmware, kernel, or package versions &lt;em&gt;might&lt;/em&gt; make the implementation of a mesh network a little bit different than the way it was explained here.  Of note, devices running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; &lt;strong&gt;version 2019.0-2 and older&lt;/strong&gt; are certainly incompatible with the instructions found in this tutorial, the reason being that the module was modified after then to better integrate with the &lt;a href=&quot;https://openwrt.org/docs/techref/netifd&quot;&gt;network interface daemon&lt;/a&gt;.  Fortunately, the implementation using old modules is just a simple as with the latest one. &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Batman-adv-openwrt-config#Batman-adv-20190-2-and-older&quot;&gt;Check what the B.A.T.M.A.N. wiki has to say about it&lt;/a&gt;.  However, it’s worth mentioning that with old batman modules, changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; will likely require a reboot instead of simply reloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/init.d/network&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I’ve noticed that when installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will install a minimal version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-tiny&lt;/code&gt;, that lacks some of the options mentioned here (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batnctl o&lt;/code&gt;).  However, if you install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; first and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will preserve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;, which is the package used in this tutorial and that has all the options referred to in the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;batctl man page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt; will conflict with the already installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package.  This means &lt;strong&gt;you have to remove the latter before installing the former&lt;/strong&gt;.  To remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package, simply type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vi-text-editor&quot;&gt;VI text editor&lt;/h2&gt;
&lt;p&gt;The default text editor in a standard OpenWrt image is &lt;a href=&quot;https://en.wikipedia.org/wiki/Vi&quot;&gt;&lt;strong&gt;vi&lt;/strong&gt;&lt;/a&gt;, which is an old, screen oriented editor that most modern users will find counterintuitive to use.  Fortunately, once you get the hang of it, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; becomes very easy to use and it becomes a very convenient way of editing config files.  Here’s all that you need to know about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in a terminal:&lt;/p&gt;

&lt;p&gt;You can open a file by adding the filename as an argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if the file does not exist, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will create one with that name.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will start in &lt;strong&gt;command mode&lt;/strong&gt;.  Such a mode let’s you navigate the file with the arrow keys and use the &lt;em&gt;delete button&lt;/em&gt; to delete characters.  (Also, in command mode, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; to delete entire lines, which is very useful if you need to delete lots of things quickly.)&lt;/p&gt;

&lt;p&gt;However, if you need to type characters and have more flexibility to edit the file, you need to tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; to enter &lt;strong&gt;insert mode&lt;/strong&gt;.  To enter insert mode, type (no need to hit return/enter afterwards)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the bottom of the screen, you will see that it now shows a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; to indicate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; is in insert mode.  You can now type freely and even paste multiple things at once in insert mode.&lt;/p&gt;

&lt;p&gt;When you’re done, press the button &lt;strong&gt;Esc&lt;/strong&gt; to go back into command mode.  Notice that at the bottom of the screen, now there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; was, which tells you you’re in command mode once again.&lt;/p&gt;

&lt;p&gt;In command mode, you can then &lt;strong&gt;write changes to the file&lt;/strong&gt; by typing (followed by return/enter)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ve saved the file. To quit, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can &lt;em&gt;write and quit&lt;/em&gt; by simply typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; has other commands as well but honestly, that’s pretty much all that you need to know about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in order to use in the examples covered here.  Give it a try!&lt;/p&gt;

&lt;h3 id=&quot;vi-cheat-table&quot;&gt;VI cheat table&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mode&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;key/command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Enter &lt;em&gt;insert&lt;/em&gt; mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;insert&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Esc&lt;/code&gt; key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Return to &lt;em&gt;command&lt;/em&gt; mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; (or hold &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; key)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Erase entire row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Write to file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quit to terminal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quit without saving changes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Write to file and quit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;alternatives-to-vi&quot;&gt;Alternatives to VI&lt;/h3&gt;
&lt;p&gt;Now, if you still don’t like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, you can always transfer files from your laptop/PC to OpenWrt via sftp, for example, or utilities like &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_copy_protocol&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;In this section, we will see how to configure &lt;strong&gt;four mesh nodes&lt;/strong&gt; in &lt;strong&gt;three different network topologies&lt;/strong&gt;. More specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Bridge&lt;/strong&gt;: A mesh network in which one node plays the role of a mesh gateway and another, of a bridge, while the remaining are just mesh nodes.  This is a very typical scenario for a home or small office, for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bridge-Bridge&lt;/strong&gt;: Two nodes play the role of a bridge, therefore making the mesh network transparent to the external (non-mesh) networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Gateway&lt;/strong&gt;: Two nodes play the role of a gateway to provide high-availability to mesh clients/nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, however, we will start with the aspects that are common to all topologies, such as planning the mesh network, and the installation and basic configuration of OpenWrt mesh nodes.  Then, we will move to the specifics of each of the aforementioned mesh network topologies.  Finally, we end the section with a slightly more complex scenario to illustrate how to create &lt;strong&gt;mesh VLANs&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; and a very brief introduction to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on other Linux distros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though the examples show static nodes, &lt;strong&gt;none of the mesh nodes need to be static&lt;/strong&gt;. The mesh network and its components can be partially or totally mobile. For example, if some of your nodes are mobile units (e.g., vehicles, drones, robots, cellphones, laptops), they can leave and join the mesh, recreate the mesh elsewhere, join a completely different mesh, and so on.  The routing algorithm (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;) will automatically (and  seamlessly) take care of changes to the network topology. (But of course, if there’s a single gateway and it does not reach any node, the network is bound to stop working as intended without proper configuration to handle such scenarios.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot; alt=&quot;Topology - Moving nodes&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;p&gt;Just like any other type of network, deploying a mesh network–especially over large areas, with dozens of nodes–requires a fair deal of planning; Otherwise, you are bound to experience, for instance, bottlenecks, uneven access point signal quality, and unstable WAN connectivity across the mesh.  Also, features like &lt;strong&gt;high availability&lt;/strong&gt; go well beyond the configuration and topology of a mesh network (e.g., power source, whre your WAN connections are coming from, and the hardware you are using all play important roles when it comes to high availability).  Mesh networks are very, very easy to scale but planning is key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eli the Computer Guy&lt;/em&gt; has an old video about mesh networks that goes into things like high availability and bottlenecks.  If that matters to you, take a look. The relevant content &lt;strong&gt;starts at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;03:30&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;ends at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17:30&lt;/code&gt;&lt;/strong&gt;, approximately.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/T7fJwAyALss&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;The examples in this tutorial are simple &lt;em&gt;by design&lt;/em&gt;–they were created to illustrate different scenarios in a way that makes it easy to understand what is going on. The idea is to use the examples as templates for more complex implementations.&lt;/p&gt;

&lt;h2 id=&quot;openwrt-installation-and-initial-configuration&quot;&gt;OpenWrt installation and initial configuration&lt;/h2&gt;
&lt;p&gt;Now that you have the hardware, the first thing to do is to install OpenWrt.  Flashing a default OpenWrt image onto a &lt;strong&gt;&lt;em&gt;compatible device&lt;/em&gt; is a very easy and safe procedure&lt;/strong&gt; because it’s been tested multiple times.  (For extra safety precautions, you might want to search the Web for your device + OpenWrt to see if there’s any indexed forum post or comment regarding installation issues and bugs, for example.)&lt;/p&gt;

&lt;p&gt;If you’re new to this, the folks at OpenWrt were kind enough to provide a plethora of instructions on &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/start&quot;&gt;how to install and uninstall OpenWrt&lt;/a&gt; and even put together an &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/generic.flashing#installation_checklist&quot;&gt;&lt;strong&gt;installation checklist&lt;/strong&gt;&lt;/a&gt;.  At the very least, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look for your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Table of Hardware&lt;/strong&gt;&lt;/a&gt; and open its &lt;strong&gt;Device Page&lt;/strong&gt; (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd&quot;&gt;TP-Link TL-WR1043ND&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;Double check that the &lt;strong&gt;model and version&lt;/strong&gt; match your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;strong&gt;Supported Versions&lt;/strong&gt; table;&lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;Installation&lt;/strong&gt; table, you will find a column called &lt;em&gt;Firmware OpenWrt Install URL&lt;/em&gt; and another one called &lt;em&gt;Firmware OpenWrt Upgrade URL&lt;/em&gt;. If your device is &lt;strong&gt;still running the original firmware&lt;/strong&gt;, then download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Install&lt;/strong&gt; URL&lt;/em&gt; column; otherwise, download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Upgrade&lt;/strong&gt; URL&lt;/em&gt; column.  Both files should have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bin&lt;/code&gt; extension;&lt;/li&gt;
  &lt;li&gt;Regardless of the binary file downloaded, &lt;a href=&quot;https://openwrt.org/docs/guide-quick-start/verify_firmware_checksum&quot;&gt;&lt;strong&gt;verify its checksum&lt;/strong&gt;&lt;/a&gt; afterwards;&lt;/li&gt;
  &lt;li&gt;Disconnect your laptop/PC from any access point or switch, and connect your laptop/PC directly to the device’s ethernet port.&lt;/li&gt;
  &lt;li&gt;Open your device’s web UI, go to its Settings and/or find the &lt;strong&gt;Firmware Upgrade&lt;/strong&gt; option. Then, select the downloaded OpenWrt binary, and let it do its thing. Once it’s done, the device will reboot with OpenWrt installed. (You should be able to reach it at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; if connected to a LAN port.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you can reach the OpenWrt web UI, then you’ve successfully installed OpenWrt and it’s now time to configure it.&lt;/p&gt;

&lt;h3 id=&quot;initial-configuration&quot;&gt;Initial configuration&lt;/h3&gt;
&lt;p&gt;As mentioned before, we &lt;strong&gt;will not use the web UI&lt;/strong&gt; in this tutorial, even if the OpenWrt image you’re using has LuCI installed by default.  Instead, we will access our device and configure it using only &lt;strong&gt;SSH&lt;/strong&gt;.  So, open a terminal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into your OpenWrt device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; is your OpenWrt device’s IP address (that’s usually the case after a fresh install but if it’s different, use the proper IP then). Because this is the first time using the system, you’ll need to set a password for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user.  You can do that by typing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and following the instructions.  At this point, it’s good practice to label this device (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node01&lt;/code&gt;) and take note of its &lt;strong&gt;MAC address&lt;/strong&gt;.  To find out the latter, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and keep a record of the device’s name and its MAC address–if there are multiple different addresses, take note of all of them and their interface.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: &lt;a href=&quot;https://openwrt.org/docs/guide-user/security/dropbear.public-key.auth&quot;&gt;Configure key-based authentication&lt;/a&gt; and &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dropbear&quot;&gt;disable password login&lt;/a&gt;. Reboot and check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; access methods are correctly configured.)&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;From this point forward, we will start editing files using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.  If you’ve not read the &lt;a href=&quot;#vi-text-editor&quot;&gt;section about how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;&lt;/a&gt; yet, this is a good time to do so.&lt;/p&gt;

&lt;h3 id=&quot;default-config-for-the-hardware&quot;&gt;Default config for the hardware&lt;/h3&gt;
&lt;p&gt;Regardless of the hardware, &lt;strong&gt;before doing anything related to the mesh network&lt;/strong&gt;, always take your time and &lt;strong&gt;study the default configuration&lt;/strong&gt; found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt;.  For reference, I usually go over the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many ethernet ports?&lt;/li&gt;
  &lt;li&gt;Are they labeled either LAN or WAN or there’s both?&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, how is the router handling multiple ethernet ports? If there’s both LAN and WAN, how is the router separating LAN from WAN?&lt;/li&gt;
  &lt;li&gt;If there is both LAN and WAN, how is the firewall handling them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;? (Probably two zones, LAN and WAN, with LAN-&amp;gt;WAN accept all but WAN-&amp;gt;LAN deny all?)&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;, how is the device handling IP addresses?  (Is there a DHCP server for LAN?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, look at the wireless settings (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many radio devices and their names? (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Configuration-wise, what is the device using by default vs. what is it capable of? (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Is the radio enabled or disabled? (Keep/add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option disabled 1&lt;/code&gt; to disable it before configuration; to re-enable, simply comment this line out or set the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;Are there pre-configured wireless access points being broadcast?  If yes, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option network&lt;/code&gt; is it using by default? (Likely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; or whatever the LAN interface is being called in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, many wireless routers, including the TP-Link WR1043ND, have LAN and WAN ports which are handled by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; configuration with VLANs enabled to separate LAN from WAN.  Take note of it;  understand what is going on in the config files;  play with them;  then, continue.  Also, take this opportunity to go over the &lt;strong&gt;Device Page&lt;/strong&gt; to check if there’s any warnings or special configuration notes (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#warningsgotchas&quot;&gt;warnings and gotchas with the 1043ND&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This understanding is instrumental to the way the device will be configured to play different roles in the mesh network and a good grasp of the device’s default settings will greatly reward you later on.&lt;/p&gt;

&lt;h3 id=&quot;updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/h3&gt;
&lt;p&gt;(&lt;em&gt;Only experienced users&lt;/em&gt;: If you used a default image, this is a good opportunity to remove unnecessary packages. See the OpenWrt FAQ for a reference of &lt;a href=&quot;https://openwrt.org/faq/which_packages_can_i_safely_remove_to_save_space&quot;&gt;safe to remove packages&lt;/a&gt;, for example. If this is your first time playing with mesh, leave any unmentioned pkg alone until you get everything working as intended.)&lt;/p&gt;

&lt;p&gt;In order to update and install packages, you need to give your device &lt;strong&gt;temporary access to the Internet&lt;/strong&gt;.  More often than not, if you have an existing network with access to the Internet on-site, then just connect the device to a router/switch via cable.  If that doesn’t work, go ahead and configure your device to act like a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt;&lt;/a&gt; first.  You can check that the device has access to the Internet by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt;ing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, it’s time to &lt;strong&gt;update the package list&lt;/strong&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. Upgrade all installed packages. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; to find which packages can be upgraded and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg upgrade PKG&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKG&lt;/code&gt; is the package name.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; run into memory issues, try commenting out a few lines in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/opkg/distfeeds.conf&lt;/code&gt; and try again. Alternatively, it’s possible to use the following command to automatically upgrade all packages at once, per the &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/opkg#examples&quot;&gt;opkg openwrt wiki examples&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-upgradable | cut -f 1 -d ' ' | xargs opkg upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Be careful with mass upgrades though&lt;/strong&gt;, especially if you’re running a device with limited memory.  You might end up even bricking your device.&lt;/p&gt;

&lt;p&gt;Now, let’s install the mesh-related packages and remove conflicting packages.  First, remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg install batctl kmod-batman-adv wpad-mesh-openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure there are no error messages and if there are, troubleshoot them before proceeding.&lt;/p&gt;

&lt;p&gt;Remove the connection that gave your device temporary access to the Internet.  Then, &lt;strong&gt;reboot&lt;/strong&gt; (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and restart the SSH session with your laptop/PC still connected to the device via cable.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;If you’re using the &lt;strong&gt;TP-Link WR1043ND v1.x&lt;/strong&gt; in your mesh project, take a look at my previous note about the &lt;a href=&quot;#ath9k-modules&quot;&gt;ath9k module&lt;/a&gt; in the &lt;a href=&quot;#hardware&quot;&gt;hardware section&lt;/a&gt;.  In brief, if you have issues running the mesh with encryption, then you have to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; parameter of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt; module.&lt;/p&gt;

&lt;h2 id=&quot;mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/h2&gt;
&lt;p&gt;It is time to configure the basics of our mesh network and nodes.  To do so, we will edit multiple files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; but first, let’s find out the capabilities of the detected radios in our wireless device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will output something like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Wiphy phy0
	max # scan SSIDs: 4
	max scan IEs length: 2257 bytes
	max # sched scan SSIDs: 0
	max # match sets: 0
	max # scan plans: 1
	max scan plan interval: -1
	max scan plan iterations: 0
	Retry short limit: 7
	Retry long limit: 4
	Coverage class: 0 (up to 0m)
	Device supports AP-side u-APSD.
	Device supports T-DLS.
	Available Antennas: TX 0x7 RX 0x7
	Configured Antennas: TX 0x7 RX 0x7
	Supported interface modes:
		 * IBSS
		 * managed
		 * AP
		 * AP/VLAN
		 * monitor
		 * mesh point
		 * P2P-client
		 * P2P-GO
		 * outside context of a BSS
	Band 1:
		Capabilities: 0x104e
			HT20/HT40
			SM Power Save disabled
			RX HT40 SGI
			No RX STBC
			Max AMSDU length: 3839 bytes
			DSSS/CCK HT40
		Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
		Minimum RX AMPDU time spacing: 8 usec (0x06)
		HT TX/RX MCS rate indexes supported: 0-15
		Frequencies:
			* 2412 MHz [1] (20.0 dBm)
			* 2417 MHz [2] (20.0 dBm)
			* 2422 MHz [3] (20.0 dBm)
			* 2427 MHz [4] (20.0 dBm)
			* 2432 MHz [5] (20.0 dBm)
			* 2437 MHz [6] (20.0 dBm)
			* 2442 MHz [7] (20.0 dBm)
			* 2447 MHz [8] (20.0 dBm)
			* 2452 MHz [9] (20.0 dBm)
			* 2457 MHz [10] (20.0 dBm)
			* 2462 MHz [11] (20.0 dBm)
			* 2467 MHz [12] (20.0 dBm)
			* 2472 MHz [13] (20.0 dBm)
			* 2484 MHz [14] (disabled)
	valid interface combinations:
		 * #{ managed } &amp;lt;= 2048, #{ AP, mesh point } &amp;lt;= 8, #{ P2P-client, P2P-GO } &amp;lt;= 1, #{ IBSS } &amp;lt;= 1,
		   total &amp;lt;= 2048, #channels &amp;lt;= 1, STA/AP BI must match, radar detect widths: { 20 MHz (no HT), 20 MHz, 40 MHz }
	HT Capability overrides:
		 * MCS: ff ff ff ff ff ff ff ff ff ff
		 * maximum A-MSDU length
		 * supported channel width
		 * short GI for 40 MHz
		 * max A-MPDU length exponent
		 * min MPDU start spacing
	Supported extended features:
		* [ RRM ]: RRM
		* [ CQM_RSSI_LIST ]: multiple CQM_RSSI_THOLD records
		* [ CONTROL_PORT_OVER_NL80211 ]: control port over nl80211
		* [ TXQS ]: FQ-CoDel-enabled intermediate TXQs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we are particularly interested in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;strong&gt;supported modes of operation&lt;/strong&gt;, and more specifically, that the device is indeed able to operate in &lt;strong&gt;mesh point&lt;/strong&gt; mode (it is), as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supported interface modes:&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;total number of bands&lt;/strong&gt; (only one band, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Band 1&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;then for each band
    &lt;ul&gt;
      &lt;li&gt;the possible &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width&quot;&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode 'HT20'&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode 'HT40'&lt;/code&gt;), as shown in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt;, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Capabilities:&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;acceptable channels&lt;/strong&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel '1'&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel '13'&lt;/code&gt;), as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frequencies:&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With such information, we can now configure our radio devices in &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;&lt;/a&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/wireless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then edit each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-device&lt;/code&gt; accordingly.  In the 1043ND, there’s only one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-device&lt;/code&gt; and my config looks like the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-device 'radio0'
        option type 'mac80211'
        option channel 3
        option hwmode '11g'
        option path 'platform/ahb/180c0000.wmac'
        option htmode 'HT20'
        option country 'BR'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this radio device will be used for the mesh traffic, make sure all mesh nodes &lt;strong&gt;use the same channel&lt;/strong&gt;.  However, if the radio will be used as an access point for non-mesh clients, &lt;strong&gt;use a different channel than the mesh channel&lt;/strong&gt;.  In addition, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt; devices, stick to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt; if you are deploying the mesh in a crowded area, such as an apartment building; otherwise, the interference might make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT40&lt;/code&gt; actually slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt;.  Finally, remember to edit the &lt;strong&gt;country code&lt;/strong&gt; before enabling the radio.&lt;/p&gt;

&lt;p&gt;Comment out any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface&lt;/code&gt; automatically generated after a fresh install by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; at the beginning of each line, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config wifi-iface 'default_radio0'
#        option device 'radio0'
#        option network 'lan'
#        option mode 'ap'
#        option ssid 'OpenWrt'
#        option encryption 'none'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, at the end of the file, let’s add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-iface&lt;/code&gt; for the wireless mesh, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-iface 'wmesh'
        option device 'radio0'	#must match the name of a wifi-device
        option ifname 'if-mesh'	#name for this iface
        option network 'mesh'	#mesh stanza in /etc/config/network
        option mode 'mesh'		#use 802.11s mode
        option mesh_id 'MeshCloud'	#like an ssid of the wireless mesh
        option encryption 'sae'	#https://openwrt.org/docs/guide-user/network/wifi/basic#wpa_modes
        option key 'MeshPassword123'	#mesh password if encryption is enabled
        option mesh_fwding 0	#let batman-adv handle routing
        option mesh_ttl 1		#time to live in the mesh
        option mcast_rate 24000	#routes with a lower throughput rate than the mcast_rate will not be visible to batman-adv
#       option disabled 1		#uncomment to disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;The comments are just for educational purpose. Feel free to remove them in your device’s config file.&lt;/p&gt;

&lt;p&gt;Because all mesh nodes must operate on the same channel, use the same authentication, etc., multiple config options are often dictated by the “lowest common denominator” across all mesh nodes–that is, the best possible config that will work with &lt;strong&gt;all nodes&lt;/strong&gt;, not just the ones with the best hardware and software available.  For example, not all devices will necessarily be able to use SAE because it’s very new and therefore, won’t be able to connect to mesh networks that use it. Instead, you might want to set encryption to something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psk2+aes&lt;/code&gt;, which should be good enough for most devices out there. So, keep that in mind when configuring your mesh nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now we need to configure &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;&lt;/a&gt; to allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To do so, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt; file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and let’s add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; at the bottom of the file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'bat0'
        option proto 'batadv'
        option routing_algo 'BATMAN_IV'
        option aggregated_ogms 1
        option ap_isolation 0
        option bonding 0
        option bridge_loop_avoidance 1
        option distributed_arp_table 1
        option fragmentation 1
        option gw_mode 'off'
        option hop_penalty 30
        option isolation_mark '0x00000000/0x00000000'
        option log_level 0
        option multicast_mode 1
        option multicast_fanout 16
        option network_coding 0
        option orig_interval 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which has options with (mostly) default values to facilitate fine-tuning later on.  (For more details, refer to the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki#Protocol-Documentation&quot;&gt;&lt;strong&gt;Protocol Documentation&lt;/strong&gt;&lt;/a&gt; and more specifically, the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;&lt;strong&gt;Tweaking&lt;/strong&gt;&lt;/a&gt; section.)  Then, at the bottom of the same file, let’s add an actual &lt;strong&gt;network&lt;/strong&gt; interface to transport &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; packets, which in our case will be the network used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'mesh'
        option proto 'batadv_hardif'
        option master 'bat0'
        option mtu 2304
        option throughput_override 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;Next, let’s &lt;strong&gt;reboot&lt;/strong&gt; the device (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and once it comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again because we want to check that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interfaces are up.  To do so, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and if the config is right, you should now see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt; in the output. Similarly, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to show us all active interfaces, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl if
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, exit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; session, disconnect your laptop/PC from the wireless device (but keep it running nearby), and &lt;strong&gt;go ahead and configure at least one other node&lt;/strong&gt;.  This can be done manually just like you’ve just configured the current node.  However, if your other mesh nodes are identical to the one you have already configured–that is, it is the same brand, model, and it is running the same OpenWrt version–then you can simply &lt;strong&gt;copy the modified files&lt;/strong&gt; and then &lt;strong&gt;paste them on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; dir of the new device&lt;/strong&gt;.  To copy all such files from the configured device to your laptop/PC current directory, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -r root@IP_MESH_NODE:/etc/config ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; dir on your laptop/PC that has all the config files from the already configured device.  Then, it’s just a matter of doing the reverse process on the unconfigured devices:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -r ./config/* root@IP_NEW_MESH_NODE:/etc/config/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Because we’re starting SSH sessions with &lt;em&gt;different machines&lt;/em&gt; using the &lt;em&gt;same IP addr&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;), it’s quite possible that your SSH client will complaint about the authenticity of the host at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  To get rid of this message, simply remove the relevant entry in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file or delete it altogether.  On Linux distros, such file can be found at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/known_hosts&lt;/code&gt;–that is, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; folder for your current user.&lt;/p&gt;

&lt;p&gt;Afterwards, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into one of the configured mesh nodes and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will show a table with the interfaces (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt;), MAC address of the neighboring mesh nodes, and when each of them was last seen.  Copy the MAC address (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:01&lt;/code&gt;) from each neighboring mesh node and ping them through the mesh (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl p&lt;/code&gt;) to see if they are all replying, as follows (press Ctrl+C to stop)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should output something like the following if everything is working fine&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PING f0:f0:00:00:00:01 (f0:f0:00:00:00:01) 20(48) bytes of data
20 bytes from f0:f0:00:00:00:01 icmp_seq=1 ttl=50 time=3.01 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=2 ttl=50 time=1.71 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=3 ttl=50 time=1.10 ms
--- f0:f0:00:00:00:01 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss
rtt min/avg/max/mdev = 1.103/1.942/3.008/0.794 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pat yourself on the back because you have successfully configured multiple mesh nodes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go ahead and configure all your mesh nodes the same way as before&lt;/strong&gt; and only then move on to bridges, gateways, and VLAN configs, as described next.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: This is a good time to &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;tweak the mesh configuration&lt;/a&gt; as well.)&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting-mesh-issues&quot;&gt;Troubleshooting mesh issues&lt;/h2&gt;
&lt;p&gt;These are a few tips in case you run into issues when configuring gateways and bridges.&lt;/p&gt;

&lt;p&gt;To test node to node connectivity, connect to a mesh node and use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p MAC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC&lt;/code&gt; is another node’s MAC address.  If the node does not reply, there’s an issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; or its configuration.  Try rebooting both nodes before doing anything else.&lt;/p&gt;

&lt;p&gt;A more powerful tool to see what is going on in the mesh network is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; utility for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To use it, connect to a mesh node and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td batX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interface (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; but if you have more than one, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat1&lt;/code&gt;, etc.).  This is quite useful when configuring VLANs because it will show the VLAN ID of each client as well.  In addition, it is possible to specify the VLAN ID in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;td&lt;/code&gt; argument to constraint the output to one particular VLAN (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl td bat0.1&lt;/code&gt;).  Depending on the scale of your mesh network, you might need to filter the output because things can get wild with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; really fast.&lt;/p&gt;

&lt;p&gt;For more details, see the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;strong&gt;batctl man page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you’ve been following my suggestion to name and take note of each device’s MAC address, you can create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; that contains pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC address&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f0:f0:00:00:00:00 node01
f0:f1:00:00:00:00 node02
f0:f2:00:00:00:00 node03
f0:f3:00:00:00:00 node04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which makes it much easier to identify the mesh nodes when issuing a command like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and other debug tables.  As far as I’m aware, however, you have to create and update such file in each node because such information will just be available to nodes that have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;configuring-common-mesh-networks&quot;&gt;Configuring common mesh networks&lt;/h2&gt;
&lt;p&gt;Here, we will see how to turn one or two of our configured mesh nodes into either a mesh &lt;strong&gt;bridge&lt;/strong&gt; or a mesh &lt;strong&gt;gateway&lt;/strong&gt;.  To avoid repetition, the configuration of bridges and gateways is described in more detail in the &lt;a href=&quot;#gateway-bridge&quot;&gt;first example&lt;/a&gt;, and only a few small differences and observations are highlighted afterwards.  In addition, only IPv4 addresses and configurations were used but nothing prohibits the use of IPv6 in a mesh network.&lt;/p&gt;

&lt;h3 id=&quot;gateway-bridge&quot;&gt;Gateway-Bridge&lt;/h3&gt;
&lt;p&gt;This first example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More specifically, the mesh has access to the WAN (&lt;strong&gt;Network A&lt;/strong&gt;) via a &lt;em&gt;gateway device&lt;/em&gt; and has a single, private network defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, which is used by both the &lt;strong&gt;mesh network&lt;/strong&gt; devices and the &lt;strong&gt;Network B&lt;/strong&gt;, non-mesh devices. The latter is enabled by a &lt;em&gt;bridge device&lt;/em&gt; that works as an access point for non-mesh clients.&lt;/p&gt;

&lt;p&gt;First, let’s configure our &lt;strong&gt;mesh gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mesh-gateway-configuration&quot;&gt;Mesh gateway configuration&lt;/h4&gt;

&lt;p&gt;Get one of the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; that has at the very least two ethernet ports, a LAN port and a WAN port.  (This, of course, is not required for a gateway device because &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wan/internet.connection&quot;&gt;there are multiple ways to connect to WAN&lt;/a&gt; but having separate physical ports makes the explanation much simpler to follow.  If that is not your case, just adapt to whatever interfaces you have configured that play the role of default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;.)&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;If you’ve configured this node as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt; to temporarily give it access to the Internet while updating and installing packages, undo the configuration before proceeding because we will use both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; config files in the gateway configuration.&lt;/p&gt;

&lt;p&gt;Connect your laptop/PC to the mesh node via cable using the LAN port–this way, the mesh node’s IP address should still be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the mesh node and let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the beginning of the file, there should a bunch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loopback&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;, for example, and at the end, there should be the mesh interfaces we previously created for the mesh node, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;.  There are at least two options at this point:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an entirely new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;), at the expense of additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; configuration;&lt;/li&gt;
  &lt;li&gt;Or use the existing, default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface by simply bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the latter option is much easier than the former, we will choose the first here (i.e., create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; from the ground up) because it makes this tutorial compatible with multiple devices (switched or switchless) and it allows us to keep the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) as a management/debugging network.  (Later on, we will see how to bridge the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN, for example, so the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; becomes accessible to the mesh as well.  For now, keep it simple.)&lt;/p&gt;

&lt;p&gt;At the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; configuration&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0'
#        option type 'bridge'	#uncomment if bridging in ifname as well
        option ifname 'bat0'
        option proto 'static'
        option ipaddr '192.168.10.1'	#static addr for this gateway on the 192.168.10.0/24 net
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#uncomment to enable cloudflare dns server instead
        list dns '8.8.8.8'	#google dns server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Next, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;&lt;/a&gt; config to run a DHCP server on the new interface, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end of the file, add the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0'
        option interface 'lan_bat0'
        option start 50		#start leasing at addr 192.168.10.50
        option limit 100		#max leases, so for 100, leased addr goes from .50 to .149
        option leasetime '3h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;&lt;/a&gt; config.  Many things that can be done at the firewall level and for this reason, it’s often the most overwhelming part of the configuration.  Fortunately, in our case, all that we need to do here is simply &lt;strong&gt;copy&lt;/strong&gt; the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config for the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;.  That is, anything that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; we will&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy the related config;&lt;/li&gt;
  &lt;li&gt;paste it immediately below the equivalent default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config;&lt;/li&gt;
  &lt;li&gt;and then change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; in the new config.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then the first set of configs we will add (immediately below the equivalent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config) is the &lt;strong&gt;zone&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0
        list network    'lan_bat0'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the second set of configs will be for the &lt;strong&gt;forwarding&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;strong&gt;that is it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: At the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file, there’s a bunch of examples that you could use as template for more avdanced usage of this device’s firewall.  Feel free to play around with them &lt;strong&gt;once you get everything up and running&lt;/strong&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: Because we’re not going to use IPv6, I suggest disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and you could also comment out any related config in the files we just edited.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device and connect the &lt;strong&gt;WAN&lt;/strong&gt; cable to the device’s &lt;strong&gt;WAN ethernet port&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the device comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it. Then, let’s check the new configuration.  First, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and as before, there should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt; interfaces, but now, your gateway device should have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; in the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.  (Of note, if you enabled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option type 'bridge'&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; stanza, then there should be an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan_bat0&lt;/code&gt;interface now because OpenWrt adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-&lt;/code&gt; prefix to bridges, and your device’s static IP should be associated to it instead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.)&lt;/p&gt;

&lt;p&gt;In addition, because we preserved the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; configuration, the device will continue to have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; and should always be reachable there with an ethernet cable directly connected to one of its LAN ethernet ports.&lt;/p&gt;

&lt;p&gt;If you &lt;strong&gt;don’t see the static IP on the new network&lt;/strong&gt;, then review the files we have just configured because there’s likely a misconfiguration.  Don’t expect to get things working until you fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;mesh-bridge-configuration&quot;&gt;Mesh bridge configuration&lt;/h4&gt;
&lt;p&gt;The configuration of a mesh bridge is much simpler than of a mesh gateway because contrary to the gateway config, our mesh bridge doesn’t require the use of a DHCP server and firewall.  In fact, both services will be disabled in a mesh bridge and instead, the ony thing we will do is join interfaces to make them look like a single one to any connected device.&lt;/p&gt;

&lt;p&gt;As before, get one of the other &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; and to start things off, we will configure it as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt;.  Follow the instructions in the OpenWrt documentation, except for the following when configuring the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; to the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;set a static IP for the device on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, pointing to our gateway at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the configuration of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; should then look something like this
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface lan
      option type 'bridge'
      option ifname 'eth0.1 eth1 bat0'	#ethX might be different for your device
      option proto 'static'
      option ipaddr '192.168.10.10'
      option netmask '255.255.255.0'
      option gateway '192.168.10.1'
      option dns '192.168.10.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After applying this configuration, it will let any &lt;strong&gt;non-mesh client&lt;/strong&gt; to join the mesh &lt;strong&gt;via ethernet cable&lt;/strong&gt;–that is, by connecting a cable to one of the LAN/WAN ports of the mesh bridge device.  As long as the gateway is reachable, everything should work like a standard network, you could use the device’s own switch or connect the device to a switch and manage things there, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Similarly, you can create a &lt;strong&gt;wireless access point&lt;/strong&gt; (WAP) for non-mesh clients, and the instructions in the &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt; documentation&lt;/a&gt; will work just fine because it uses a network that is bridged with our mesh–namely, the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.  To avoid confusion, make sure to use &lt;strong&gt;a different SSID&lt;/strong&gt; for the WAP(s) than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh_id&lt;/code&gt; used for the mesh.  In addition, if at all possible, use &lt;strong&gt;a different radio or band&lt;/strong&gt; for the WAP(s) and set it to operate on &lt;strong&gt;a different channel&lt;/strong&gt; than the mesh channel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel 3&lt;/code&gt;, unless you changed yours).  If that is not possible, that is probably okay for most home users but keep in mind that node hoping will start affecting performance quite noticeably.&lt;/p&gt;

&lt;p&gt;Finally, in the terminal, make sure to disable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/dnsmasq stop &amp;amp;&amp;amp; /etc/init.d/dnsmasq disable 
/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
/etc/init.d/firewall stop &amp;amp;&amp;amp; /etc/init.d/firewall disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device and on your laptop/PC, &lt;strong&gt;disable networking&lt;/strong&gt; altogether (this will force it to get a new IP from the bridge when it comes back)–alternatively, just disconnect the ethernet cable.&lt;/p&gt;

&lt;p&gt;Once the bridge is back online (wait at least a minute or two to give it enough time to connect to the mesh first), &lt;strong&gt;re-enable networking&lt;/strong&gt; on your laptop/PC (or reconnect the ethernet cable) and it should receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network (on a Linux distro, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip addr&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;), the bridge node should now be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, and you should be able to access the Internet from your laptop/PC through the mesh (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).  If something doesn’t work, review the config files mentioned here and then go over the ones for the gateway, reboot all mesh nodes (gateway first, then nodes, then bridge) and test again.&lt;/p&gt;

&lt;h3 id=&quot;bridge-bridge&quot;&gt;Bridge-Bridge&lt;/h3&gt;
&lt;p&gt;This second example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contrary to the first example, there’s no mesh gateway device and as such, this topology could be used to extend an already existing private network (Networks A and B) over the wireless mesh (all defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range).  However, to make matters simple, we will assume that &lt;strong&gt;the existing network has a gateway/firewall&lt;/strong&gt; in either Network A or B that can be found at the IP addr &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;, and &lt;strong&gt;there’s a DHCP server being advertised on the network&lt;/strong&gt;.  (If your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, just edit your previous config files accordingly and the mesh network will follow your existing network instead.)&lt;/p&gt;

&lt;p&gt;Config-wise, the mesh bridges in this topology are configured exactly &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the first example&lt;/a&gt;, except for the following differences in the configuration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Each mesh bridge&lt;/strong&gt; should have a different static IP address in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface, as indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;.  For example, the first mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.10'&lt;/code&gt;, while the second mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.11'&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway '192.168.10.1'&lt;/code&gt; in the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; stanza must match an existing gateway on either Network A or B, and similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns '192.168.10.1'&lt;/code&gt; must point to a valid DNS resolver;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned before, if your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, then just edit the config file accordingly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gateway-gateway&quot;&gt;Gateway-Gateway&lt;/h3&gt;
&lt;p&gt;The third and final example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specifically, there’s only one private network (mesh, defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range) and notably, &lt;strong&gt;two&lt;/strong&gt; mesh gateways.  This provides “high availability” of the Internet connection to mesh nodes and surprisingly enough, the configuration of each mesh gateway is &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;just like in the first example&lt;/a&gt;, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Like in the &lt;a href=&quot;#bridge-bridge&quot;&gt;bridge-bridge example&lt;/a&gt;, we must assign different static IP addresses to &lt;strong&gt;each&lt;/strong&gt; mesh gateway.  This is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface configuration, add a different IP addr next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt; option.  For example, the first mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.1'&lt;/code&gt;, while the second mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.2'&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because we will now run &lt;strong&gt;two&lt;/strong&gt; DHCP servers on &lt;strong&gt;the same network&lt;/strong&gt;, we need to find a way of avoiding conflicts when assigning an IP address to new clients.  The easiest way of doing that is by assigning &lt;strong&gt;different intervals&lt;/strong&gt; to each DHCP server running on the same network.  In OpenWrt, this is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; DHCP configuration, we add a different starting point next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start&lt;/code&gt; option.  For example, while the DHCP server running on the first gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '50'&lt;/code&gt;, the DHCP server running on the second gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '150'&lt;/code&gt; instead.  This way, the first DHCP server leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.50&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.149&lt;/code&gt;, whereas the second leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.150&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.249&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface config of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, we can now enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt; and specify the WAN connection speed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_bandwidth '10000/2000'&lt;/code&gt; (i.e., 10000kbps download and 2000kbps upload).  Then, in each other &lt;strong&gt;mesh node&lt;/strong&gt;, we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'client'&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'off'&lt;/code&gt;.  This way, we can make each mesh node aware of the two gateways on the network (and their speeds) to better route mesh traffic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mesh-vlans&quot;&gt;Mesh VLANs&lt;/h2&gt;
&lt;p&gt;You don’t need to configure VLANs in order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; but it is one of its best features.  In brief, this is a way of using &lt;strong&gt;our already configured&lt;/strong&gt; wireless mesh network to route traffic &lt;strong&gt;to/from multiple and all networks&lt;/strong&gt; in a secure, isolated way (as far as VLANs go).  No need for additional hardware–the combination of OpenWrt and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; turns even cheap wireless hardware into powerful virtual switches.  It’s just a matter of tagging the additional (and virtual) networks instead of using the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (or similarly, in a port-based analogy, “plugging” standard interfaces into different ports of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; switch).  This is a fairly advanced topic but surprisingly easy to incorporate to our existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Consider, for example, the following network&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a single gateway device that provides WAN access to the mesh and Networks B, C, and D, which are all private networks defined in different IP ranges. In addition, all the Networks B, C, and D traffic should go via &lt;strong&gt;any&lt;/strong&gt; mesh node in the mesh network while keeping them &lt;strong&gt;isolated from each other&lt;/strong&gt;.  To make it easier to remember and distinguish each private network, let’s call&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Network &lt;strong&gt;B&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;Network &lt;strong&gt;C&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;and Network &lt;strong&gt;D&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement such a mesh network with VLANs, we’re going to follow very similar steps to &lt;a href=&quot;#gateway-bridge&quot;&gt;the first example of a gateway-bridge mesh network&lt;/a&gt;, except for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will have two additional bridges in the network–that is, one for each mesh VLAN, for a total of three bridges. This is not a necessity but a matter of convenience to keep the example simple. The same bridge device can definitely bridge more than one mesh VLAN;&lt;/li&gt;
  &lt;li&gt;In the gateway device, we will create VLAN IDs for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; (&lt;strong&gt;2&lt;/strong&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; (&lt;strong&gt;5&lt;/strong&gt;), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; (&lt;strong&gt;1&lt;/strong&gt;) networks, each with a separate set of DHCP server and firewall rules;&lt;/li&gt;
  &lt;li&gt;In each bridge device, we will join the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with the &lt;strong&gt;VLAN ID&lt;/strong&gt; of the mesh VLAN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Surprisingly enough, we don’t need to do a thing about the &lt;strong&gt;mesh nodes&lt;/strong&gt; that are not &lt;strong&gt;gateways&lt;/strong&gt; or &lt;strong&gt;bridges&lt;/strong&gt;–that is, the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;mesh node basic config&lt;/a&gt; is both necessary and sufficient for simple mesh nodes, even when using VLANs.  The only exception is if one of your mesh nodes is, for example, a laptop and you want it to use a particular mesh VLAN instead of the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.  In our case, however, the pre-configured mesh nodes are ready to route traffic of any VLAN that belongs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, let’s start with the &lt;strong&gt;gateway&lt;/strong&gt; configuration.&lt;/p&gt;

&lt;h3 id=&quot;mesh-gateway-with-vlan-configuration&quot;&gt;Mesh gateway with VLAN configuration&lt;/h3&gt;
&lt;p&gt;First, configure the gateway &lt;strong&gt;the same way&lt;/strong&gt; &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;, we’re going to change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; in the config files, then do the same for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;.  So, if you’re ready, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; back into it and let’s start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end, comment out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; config, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config interface 'lan_bat0'
#        option type 'bridge'		#uncomment if adding other interfaces to ifname
#        option ifname 'bat0'
#        option proto 'static'
#        option ipaddr '192.168.10.1'	#static addr for this gateway on the 192.168.10.0/24 net
#        option netmask '255.255.255.0'
#        list dns '1.1.1.1'			#cloudflare dns server
#        list dns '8.8.8.8'			#google dns server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then below it, let’s add a new interface for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_1'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.1'
        option proto 'static'
        option ipaddr '192.168.10.1'
        option netmask '255.255.255.0'
        list dns '1.1.1.1'
#        list dns '8.8.8.8'	#make it use cloudflare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_2'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.2'
        option proto 'static'
        option ipaddr '192.168.20.1'
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#make it use google
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_5'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.5'
        option proto 'static'
        option ipaddr '192.168.50.1'
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#make it use google
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, comment out all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; config, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config dhcp 'lan_bat0'
#        option interface 'lan_bat0'
#        option start 50		#start leasing at addr 192.168.10.50
#        option limit 100		#max leases, so for 100, leased addr goes from .50 to .149
#        option leasetime '3h'
#        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then add a DHCP server config for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface below it&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_1'
        option interface 'lan_bat0_1'
        option start 50
        option limit 100
        option leasetime '12h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and like before, we will add another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_2'
        option interface 'lan_bat0_2'
        option start 50
        option limit 100
        option leasetime '6h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_5'
        option interface 'lan_bat0_5'
        option start 50
        option limit 100
        option leasetime '1h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, comment out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; configs, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config zone
#        option name     lan_bat0
#        list network    'lan_bat0'
#        option input    ACCEPT
#        option output   ACCEPT
#        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config forwarding
#        option src   lan_bat0
#        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and below each one of them, add one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_1
        list network    'lan_bat0_1'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_1
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_2
        list network    'lan_bat0_2'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_2
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_5
        list network    'lan_bat0_5'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_5
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device.&lt;/p&gt;

&lt;p&gt;Once the gateway device is back online–by the way, it should still be at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; because the gateway’s default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; is intact, so even if we fuck something up, we should be able to find the gateway via a direct cable connection–&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which now should show the new interfaces we created (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1@bat0&lt;/code&gt;) and the static IP addr of your device in each one of them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;).  (As mentioned before, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option type 'bridge'&lt;/code&gt; was enabled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config stanza, then there will be an additional interface with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-&lt;/code&gt; prefix attached to it and the static IP addr of your device will be associated with it.)&lt;/p&gt;

&lt;p&gt;If everything looks good, we’re done with the gateway configuration!  We’re now ready to tell our bridges which VLAN ID to join with their standard interfaces.&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;You don’t need to use &lt;strong&gt;interface names&lt;/strong&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0_1&lt;/code&gt;; they can be whatever you find intuitive.  However, whatever you choose, &lt;strong&gt;keep them short&lt;/strong&gt;–that is, less than 14 characters long–or you’ll start experiencing config issues.&lt;/p&gt;

&lt;h3 id=&quot;mesh-bridge-with-vlan-configuration&quot;&gt;Mesh bridge with VLAN configuration&lt;/h3&gt;
&lt;p&gt;Here, we’ll also configure the bridges &lt;strong&gt;the same way&lt;/strong&gt; as in the gateway-bridge example. However, each bridge device will bridge &lt;strong&gt;a different VLAN ID&lt;/strong&gt;–namely, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;–with its default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, instead of bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; with its default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with the Network B (&lt;strong&gt;IoT&lt;/strong&gt;) bridge.&lt;/p&gt;

&lt;p&gt;Configure one of the mesh nodes &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;, except that in the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface stanza of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ifname&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Then, the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; stanza should look something like this
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface lan
      option type 'bridge'
      option ifname 'eth0.1 eth1 bat0.2'	#ethX might be different for your device
      option proto 'static'
      option ipaddr '192.168.20.10'
      option netmask '255.255.255.0'
      option gateway '192.168.20.1'
      option dns '192.168.20.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device.&lt;/p&gt;

&lt;p&gt;Once it comes back on, your laptop/PC will receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt; network, the bridge node should be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.10&lt;/code&gt;, and you should be able to access the Internet via the &lt;strong&gt;IoT&lt;/strong&gt; network (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If something doesn’t work&lt;/strong&gt;, review the config files from your gateway and then from the bridge, then reboot the gateway and the bridge, and test again.&lt;/p&gt;

&lt;p&gt;If this config is working, &lt;strong&gt;repeat the same steps&lt;/strong&gt; in the config of the other two bridges, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the Network C bridge (&lt;strong&gt;Guest&lt;/strong&gt;), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, and similarly, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.&lt;/code&gt; IP addr instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Network D bridge (&lt;strong&gt;Default&lt;/strong&gt;), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, and similarly, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.&lt;/code&gt; IP addr instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: When configuring a &lt;strong&gt;Guest&lt;/strong&gt; WAP, for example, you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option isolate 1&lt;/code&gt; to the relevant stanza in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file to deny client-to-client connectivity without the need of re-enabling the firewall in the bridge device.  If that’s not enough, re-enable the firewall and configure it according to your needs–at the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; file, there are examples you can use as template.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with batman-adv on any Linux device&lt;/h2&gt;
&lt;p&gt;OpenWrt makes using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; a nearly trivial thing but you certainly don’t need OpenWrt to implement a mesh network or even to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; in your mesh.  As mentioned before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; has long been added to the Linux Kernel and therefore, you should be able to configure it on pretty much &lt;em&gt;any&lt;/em&gt; device running Linux.&lt;/p&gt;

&lt;p&gt;Even though the specifics of configuring network interfaces and managing connections might be different across Linux distributions, the initial steps always consist of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Installing (in popular distros, this is &lt;em&gt;not needed&lt;/em&gt;) and loading (&lt;em&gt;always&lt;/em&gt; needed) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; Kernel module.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsmod&lt;/code&gt; will show a list of active modules, so we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; it to check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module has already been loaded, as follows
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;then if it isn’t loaded, we add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; kmod to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules&lt;/code&gt; and load it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modprobe&lt;/code&gt;, as follows&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# append batman-adv to /etc/modules
echo 'batman-adv' | sudo tee -a /etc/modules &amp;gt; /dev/null
# load the batman-adv module
sudo modprobe batman-adv
# check that the batman-adv module is now loaded
lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Afterwards, you can check the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sysfs&quot;&gt;&lt;strong&gt;sysfs&lt;/strong&gt;&lt;/a&gt; of each network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and there should be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv&lt;/code&gt; folder.  When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module gets configured to use a particular network device, the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/iface_status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/mesh_iface&lt;/code&gt; will change their contents to reflect that. In addition, once enabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; will show up as a new network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and its options (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gw_mode&lt;/code&gt;) can be modified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing new values to their corresponding file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/bat0/mesh/&lt;/code&gt;  (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 'client' &amp;gt; /sys/class/net/bat0/mesh/gw_mode&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; package. On apt-based distros like Debian, you should be able to install it with the following
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install batctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Using a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt; to configure the network interfaces, as illustrated in the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Quick-start-guide&quot;&gt;B.A.T.M.A.N. quick start guide&lt;/a&gt;.  In our case, however, the wireless mode of operation (as in the specification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; interface creation command) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mp&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adhoc&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibss&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Using something like &lt;a href=&quot;https://en.wikipedia.org/wiki/Wpa_supplicant&quot;&gt;wpa_supplicant&lt;/a&gt; to manage connections.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you know of a program that has a GUI and is able to handle such configurations on popular Linux distros, let me know about it. As far as I know, there’s currently nothing like that and it would be so very useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-physical-computing&quot;&gt;Bonus content: Physical computing&lt;/h1&gt;
&lt;p&gt;If your device has unused &lt;strong&gt;general purpose I/O&lt;/strong&gt; pins, it’s possible to do all sorts of things with them.  Check the &lt;a href=&quot;https://openwrt.org/docs/techref/hardware/port.gpio&quot;&gt;GPIO documentation&lt;/a&gt; for examples of how to install new LEDs and buttons, for instance.  (&lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#gpios&quot;&gt;Your device’s OpenWrt page can be very useful as well&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Also, if you want to change the functionality of a few of the existing LEDs on your wireless device, check the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/led_configuration&quot;&gt;LED configuration documentation&lt;/a&gt;.  Now that you have new mesh interfaces, you can use the LEDs to blink depending on the status of neighboring nodes, mesh gateways, or WAN connectivity through the mesh, to mention a few examples. (As mentioned before, &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#leds&quot;&gt;your device’s OpenWrt page can be very useful here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final remarks&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/futurama.jpg&quot; alt=&quot;Futurama Hubert Farnsworth&quot; class=&quot;PostImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good news, everyone! You’ve reached the end of this tutorial, which means it’s time to start planning your own mesh networking project.  I love to hear about different takes on the projects I post on my blog, so don’t hesitate to &lt;a href=&quot;/contact/&quot;&gt;contact me&lt;/a&gt; if you just want to share or bounce a few ideas.  Different perspectives give an opportunity to learn, grow, and innovate.&lt;/p&gt;

&lt;h2 id=&quot;other-similar-mesh-solutions&quot;&gt;Other similar mesh solutions&lt;/h2&gt;
&lt;p&gt;If you find this guide overwhelming but you’re still curious about mesh networking, take a look at the following alternatives (in alphabetical order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.commotionwireless.net&quot;&gt;Commotion Wireless&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://libremesh.org&quot;&gt;LibreMesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They have pre-configured images that will work “out of the box” with compatible devices.  You might find instructive to start playing around with their software first and once comfortable, build your own configuration from a default (or customized from the source) OpenWrt image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mesh" /><category term="adhoc" /><category term="ieee" /><category term="wifi" /><category term="wireless" /><category term="radio" /><category term="network" /><category term="router" /><category term="openwrt" /><category term="batman" /></entry><entry><title type="html">NanoPi M4 mini-NAS</title><link href="/blog/Nanopi-m4-mini-nas/" rel="alternate" type="text/html" title="NanoPi M4 mini-NAS" /><published>2020-07-06T13:42:00-03:00</published><updated>2020-07-06T13:42:00-03:00</updated><id>/blog/Nanopi-m4-mini-nas</id><content type="html" xml:base="/blog/Nanopi-m4-mini-nas/">&lt;p&gt;This article is about my mini network-attached storage (NAS) project based on FriendlyARM’s &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4&quot;&gt;NanoPi M4&lt;/a&gt; and its &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4_SATA_HAT&quot;&gt;SATA hat&lt;/a&gt;.  If you’re looking for a cheap, low-profile, low-power NAS solution for your home–or if you just like single-board computers (SBC)–then this article is for you.&lt;/p&gt;

&lt;p&gt;Here’s a preview of how my NanoPi M4 mini-NAS looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg&quot; alt=&quot;Final NAS 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg&quot; alt=&quot;Final NAS 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for comparison, here’s the unit next to a Raspberry Pi 3B:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg&quot; alt=&quot;Final NAS next to RPi&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article should give you a fairly good idea about the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What to buy;&lt;/li&gt;
  &lt;li&gt;What to install at the operating system (OS) and NAS management level;&lt;/li&gt;
  &lt;li&gt;How to put everything together and get it up and running.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, you’re free to do whatever you want for your own use-case (disk partitions, storage systems, file sharing method, applications, etc.).&lt;/p&gt;

&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;October 16th, 2020&lt;/strong&gt;, (#1 of 2): I’ve re-written the &lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan&quot;&gt;pwm-fan script for the NanoPi-M4&lt;/a&gt; and updated &lt;a href=&quot;#pwm-fan-controller&quot;&gt;the section about it&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;October 16th, 2020&lt;/strong&gt;, (#2 of 2): Despite the CPU tuning improvements I mentioned in my previous update, I’ve continued to have a few stability issues with Kernel 5.x.  After a while, I’ve decided to reinstall &lt;strong&gt;Armbian Buster&lt;/strong&gt; with &lt;strong&gt;Kernel 4.4.213-rk3399 (legacy)&lt;/strong&gt; and it has been smooth sailing ever since.  I updated the &lt;a href=&quot;#software&quot;&gt;section about OS installation&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 14th, 2020&lt;/strong&gt;: Added &lt;a href=&quot;#cpu-tuning&quot;&gt;information about CPU tuning to improve system stability&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 8th, 2020&lt;/strong&gt;: Added a &lt;a href=&quot;#nanopi-m4-sata-hat--passive-cooler--cables&quot;&gt;cautionary note about SATA power cables&lt;/a&gt;; Added a &lt;a href=&quot;#cost-estimate&quot;&gt;table with the cost of all hardware components of this build&lt;/a&gt;; I also got a hold of a DC jack adapter that will let me measure the actual current draw from my final mini-NAS and will make it available here as soon as I’m done testing it.  If you’ve additional suggestions, please &lt;a href=&quot;/contact&quot;&gt;reach out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The NanoPi M4 is a SBC made by FriendlyARM (a.k.a. FriendlyElec), a Chinese company based in Guandong.  They have their own &lt;a href=&quot;https://www.friendlyarm.com/&quot;&gt;online store&lt;/a&gt; that you can use to buy a few of the boards and components they develop but chances are you can also buy from pretty much any of the large retail stores out there (e.g., AliExpress, Amazon, Newegg).  [I bought all components from AliExpress, for example, from the folks at &lt;a href=&quot;https://embedunion.aliexpress.com/store/113595&quot;&gt;RealQvol&lt;/a&gt;.]  FriendlyARM also has a fairly good &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/Main_Page&quot;&gt;wiki&lt;/a&gt; that documents the main aspects of their boards.&lt;/p&gt;

&lt;p&gt;For a general review of the board, check these two videos:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/knS854Taz-E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/sxND3lLSwB4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;You can also find a CPU performance comparison between the NanoPi M4 v2 and the Raspberry Pi 4 at &lt;a href=&quot;https://www.androidpimp.com/embedded-single-board-computers/raspberry-pi-4-vs-nanopi-m4v2/&quot;&gt;this blog post&lt;/a&gt;, which suggests that the NanoPi M4 is superior and will be able to run tasks more efficiently than the RPi 4.&lt;/p&gt;

&lt;p&gt;In the following sections, I talked about the hardware (board, hat, case, drive choices and power supply), then the software (OS + NAS management interface) and finally, assembly and board/hat testing.  The article ends with a very brief presentation of my current configuration for the mini-NAS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;For this project, I’m using the following hardware:&lt;/p&gt;
&lt;h2 id=&quot;nanopi-m4-v2&quot;&gt;NanoPi M4 v2&lt;/h2&gt;
&lt;p&gt;I’m using the &lt;strong&gt;2nd version&lt;/strong&gt; (v2) of this board but everything should apply to v1.  I think the major differences between the two is that the &lt;strong&gt;v2 has LPDDR4 RAM&lt;/strong&gt;, instead of LPDDR3, a power button, the eMMC is connected the opposite way and screwed to the board, and the v2 looks slightly cleaner than the v1.  Other than that, when buying one, you’ll have the option to buy with 2GB or 4GB of RAM.  I’m using the one with &lt;strong&gt;4GB of RAM&lt;/strong&gt; and I recommend it if you’re going to use it as a NAS, even if you’re not going to use a RAM intensive filesystem like ZFS.  (For reference, ext4 uses very little RAM and a 2GB version won’t have any issues sharing files at all.  The problem in those cases is when you start adding applications to your NAS.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg&quot; alt=&quot;Nanopi M4 v2 board&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-heatsink&quot;&gt;NanoPi M4 heatsink&lt;/h2&gt;
&lt;p&gt;This little fella gets pretty hot but fortunately, this massive heatsink does a decent job at keeping it cool.  For even better performance, try adding a fan, use thermal paste instead of a pad, or use a copper heatsink with a large surface area.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg&quot; alt=&quot;Nanopi M4 heatsink&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-16-32gb-emmc--micro-sd-adapter&quot;&gt;NanoPi M4 16-32gb eMMC (+ micro-SD adapter)&lt;/h2&gt;
&lt;p&gt;The adapter makes it easy to flash an OS image directly onto the eMMC, so make sure to buy one.  As far as I know, you don’t need to use an eMMC with the NanoPi M4.  A micro-SD will do the trick but of course, it’s slower than an eMMC.  However, an eMMC is slower than a solid state drive (SSD), so if you know how to run the OS from a SSD, let me know.  Either way, the OS and NAS program we’re going to use is already configured to reduce the amount of writes to the eMMC/micro-SD/SSD (it comes configured to not use a swap partition, for example), which is good news if you’re worried about wearing it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg&quot; alt=&quot;Nanopi M4 eMMC&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-sata-hat--passive-cooler--cables&quot;&gt;NanoPi M4 SATA hat (+ passive cooler + cables)&lt;/h2&gt;
&lt;p&gt;This little hat has a &lt;a href=&quot;https://www.marvell.com/content/dam/marvell/en/public-collateral/storage/marvell-storage-88se92xx-product-brief-2012-04.pdf&quot;&gt;Marvell 88SE9215&lt;/a&gt; Four-Port 6 Gbps SATA I/O Controller.  It usually comes with two SATA interface cables and one SATA power cable able to power two drives.  If you’re going to use more than two drives, like me, make sure to buy additional SATA interface cables and an extension/splitter for the SATA power cable (e.g., &lt;a href=&quot;https://www.amazon.com/StarTech-com-Power-Splitter-Adapter-PYO4SATA/dp/B0086OGN9E/ref=sr_1_7?dchild=1&amp;amp;keywords=sata+power+extension+cable&amp;amp;qid=1591723716&amp;amp;sr=8-7&quot;&gt;StarTech splitter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg&quot; alt=&quot;Nanopi M4 SATA hat&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;When buying your SATA power cables, make sure the terminals are &lt;strong&gt;crimped&lt;/strong&gt; (use blade connectors) instead of &lt;strong&gt;molded&lt;/strong&gt;. In brief, molded terminals are not faulty by design but they are error prone, owning to the method that the cables are terminated (molding plastic), and such errors might lead to &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=sata+power+fire&amp;amp;ia=web&quot;&gt;catastrophic events&lt;/a&gt;. The ones in my original pictures were all molded and &lt;strong&gt;you should not use them&lt;/strong&gt;.  Thanks to &lt;strong&gt;/u/Fuck_Birches&lt;/strong&gt; and &lt;strong&gt;/u/WordBoxLLC&lt;/strong&gt; for pointing that out.  I have changed them for crimped ones now.  Here’s an instructive video about the issue:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/TataDaUNEFc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;If you plan on using the same 3d printed case I’m using (see &lt;a href=&quot;#kirkdis-3d-printed-case&quot;&gt;kirkdis’ 3D printed case&lt;/a&gt;), make sure to buy SATA cables with &lt;strong&gt;a straight/horizontal connector on both ends of the cable&lt;/strong&gt;.  That case is &lt;em&gt;very&lt;/em&gt; tight, so you might want to consider buying at least two shorter than usual SATA cables for the HDDs closer to the base.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg&quot; alt=&quot;Nanopi M4 SATA hat&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;12v-8a-power-supply-unit-psu&quot;&gt;12v (8A) power supply unit (PSU)&lt;/h2&gt;
&lt;p&gt;If you’re using the SATA hat, you only need a single PSU to provide power to everything, and there are even two different options to do that: (a) via the DC 5.5x2.1mm jack on the SATA hat, using an external PSU (e.g., &lt;a href=&quot;https://www.amazon.com/ALITOVE-100-240V-Converter-Transformer-5-5x2-1mm/dp/B07MXXXBV8/ref=sr_1_3?dchild=1&amp;amp;keywords=psu+12v+10a+5.5x2.1mm&amp;amp;qid=1591721696&amp;amp;s=electronics&amp;amp;sr=1-3&quot;&gt;Alitove&lt;/a&gt;); or (b) via the 4-pin 12v connector, also on the SATA hat, using a low power (&amp;lt; 200W) PC PSU.  If you’re going to use four low revolutions per minute (RPM) 2.5” HDDs (e.g., 5400 RPM), or four SSDs, a 12v PSU that is able to deliver up to 3A should be enough.  However, if you’re driving high-RPM 2.5” HDDs (e.g., 7200RPM) or 3.5” HDDs, then do the math before powering the components.  If you want to be safe, just get a 12v PSU that is able to deliver up to 8A.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg&quot; alt=&quot;NanoPi M4 PSU connections&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that if you’re planning on using a PC PSU, you’ll need to “hack it” in order to use the PSU without plugging it into a mobo.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;If you’re not 100% sure about tinkering with anything related to electricity, do not attempt to modify any PSU you might have lying around and just buy a 12v (8A) external PSU.  You can die even if the PSU is not connected to an outlet, owing to the presence of massive capacitors inside the PSU.  I cannot emphasize this enough.  Also, don’t go around cutting its cables to just make it look cute.  You might need them later.&lt;/p&gt;

&lt;p&gt;Alright, if you really want to use a PC PSU, follow the instructions in this video (but use a proper cable to connect the pins and make sure it’s well secured):&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/j4erf6SuqdI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;25-hard-disk-drive-hdd&quot;&gt;2.5” hard disk drive (HDD)&lt;/h2&gt;
&lt;p&gt;You can run 3.5” drives as well but if you plan to keep power consumption at a minimum, I suggest running 2.5” drives instead or better yet, SSDs.  Here, I’m going to use &lt;strong&gt;four 2.5” WD Black HDD&lt;/strong&gt; because they are fast (7200rpm as opposed to the traditional 5400rpm for 2.5” drives) and I don’t have a need for a large local storage space.  (Just be careful that the 1TB 2.5” WD Black &lt;a href=&quot;https://www.westerndigital.com/products/internal-drives/wd-black-hdd&quot;&gt;model WD10SPSX is actually SMR&lt;/a&gt;.)  In general, my preference order is the following: SSD &amp;gt; 2.5” CMR HDD &amp;gt; 3.5” NAS HDD &amp;gt; 3.5” other CMR HDD &amp;gt; 2.5” whatever HDD &amp;gt; 3.5” whatever HDD.  Of course, you don’t need to use all four SATA ports if there’s no demand for it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg&quot; alt=&quot;2.5&amp;quot; WD Black HDD 500GB&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg&quot; alt=&quot;2.5&amp;quot; WD Black HDD 750GB&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kirkdis-3d-printed-case&quot;&gt;&lt;a href=&quot;https://www.thingiverse.com/thing:3736661&quot;&gt;kirkdis’ 3D printed case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are other 3D printed cases out there but I like kirkdis’ take on a minimal case for the NanoPi M4 and 2.5” drives.  Notice that there are 3- and 4-bay versions of the HDD case and mounts.  More specifically, for this project, I printed the following pieces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topcase_all_versions.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fanmount_all_versions.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;04 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4bay_discmount.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4bay_hddbase.stl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t have a 3D printer, don’t worry about it!  Just Google &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3d printing service&lt;/code&gt; and you’ll find plenty of options to choose from.  You shouldn’t have to pay more than $100 for this case, for reference.  Also, remember to &lt;a href=&quot;https://www.amazon.com/hard-drive-screws/s?k=hard+drive+screws&quot;&gt;&lt;strong&gt;buy screws&lt;/strong&gt;&lt;/a&gt; for your HDDs, if you don’t have a bunch a lying around. You’ll need 08 for the bottom and top HDDs (16) + 04 for each in between (08), for a total of &lt;strong&gt;24 screws&lt;/strong&gt; for four drives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png&quot; alt=&quot;3D case stl&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to buy a &lt;a href=&quot;https://www.amazon.co.uk/OImaster-Backplane-Function-Hot-swap-Transmission/dp/B074V52L9D&quot;&gt;4-bay enclosure for your drives&lt;/a&gt; and use some sort of &lt;a href=&quot;https://www.amazon.com/GeeekPi-Raspberry-Cluster-Cooling-Heatsink/dp/B07MW3GM1T/ref=sr_1_1?dchild=1&amp;amp;keywords=stackable+case+rpi&amp;amp;qid=1591726436&amp;amp;sr=8-1&quot;&gt;stackable case&lt;/a&gt; for your NanoPi M4.  If you go with this solution, remember to buy extra spacers to make room for the SATA hat and cables (and you might need longer cables).  Alternatively, you can always use a standard computer case (or rack mounted) that has support for 4 drives.  Get rid of the mobo and you’re probably all set (see my note on modifying a PC PSU).&lt;/p&gt;

&lt;h2 id=&quot;fan-50x50x15mm-12v-08a&quot;&gt;Fan 50x50x15mm 12v (.08A)&lt;/h2&gt;
&lt;p&gt;(This fan size is for kirkdis’ 3D printed case. You’d want something different if you’re using another case.) You can probably find a .2A fan with the same dimensions, which will move more air but will be louder.  (If you’re going to use the PWM connector, take a look at &lt;a href=&quot;#pwm-fan-controller&quot;&gt;PWM Fan controller&lt;/a&gt; to learn how to use it.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png&quot; alt=&quot;50x50x15mm Fan&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you might want to buy a filter for the fan. However, notice that &lt;em&gt;there’s no space for the filter inside the 3d printed case&lt;/em&gt; but you can glue/attach it to the outside (that’s what I’ve done with the one I bought).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png&quot; alt=&quot;50x50x15mm Fan-filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cost-estimate&quot;&gt;Cost estimate&lt;/h2&gt;
&lt;p&gt;For reference, here’s how much each hardware component cost me in Brazilian Real (BRL$) and US Dollar (USD$), except for the HDDs.  Values were the total for all units, instead of per unit.  When appropriate, values were converted using the exchange rate from &lt;strong&gt;July 8th, 2020&lt;/strong&gt;. Shipping costs were not included.  Notice that all values are likely &lt;strong&gt;overestimating the actual cost&lt;/strong&gt; because many products include Brazilian taxes and were bought multiple months ago.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;quantity&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;BRL$&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USD$&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NanoPi M4 v2 4GB RAM&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;477.25&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;89.04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heatsink&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37.41&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32gb eMMC + mSD adapter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;144.61&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;26.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA hat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;149.97&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;27.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA III cable&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;35.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RTC battery&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23.52&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA power Y splitter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;02&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.96&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3d printed case&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;155&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28.92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PSU 12v 10A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;53.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50mm Fan 12v .08A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50mm Fan filter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;19.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TOTAL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1153.16&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;214.16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;For the OS, I’m using the &lt;strong&gt;server edition&lt;/strong&gt; of the &lt;strong&gt;Armbian Buster&lt;/strong&gt; with &lt;strong&gt;Kernell 4.4 (legacy)&lt;/strong&gt;. &lt;em&gt;(Of note, this section has been updated since the original article. In the previous version of the article, I suggested installing the latest Kernel 5.x instead of the legacy 4.4.x. The reason is that I’ve had multiple stability issues with Kernel 5.x and after switching to legacy, it’s been solid as a rock.  That said, I’ve also read that many users have been running the latest Kernel without any issues, which makes me suspicious that there was somthing corrupted with my previous installation. So, my suggestion is the following: if you can afford testing for a few days, do try the latest Kernel 5.x first, and if you run into issues, reinstall the OS with legacy Kernel; otherwise, if you want it ready and solid right away, go straight to legacy Kernel.)&lt;/em&gt;  You can download the image from the &lt;a href=&quot;https://www.armbian.com/nanopi-m4/#kernels-archive-all&quot;&gt;official Armbian website&lt;/a&gt;.  Don’t skip the integrity check.  On Linux, just open a terminal and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1sum /path/to/file.img.xz&lt;/code&gt; and check the output against the SHA file from the Armbian website.  This ensures your downloaded file has the same hash as the true file.  If you’ve ever used Debian or derivatives before (e.g., Ubuntu, Raspbian), Armbian will feel like home.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg&quot; alt=&quot;SSH welcome and lscpu&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t like terminals, don’t worry.  You pretty much don’t need to ever see it again because we’ll be managing everything from &lt;a href=&quot;https://www.openmediavault.org&quot;&gt;Openmediavault 5 (OMV5)&lt;/a&gt;.  I’ve been using OMV since the 3rd edition as my go-to NAS solution and it has never let me down.  It’s not super fancy, like freeNAS and unraid, but it will get the job done for most home-users.  Plus, it’s free and &lt;a href=&quot;https://github.com/openmediavault/openmediavault&quot;&gt;open-source&lt;/a&gt; and this matters to me.  It also comes with a bunch of packages that facilitate file sharing, monitoring resources, manage users, plug-ins, etc., and it has a very clean graphical user interface accessible via web-browser (webUI):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png&quot; alt=&quot;OMV4 dashboard&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, the folks at OMV put together a guide on their Github repo that tells exactly &lt;a href=&quot;https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Adden-A-Installing_OMV5_on_Armbian.pdf&quot;&gt;how to install OMV on Armbian&lt;/a&gt;.  Download their PDF and follow it step-by-step, with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of flashing the OS image onto a micro-SD, plug your eMMC into the micro-SD adapter and then flash the OS image onto the eMMC.&lt;/li&gt;
  &lt;li&gt;Before turning the NanoPi M4 on with the eMMC installed for the first time, remove any drives connected to the SATA hat.  This is more of a cautionary move than anything else.  We want to minimize the risk of corrupting the eMMC at these initial configuration steps and there’s no need for additional drives at this point.  We’ll add them after we’re done installing OMV5.  The same applies to any other device connected to the NanoPi M4, like USB devices.  Keep it simple right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you’ll learn, the OMV installation script will take some time to finish.  We’re talking about more than 10min.  Be patient!  Afterwards, open a web browser and log into OMV’s WebUI and do your thing or read the &lt;a href=&quot;https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Getting_Started-OMV5.pdf&quot;&gt;Getting Started Guide&lt;/a&gt; that the OMV team wrote.&lt;/p&gt;

&lt;h2 id=&quot;cpu-tuning&quot;&gt;CPU tuning&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Rockchip RK3399&lt;/strong&gt; is a fairly new and nichey system on a chip and therefore, its implementation is not widely stable. On Armbian with Kernel 5.4, for example, I’ve noticed a few CPU-related Kernel panics that cause the board to freeze/reboot. &lt;a href=&quot;https://forum.armbian.com/topic/11710-nanopi-m4-v2-m4-image-not-working/page/7/?tab=comments#comment-93238&quot;&gt;Upon further investigation&lt;/a&gt;, it seems this issue can be fixed by changing the default CPU governor from &lt;em&gt;ondemand&lt;/em&gt; to &lt;strong&gt;&lt;em&gt;conservative&lt;/em&gt;&lt;/strong&gt;, and setting the &lt;em&gt;minimum CPU frequency to &lt;strong&gt;1.4GhZ&lt;/strong&gt;&lt;/em&gt; and the &lt;em&gt;maximum to &lt;strong&gt;1.8GhZ&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Be extra careful when tuning your CPU because things can go wrong if you set the board to operate in a condition that it was not meant to.  Move slowly and keep an eye on related statistics afterwards to make sure you’re not going to fry the board.&lt;/p&gt;

&lt;p&gt;There are two ways to change the CPU frequency and governor. The first and recommended one is via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;armbian-config&lt;/code&gt; configuration utility:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Run the configuration utility
armbian-config
# Navitage to CPU options: System / CPU
# Set min frequency to 1416000 Hz
# Set max frequency to 1800000 Hz
# Set the governor to conservative
# Confirm 
# Exit the configuration utility
# Reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second method is by making direct changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpufrequtils&lt;/code&gt; file, as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Edit the cpufrequtils file
echo -e 'ENABLE=&quot;true&quot;\nGOVERNOR=conservative\nMAX_SPEED=1800000\nMIN_SPEED=1416000' &amp;gt; /etc/default/cpufrequtils
# Reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My board has been running rock solid after making such changes, so I recommend it.  Of course, you can try to use other configurations.  My understanding from what I read about the Kernel panics is that it’s likely a power issue caused by the rapid switching of CPU frequencies that the &lt;em&gt;ondemand&lt;/em&gt; governor makes.  The &lt;em&gt;conservative&lt;/em&gt; governor also scales the CPU frequency dynamically but much more gradually than the &lt;em&gt;ondemand&lt;/em&gt; governor.
By this logic, setting the governor to either &lt;em&gt;performance&lt;/em&gt; or &lt;em&gt;powersaving&lt;/em&gt; will likely improve stability as well because those governors do not change the CPU frequency at all.&lt;/p&gt;

&lt;h2 id=&quot;pwm-fan-controller&quot;&gt;PWM Fan controller&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;2-PIN PH2.0 connector&lt;/strong&gt; on the SATA hat is a power width modulated (PWM) connector for a 12v fan.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg&quot; alt=&quot;PWM fan connector&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this connector is not enabled by default and furthermore, the Armbian OS does not come with a service that allows you to control the fan speed according to the CPU temperature.  Fortunately, other users have reported this issue before and a few of them have even written scripts to fix this issue.  I’ve made several changes to previous scripts (e.g., &lt;a href=&quot;https://forum.armbian.com/topic/11086-pwm-fan-on-nanopi-m4/?tab=comments#comment-95180&quot;&gt;mar0ni’s script&lt;/a&gt;) and wrote a highly configurable fan controller that uses a bounded model to set the fan speed dynamically.  To make it easier for me (and everyone else), I’ve created a Github repo (&lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan&quot;&gt;cgomesu/nanopim4-satahat-fan&lt;/a&gt;&lt;/strong&gt;) for the fan controller.  For more detailed and updated info about the controller, please refer to the repo (and if you’ve any issues or suggestions, open an issue there).&lt;/p&gt;

&lt;p&gt;Briefly, to install and run the script, read the &lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan/blob/master/README.md&quot;&gt;README.md&lt;/a&gt; or follow these instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install git, clone the repo, and test the script

apt update
apt install git
cd /opt

# From now on, if you're not running as root, append 'sudo' if you run into permission issues
git clone https://github.com/cgomesu/nanopim4-satahat-fan.git
cd nanopim4-satahat-fan

# Allow the script to be executed
chmod +x pwm-fan.sh

# Test the script
./pwm-fan.sh

# Check for any error messages 
# When done, press Ctrl+C after to send a SIGINT and stop the script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks good, then run the fan controller in the background (as a systemd service), as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Copy the pwm-fan.service file to your systemd folder
cp /opt/nanopim4-satahat-fan/pwm-fan.service /lib/systemd/system/

# Enable the service and start it
systemctl enable pwm-fan.service
systemctl start pwm-fan.service

# Check the service status to make sure it's running without issues
systemctl status pwm-fan.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, if you don’t want to play around with PWM stuff and are okay with having your fan at 100%, 24/7, then you can just connect it to the board as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg&quot; alt=&quot;PWM fan alt connector&quot; class=&quot;PostImage PostImage--small&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of note, you can also do the latter using the fan controller by running the script in &lt;em&gt;full speed mode&lt;/em&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./pwm-fan.sh -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;assembly&quot;&gt;Assembly&lt;/h1&gt;
&lt;p&gt;If you’re like me, you’ll not receive all parts at the same time and you’ll only print the case after making sure that the board and hat are both working.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg&quot; alt=&quot;Nanopi M4 parts on table&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you’ll want to do is &lt;strong&gt;to flash the OS onto the eMMC&lt;/strong&gt;.  That’s because the eMMC will not be as accessible as a micro-SD card and HDDs once the SATA hat is installed–it is screwed to the board itself, above the audio jack (in v2, and above the HDMI in v1).&lt;/p&gt;

&lt;p&gt;After that, install the eMMC and the SATA hat.  Your SBC should look something like this right now:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg&quot; alt=&quot;Nanopi M4 with hat 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg&quot; alt=&quot;Nanopi M4 with hat 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it’s time to test the board and the SATA hat.  &lt;strong&gt;Connect the board to an Ethernet cable and plug it into your 12v PSU.&lt;/strong&gt;  Observe the red and green LEDs as it turns on and starts running the OS for the first time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg&quot; alt=&quot;Nanopi M4 connected to PSU&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and &lt;strong&gt;find out which IP address your DHCP server gave to your NanoPi M4&lt;/strong&gt; (you might also be able to find it via the hostname nanopim4) and ping it to check it’s up and running.  If it’s replying, then &lt;strong&gt;SSH into it&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; (default pass is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234&lt;/code&gt;).  When logging in for the first time, Armbian will ask to change password and to create a new sudo user.  Go ahead and do that.  (I’ll assume that from this point on, you’ll still be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; instead of the sudo user.  If you’re using the latter though, then add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; prefix to each of the commands below.)&lt;/p&gt;

&lt;p&gt;Afterwards, run the &lt;a href=&quot;https://docs.armbian.com/User-Guide_Armbian-Config/&quot;&gt;&lt;strong&gt;armbian configuration utility&lt;/strong&gt;&lt;/a&gt; to make sure your NAS has the correct time, date, UTC offset, apt mirrors, etc., by running the command&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;armbian-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Depending on what you chose to change here, Armbian will need to reboot.  That’s fine.  Just SSH into it again afterwards.)  Now, let’s make sure all packages that came with the OS are up-to-date by running&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Go back to your router/firewall and assign a static IP address to your NanoPi M4 and then reboot the NanoPi&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After reboot, wait a few seconds and try to SSH into the static IP address you gave to the NanoPi and if everything looks good, it’s time to run the &lt;strong&gt;OMV installation script&lt;/strong&gt; (see &lt;a href=&quot;#software&quot;&gt;&lt;strong&gt;software&lt;/strong&gt;&lt;/a&gt;).  Again, this will take some time.  &lt;strong&gt;Be patient!&lt;/strong&gt;  When it’s done, open a web-browser and type the static IP address of your NanoPi M4.  At this point, it’s a good idea to do at least the following in &lt;strong&gt;System&lt;/strong&gt; (remember to &lt;strong&gt;Apply changed settings&lt;/strong&gt; every time it asks you to):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change your default admin password in &lt;strong&gt;General Settings&lt;/strong&gt;.  This will only affect access to OMV’s webUI.  It has nothing to do with your Linux user credentials;&lt;/li&gt;
  &lt;li&gt;Check &lt;strong&gt;Date/Time&lt;/strong&gt; settings to make sure they are right;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;System Monitoring&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Enable and configure &lt;strong&gt;Notification&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;In &lt;strong&gt;Power Management&lt;/strong&gt;, enable Monitoring and select the Shutdown action for the power button;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reboot&lt;/strong&gt; via the webUI (arrow at the top right corner / reboot).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After rebooting, check your &lt;strong&gt;Storage&lt;/strong&gt; and &lt;strong&gt;Diagnostics&lt;/strong&gt; tabs.  In Storage / Disks, there should be a single device for the OS eMMC.  Later on, we will come back to see if the drives plugged into the SATA hat are showing up here.&lt;/p&gt;

&lt;p&gt;In Diagnostics / Sys Info, check all tabs to make sure they are displaying things correctly.  Your OMV should be collecting Performance Stats at this point, so there should be graphs available.&lt;/p&gt;

&lt;p&gt;(If you’re new to OMV, take your time here and explore it a little bit.  This is a good time to read the Getting Started guide and get yourself familiarized with the webUI.)&lt;/p&gt;

&lt;p&gt;If everything is good, &lt;strong&gt;shutdown the NanoPi via the webUI&lt;/strong&gt;.  With everything off (none of the LEDs should be red), plug one or more HDDs to the SATA hat, as follows (I’m using an old 500GB Toshiba 2.5” HDD in the pictures below just for testing):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg&quot; alt=&quot;Nanopi M4 hat HDD test&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;turn on&lt;/strong&gt; the board.  You should notice a new LED on the other side of the SATA hat lighting up right away.  (The hat has LEDs for each SATA port.  If it’s not lighting up for a connected drive, you already know there’s a problem, like insufficient power or a bad connection.)  Go to the &lt;strong&gt;OMV webUI&lt;/strong&gt; and in &lt;strong&gt;Storage / Disks&lt;/strong&gt;, see if the NanoPi was able to detect your HDD connected to the SATA hat correctly.  If not, press the ‘Scan’ button and check again.  You can repeat this process for each SATA interface if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg&quot; alt=&quot;Storage/Disks OMV webUI&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, if it looks like the board and SATA hat are working as they should, then &lt;strong&gt;it’s time to put everything inside the case&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;my-printed-cases&quot;&gt;My printed cases&lt;/h2&gt;
&lt;p&gt;As I’ve mentioned before, I’m using kirkdis’ 3D printed case. I printed two cases for this project. This is the first one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg&quot; alt=&quot;CGomesu case 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg&quot; alt=&quot;CGomesu case 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s the second (backup) case:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scheisser.net/?p=7781&quot;&gt;In kirkdis’ last post&lt;/a&gt;, he mentioned&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“… to be careful when you put the upper case over the external ports as this is the most fragile part. Designwise I didn´t found a workaround for this area as result it can happen if you push too much that the connections between the ports break off but with a liztle bit patience you can set iz in place as one piece.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think I read his comment a bit too late:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but I managed to fix it a little bit by the end:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;my-opinion-about-the-case&quot;&gt;My opinion about the case&lt;/h3&gt;

&lt;p&gt;The HDD case and disk mounts feel very sturdy in comparison to the board case (a.k.a. upper case). I feel the &lt;strong&gt;board case&lt;/strong&gt; could be improved in the following way:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add &lt;strong&gt;thicker walls&lt;/strong&gt;, especially where the USB ports and the DC jack are;&lt;/li&gt;
  &lt;li&gt;Add a way of &lt;strong&gt;screwing&lt;/strong&gt; the board to the case;&lt;/li&gt;
  &lt;li&gt;Make the base of the fan mount thinner, so we can use the screws that come along with the board, instead of having to find longer screws just for that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding the &lt;strong&gt;whole case&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It could be &lt;strong&gt;a bit larger&lt;/strong&gt; to make room for the cables and improve air flow.  Right now, it’s an extremelly tight fit if you’re using four HDDs and some cables get bent in ways that are probably not good for them in the long run;&lt;/li&gt;
  &lt;li&gt;Because all printed pieces are so tightly connected to each other, &lt;strong&gt;there’s very little room for error&lt;/strong&gt; when printing them. I feel that both the HDD case and board case should be a little looser and rely more on &lt;strong&gt;screws&lt;/strong&gt; to secure the printed pieces to the hardware.  Honestly, it was kind of a pain to attach and remove the board to the board case, and similarly, the HDD stack to the HDD case. It felt &lt;em&gt;too&lt;/em&gt; tight with both cases I printed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Honestly, I don’t know shit about 3d printing.  This is just my opinion on how the case could be improved.  If something I said doesn’t make sense, let me know.&lt;/p&gt;

&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;/h3&gt;
&lt;p&gt;If you don’t want to figure out how to put all pieces together on your own, take a look at kirkdis’ video and notice how he disassembled his unit:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zmxovsvsy_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;My advice is to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start by attaching the HDDs to the four disk mount pieces, so that you have a nice stack by the end of this step;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect all the SATA data and SATA power cables to the SATA hat;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the fan to the mount and the mount to the SATA hat and plug it to the board;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Put the board with the fan mount inside its case, making sure all the SATA cables are accessible from the other side of the case, where the HDDs will be;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the HDD stack to the base of the board case and connect the SATA cables;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now, cover the HDD stack with its case and screw the bottom of the case to the last HDD;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your PSU to the DC power jack on the SATA hat;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Turn it on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà!  Check your OMV webUI to make sure it detected all connected disks and then start mounting them and adding your file sharing configurations, installing applications, adding users, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg&quot; alt=&quot;Nanopi M4 hat 4 HDD test&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final Remarks&lt;/h1&gt;
&lt;p&gt;I’m very happy with this mini-NAS.  It’s arguably not as powerful as my previous HP Proliant Gen8 that I turned into a NAS but it is &lt;strong&gt;more energy efficient&lt;/strong&gt;, &lt;strong&gt;smaller&lt;/strong&gt;, &lt;strong&gt;quieter&lt;/strong&gt; and &lt;strong&gt;cheaper&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Regarding applications, I strongly suggest you to take a look at &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt;.  You can install both Docker and Portainer from within the OMV webUI (System / OMV-Extras / Docker - Docker Install; Portainer Install).  They make installing and managing applications so much easier.  Just be mindful that you’re running docker within an &lt;strong&gt;ARM architecture&lt;/strong&gt;, so any image must have a compatible &lt;strong&gt;arm release&lt;/strong&gt; to be able to run with the NanoPi M4.&lt;/p&gt;

&lt;p&gt;I don’t use any sort of RAID solution for this NAS.  Instead, I use unionFS/mergerFS to pool multiple drives/folders into individual folders and then have various applications running periodic local backups and overnight remote backups.  (The SATA hat &lt;em&gt;does not support hardware RAID&lt;/em&gt; but if you’re into redundancy, then it’s possible to create a software RAID from within the OMV webUI.)&lt;/p&gt;

&lt;p&gt;Here’s an overview of how I’m currently organizing my mini-NAS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png&quot; alt=&quot;mini-NAS drives and folders&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.openmediavault.org/index.php?thread/29089-nanonas-nanopi-m4-3-bay-or-4-bay-most-compact-and-low-consumption-raid/&quot;&gt;According to kirkdis&lt;/a&gt;, a NanoPi M4 mini-NAS with three 2.5” HDDs consumes between &lt;strong&gt;7W&lt;/strong&gt; (idle) and &lt;strong&gt;20W&lt;/strong&gt; (heavy load). I cannot measure the actual power consumption of my build but I think it’s safe to assume that it consumes a bit more power than kirkdis’, especially under heavy load. I estimate that mine consumes between 9W (idle) and 25W (heavy load), owing to the fact that my HDDs have a higher RPM and I’m using an additional 2.5” HDD.  For comparison, a &lt;a href=&quot;https://www.techpowerup.com/review/synology-ds918plus/13.html&quot;&gt;Synology Diskstation DS918+ with four 3.5” HDDs&lt;/a&gt; consumes between 27W (idle) and 44W (heavy load).&lt;/p&gt;

&lt;p&gt;Well, this concludes my NanoPi M4 mini-NAS project. I hope you enjoyed this article and that it will inspire you to create something for your own use-case.  As usual, let me know if you have any questions or suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content&quot;&gt;Bonus Content&lt;/h1&gt;
&lt;h2 id=&quot;real-time-clock&quot;&gt;Real time clock&lt;/h2&gt;
&lt;p&gt;The NanoPi M4 comes with a built-in real time clock (RTC) module and to use it, all that you need is a compatible &lt;strong&gt;RTC battery&lt;/strong&gt; with a &lt;em&gt;Molex 53398-0271 connector&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg&quot; alt=&quot;RTC battery&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, its main purpose is to keep track of time, regardless of the board’s power state.  However, it also supports waking up the NanoPi from various power states.  On Linux, you can access and configure all such options with a package called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rtcwake&lt;/code&gt;, which comes pre-installed on Armbian (and pretty much any other Linux distro, by the way, because it’s part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util-linux&lt;/code&gt; core package).  (If the package is not accessible from within your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whereis rtcwake&lt;/code&gt; and type the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/to/rtcwake&lt;/code&gt;.)  You can find info about its usage with the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; argument. For more detailed info, read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man rtcwake&lt;/code&gt;. An RTC battery is &lt;em&gt;really&lt;/em&gt; cheap (&lt;a href=&quot;https://www.amazon.com/Rtc-Battery/s?k=Rtc+Battery&quot;&gt;less than $10&lt;/a&gt;) and worthy of your attention for such a key component of a home network.  You definitely don’t want your mini-NAS time travelling to 1970…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg&quot; alt=&quot;RTC battery&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="sbc" /><category term="arm" /><category term="homelab" /><category term="homeserver" /><category term="storage" /></entry><entry><title type="html">The ASRock J3355b-itx pfSense box</title><link href="/blog/Pfsense-white-box/" rel="alternate" type="text/html" title="The ASRock J3355b-itx pfSense box" /><published>2020-06-25T10:31:25-03:00</published><updated>2020-06-25T10:31:25-03:00</updated><id>/blog/Pfsense-white-box</id><content type="html" xml:base="/blog/Pfsense-white-box/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense CE&lt;/a&gt; is a free, &lt;a href=&quot;https://github.com/pfsense/pfsense&quot;&gt;open-source&lt;/a&gt;, and very popular &lt;strong&gt;firewall/router&lt;/strong&gt; that runs on &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt; and is developed by &lt;a href=&quot;https://www.netgate.com/&quot;&gt;Netgate&lt;/a&gt;.  Even though Netgate sells &lt;a href=&quot;https://www.netgate.com/products/appliances/&quot;&gt;official pfSense appliances&lt;/a&gt;, it’s possible to build your own, custom-made pfSense box for (way) less money (at the expense of way less support from Netgate).&lt;/p&gt;

&lt;p&gt;In this article, I talked about &lt;strong&gt;my ASRock mini-ITX pfSense box project&lt;/strong&gt;.  In the first part, I listed all the necessary hardware to build the box, and in the second part, I briefly talked about the software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;This project has five main hardware components, namely the &lt;strong&gt;motherboard&lt;/strong&gt; (mobo), the &lt;strong&gt;network interface card&lt;/strong&gt; (NIC), &lt;strong&gt;storage&lt;/strong&gt;, &lt;strong&gt;case&lt;/strong&gt;, and &lt;strong&gt;power supply unit&lt;/strong&gt; (PSU).&lt;/p&gt;

&lt;h2 id=&quot;motherboard&quot;&gt;Motherboard&lt;/h2&gt;
&lt;p&gt;Chances are that if you search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfSense white-box&lt;/code&gt;, you’ll find someone mentioning the &lt;a href=&quot;https://www.asrock.com/mb/Intel/J3355B-ITX/&quot;&gt;&lt;strong&gt;ASRock J3355b-itx&lt;/strong&gt;&lt;/a&gt;.  This is definitely &lt;strong&gt;not a top of the line&lt;/strong&gt; mobo but it comes with a &lt;strong&gt;passively cooled &lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark/products/95597/intel-celeron-processor-j3355-2m-cache-up-to-2-5-ghz.html&quot;&gt;Intel dual-core processor&lt;/a&gt;&lt;/strong&gt; (AES-NI enabled), two &lt;strong&gt;SO-DIMM DDR3L&lt;/strong&gt; memory slots, a &lt;strong&gt;PCIe 2.0x16&lt;/strong&gt; expansion slot, and 2x SATA III ports.  On top of that, this is a &lt;strong&gt;&lt;em&gt;mini&lt;/em&gt;-ITX mobo&lt;/strong&gt;, so we can put it inside a low-profile case.  At the very least, if you’re looking for a more recent mobo, my suggestion is to use the ASRock J3355b-itx as reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg&quot; alt=&quot;ASRock J3355b-itx&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;network-interface-card&quot;&gt;Network interface card&lt;/h2&gt;
&lt;p&gt;Even though the ASRock mini-itx comes with a built-in NIC, it’s a single port Realtek NIC that pfSense will likely not recognize out of the box.  Ideally, you’d buy and install an Intel NIC using the PCI-e expansion slot on the ASRock mobo.  The card choice depends on your needs but at the very least, consider a &lt;strong&gt;Gigabit Intel NIC with two ports&lt;/strong&gt;, one for WAN and another for LAN.  (It’s possible to use a single port with a VLAN-capable switch but this is a far more complex setup.)  Also, make sure the Intel NIC comes with a &lt;strong&gt;low-profile support&lt;/strong&gt; or it won’t fit many min-ITX cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg&quot; alt=&quot;Intel NIC with 2 ports&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;/h2&gt;
&lt;p&gt;pfSense uses very little storage space, so you don’t need TBs of storage here.  The things that matter are read/write speed and reliability.  A simple &lt;strong&gt;120GB solid-state drive (SSD)&lt;/strong&gt; will be more than enough, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg&quot; alt=&quot;SSD&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;case&quot;&gt;Case&lt;/h2&gt;
&lt;p&gt;You can use &lt;em&gt;any&lt;/em&gt; mini-ITX case &lt;em&gt;as long as&lt;/em&gt; it has support for at least &lt;strong&gt;one expansion slot&lt;/strong&gt;.  Also, note that some mini-itx cases have an expansion slot parallel to the mobo (it sits above the mobo’s i/o plate), instead of perpendicular (next to the mobo’s i/o plate).  That will usually be okay but you’ll need to buy compatible PCI-e extension cable then.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-supply-unit&quot;&gt;Power supply unit&lt;/h2&gt;
&lt;p&gt;If you bought an expensive case with a built-in PSU, go ahead and use it.  However, if you bought a cheap case with a PSU or one that even doesn’t have a built-in PSU, then buy and use a &lt;a href=&quot;https://www.amazon.com/s?k=pico+PSU&quot;&gt;&lt;strong&gt;pico PSU&lt;/strong&gt;&lt;/a&gt;. My experience is that &lt;strong&gt;cheap PSUs come with bad fans&lt;/strong&gt;, so avoid them if your firewall will be next to anyone in the house because it will eventually start making a lot of noise.  A pico PSU is the way to go, and because this box uses very little power, buy a low power PSU (anything between 60W-180W should be okay, for reference).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg&quot; alt=&quot;PicoPSU&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Software-wise, there’s not much to say other than&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the ISO from the &lt;a href=&quot;https://www.pfsense.org/download/&quot;&gt;official website&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Check the SHA signature of the downloaded file against the one from the official website;&lt;/li&gt;
  &lt;li&gt;Flash the image onto a USB stick;&lt;/li&gt;
  &lt;li&gt;Connect a monitor and keyboard to your pfSense box;&lt;/li&gt;
  &lt;li&gt;Insert the USB stick into your pfSense box, turn it on, and follow the instructions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you want a more in-depth look into installation and initial configuration, check &lt;a href=&quot;https://docs.netgate.com/pfsense/en/latest/install/installing-pfsense.html&quot;&gt;&lt;strong&gt;the official docummentation&lt;/strong&gt;&lt;/a&gt;.  Alternatively, there’s a very easy to follow video tutorial that &lt;a href=&quot;https://www.youtube.com/channel/UCHkYOD-3fZbuGhwsADBd9ZQ&quot;&gt;Lawrence Systems&lt;/a&gt; put together. (It’s a bit old but still valid.)&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/9kSZ1oM-4ZM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes the basics of a cheap, low-profile, and low-power (yet powerful) pfSense white-box.  I’ve never had any issues with this hardware and recommend it to anyone interested in diving into firewalls or just looking for something a bit more advanced than what commercial routers can offer.  If you want to try something different than pfSense, take a look at &lt;a href=&quot;https://opnsense.org/&quot;&gt;OPNsense&lt;/a&gt;–a pfSense fork–for another free and open-source firewall software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="homelab" /><category term="homeserver" /><category term="firewall" /><category term="network" /></entry><entry><title type="html">Youtube live-streams as IPTV channels for TVHeadend</title><link href="/blog/Youtube-as-IPTV-with-TVH/" rel="alternate" type="text/html" title="Youtube live-streams as IPTV channels for TVHeadend" /><published>2020-05-07T00:00:00-03:00</published><updated>2020-05-07T00:00:00-03:00</updated><id>/blog/Youtube-as-IPTV-with-TVH</id><content type="html" xml:base="/blog/Youtube-as-IPTV-with-TVH/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;January 21st, 2021&lt;/strong&gt;: &lt;strong&gt;READ THIS&lt;/strong&gt;. This tutorial &lt;strong&gt;has been deprecated&lt;/strong&gt; because I wrote a &lt;strong&gt;new tutorial&lt;/strong&gt; about the integration between Tvheadend and Streamlink, called &lt;strong&gt;&lt;a href=&quot;/blog/Tvhlink/&quot;&gt;TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink&lt;/a&gt;&lt;/strong&gt;.  The integration has been greatly simplified and is more reliable than before.  In addition, the new tutorial is much more comprehensive than this one.  The new tutorial is self-contained, so you don’t need to read this one first–just skip it altogether.  I will only keep this up for archiving purposes.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;September 15th, 2020&lt;/strong&gt;: There’s a &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh/releases&quot;&gt;new release of the Youtube4TVH&lt;/a&gt; program that does not require the use of API keys. The section about how to create an API key has been updated accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;June 23rd, 2020&lt;/strong&gt;: Moved content from Blogger to my website and converted to markdown.  Fixed typos I found.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;May 19th, 2020&lt;/strong&gt;: Added info about TVH m3u re-fetch period and youtube4tvh cronjob for streams that change very often.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;May 14th, 2020&lt;/strong&gt;: Added more info about streamlink install and outdated versions; fixed a few typos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this guide, we will learn how to feed Youtube live-streams into a TVHeadend (TVH) server as IPTV channels.  This is a fairly advanced guide but I’ll try my best to make it as digestible as possible to any individual with minimal knowledge about selfhosting.  You will need a &lt;strong&gt;Linux distro&lt;/strong&gt; (e.g., Debian, Ubuntu) to follow this guide.  All the software described here is &lt;strong&gt;free and open-source&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’m not an expert in any of the topics mentioned here.  If you have suggestions on how to improve something, please leave a comment below stating what could be changed and why it should be changed.&lt;/p&gt;

&lt;p&gt;Youtube4tvh is a utility program I wrote just for this guide.  I welcome anyone who wants to improve it or fork into something more abstract.  If that sounds like something you want to do, please head to &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;my Github repo&lt;/a&gt; and hit me up once you’ve done some coding.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There are multiple reasons to watch Youtube live-streams as if they were IPTV channels.  Here are a reasons few that come to mind right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s free and all programs are open-source;&lt;/li&gt;
  &lt;li&gt;There is at least one Youtube 24/7 live-stream that you enjoy. Some of my personal favorites, per category:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;News&lt;/strong&gt;: ABC News AU, Sky News, DW in English, France 24 in English&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: NASA TV, Space Videos, Space &amp;amp; The Universe HD&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Nature&lt;/strong&gt;: Cornell Lab of Ornithology Cams, Monterey Bay Aquarium, Explore Oceans, Explore Nature, Volcanoverse&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Other&lt;/strong&gt;: Virtual Railfan, earthTV, I Love You Venice,&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Radio&lt;/strong&gt;:  BGM channel, Cafe del Mar, Stay See&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You want to make selected Youtube live-streams available as IPTV channels through a TVH server (TVH -&amp;gt; Streamlink pipe -&amp;gt; Youtube);&lt;/li&gt;
  &lt;li&gt;You want to keep your streaming services as centralized as possible.  That is, instead of multiple apps, you can manage all of them using a single application (TVH);&lt;/li&gt;
  &lt;li&gt;You want to take advantage of one of the fastest and most reliable media delivery networks out there (Youtube’s CDN);&lt;/li&gt;
  &lt;li&gt;You dislike Youtube ads (Streamlink will get rid of them without the need to install any filtering system);&lt;/li&gt;
  &lt;li&gt;You like how it looks for the client:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/9FSPf5wISUY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;p&gt;By the end of the guide, you’ll have learned how to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a customized Youtube live-stream m3u playlist with the help of youtube4tvh;&lt;/li&gt;
  &lt;li&gt;Install a TVH server on a Linux machine;&lt;/li&gt;
  &lt;li&gt;Install Streamlink to pipe live-stream data into a TVH server;&lt;/li&gt;
  &lt;li&gt;Add a Youtube live-stream m3u playlist to a TVH server as an IPTV auto network;&lt;/li&gt;
  &lt;li&gt;Configure a TVH server to auto-map muxes to channels using bouquets;&lt;/li&gt;
  &lt;li&gt;Create a cronjob to automatically update the Youtube live-stream m3u playlist every day at 6am.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;client-server-layout&quot;&gt;Client-server layout&lt;/h1&gt;
&lt;p&gt;There are three main components to this setup, namely &lt;strong&gt;TVH&lt;/strong&gt;, &lt;strong&gt;Streamlink&lt;/strong&gt;, and &lt;strong&gt;youtube4tvh&lt;/strong&gt;, which are all open-source and free:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;&lt;strong&gt;TVHeadend&lt;/strong&gt;&lt;/a&gt;: Tvheadend is a TV streaming server for Linux supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, IPTV, SAT&amp;gt;IP and other formats through the unix pipe as input sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-github.png&quot; alt=&quot;TVH Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-webui.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-webui.png&quot; alt=&quot;TVH WebUI&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;&lt;strong&gt;Streamlink&lt;/strong&gt;&lt;/a&gt;: Streamlink is a CLI utility which pipes video streams from various services into a video player.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/streamlink-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/streamlink-github.png&quot; alt=&quot;Streamlink Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;&lt;strong&gt;youtube4tvh&lt;/strong&gt;&lt;/a&gt;: Youtube4tvh is a Python CLI program that uses Youtube API to create (or update) m3u playlists of live-streams that are piped into a TVH server via Streamlink.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/youtube4tvh-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/youtube4tvh-github.png&quot; alt=&quot;youtube4tvh Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this guide, we will assume that such components are related to each other and any clients (any IPTV players, such as VLC, Plex or a Kodi PVR) according to the following layout:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-layout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-layout.jpg&quot; alt=&quot;Client-server layout&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, once you’re done with the initial configuration, you can try changing it to accomodate your needs.  For example, you can &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/VLC_Multicasting&quot;&gt;multicast a live-stream to a TVH server using VLC&lt;/a&gt;.  This will let you use a single connection to Youtube be distributed to multiple clients, instead of creating multiple connections to Youtube–definitely take a look at it if you’re serving a large number of clients with your TVH server.  Also, you might want to pipe the Streamlink data to FFMPEG before sending to TVH, which will let you set custom AV codecs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;youtube4tvh&quot;&gt;Youtube4tvh&lt;/h1&gt;
&lt;p&gt;This is a utility program that will let us create and manage m3u playlist of Youtube live-streams.  It can extract information directly from Youtube’s frontend (default) or from Youtube’s API (by using a valid API key).  Be aware that the API keys have daily quotas that this program will reach fairly quickly. For more info, checkout &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;the github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-a-youtube-api-v3&quot;&gt;Create a Youtube API v3&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Since the release of &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh/releases&quot;&gt;&lt;strong&gt;v0.1.1&lt;/strong&gt;&lt;/a&gt;, youtube4tvh does not require the use of API keys to run. Therefore, &lt;strong&gt;the use of API keys is now optional&lt;/strong&gt;. If you choose to skip this step, simply omit the&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--apikey&lt;/code&gt; &lt;em&gt;argument when running this utility.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can find instructions on &lt;a href=&quot;https://developers.google.com/youtube/v3/getting-started&quot;&gt;the official page&lt;/a&gt;.  If you don’t want to head there, here is a streamlined version:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sing up for or Log into your Google account;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to your &lt;a href=&quot;https://console.developers.google.com/apis/&quot;&gt;API dashboard&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a project (top left &amp;gt; new project);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give the project a name and create it (this should take a few seconds…);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the project you just created and in the dashboard, go to ‘+ Enable APIs and Services’;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for Youtube Data API v3 and enable it;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It should redirect you to its dashboard but if doesn’t, select Manage;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Create Credentials (if you don’t see a button, just go to Credentials in the side menu);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s going to ask you which API you’re going to use (select Youtube Data API v3), where you’ll be calling it from (Other UI) and what data (Public data). Then select ‘What credentials do I need?’ and it will generate an unrestricted API for the project you created;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the side menu, go to Credentials and Edit the API Key you generated;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under ‘API restrictions’, select Restrict key &amp;gt; Youtube Data API v3 &amp;gt; Save.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! Your key is that long string with random letters and numbers in the column labeled &lt;strong&gt;Key&lt;/strong&gt;. Whenever you see a field to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt;, use that one.  Also, you can repeat this process to generate additional keys.  It’s a good idea to do so.&lt;/p&gt;

&lt;h2 id=&quot;install-youtube4tvh&quot;&gt;Install youtube4tvh&lt;/h2&gt;
&lt;p&gt;Open a terminal window and run the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install git python-pip
cd /opt
sudo git clone https://github.com/cgomesu/youtube4tvh.git
cd youtube4tvh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install required packages via pip:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the program (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt; for your API key)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd youtube4tvh
python main.py --apikey=YOURKEY --channelname=&quot;DW News&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, there should be an output.m3u file on the same folder you are (you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to list files).&lt;/p&gt;

&lt;p&gt;If you run into permission issues, make sure to use a user with sudo perission.  Also, if your user is not allowed to write to /opt, then run the follwing (changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURUSER&lt;/code&gt; for your sudo username):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R YOURUSER:sudo /opt/youtube4tvh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks good, go ahead and add permission to execute the streamlink.sh helper script that will pipe data into TVH (if you want to change settings from streamlink, change them in the streamlink.sh file):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod +x /opt/youtube4tvh/streamlink.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;This program has two modes of execution, &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=add&lt;/code&gt; is the default mode and it will create an m3u file if you don’t specify one.  However, if you do provide an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput=/path/to/file.m3u&lt;/code&gt;, it will instead append channels to output.m3u. (If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uoutput&lt;/code&gt; are the same, then it appends to itself.)&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=update&lt;/code&gt; will parse an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput=/path/to/file.m3u&lt;/code&gt; and update all URLs to make sure they are the ones currently available (instead of a broken URL).  This is useful because even though some Youtube channels stream 24/7, they will at times stop and restart the stream, which will cause Youtube to generate a new URL to their live-stream.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=update&lt;/code&gt; will make sure your output.m3u is always using the correct URLs.  (Again, if you want to update the same input file, then point both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uoutput&lt;/code&gt; to the same m3u file.)&lt;/p&gt;

&lt;p&gt;First, we will generate a youtube.m3u file with the channel “DW News”.  Afterwards, we will append a couple of additional channels to the youtube.m3u file.  Then, we will create a cronjob to keep our youtube.m3u up-to-date.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create youtube.m3u file and add the channel “DW News” (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt; to your actual API key):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/youtube4tvh/youtube4tvh
python main.py --apikey=YOURKEY --m3uoutput=youtube.m3u --channelname=&quot;DW News&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Append the channel “France 24 English” to the youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python main.py --apikey=YOURKEY --m3uinput=youtube.m3u --m3uoutput=youtube.m3u --channelname=&quot;France 24 English&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Append the channel “Explore Nature” to the youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python main.py --apikey=YOURKEY --m3uinput=youtube.m3u --m3uoutput=youtube.m3u --channelname=&quot;Explore Nature&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a cronjob to update the youtube.m3u file everyday at 6am. First, make a backup or your youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /opt/youtube4tvh/youtube4tvh/youtube.m3u /opt/youtube4tvh/youtube4tvh/youtube.m3u.backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a cronjob:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add the following at the bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 6 * * * /usr/bin/python /opt/youtube4tvh/youtube4tvh/main.py --apikey=YOURKEY --m3uinput=/opt/youtube4tvh/youtube4tvh/youtube.m3u --m3uoutput=/opt/youtube4tvh/youtube4tvh/youtube.m3u --mode=update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Save and exit (ctrl+x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all we need to do with this program.  If you ever feel like adding a new channel to the playlist, you can just repeat the “Append” examples with the new channel instead.&lt;/p&gt;

&lt;p&gt;If you want to remove a channel, you’ll need to manually edit the youtube.m3u file (remove the channel’s #EXTINF row and the one immediately below it, which contains the pipe command).  You can also manually edit the m3u file to add a group-title to the channels (see sample/input.m3u, for example), change their order, etc.  Just use your favorite text editor to do that and when you’re done, save preserving the .m3u extension.&lt;/p&gt;

&lt;h2 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;Theoretically, the m3u playlists can contain as many streams as you want.  However, as a general rule of thumb, I find it useful to create one m3u playlist for each type of streaming channel–for example, youtube-webcams.m3u, youtube-news.m3u, youtube-radio.m3u, and etc–and then have a unique API key for each of them.  This way, I can run the youtube4tvh cronjob more often, thus reducing the chance of having broken URLs in the m3u file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;streamlink&quot;&gt;Streamlink&lt;/h1&gt;
&lt;p&gt;Streamlink is an awesome utility program and if you’ve never used it before, make sure to check their &lt;a href=&quot;https://streamlink.github.io/&quot;&gt;documentation&lt;/a&gt;.  Here, we will only use it to pipe data from Youtube to a TVH server but Streamlink is able to pipe video streams from many other platforms (Twitch, Dailymotion, etc.).&lt;/p&gt;

&lt;p&gt;To install Streamlink, please follow the instructions on &lt;a href=&quot;https://streamlink.github.io/install.html&quot;&gt;the official website&lt;/a&gt;.  Make sure you’re running the latest version afterwards.  You can find the installed version by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink --version&lt;/code&gt;, which should be the same one as the latest version on their &lt;a href=&quot;https://github.com/streamlink/streamlink/releases&quot;&gt;Releases page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(It looks like multiple repos are distributing a much older version than the 1.4.1, which is the latest when this article was first posted.  If that’s the case for your distro, take a look at the PyPi and source installation on their Install page.  Uninstall the older version and install via pip and if that doesn’t work, try cloning their git repo and install via setup-tools, very much like the youtube4tvh utility.)&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/youtube4tvh&lt;/code&gt;, you’ll notice a file called &lt;strong&gt;streamlink.sh&lt;/strong&gt;.  That is a helper script that TVH will use to get the video stream from a Youtube URL.  If you open it with a text editor, you’ll see the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
####################################################
################ Streamlink script #################
####################################################
# The default version writes the data from the best
# stream ($1, the first argument) to stdout using a
# thread pool of size 2 to download HLS segments.
# Everything else follows default values.
#
# Inspired by niwi_niwi's post at
# https://tvheadend.org/boards/5/topics/35658
#
# More info: https://streamlink.github.io/cli.html
#
####################################################
#### Add/modify script according to your needs #####
streamlink \
--stdout \
--hls-segment-threads 4 \
--hls-live-edge 10 \
&quot;$1&quot; best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual command to execute streamlink and its options are all at the bottom.  If you know what you’re doing and want to play with different configurations, go ahead and change the arguments in the streamlink command.  Say, if instead of playing always the ‘best’ stream you want to play the 480p version, then just change it to that (but always leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stdout&lt;/code&gt; or you won’t be able to pipe data to TVH).  Once again, &lt;a href=&quot;https://streamlink.github.io/cli.html&quot;&gt;check the docs&lt;/a&gt; for a comprehensive list of options.&lt;/p&gt;

&lt;p&gt;To test the script, you can simply execute the following (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOUTUBEURL&lt;/code&gt; for the URL of a Youtube live-stream):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash streamlink.sh YOUTUBEURL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a whole bunch random characters as streamlink outputs the video stream to the terminal.  Hit ctrl+c to terminate the process.  If you have a player, you can run the command above with a pipe to the player.  Using &lt;a href=&quot;https://github.com/videolan/vlc&quot;&gt;&lt;strong&gt;VLC&lt;/strong&gt;&lt;/a&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash streamlink.sh YOUTUBEURL | vlc -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-server&quot;&gt;TVH server&lt;/h1&gt;
&lt;p&gt;TVH was a game-changer for me.  It offers a centralized system to manage multiple IPTV networks and TV tuners.  I can fully customize how all channels will show up to all my clients and that’s so much better than using multiple (and sometimes shady) applications developed by each IPTV provider.  If a channel is down, I can tell TVH to automatically remove it or remap to another provider.  If the EPG is not working, I can tell TVH to fetch from another source.  If a client does not support a particular type of codec, I can create a profile that uses the codec that works with it.  And all those changes are automatically applied to all clients, without the need to change one by one, because they are all getting data from my TVH server instead of external sources.  (It’s the TVH server that should always do that latter.)&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install a TVH server, please follow the instructions on &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Download&quot;&gt;the official website&lt;/a&gt;.  I strongly suggest you to install from the repo to make it easy to update with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt; command.  Also, make sure you’re running the latest version of it afterwards.&lt;/p&gt;

&lt;h2 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h2&gt;
&lt;p&gt;After installing TVH, head to the webUI on &lt;a href=&quot;http://localhost:9981&quot;&gt;http://localhost:9981&lt;/a&gt;.  (If you’re not running a desktop environment on the same machine, access it from another machine on the same network and change localhost for the IP of the machine running the TVH server.  Also, it goes without saying that the machine hosting the TVH server should have a fixed IP address at the local network because all the clients will be pointing to it.)&lt;/p&gt;

&lt;p&gt;If you provided admin credentials for TVH during the installation, it will ask you to identify yourself now.&lt;/p&gt;

&lt;p&gt;TVH will start the wizard the first time you access the webUI but you can just skip it (hit Cancel).&lt;/p&gt;

&lt;p&gt;Notice that there are several tabs in the webUI but many options will not show up if the “View level” is set to Basic, so let’s change the default to &lt;strong&gt;Expert&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; General &amp;gt; Base &amp;gt; Server &amp;gt; Set &quot;User interface level&quot; to Expert and hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s configure the Stream profiles to restart on error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Stream &amp;gt; Stream profiles &amp;gt; htsp &amp;gt; Check &quot;restart on error&quot; hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(You can repeat that step to all profiles that you’re going to use.  I usually just use htsp for clients and pass for auto-recording.)&lt;/p&gt;

&lt;p&gt;While we’re at it, let’s go ahead and customize the Recording settings as well.  This is all really up to your own preferences but this is what I use that is different from the default configuration:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Recording &amp;gt; DVR Profiles &amp;gt; Default profile
# DVR file retention: 3 days
# Pre-recording padding: 5 mins
# Post-recording padding: 5 mins
# Recording system path: /path/to/my/NAS/media/iptv/recording
# Maintain free storage space in MiB: 5000
# File permissions: 0777
# Filename character set: UTF-8
# Skip commercials: Unchecked
# Format string: $c/$t - $c - %F - %R$n.$x
# Directory permissions: 0777
# Make subdirectories per channel: Checked
# Include date in filename: Checked
# Include time in filename: Checked
# Remove all unsafe characters from filename: Checked
# Hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re done with the basic configuration!  Before moving to the next section, notice that at the bottom of the webUI there’s a bar called &lt;strong&gt;Tvheadend log&lt;/strong&gt; and on the opposite side, there is a button.  Click on it to open the log.  This is very useful to check if there’s any error while you’re making changes to the server.  Keep it open as you change the settings and if you see an error, there’s probably something misconfigured that you should fix before moving on.&lt;/p&gt;

&lt;h2 id=&quot;create-an-iptv-auto-network&quot;&gt;Create an IPTV auto network&lt;/h2&gt;
&lt;p&gt;We’re now going to create an IPTV network using the youtube.m3u file we created with youtube4tvh.  Open the TVH webUI and do the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; DVB Inputs &amp;gt; Networks &amp;gt; Add
# Type: IPTV automatic network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will redirect to IPTV settings.  Change the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Network name: youtube
# URL: file:///opt/youtube4tvh/youtube4tvh/youtube.m3u
# Create bouquet: Checked
# Channel numbers start from: 1
# Accept zero value for TSID: Checked
# Provider network name: youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Content character set: UTF-8
# Service ID: 1
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we move on, now is a good time to check if streamlink and the helper script are working.  We’re going to force play a few muxes (channels from your youtube.m3u playlist) to make sure that it’s all good before mapping them to actual TV channels.  (You gonna need a player for this step; if you don’t have one, skip it or install VLC).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; DVB Inputs &amp;gt; Muxes &amp;gt; Choose a random one and Hit the Play button
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The selected stream should show up in a few seconds.  If it doesn’t, there’s likely an issue with streamlink or the player or both, in which case you should stop and try to solve it before moving on.&lt;/p&gt;

&lt;h2 id=&quot;mapping-serves-to-channels&quot;&gt;Mapping serves to channels&lt;/h2&gt;
&lt;p&gt;There are two ways of mapping services to channels.  The standard way is to go to the Services tab and choose Map Selected &amp;gt; Map all services.  This should work very well if your muxes won’t ever change.  However, if they do (as in our case), they won’t be automatically remapped to their channel, and you gonna have to do this mapping process manually once again, multiple times.  We don’t wanna do that.  Fortunately, there’s a second way of mapping services to channels that does so automatically, even if your muxes change, and that’s via &lt;strong&gt;Bouquets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember that when we created the youtube IPTV network, we selected “Create a bouquet”.  Because of that, there’s now a new entry in Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets &amp;gt; “youtube”.  So, let’s go ahead and edit it a little bit:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets &amp;gt; Edit the &quot;youtube&quot; bouquet
# Enabled: Checked
# Auto-map to channels: Checked
# Channel mapping options: Select all
# Create tags: Create provider name tags, Create network name tags
# Hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait a few seconds and go to the “Channels” tab and you should see all your channels auto-mapped to their services.  If you make any changes to the youtube.m3u playlist, the bouquet should automatically detect those changes from now on.&lt;/p&gt;

&lt;h2 id=&quot;epg-data&quot;&gt;EPG data&lt;/h2&gt;
&lt;p&gt;Some of the 24/7 news channels on Youtube (e.g., France 24, DW) actually follow the same eletronic program guide (EPG) as their Cable/Satellite broadcast.  So, if you want, you can add EPG data to their Youtube live-stream.  There’s a fantastic program called &lt;a href=&quot;http://webgrabplus.com/&quot;&gt;&lt;strong&gt;WebGrab+Plus&lt;/strong&gt;&lt;/a&gt; that can do that for you &lt;strong&gt;for free&lt;/strong&gt;, but there’s a learning curve to it and how to feed the data to TVH (netcat or curl).  I’m planning on writing a guide about it in the near future, as I work on a parser for the site.pack folder as well.  But if you don’t feel like diving into that, you can always pay an EPG provider and manually add it to your clients (bad) or try to figure it out how to feed the EPG data to the TVH server (good).&lt;/p&gt;

&lt;h2 id=&quot;creating-and-editing-users&quot;&gt;Creating and editing users&lt;/h2&gt;
&lt;p&gt;Clients can access TVH using the same credentials as you’ve been using to configure the TVH server (admin access). As a general rule of thumb, however, that’s not a good practice.  Also, if you have multiple clients, it’s nice to know what each one is trying to access on your TVH server.  So, let’s go ahead and create a “client” user:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Users &amp;gt; Access Entries &amp;gt; Add
# Streaming: Select all
# Video recorder: Basic, HTSP, View All
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s add a password for it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Users &amp;gt; Passwords &amp;gt; Add
# Enabled: Checked
# Username: client
# Password: password
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it!  You can repeat this process as many times as you need and play around with permissions, depending on your use-case.&lt;/p&gt;

&lt;h2 id=&quot;re-fetch-period-and-youtube4tvh-cronjobs&quot;&gt;Re-fetch period and youtube4tvh cronjobs&lt;/h2&gt;
&lt;p&gt;If you’ve a youtube m3u playlist with channels that are likely to change multiple times during the same day, then it’s a good idea to create a separate playlist for those channels.  Then, when you create a youtube4tvh cronjob for the new m3u playlist, make it run more frequently (e.g., every 5 mins would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*/5 * * * *&lt;/code&gt;) and in the TVH server, add a new IPTV auto network for the new m3u playlist and in its settings, edit the “re-fetch period” to match the cronjob update interval (5); hit save and then restart the TVH server to apply the new settings. If you’ve done it right, the TVH server will now check the m3u playlist at an interval equal to the re-fetch period and update any new/changed mux on it, which will be automatically mapped to a channel in its bouquet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-client&quot;&gt;TVH client&lt;/h1&gt;
&lt;p&gt;There are multiple ways to watch the channels on your TVH server, including directly from the webUI itself (EPG tab &amp;gt; Watch TV).  The one I use is &lt;a href=&quot;https://kodi.tv/download&quot;&gt;&lt;strong&gt;Kodi&lt;/strong&gt;&lt;/a&gt; + &lt;strong&gt;TVH client addon&lt;/strong&gt; because my Kodi clients also access my Plex server.&lt;/p&gt;

&lt;p&gt;You can install Kodi on virtually any single-board computer, such as &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; and &lt;a href=&quot;https://www.hardkernel.com/&quot;&gt;Odroid&lt;/a&gt;, and Linux distro.  There are hundreds of guides showing how to install Kodi, so I won’t do that.  Instead, I’ll talk about the &lt;strong&gt;TVH client addon&lt;/strong&gt; for it.&lt;/p&gt;

&lt;h2 id=&quot;install-a-tvh-client-addon-for-kodi&quot;&gt;Install a TVH client addon for Kodi&lt;/h2&gt;
&lt;p&gt;Open Kodi and try to install via the official repo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Add-ons &amp;gt; Install from repo &amp;gt; PVR clients
# Look for Tvheadend HTSP Client and install it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, depending on the distribution, you won’t see the “PVR clients” option.  In this case, you have to manually install the TVH client.  On Debian, for example, you can install it like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Open a terminal
sudo apt update
sudo apt install kodi-pvr-hts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Another option is to download a .zip of the addon but please do your research first.  Don’t download and install addons from random repos.)  If you didn’t see any error, it means the PVR client is now available on Kodi, so open it (restart it, if it was already open) and then do the following (changing the values to the appropriate ones for your TVH server and client credentials):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Add-ons &amp;gt; My add-ons &amp;gt; PVR clients &amp;gt; Tvheadend HTSP Client &amp;gt; Configure
# &amp;gt; Connection Settings
# IP address: The IP address of the machine hosting your TVH server
# HTTP port: 9981
# HTSP port: 9982
# Username: client
# Password: password
# &amp;gt; Streaming settings
# Profile to use: htsp
# (If your connection is pretty good, you might want to try enabling predictive tuning
# but I've had mixed results with it.)
# Hit OK
# Restart Kodi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to play around, you can create a video profile just for this client and then set the Profile to use it.  This could be a profile that transcodes to a particular AV codec that best fits the client hardware, for example.  Be mindful that whenever you make a change to the addon, you’ll need to restart Kodi to see the changes take effect.&lt;/p&gt;

&lt;p&gt;Test the Kodi client:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to TV &amp;gt; Channels &amp;gt; Play random one
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything is working as it should, you should now be able to watch the stream from your Kodi client.  Play around with it and try recording something, too.  Now it’s time to fine-tune your TVH server to best serve your clients.&lt;/p&gt;

&lt;p&gt;You can make further client-side changes in &lt;strong&gt;Kodi’s PVR &amp;amp; Live TV settings menu&lt;/strong&gt;, such as mapping channels to specific numbers, behavior of changing channels, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Congratulations for reaching the end of this guide.  As I said before, one of my future projects is to work on a parser for the Webgrab+Plus EPG data and then write a guide on how to implement it using the current setup.&lt;/p&gt;

&lt;p&gt;If you found this useful or have suggestions on how to improve this guide, please leave a comment and I’ll try to reply asap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="github" /><category term="iptv" /><category term="kodi" /><category term="streamlink" /><category term="tvheadend" /><category term="youtube" /></entry></feed>