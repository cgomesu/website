<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-16T12:56:26-03:00</updated><id>/feed.xml</id><title type="html">CGomesu</title><subtitle>A blog and portfolio website built with Jekyll and hosted on Github Pages</subtitle><author><name>Carlos Gomes</name></author><entry><title type="html">DIY series: ESP-01 Tasmota environmental sensor</title><link href="/blog/diy-tasmota-bme280/" rel="alternate" type="text/html" title="DIY series: ESP-01 Tasmota environmental sensor" /><published>2021-08-12T13:00:00-03:00</published><updated>2021-08-12T13:00:00-03:00</updated><id>/blog/diy-tasmota-bme280</id><content type="html" xml:base="/blog/diy-tasmota-bme280/"># Changelog
**August 12th, 2021**: Publication of the original article
{:.notice--info }

[top](#){:.btn .btn--light-outline .btn--small}


# Introduction
This is the first article of a **Do It Yourself** (DIY) series in which I describe simple electronic projects that make use of an [ESP8266](https://www.espressif.com/en/products/socs/esp8266)/[ESP32](https://www.espressif.com/en/products/socs/esp32) board running the [Tasmota](https://github.com/arendst/Tasmota) firmware to integrate various modules into a home automation system, such as [Home Assistant](https://www.home-assistant.io/).  In this first iteration of the series, I described how to wire and configure a [**BME280**](https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/) to the tiny [**ESP-01**](http://www.ai-thinker.com/pro_view-60.html) (or its successor, the [ESP-01S](http://www.ai-thinker.com/pro_view-88.html)) to create a cheap (less than US$6), low-power (less than 1W), and low-profile (less than 5cm long) environmental sensor that provides **temperature**, **humidity**, and **relative pressure** measurements to home automation systems via [MQTT](https://en.wikipedia.org/wiki/MQTT).

- Here is a preview of the ambient sensor alone and attached to different devices:
  
[![ESP-BME280 sensor 01](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-01.jpg)

[![ESP-BME280 sensor 02](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-02.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-02.jpg)

[![ESP-BME280 sensor 03](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-03.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-03.jpg)

This is a great project for anyone who wants to get started on building their own Internet of Things (IoT) devices.  The article started with my motivation for this particular project.  Next, I talked about the hardware and software components, and finally, at the end, I covered the assembly of it all to create a functional unit.

Because this is such a low-profile project, I do not ever bother printing a case for it.  However, if you designed a case to house this particular project, [get in touch with me](/contact) and I will feature your case here.  But please [observe the official mounting instructions for the BME280 sensor](https://www.bosch-sensortec.com/media/boschsensortec/downloads/handling_soldering_mounting_instructions/bst-bme280-hs006.pdf) before printing your case because the heat generated by the ESP-01 and its USB adapter can affect the sensors.
{:.notice--info }

[top](#){:.btn .btn--light-outline .btn--small}

# Motivation
Over the years, I have started noticing that multiple devices spread across the household (e.g., smart TVs, sound systems, wireless routers, PC towers and laptops) had one or more **USB ports** that could be used to power a few DIY electronic projects.  

[![Device with USB port 01](/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-01.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-01.jpg)

[![Device with USB port 02](/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-02.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-02.jpg)

However, the most common type of USB port available ([USB 2.0](https://en.wikipedia.org/wiki/USB#USB_2.0)) usually delivers a maximum of `500mA` at `5V` (`2.5W`), which constraints the type of projects that could reasonably use such ports as power supply. In addition, because interfacing via the USB connection might not always be possible, owing to proprietary and closed-source firmware, the DIY project should be able to transmit data wirelessly instead.

Fortunately, the **ESP-01 WiFi module** meets all such requirements. Specifically, it requires very little energy to operate (roughly `.3W` on average, with `1W` peaks) and can be connected to USB 2.0 ports via USB adapters that have a built-in voltage regulator.

[![ESP-01 with USB adapter](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-with-usb-adapter.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-with-usb-adapter.jpg)

Furthermore, because the unit will draw power from standard USB ports, it can be connected to most [power banks](https://duckduckgo.com/?q=usb+power+bank&amp;ia=images) to create a mobile/remote ambient sensor.

[top](#){:.btn .btn--light-outline .btn--small}


# Overview of the main hardware components
## ESP-01
The **ESP-01** is a cheap and very small WiFi module developed by [Ai-Thinker](http://en.ai-thinker.com/) that is based on the ESP8266EX microcontroller unit (MCU) by [Espressif](https://www.espressif.com/):

[![ESP-01 top](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png)

[![ESP-01 bottom](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bottom.png){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bottom.png)

[![ESP-01 dimensions and pinout](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-dimensions-pinout.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-dimensions-pinout.jpg)

[![ESP-01 schematics](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-schematics.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-schematics.jpg)

Of note, it **exposes only four GPIO pins** to interface with other devices--namely, `URXD`, `UTXD`, `IO2` and `IO0`--and it is powered via `3v3 DC` to the `VCC` and `GND` pins. Each of the [eight exposed pins](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bottom.png) has specific functions, as suggested by their name:

&lt;center&gt;
&lt;table&gt;
   &lt;thead&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Pin #&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Names&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Functions and notes&lt;/th&gt;
   &lt;/thead&gt;
   &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;Ground&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;IO2&lt;/td&gt;
      &lt;td&gt;GPIO 2, internal pull-up&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;IO0&lt;/td&gt;
      &lt;td&gt;GPIO 0 (zero), internal pull-up&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;URXD / IO3&lt;/td&gt;
      &lt;td&gt;UART0 - serial RX data, GPIO 3&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3v3 / VCC&lt;/td&gt;
      &lt;td&gt;3.3V power supply&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;RST / IO16&lt;/td&gt;
      &lt;td&gt;Reset pin, active low&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;EN / CH_PD&lt;/td&gt;
      &lt;td&gt;Chip enabled pin, active high&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;UTXD / IO1&lt;/td&gt;
      &lt;td&gt;UART0 - serial TX data, GPIO 1&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

In addition, there is no programmable ROM in the SoC, meaning that any software must be stored on the module's SPI flash.  Regarding the latter, there are actually three popular versions of the ESP-01 WiFi module that have the same format but differ in flash memory size or other minor specs:

1. **ESP-01 Blue**: The original version with `512KB` of flash memory;
2. **ESP-01 Black**: The original version with `1MB` of flash memory;
3. **ESP-01S**: A revised version with `1MB` of flash memory.

Fortunately, visual inspection of the module can easily indicate which version it is:

[![ESP-01 comparison 01](/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-01.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-01.jpg)

[![ESP-01 comparison 02](/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-02.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-02.jpg)

The external SPI flash can be changed for anything up to `16MB`.  However, this requires de/soldering very small components and such procedure won't be covered in this guide (but see [Andreas Spiess' video #34](https://www.youtube.com/watch?v=xyc1gCjguRU) for reference).  My recommendation is to simply look for the versions that have at least `1MB` of flash memory, which is just enough for the project described in this article.

For more information, refer to the official documentation:
- [ESP-01](https://docs.ai-thinker.com/_media/esp8266/docs/esp-01_product_specification_en.pdf)
- [ESP-01S](https://docs.ai-thinker.com/_media/esp8266/docs/esp-01s_product_specification_en.pdf)

In fact, Ai-Thinker has developed [many other versions of the ESP-01 module](https://docs.ai-thinker.com/en/%E8%A7%84%E6%A0%BC%E4%B9%A6), such as the [ESP-01E](https://docs.ai-thinker.com/_media/esp8266/docs/esp-01e_product_specification_en.pdf) and [ESP-01F](https://docs.ai-thinker.com/_media/esp8266/docs/esp-01f_product_specification_en.pdf). However, such modules differ in major aspects in comparison to the modules covered here, like format and connectivity, and for such a reason, they won't be covered in this article.  If interested, check their official e-commerce website at Alibaba.com ([https://ai-thinker.en.alibaba.com/](https://ai-thinker.en.alibaba.com/)) to learn how to acquire those less popular modules.
{:.notice--info }

## BME280
The **BME280** is a low-profile (`2.5 x 2.5 x 0.93 mm³`) and low-power (`3.6 mA` at roughly `3.3V`) environmental sensor developed by [Bosch Sensortec](https://www.bosch-sensortec.com). Specifically, this unit comes with high accuracy sensors for **temperature**, **humidity**, and **pressure**, all protected by a metal-lid.  Of note, it uses [I²C](https://en.wikipedia.org/wiki/I%C2%B2C) and [SPI](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface) interfaces for data communication and is powered by `3v3 DC` (specifically, from `1.71V` to `3.6V`).

[![BME280 01 photo](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-01.png){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-01.png)

[![BME280 02 dimensions](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-02.png){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-02.png)

Bosch Sensortec has made an amazing job at [documenting all aspects about this sensor](https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/#documents). For quick reference, here are the main docs:

- [Datasheet](https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme280-ds002.pdf)
- [Handling, soldering and mounting instructions](https://www.bosch-sensortec.com/media/boschsensortec/downloads/handling_soldering_mounting_instructions/bst-bme280-hs006.pdf)

[top](#){:.btn .btn--light-outline .btn--small}


# Hardware
To make a single ESP-01 Tasmota environmental sensor, you will need the following items:

- 01x [ESP-01 Black/ESP-01S](https://www.amazon.com/s?k=esp-01+wifi+module): These modules are very cheap and useful for simple projects, so I recommend buying multiples at once.
  
  [![ESP-01 top](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png)

- 01x [USB to ESP-01 adapter](https://www.amazon.com/s?k=USB+to+ESP-01): Look for the ones that have **exposed pins** (see figure below) and preferably, that make use of the Silicon Labs [CP2104](https://www.silabs.com/documents/public/data-sheets/cp2104.pdf) (or [CP2102](https://www.silabs.com/documents/public/data-sheets/CP2102-9.pdf)) chip. More often than not, however, the adapters will make use of a cheaper and less well-documented chip--namely, a [CH340](https://www.mpja.com/download/35227cpdata.pdf) variation--which might actually work just as well but I have never used them for this same project.
  
  [![USB to ESP-01 CP2104 adapter 01](/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-01.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-01.jpg)

  [![USB to ESP-01 CP2104 adapter 02](/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-02.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-02.jpg)

  Notice how the exposed male pins are mapped onto the female pins in your own adapter. This is fundamental to figuring out how to put the module into *flash mode* and later on, how to connect the ESP-01 module to the BME280 module.  The advantage of having exposed pins is that no soldering job is required to interface with the ESP-01 module. There are many other options for interfacing and powering an ESP-01 module via USB connections and some provide even cheaper solutions than the one shown here but be prepared to spend time soldering multiple components then.

- 01x [GY-BME280 module](https://www.amazon.com/s?k=GY-BME280): You can always [buy just the BME280 sensor itself](https://www.alibaba.com/trade/search?SearchText=bme280) and wire it on your own but it's *much* easier to buy a module that contains it instead. The one I used is the one shown in the figures below. More likely than not, you will need to solder the headers to the board (see below). As before, these modules are very cheap, so I recommend to buy multiples.
  
  [![BME280 module 01](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-01.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-01.jpg)

  [![BME280 module 02](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-02.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-02.jpg)

- 05x [Female-Female DuPont/jumper wires](https://www.amazon.com/s?k=female+dupont+wire): You cannot go wrong by buying lots of these wires in all three connector combinations.  For this project, however, you will only need five f-f jumpers (or four, if you reuse one).
  
  [![f-f dupont wires](/assets/posts/2021-07-18-diy-tasmota-bme280/female-dupont.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/female-dupont.jpg)

- *Optional.* [Female DuPont connector kit](https://www.amazon.com/s?k=female+dupont+connector+kit&amp;ref=nb_sb_noss): This is optional but does help securing your connections and make your project look better by housing exposed male pins. I recommend buying a kit with various sizes but for this project, we will only need the following connectors:

  - 01x `2x4` female connector for the ESP-01 USB adapter
  
    [![dupont connector 2x4](/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-2x4.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-2x4.jpg)
  
  - 01x `1x4` female connector for the BME280 module

    [![dupont connector 1x4](/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-1x4.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-1x4.jpg)

    You **do not** need crimping tools for this. Check the following video for this and other tricks when working with DuPont wires: 
    
    {% include video id=&quot;eI3fxTH6f6I&quot; provider=&quot;youtube&quot; %}

- [Basic soldering kit](https://www.amazon.com/s?k=soldering+kit): This is only required for soldering the headers to the BME280 module. You **do not** need anything fancy for this at all. If you have a multimeter, always test your connections afterwards.
  
  [![soldering kit](/assets/posts/2021-07-18-diy-tasmota-bme280/soldering-kit.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/soldering-kit.jpg)

## Estimated cost
Estimated cost of the basic hardware components:

&lt;center&gt;
&lt;table&gt;
   &lt;thead&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Hardware&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Quantity&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;USD$*&lt;/th&gt;
   &lt;/thead&gt;
   &lt;tr&gt;
      &lt;td&gt;ESP-01 WiFi module&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;USB to ESP-01 adapter (CP2104)&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;2.5&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;GY-BME280 module&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;F-F DuPont 20CM long&lt;/td&gt;
      &lt;td&gt;05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;b&gt;TOTAL&lt;/b&gt;&lt;/td&gt;
      &lt;td&gt;&lt;b&gt;-&lt;/b&gt;&lt;/td&gt;
      &lt;td&gt;&lt;b&gt;5.55&lt;/b&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

\* Based on [AliExpress.com](https://www.aliexpress.com) offers from Chinese stores **without** including shipping + tax
{: .notice--info }

[top](#){:.btn .btn--light-outline .btn--small}


# Software
In this tutorial, we will make use of the following applications:

- [Tasmota](https://github.com/arendst/Tasmota) (`tasmota-sensors.bin`)
  &gt; Alternative firmware for ESP8266 and ESP32 based devices with easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX.

If you have never heard of Tasmota before, check Robbert's ([The Hook Up](https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ)) introduction video:

{% include video id=&quot;08_GBROKQH0&quot; provider=&quot;youtube&quot; %}

- [Esptool](https://github.com/espressif/esptool) (`esptool.py`)
  &gt; A Python-based, open source, platform independent, utility to communicate with the ROM bootloader in Espressif ESP8266 &amp; ESP32 series chips.

- *Optional.* [Docker](https://www.docker.com/)
  &gt; Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers.

- *Optional.* [Eclipse Mosquitto MQTT broker](https://mosquitto.org/)
  &gt; Eclipse Mosquitto is an open source message broker that implements the MQTT protocol versions 5.0, 3.1.1 and 3.1. Mosquitto is lightweight and is suitable for use on all devices from low power single board computers to full servers.

[top](#){:.btn .btn--light-outline .btn--small}


# Assembly
As in the previous tutorials, this article assumes you are running a **Linux** distribution (e.g., Debian, Ubuntu, Arch, etc.) and your current user (`${USER}`) is in the [`sudo` group](https://en.wikipedia.org/wiki/Sudo). Part of the instructions may or may not be compatible with Android, macOS, Windows, or any other Operating System (OS). If you run into issues, please refer to the official documentation of the software mentioned in the [Software](#software) section.

The [Docker and MQTT broker implementation](#mqtt) are both optional because Tasmota offers multiple ways to interact with the device without every using the MQTT messaging protocol. In addition, most MQTT brokers offer alternative installation methods to the containerized method described here.  That said, I strongly recommend making use of MQTT if you use home automation systems (e.g., [Home Assistant](https://www.home-assistant.io/), [OpenHAB](https://www.openhab.org/)) or have multiple Tasmota devices.

## Installing the required packages and fixing user permission
Before we can flash the Tasmota firmware onto the ESP-01, we will need to install a few packages and configure the permissions of the current Linux user to allow using the USB adapter.

1. Open a terminal and install the required packages:

   ```
   sudo apt update &amp;&amp; sudo apt install wget python3 python3-pip
   ```

2. Install `esptool.py` via `pip3`:

   ```
   pip3 install esptool
   ```

3. Find out if `esptool.py` can be found in your user's `$PATH`, as follows:

   ```
   whereis esptool.py
   ```

   Alternatively, when required to run `esptool.py`, instead of `esptool.py OPTIONS`, run as `python3 -m esptool OPTIONS`. If you choose to do this, skip the next step.
   {: .notice }

4. If `esptool.py` was not found, it means your user's `.local/bin` is not in your `$PATH`.  Add it as follows:

   ```
   echo &quot;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.bashrc&quot; &gt; /dev/null
   ```

5. Connect your ESP-01 to the USB adapter:
   
   [![ESP-01 to USB adapter](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter.jpg)

   [![ESP-01 in default mode](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg)
    
   Please ignore the tape over the ESP-01 module. Its use is not necessary.
   {: .notice }

6. Connect the adapter to a USB port on your computer and check the new device in `/dev/`:

   ```
   ls -l /dev/ttyUSB*
   ```

7. Add your `$USER` to the same group as `/dev/ttyUSB*` (it's usually `dialout` but if different, change in the command below) and `tty`:

   ```
   sudo usermod -aG dialout,tty ${USER}
   ```

8. Log off and back on.  (If you continue to run into permission issues, try rebooting instead.  You can check your user's permissions with `id ${USER}`.)

## Flashing the Tasmota firmware
We are now ready to flash the Tasmota firmware.  For reference, the official information is available at [https://tasmota.github.io/docs/](https://tasmota.github.io/docs/).

1. Go to `/opt` and create a `tasmota8266` directory:

   ```
   cd /opt
   sudo mkdir tasmota8266
   ```

2. Change ownership of the new directory to the current user instead of `root`:

   ```
   sudo chown ${USER}:${USER} tasmota8266/
   ```

3. Download the latest `tasmota-sensors.bin` binary via `wget` to the newly created directory:

   ```
   wget -P tasmota8266/ https://ota.tasmota.com/tasmota/release/tasmota-sensors.bin
   ```

   Alternatively, you can manually download the latest and previous binaries from the [Tasmota Github repo](https://github.com/arendst/Tasmota/releases). The URL above points to the latest version of the `tasmota-sensors` binary.
   {: .notice }

4. Disconnect your ESP-01 adapter from your computer. Take note of the USB adapter pinout to put your ESP-01 into **flash mode** by grounding the pin `IO0` using a female-to-female DuPont wire, as follows:
   
   [![ESP-01 USB adapter pinout](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter-pinout.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter-pinout.jpg)

   Notice that the pinout is flipped vertically when looking the pins from the bottom vs. the top.  For us, it is the top-view pinout that matters because that is where we will connect the DuPont wires.  The pinout for your own adapter **might not** be the same, so make sure to double check before moving on. Once you have a good grasp of the pinout, go ahead put the ESP-01 into flash mode.

   [![ESP-01 in flash mode](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-flash-mode.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-flash-mode.jpg)

5. Reconnect your ESP-01 adapter to your computer.  Now find the USB port your device is using in `/dev/` and set it to the variable `ESP_PORT`, as follows:
   
   **Attention.** While convenient, the following command assumes there is a single USB to serial adapter connected to your computer.  If this is not the case, manually set `ESP_PORT` to whichever port your ESP-01 USB adapter is currently using. You can find the port via `ls /dev/ttyUSB*` and testing one by one until you find the one used by the ESP-01 adapter. Alternatively, simply disconnect all other USB to serial adapters for this procedure and continue.
   {: .notice--warning }

   ```
   ESP_PORT=$(ls /dev/ttyUSB*)
   ```

   Please notice that this only works if you continue to use the **same shell** in which `ESP_PORT` was defined.  If you log off or even close the current terminal, you will have to redefine `ESP_PORT` to keep using it.
   {: .notice }

   You can check that `ESP_PORT` was correctly defined by `echo`ing it, as follows:

   ```
   echo $ESP_PORT
   ```

   which should output something like

   ```
   /dev/ttyUSB0
   ```

6. Before flashing the Tasmota firmware, check the SPI flash to make sure it has at least `1MB`:

   ```
   esptool.py --port $ESP_PORT flash_id
   ```

   which should show that the `Detected flash size` is at least `1MB`, as in the following example:

   ```
   esptool.py v3.0
   Serial port /dev/ttyUSB0
   Connecting....
   Detecting chip type... ESP8266
   Chip is ESP8266EX
   Features: WiFi
   Crystal is 26MHz
   MAC: 2c:f4:32:2d:eb:19
   Uploading stub...
   Running stub...
   Stub running...
   Manufacturer: 5e
   Device: 4014
   Detected flash size: 1MB
   Hard resetting via RTS pin...
   ```

7. If everything looks good, erase whatever is currently stored on the SPI flash of the ESP-01 module:
   
   **Attention.** The following procedure will **wipe all the data** on the SPI flash of your ESP-01 module. If you have used such a module before and want to backup the image, then first run `esptool.py --port $ESP_PORT read_flash 0x00000 0x100000 /opt/tasmota8266/backup_esp01_$(date +%d-%m-%y).bin`.  The backup will be in the newly created `tasmota8266` directory with the current date for future reference. Please notice that this procedure may take a few minutes to complete.
   {: .notice--warning }
   
   ```
   esptool.py --port $ESP_PORT erase_flash
   ```

   which should output `Chip erase completed successfully`, as in the following example:

   ```
   esptool.py v3.0
   Serial port /dev/ttyUSB0
   Connecting....
   Detecting chip type... ESP8266
   Chip is ESP8266EX
   Features: WiFi
   Crystal is 26MHz
   MAC: 2c:f4:32:2d:eb:19
   Uploading stub...
   Running stub...
   Stub running...
   Erasing flash (this may take a while)...
   Chip erase completed successfully in 2.6s
   Hard resetting via RTS pin...
   ```

8. Now it is time to flash the Tasmota firmware:
   
   ```
   esptool.py --port $ESP_PORT write_flash -fs 1MB -fm dout 0x0 /opt/tasmota8266/tasmota-sensors.bin
   ```

   **Wait** until `esptool.py` is completely done before moving on. Flashing a firmware can take a few minutes to complete but in this case, it usually does not take more than 30 seconds.  If you experience issues while flashing, try a different baud rate (`-b`) than the default `115200`, such as `-b 921600` or `-b 74880`. The [Tasmota FAQ](https://tasmota.github.io/docs/FAQ/#flashing) can help with this and other issues.
   {: .notice--danger }

9. When done, disconnect the adapter from your computer and put it back into **default mode** by removing the jumper grounding `IO0`, as follows:
   
   [![ESP-01 in default mode](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg)

10. Reconnect your ESP-01 adapter and scan the nearby WiFi networks.  If correctly flashed, you should be able to see a new `tasmota_*` WiFi network created by your ESP-01 WiFi module; if this is not the case, then double check all steps, use a different wire to ground `IO0`, and try again.  (If the problem persists, it might be hardware-related.  Try a different adapter or ESP-01 or both.)

If you reached this part, it means your ESP-01 is already running Tasmota (Hurrah!).  In the next section, we will learn how to configure the Tasmota firmware over-the-air.

## Basic Tasmota configuration
In this section, we will learn how to connect the ESP-01 to a local wireless network, set a default [Template](https://tasmota.github.io/docs/Templates/) for the device, fix its time, and configure its MQTT client.

### Initial WiFi configuration
After a fresh installation (or [power cycling your device seven times in a short period](https://tasmota.github.io/docs/Device-Recovery/#fast-power-cycle-device-recovery)), the Tasmota firmware automatically creates a wireless access point (WAP) that other devices can connect to.  The WAP is called `tasmota_*`, in which `*` will be a combination of the device's MAC address and random numbers.  To configure the WiFi in your new Tasmota device, do as follows:

1. Make sure the ESP-01 is powered on in [default mode](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg).

2. Use a wifi-capable device (e.g., laptop) and connect to the WAP named `tasmota_*`.

3. The ESP-01 will give your device an IP address, which you can check via `ip a`. Usually, the device's IP address is in the `192.168.4.0/24` pool, which means the Tasmota web UI is at `http://192.168.4.1:80`; Otherwise, the web UI will be at the first address in whichever pool your device connected to after joining the WAP created by the Tasmota firmware.

4. Open a web-browser of your choice (e.g., Mozilla Firefox) and navigate to the Tasmota web UI. You should be prompted to change the WiFi settings to allow your ESP-01 to connect to your local WiFi network.  Change the settings, save it, and wait for the ESP-01 to reboot.

5. Navigate to the **DHCP server** of your local network and find the IP address assigned to your ESP-01.  At this point, it's a good idea to assign a static address to it as well.  (If you set a static address, then reboot the ESP-01 before moving on.)

6. Navigate to the Tasmota web UI on your local network to set the additional configurations described in the next section.

### ESP-01 Template
Tasmota templates are device-specific definitions of how their GPIO pins are assigned and therefore, proper configuration of the template is key if you plan on using the device's GPIO pins. As you will notice, the default template in the `tasmota-sensors.bin` binary is for the [Sonoff Basic](https://sonoff.tech/product/diy-smart-switch/basicr2/) device, which won't work for us. The actual template for the ESP-01 can be found at [https://templates.blakadder.com/ESP01.html](https://templates.blakadder.com/ESP01.html).  To change the current Sonoff template to the proper ESP-01 template, do the following:

1. Copy the **ESP-01 template**:

   ```json
   {&quot;NAME&quot;:&quot;ESP01&quot;,&quot;GPIO&quot;:[255,255,255,255,0,0,0,0,0,0,0,0,0],&quot;FLAG&quot;:0,&quot;BASE&quot;:18}
   ```

2. From the Tasmota web UI, go to **Configuration &gt; Configure Other**.

3. Paste the template under **Other parameters &gt; Template**.  Then, check the **Activate** option under the template. Save the settings and wait for the reboot.

4. The device should now be named **ESP01** (or whatever `NAME` was in the template). If everything looks good, go to the next section.

### Timezone
If you installed a pre-compilled firmware, there is a chance your device is using the incorrect timezone.  To check the current timezone, go to **Console** and type:

```
timezone
```

If the timezone does not match yours, you can enter the `timezone` command with a value equal to your region's [standardized time zone](https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png).  For America/Sao_Paulo, for example, that would be `-3`, which can be set in your Tasmota device as follows:

```
timezone -3
```

Now if you enter `time` in the console, it should correctly display your current local time.

### MQTT
It is possible to interact with a Tasmota device in multiple ways (e.g., HTTP requests, web UI console, serial) but **MQTT** offers a reliable and widely supported messaging protocol for managing this and many other devices using a single server/broker. If you are new to MQTT, the [HiveMQ](https://www.hivemq.com) wrote a series of articles about the MQTT basics, its main features and other related resources that I invite everyone to read:

- [https://www.hivemq.com/mqtt-essentials/](https://www.hivemq.com/mqtt-essentials/)

There are many options when it comes to [MQTT software](https://mqtt.org/software/). Here, I will show how to install and configure the [Eclipse Mosquitto MQTT broker](https://mosquitto.org/) on a Docker container.  The MQTT broker will be configured to use client authentication (username and password) on the default listener port (`1883`) and persist its `config`, `data`, and `log` directories.

#### MQTT broker configuration
If you already have a running MQTT broker instance, skip to the next section to [configure the Tasmota MQTT client](#tasmota-mqtt-client-configuration); Otherwise, to **install and configure the Mosquitto MQTT broker in a Docker container**, follow these steps:

1. Install [Docker Engine](https://docs.docker.com/get-docker/) on your OS. Here's a quick reference to two popular Linux distributions:
   - [Install on Debian](https://docs.docker.com/engine/install/debian/)
   - [Install on Ubuntu](https://docs.docker.com/engine/install/ubuntu/)

   *Optional*. Afterwards, install [Portainer - Community Edition](https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/) to manage your Docker containers.
   {:.notice}

2. Create a local directory in `/opt` of your host machine to store permanently the contents of the Mosquitto `config`, `data`, and `log` container directories:

   ```
   cd /opt
   sudo mkdir mosquitto mosquitto/config mosquitto/data mosquitto/log
   ```

3. Create an empty `pwd.txt` passwords file in the newly created `config` dir:
   
   ```
   sudo touch /opt/mosquitto/config/pwd.txt
   ```

4. Create and edit a `mosquitto.conf` configuration file for the MQTT broker in the same dir:
   
   ```
   sudo -e /opt/mosquitto/config/mosquitto.conf
   ```

   and paste the following, which disables anonymous access, enables user credentials by pointing `password_file` to the `pwd.txt` file, and sets a custom location for the `mosquito.db` and `mosquito.log` files:

   ```
   per_listener_settings true
   allow_anonymous false

   listener 1883

   persistence true
   persistence_location /mosquitto/data
   log_dest file /mosquitto/log/mosquitto.log
   password_file /mosquitto/config/pwd.txt
   ```

5. Now we are ready to install the MQTT broker container. Pull the official [Eclipse Mosquitto broker Docker container](https://hub.docker.com/_/eclipse-mosquitto/):
   
   ```
   docker pull eclipse-mosquitto
   ```

   Then, run it in detached mode (`-d`) with the name `mosquitto` and the option to always restart unless stopped (other options are to map ports and volumes between host and container, per the structure of the local directories and files we created):

   ```
   docker run -d \
     --name mosquitto \
     --restart=unless-stopped \
     -p 1883:1883 \
     -v /opt/mosquitto/config:/mosquitto/config \
     -v /opt/mosquitto/data:/mosquitto/data \
     -v /opt/mosquitto/log:/mosquitto/log \
     eclipse-mosquitto
   ```
   
   If you run into permission issues while running Docker with your current user, make sure to add your user (`${USER}`) to the `docker` group (`sudo usermod -aG docker ${USER}`). Then, log out and back in to try again. Alternatively, append `sudo` to the `docker` command. You can find this and other post-installation steps in the official [Post-installation steps for Linux](https://docs.docker.com/engine/install/linux-postinstall/).
   {:.notice--warning}

   Before moving on, make sure the container is running:

   ```
   docker ps
   ```

   And the log files are not showing any error messages:

   ```
   docker logs mosquitto
   ```

6. If the container is running without any issues, then let's  start a shell inside the container to edit the `pwd.txt` password file using the `mosquitto_passwd` utility:
   
   ```
   docker exec -it mosquitto /bin/sh
   ```

   And now we will create (a) a `tasmota` user with password `password123` and (b) a `hass` user with password `123password`:

   ```
   mosquitto_passwd -b /mosquitto/config/pwd.txt tasmota &quot;password123&quot;
   mosquitto_passwd -b /mosquitto/config/pwd.txt hass &quot;123password&quot;
   ```

   Of course, feel free to use whichever username and password you feel appropriate for your use-case.  Keep in mind that unless you configure your broker and client to use encryption, these credentials are communicated in plain text over the network, which is fine if only running it locally.
   {:.notice--warning}

   When done, exit the shell inside the `mosquitto` container:

   ```
   exit   
   ```

7. Restart the `mosquitto` container to enable the new user credentials:
   
   ```
   docker restart mosquitto   
   ```

   And we are done with the MQTT broker installation and configuration!

For information about additional options, such as setting up access control to restrict user access to specific topics, check the official [Mosquitto documentation](https://mosquitto.org/documentation/).

#### Tasmota MQTT client configuration
With an up and running MQTT broker, you can configure the Tasmota MQTT client as follows:

1. From the Tasmota web UI, go to **Configuration &gt; Configure Other**.

2. Make sure the **MQTT enable** box is checked; otherwise, check and save it.

3. Now go to **Configuration &gt; Configure MQTT** and configure your Tasmota device to use your MQTT broker. The specifics of these settings will depend on how your MQTT broker was configured. If you followed the instructions in the previous section, then your Tasmota MQTT client settings should look similar to the following (but change the host `192.168.10.30` address to the one running your MQTT broker):

   [![ESP-01 MQTT configuration](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-mqtt-configuration.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-mqtt-configuration.jpg)

4. Hit save when done and wait for the device to reboot. If successfully configured, the Console in the web UI should show something like the following:
   
   ```
   ... MQT: Attempting connection...
   ... MQT: Connected
   ... MQT: tele/tasmota_2DEB19/LWT = Online (retained)
   ... MQT: tele/tasmota_2DEB19/INFO1 = {&quot;Info1&quot;:{&quot;Module&quot;:&quot;ESP01&quot;,&quot;Version&quot;:&quot;9.5.0(sensors)&quot;,&quot;FallbackTopic&quot;:&quot;cmnd/DVES_2DEB19_fb/&quot;,&quot;GroupTopic&quot;:&quot;cmnd/tasmotas/&quot;}}
   ```

   And if you followed the instructions in the previous section, you can also check the `/opt/mosquitto/log/mosquitto.log` file, which should show something like the following:

   ```
   ...: New connection from 192.168.10.103:57321 on port 1883.
   ...: New client connected from 192.168.10.103:57321 as DVES_2DEB19 (p2, c1, k30, u'tasmota').
   ```

You can find more information about the MQTT configuration at the official [Tasmota MQTT documentation](https://tasmota.github.io/docs/MQTT/).


## Wiring the GY-BME280 sensor module
The [GY-BME280](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-01.jpg) module usually comes with four male pin headers that we will connect do the ESP-01 USB adapter using four female-to-female jumper wires. To make use of such module, follow these steps:

1. Use your soldering kit to solder the headers to the board.  If you have a multimeter, remember to test your connections afterwards.
   
   [![BME-280 module 03](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-03.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-03.jpg)

2. Grab four female-to-female DuPont wires and connect them to your GY-BME280 module and ESP-01 USB adapter according to the following wiring schematics:
   
   [![ESP-01 BME280 wiring](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-wiring.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-wiring.jpg)

   In this schematics, we will be using pins `TXD` and `RXD` to interface with the GY-BME280 module. You could, of course, try one or two of the other GPIO pins--namely, `IO0` and `IO2`.  However, because the state (`low`/`float`/`high`) of the latter pins at boot can put the board into specific modes of operation (e.g., when `IO0` is `high` at boot, the ESP-01 enters *flash mode*) and we will only use the USB port for power, I find it safer to use the serial `TXD` and `RXD` pins to interface with (I2C) devices when using the ESP-01.

3. *(Optional.)* If you bought `1x4` and `2x4` female connectors, replace the single connectors by the new ones. (If you are uncertain how to do that, check Adreas Spiess' video on [tricks for working with DuPont wires, at the 3:15 mark](https://youtu.be/eI3fxTH6f6I?t=195).) At the very least, use a tape to secure the connectors that are next to each other. This makes it harder for them to disconnect by accident.

4. Once the GY-BME280 module is wired to the ESP-01 USB adapter, connect your adapter to a USB power supply and wait for it to connect to your network. (Of course, make sure it is within reach of a WAP.)

5. Now we will configure the device's Template to use the `RXD` and `TXD` as `SCL` (serial clock line) and `SDA` (serial data line), respectively. So, navigate to your device's web UI and go to **Configuration** &gt; **Configure Template**. Then, at **GPIO3** (`RXD`), set it to `I2C SCL`; and at **GPIO1** (`TXD`), set it to `I2C SDA`. At the end, your Template should look like the following one:
   
   [![ESP-01 BME280 configuration 01](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-01.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-01.jpg)

   Hit **Save** and wait for the device to reboot.

6. If properly configured, your device's main web UI should now show four metrics from the BME280 sensor, namely temperature, humidity, dew point, and pressure, as in the following example:

  [![ESP-01 BME280 configuration 02](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-02.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-02.jpg)

That is it! Enjoy your new IoT environmental sensor. If you need assistance setting up the integration with Home Assistant, take a look at the next section (there's also a reference for other home automation systems). Otherwise, skip to the [Conclusion](#conclusion) for the final remarks about this project.

[top](#){:.btn .btn--light-outline .btn--small}


# Home Assistant integration
The easiest way to integrate Tasmota devices to Home Assistant is via the official [Tasmota integration](https://www.home-assistant.io/integrations/tasmota/). To make use of such integration, follow these steps:

1. Go to the Home Assistant web UI, then navigate to **Configuration** &gt; **Integrations** &gt; **Add integration**.  This will open a new window with a search box.  Type `mqtt` and select the integration.

2. Configure the [MQTT integration](https://www.home-assistant.io/integrations/mqtt/) to make use of your MQTT broker. If you followed the [MQTT broker configuration](#mqtt-broker-configuration) guide, then use the username `hass` with password `123password` to authenticate your Home Assistant in the MQTT broker. If configured correctly, you should see the MQTT integration listed in the Integrations tab of your Home Assistant Configuration window.

3. Now, navigate once again to **Configuration** &gt; **Integrations** &gt; **Add integration** and search for `tasmota` and select the integration.

4. Leave the discovery prefix to the default topic (`tasmota/discovery`) and hit **submit** to enable to Tasmota integration. If configured correctly, you should see your ESP01 listed in the next window and optionally, you can select an Area that it belongs to.
   
   [![HASS Tasmota integration 01](/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-01.jpg)

5. That is it! Home Assistant should now be able to automatically detect and create entities for all your BME280 environmental metrics from the current device as well as any new ones.
   
   [![HASS Tasmota integration 02](/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-02.jpg)

   [![HASS Tasmota integration 03](/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-03.jpg){:.PostImage}](/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-03.jpg)

Of note, the use of the `SetOption19` (MQTT discovery) in Tasmota devices is currently [**deprecated**](https://tasmota.github.io/docs/Home-Assistant/). For this reason, it is disabled by default in the latest firmware (`setoption19 0`) and therefore, I won't mention its use here.
{:.notice--danger}

For this and other options to integrate your Tasmota device to Home Assistant or other home automation systems, check the [Integrations in the Tasmota documentation](https://tasmota.github.io/docs/Integrations/).

[top](#){:.btn .btn--light-outline .btn--small}


# Conclusion
In this article, we learned how to integrate the small and cheap **ESP-01 WiFi module** with the reliable **BME280 sensor** to create a USB powered and low-profile **Tasmota environmental sensor**.  Its BME280 sensor can be used to provide accurate measures of temperature, humidity, and pressure in different parts of the household, which can all be monitored via a home automation system of choice, such as Home Assistant.

The project requires very little soldering and can be assembled in a matter of minutes and for these reasons, it's a very good project for anyone who wants to get started on making their own IoT devices.  As usual, check the [Changelog](#changelog) for updates and if you ever get stuck on something or just want to share a few ideas and opinions, feel free to [get in touch with me](/contact).

[top](#){:.btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="diy-series" /><category term="tasmota" /><category term="sensor" /><category term="hass" /><category term="iot" /><category term="automation" /><category term="temperature" /><category term="esp-01" /><category term="bme280" /></entry><entry><title type="html">Towards a smarter Home Assistant: Getting started on the analytical tools</title><link href="/blog/smarter-hass/" rel="alternate" type="text/html" title="Towards a smarter Home Assistant: Getting started on the analytical tools" /><published>2021-06-22T15:45:00-03:00</published><updated>2021-06-22T15:45:00-03:00</updated><id>/blog/smarter-hass</id><content type="html" xml:base="/blog/smarter-hass/"># Changelog
**August 14th, 2021**, Update #2: [My pull request](https://github.com/home-assistant/core/pull/52189) to add [quantiles](https://en.wikipedia.org/wiki/Quantile) to the attributes of the Statistics integration was approved and now we have access to an additional (and more informative) distribution metric. The [Statistics](#statistics-1) section was updated to reflect such change.
{: .notice--info }

**August 14th, 2021**, Update #1: [Release 2021.8.0](https://www.home-assistant.io/blog/2021/08/04/release-20218/) has introduced a new feature for sensors called [**long-term statistics**](https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics). A new sub-section called [Long-term statistics](#long-term-statistics) was added to the [HASS database](#hass-database) section that describes its relation to the `states` table and how to implement it.  The same release also introduced the [Statistics Graph Card](https://www.home-assistant.io/lovelace/statistics-graph/), which provide a nice way of visualizing long-term statistics.
{: .notice--success }

**June 22nd, 2021**: Publication of the original article
{: .notice--info }

[top](#){:.btn .btn--light-outline .btn--small}


# Introduction
[Home Assistant](https://www.home-assistant.io/) (HASS) is a free and open-source software (FOSS) that provides a feature-rich environment for managing, controlling, and automating smart home devices, such as light bulbs, blinders, and LED strips.  In addition, it provides a highly customizable system for collecting and organizing a multitude of data (e.g., on/off device states, local temperature, GPS tracking, exchange rates), as provided by **more than a thousand [integrations](https://www.home-assistant.io/integrations)** with [Internet of things](https://en.wikipedia.org/wiki/Internet_of_things) (IoT) devices (e.g., [Sonoff](https://sonoff.tech/), [Wyze](https://wyze.com/), [Z-Wave](https://www.z-wave.com/)), local sensors (e.g., micro-controllers or single-board computers connected to sensor modules), and cloud-based services (e.g., weather and financial web APIs).

[![HASS demo frontend](/assets/posts/2021-06-04-smarter-hass/hass-demo.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-demo.jpg)

More often than not, people use HASS to view or modify the **current state and value** of integrated devices and sensors via manual triggers (e.g., pressing a button to turn off the AC) or automations (e.g., if the temperature is lower than 14°C, then turn on the heat).  However, the [HASS utility integrations](https://www.home-assistant.io/integrations#utility) offer users the possibility to go beyond with the help of built-in mathematical and statistical tools.  More specifically, such **analytical tools** allow users to summarize past states and measurements to answer questions such as:

- How many times has the front door been opened over the last 24hrs and for how long?
- How much energy (kWh) has my uninterrupted power supply used over the last month?
- What was the average temperature in the living-room in the last 24hrs?  How does that compare to 48hrs before?
- What is the average level of volatile organic compounds (VOC) measured by the [BME680 sensor](https://www.bosch-sensortec.com/products/environmental-sensors/gas-sensors/bme680/) in my bedroom in the last thirty minutes?  How much does it change over the day?

Unfortunately, according to the HASS website, the [Statistics](https://www.home-assistant.io/integrations/statistics/) and related utilities are currently used by less than 5% of the HASS userbase.  I feel there is much to be explored and gained from the application of **dynamic statistical inferences** in home automation systems.  To mention a few reasons, sensors are susceptible to measurement error and many user-defined events (e.g., Carlos is at home) are multidimensional and frequently determined by more factors than integrated within a home automation system (e.g., my cellphone connected to my home's private network is not a sufficient condition to tell that I'm at home but it does inform about the likelihood that I am at home).  This creates uncertainty about the current and future states of things but fortunately, this uncertainty can be quantified and taken into account by various statistical tools that have long been developed.

Furthermore, the fact that HASS integrations are written in the [Python programming language](https://www.python.org/) makes HASS a prime candidate for exploring the use of statistical inference in home automation systems because many mathematical and statistical packages are already available in Python and are widely used and well-maintained (e.g., [`numpy`](https://pypi.org/project/numpy/) and [`scipy`](https://pypi.org/project/scipy/)). Therefore, porting new and more sophisticated analytical tools to HASS should be fairly straightforward.  (More on this in the [Development](#development) section).

At the very least, the current analytical tools can be used to improve the quality of the information in your HASS dashboard.  For example, instead of simply displaying the current temperature, the use of analytical tools allow us to set dynamic color thresholds based on the mean and deviations from it (± one standard deviation, then min-max) over the last 24hrs:

[![HASS graph dynamic temperature 01](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif)

But there's much more that can be done and accomplished moving forward.  If you find these ideas interesting and want to get started on their implementation in your own personal HASS, then read on.  As in my previous guides and tutorials, I tried to unpack and digest as much of the content as possible, the goal being to make it accessible to experts as well as novices.  Check the [Changelog](#changelog) for updates and if you ever get stuck on something or just want to share a few ideas and opinions, feel free to [get in touch with me](/contact).

[top](#){:.btn .btn--light-outline .btn--small}

# Objectives
- Get familiar with the following:
  - The HASS SQLite database (DB);
  - YAML syntax;
  - Templating.
- Learn the specifics about how data are sampled and stored in the HASS DB and how they affect analysis, owing to inconsistent data points and misrepresentation of data over time;
- Familiarize yourself with the use of three utility integrations:
  - History Stats;
  - Statistics;
  - Trend.
- Make use of analytical data to improve your current HASS dashboard using the following cards:
  - Mini graph card;
  - Lovelace card templater.

[top](#){:.btn .btn--light-outline .btn--small}


# Outline
From this point forward, the article was divided into two main parts:

1. (*Optional.*) [**Prerequisites**](#prerequisites): A brief overview of the HASS core installation, configuration files, and database. At the end of this section, there is a few statistics resources for users who want to refresh their stats knowledge.  Advanced users might want to skip this section altogether.  However, at the very least, I suggest to glance over each topic to make sure we are all on the same page.

2. [**Implementation**](#implementation): This is the main part of the article. I started describing in detail the issues pertaining to how data are sampled and stored in the HASS DB. Afterwards, I reviewed three of the current Utility integrations that I find most useful and finally, at the end, I mentioned two JavaScript modules that are useful in visualizing analytical metrics within the HASS dashboard.  (If you came here just to learn how to build a dynamic threshold graph card, feel free to head straight to the section called [Visualizing analytical data](#visualizing-analytical-data).)

[top](#){:.btn .btn--light-outline .btn--small}


# Prerequisites
The implementation of analytical tools in HASS has the following basic requirements:

1. A [HASS **core**](#hass-core) instance;
2. Understanding of [the **configuration** files and the **YAML** syntax](#hass-configuration-files);
3. Understanding the [HASS **database**](#hass-database);
4. And of course, [basic **statistics**](#statistics) knowledge.

Those four topics are described separately next.  

## HASS core
Structurally, HASS can be divided into three main layers: (a) core; (b) supervisor; and (c) operating system (OS).  The folks at the HASS wiki were kind enough to put together a plethora of [installation methods](https://www.home-assistant.io/installation/) for all sorts of OSes and environments (bare-metal vs. virtual).  For this guide, however, only the most basic layer of the HASS system is needed, namely the **HASS core**, which is available in *any* installation method.

Instead of using an existing HASS instance, I **strongly** recommend to **create a containerized (Docker) HASS instance** for testing purposes.  This will be much safer than playing with an existing HASS instance and its database.

To create a HASS Docker container, follow the instructions in the **official documentation**:

1. [Install **Docker Engine - Community Edition**](https://docs.docker.com/engine/install/);
2. (*Optional*.) [Install **Portainer - Community Edition**](https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/) to manage your Docker containers;
3. [Install **HASS Docker container**](https://www.home-assistant.io/installation/linux#install-home-assistant-container).

Of note, after deploying the HASS container, use a host's text editor (e.g., `nano`, `vi`, `vim`, `pluma`) to edit the `configuration.yaml` file and related configuration files.  Whenever you create a new `.yaml` file, make sure that the HASS user will have permission to read it at the very least, or you will run into issues.  Finally, in the HASS webUI, your HASS user must be able to access the [**Developer Tools** &gt; Services](https://www.home-assistant.io/docs/tools/dev-tools/) tab to check the state of each entity and their attributes.  The default admin user should have access to such a resource.

## HASS configuration files
The configuration files in HASS use a human-readable data serialization language called [**YAML**](https://yaml.org/) (YAML Ain't Markup Language).  In this guide, we will use YAML to edit and create configuration files for HASS that will customize database settings and new entities to collect data and help with their visualization.

If you are new to YAML, take a few minutes right now to familiarize yourself with it.  The HASS wiki has a straight to the point explanation that I invite everyone to read:

- [https://www.home-assistant.io/docs/configuration/yaml/](https://www.home-assistant.io/docs/configuration/yaml/)

To highlight a few important points about the configuration files and the YAML syntax:

- Indentation and spacing in general are **very** important in YAML. Use only the spacebar and maintain consistency across all configuration files. If at all possible, use an editor that shows whitespaces when editing any YAML files;
- UPPER and lower cases matter;
- Use `#` to add comments;
- Use `&quot;&quot;` (double quotation marks) for escaping special characters in sequences (e.g., `&quot;Hey! What's up?&quot;`) and `''` (single quotation marks) when escaping is not necessary (e.g., `'Nothing much.'`);
- Use the `!include` for splitting up your `configuration.yaml`. For instance, instead of adding all your `sensor:` and `binary_sensor:` to the `configuration.yaml` file itself, create `sensors.yaml` and `binary_sensors.yaml` files in the `config/` directory and then use `!include` to add them automatically to your `configuration.yaml`:
  ```yaml
  # Sensors
  sensor: !include sensors.yaml
  binary_sensor: !include binary_sensors.yaml
  ```
- Use `!secret` and a `secrets.yaml` for managing passwords.  (See more in the HASS wiki called [Storing secrets](https://www.home-assistant.io/docs/configuration/secrets/).)  This is particularly useful if you plan on sharing your configurations.

Finally, after making any changes to any YAML file (and saving them), it is necessary to [**reload** the `configuration.yaml` file](https://www.home-assistant.io/docs/configuration/#reloading-changes).  If your installation method does not allow for selective reloading, then go ahead and reload the entire HASS.  However, *before reloading any configuration file*, use the `hass --script check_config` script to make sure your `configuration.yaml` file is okay, as follows:

- From within the HASS webUI, navigate to **Configuration** &gt; **Server Controls** &gt; Configuration validation.
  
  [![HASS config validation](/assets/posts/2021-06-04-smarter-hass/hass-config-validation.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-config-validation.jpg)
  
  [![HASS config reload](/assets/posts/2021-06-04-smarter-hass/hass-config-reload.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-config-reload.jpg)
  
  Alternatively, if running the HASS Docker container, use `docker exec homeassistant python -m homeassistant --script check_config --config /config` to run the `check_config` script from your host machine.  (This assumes that your HASS container is called `homeassistant`. If this is not the case, change it accordingly.)
  {:.notice}

Always keep an eye on the `home-assistant.log` file for errors.  This will greatly help you troubleshooting most issues on your own (e.g., incorrect references or operations in templates).

## HASS database
HASS uses a relational database (DB) management system (RDBMS) based on the **SQL engine** and by default, it creates a [**SQLite DB**](https://www.sqlite.org/index.html) in `config/home-assistant_v2.db` to track events and parameters over time.  If you want to learn more about and dive into the HASS DB, including how to create your own SQL backend, take a look at the two following resources:

- [https://www.home-assistant.io/docs/backend/database/](https://www.home-assistant.io/docs/backend/database/)
- [https://www.home-assistant.io/integrations/recorder/](https://www.home-assistant.io/integrations/recorder/)

Fortunately, most users won't need to learn RDBMSes and SQL to take advantage of analytical tools in HASS because the default SQLite DB is usually enough.  However, there are a few aspects about the **default settings** that can affect the way the data are analyzed.  Those aspects are described in more detail next.

### Default database
In the `configuration.yaml` file, the **default SQLite DB** is created along with many of the other default settings by the following configuration variable:

```yaml
default_config:
```

To change the default DB settings, it is necessary to add a `recorder:` configuration variable to the `configuration.yaml` file, as follows:

```yaml
default_config:
# Customized DB settings
recorder:
```

The documentation of the specific `recorder:` variables can be found at the HASS wiki:

- [https://www.home-assistant.io/integrations/recorder/](https://www.home-assistant.io/integrations/recorder/)

In brief, by default, the HASS DB **keeps historical data up to 10 days** (`purge_keep_days: 10`), running an automatic purge of the database every night to prevent the DB from increasing in size indefinitely (`auto_purge: true`).  Therefore, *if you want to keep data from one or more entities for longer than 10 days*, then you must edit the DB default settings.  Personally, I prefer to keep data for *two weeks* instead (14 days), so I usually change my `recorder:` configuration to the following in the `configuration.yaml` file:

```yaml
default_config:
# Customized DB settings
recorder:
  purge_keep_days: 14
```

The `include` and `exclude` filter parameters are particularly useful whenever working with non-default settings, as they help you specify which entities should be tracked.  [Check the HASS wiki Configure Filter for examples](https://www.home-assistant.io/integrations/recorder/#common-filtering-examples).

In addition, as mentioned before, the default DB is stored in your `config/` directory and also by default, **changes are committed to the DB every 1 sec** (`commit_interval: 1`). This matters because if you are collecting data over a time window lower than 1 sec, then you might want to change the commit interval to `0` (zero, or as soon as possible) instead. At this point, it is also important to consider where the DB is being physically stored (SD card, eMMC, HDD, or SSD), owing to **disk I/O** and **wear and tear** considerations.  (More advanced aspects come into play if HASS is not the only application committing to the DB but I trust that if this is your case, then you probably know how to customize the HASS DB accordingly.)

For advanced users who want to browse and manually add/edit entries from the default (SQLite) `home-assistant_v2.db`, it is possible to use the [SQLite Database Browser](https://sqlitebrowser.org/).  Just keep in mind that the default HASS DB might have permissions (ownership and group membership) that are incompatible with your current host user and therefore, you might be unable even to read the DB without first editing the permissions--in Linux, appending `sudo` to `sqlitebrowser` should give you access no matter what though.

### Resetting entity data in the DB
In addition to the SQL browser method of editing the HASS DB, HASS allow users to run a [service call](https://www.home-assistant.io/docs/scripts/service-calls/) from within the webUI to manually run a **purge task**. This is particularly useful to run once you are done making changes to a newly created template entity and want to clean any previous (and possibly erroneous) records from the DB.  To remove all the data from a list of entities, do the following:

1. Navigate to **Developer Tools** &gt; Services;
2. Select **Go to YAML mode** and paste the following:
   ```yaml
   service: recorder.purge_entities
   target:
     entity_id:
       - sensor.my_template_entity_01
       - sensor.my_template_entity_02
   ```
   in which `sensor.my_template_entity*` are the target template entities you want to purge;
3. Press **Call Service** to purge their data from the DB. The new data will be collected as soon as an update is triggered (see the [Sampling](#sampling) section).

Of course, there are other `recorder` services available in the Developer Tools &gt; Services tab. Feel free to explore them.

### Long-term statistics
[Release 2021.8.0](https://www.home-assistant.io/blog/2021/08/04/release-20218/) has introduced a new feature for sensors called [**long-term statistics**](https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics). In brief, sensor data (e.g., the state value and the sensor attributes) are stored on the `states` table of the HASS DB.  Now, however, sensors that **opt-in** for long-term statistics have three summary statistics (`mean`, `min`, and `max`) stored on a new table of the HASS DB, called `statistics`. The `statistics` data are unaffected by the `recorder` configuration in the `configuration.yaml` file and therefore, it allows users to keep summary statistics for longer than the `recorder` configuration allows to keep data in the `states` table.

The summary statistics are stored on an **hourly** basis. That is, if a sensor has stored five data points between 2PM and 3PM, then for each summary statistic, there will be a single data point for the 2-3PM time window that summarize the five data points in the `states` table.  Therefore, making use of such a feature only makes sense if your sensor stores more than a single data point per hour.

Currently, there are two types of long-term statistics that are stored on the `statistics` table of the HASS DB, all of which **must include** the `state_class: measurement` property and thus must refer to **present time** measurement (e.g., current temperature, current humidity):

1. **Metered** entities: Apply to any sensor that has cumulative values *until a reset point*, such as energy consumption meters. All such sensors **must include** the [`last_reset`](https://developers.home-assistant.io/docs/core/entity/sensor/#properties) property, which specifies a `datetime` in which the values reset.

2. **Value** entities: Apply to any non-cumulative sensor that belongs to a supported [device class](https://developers.home-assistant.io/docs/core/entity/sensor/#available-device-classes).  Naturally, all such sensors **must include** the [`device_class`](https://developers.home-assistant.io/docs/core/entity/sensor/#properties) property.

Many integrations are currently configured to store summary statistics on the `statistics` table of the HASS DB, so you might not need to manually configure anything at all.  However, support for long-term statistics is still quite limited. As far as I can tell, the only other feature that makes use of the data in the `statistics` table is the new [Statistics Card Graph](https://www.home-assistant.io/lovelace/statistics-graph/), which is mentioned later on in the [Visualizing analytical data](#visualizing-analytical-data) section.

## Statistics
You don't need to be a mathematician who specialized in statistics to make use of it.  In this guide, we will only make reference to very introductory statistical knowledge, such as measures of central tendency (e.g., mean, median), variability (e.g., variance, standard deviation) and simple (univariate) linear regression (e.g., gradient/slope).

[![Humor about stats](/assets/posts/2021-06-04-smarter-hass/humor-stats.png){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/humor-stats.png)

The goal in this guide is to present a starting point for more advanced usage of analytical tools in home automation systems.  The possibilities are endless for knowledgeable users (e.g., application of Bayesian methods, dynamic mixed-effects modeling) and how far you will go along these paths is up to you.

If you want to refresh your stats knowledge or dig deeper into it, save some time and take a look at the following resources:

- Reading material:
  - [Robert Witte &amp; John Witte's textbook called **Statistics**](https://www.amazon.com/Statistics-11th-Robert-S-Witte/dp/1119386055)
  - [Larry Wasserman's textbook called **All of Statistics**](https://www.amazon.com/All-Statistics-Statistical-Inference-Springer-ebook-dp-B00HWUVSJS/dp/B00HWUVSJS/)

- Basic stats refresher:

{% include video id=&quot;xxpc-HPKN28&quot; provider=&quot;youtube&quot; %}
{:. text-center}

[top](#){:.btn .btn--light-outline .btn--small}


# Implementation
The main functionalities in HASS are extended by the configuration of new **integrations**.  According to the [HASS Glossary](https://www.home-assistant.io/docs/glossary/), 

&gt; [Integrations](https://www.home-assistant.io/integrations/) provide the core logic for the functionality in Home Assistant.

Therefore, the analytical tools covered in this guide are implemented by one or more of the **1800** integrations that are currently supported by a community of home automation enthusiasts.  More specifically, most of the analytical tools are grouped under [Utility](https://www.home-assistant.io/integrations/#utility) integrations and in this guide, I will only cover the following three:

1. [History Stats](#history-stats)
2. [Statistics](#statistics-1)
3. [Trend](#trend)

The current set of analytical integrations is fairly limited in what it can do.  For the most part, the tools can be used to create summary statistics of the past states and measurements of integrated devices and sensors.  Inference-wise, a lot can be done via [templates](https://www.home-assistant.io/docs/configuration/templating/) but moving forward, there is a need for more advanced analytical integrations.  For this reason, at the end of this guide, I added a section about [Development](#development) for anyone interested in helping out.  First, however, we need to talk about [Data](#data) and [Sampling](#sampling).

## Data
Before delving into any analytical integration, there are at least three things that we need to do. First, we need to think about the nature of the data.  For example, consider the default [Sun](https://www.home-assistant.io/integrations/sun/) (`sun.sun`) entity in HASS:

[![Sun entity](/assets/posts/2021-06-04-smarter-hass/hass-entity-sun.jpg){:.PostImage}](/assets/posts/2021-06-04-smarter-hass/hass-entity-sun.jpg)

While the `sun.sun` *state* is a **discrete** variable (it's either `above_horizon` or `below_horizon`), its `elevation` *attribute* is actually **continuous** (e.g., `35.84`° between the sun and the horizon) and therefore, it doesn't make sense to use the same tools to analyze both of them.  Nonetheless, discrete variables can be transformed into continuous ones (e.g., the sun was `above_horizon` for `34.1`% of the day), and similarly, continuous variables can be discretised (e.g., the elevation is either `negative` or `positive` or `zero`) in order to better answer our questions of interest. 

Second, we need to check whether HASS is keeping track of the data we need. There are multiple ways of doing that but by far, the easiest method is to navigate to **Developer Tools** &gt; States and then make sure that the entities whose states and attributes we would like to keep track of are being listed there.  (Alternatively, you can open the HASS DB with a SQL browser and look for the entity in the `states` Table.)

[![HASS developer tools states](/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-states.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-states.jpg)

Third, we need to check how the data are being represented in the DB.  As in the previous example, some variables might be an attribute of an existing entity in the HASS DB.  If the `recorder:` settings for such entity are fine for the type of analysis you want to automate (e.g., purge every 10 days), then you are all set.  However, notice that *attributes* cannot be displayed the same way as the *states* of an entity in the HASS webUI.  In addition, you might want to **pre-process** the attributes (e.g., `float` and then `round(2)`) or perform transformations before running the analysis.

For all such reasons, I always create **new entities** for the variables that will be analyzed. This is accomplished with the [`template` integration](https://www.home-assistant.io/integrations/template/).  Per the HASS wiki:

&gt; The template integration allows creating entities which derive their values from other data. This is done by specifying templates for properties of an entity, like the name or the state.

[Building templates](https://www.home-assistant.io/docs/configuration/templating/#building-templates) is fairly easy once you get the hang of the syntax.  In short, templates follow the [**Jinja2** templating engine](https://palletsprojects.com/p/jinja) and are mainly used to perform mathematical operations (`+`, `-`, `*`, `/`) and logic tests (if __ , then __ ) but can also do loops (for `i` in `states.sensor`, __ ), for example.  As a result, templates give users a scripting tool to go beyond the HASS built-in functionalities.  To test and preview a customized template, use the **Developer Tools** &gt; Template tab:

[![HASS developer tools template](/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-template.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-template.jpg)

As an example, let's create an entity to store and round to zero the `sun.sun` `elevation` attribute.  First, in the `configuration.yaml`, **append** (add to the bottom) a reference to the `templates.yaml` configuration file:

```yaml
# Templates
template: !include templates.yaml
```

Then, use a text editor to create an empty `templates.yaml` file and create a sensor template for the sun elevation, as follows:

{% raw %}
```yaml
# Sensor templates
- sensor:
    - name: &quot;template sun elevation&quot;
      unit_of_measurement: &quot;°&quot;
      state: &gt;
        {{ state_attr('sun.sun', 'elevation') | float | round(0) }}
```
{% endraw %}

Notice that in `state:`, we use `state_attr()` to retrieve the `elevation` attribute of the `sun.sun` entity. Then, we use `float` to force the output to a [floating point number](https://en.wikipedia.org/wiki/Floating-point_arithmetic), which ensures that the output is interpreted as a number, and run `round(0)` on the numeric output to round the decimals to zero cases.  The result should be an [integer](https://en.wikipedia.org/wiki/Integer) of the Sun elevation.  (Alternatively, we could simply use `int` to convert the output to an integer, of course.)

I find the use of the folded style (`&gt;`) very helpful in keeping the templates organized. Refer to the [YAML - Scalars](https://yaml.org/spec/1.2/spec.html) documentation for more information.
{:.notice}

Check your `configuration.yaml` file for errors (Configuration &gt; Server Controls &gt; Configuration validation), and finally, **restart your HASS**.  Afterwards, navigate to Developers Tools &gt; States and if everything is correct, you should see a new `sensor.template_sun_elevation` entity:

[![HASS template sun elevation](/assets/posts/2021-06-04-smarter-hass/hass-entity-template-sun-elevation.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-entity-template-sun-elevation.jpg)

By default, the values of this newly created entity will update as soon as the Sun `elevation` attribute changes. However, it is also possible to configure different **triggers** for **template entities**.  This is particularly relevant for the next topic, namely data sampling.

## Sampling
Devices, sensors, and services measure and transmit data with a certain frequency, which I refer by the term **measurement resolution**.  Such a resolution might be determined by a time-based rule (e.g., every 1 sec) or an event (HTTP request) or a combination of both.  Regardless of the nature of the trigger, the *higher* the measurement resolution, the more frequent the observations are.  For example, an [ESP32 Development board](https://www.espressif.com/en/products/devkits) connected to a [BME280 environmental sensor](https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/) might send a temperature measurement every 5 minutes to a MQTT broker.  Therefore, for all intended purposes, the measurement resolution of such a temperature sensor is at best 5 minutes.  Now, if a second ESP32 measures and send data *every 1 minute* instead, then the measurement resolution of the latter ESP32 is higher than the former (i.e., we can expect it to send temperature data more frequently).

As mentioned before, in HASS, **template entities** follow state-based updates by default--that is, they update as soon as the data of any of the referenced entities change.  Let's say that over a 20-min window, none of the referenced data changed.  This means that the template entity also didn't change and more importantly, in the DB, there will be a *single data point* over the 20-min window.  However, let's say that over the same 20-min window, one of the referenced data changed twice. This means that the template entity now changed twice and more importantly, in the DB, there will be *three data points* over the 20-min window.  This a very efficient way of storing data but you can probably see how this might affect the usage of analytical tools, owing to an inconsistent number of data points over equal time-frames as well as the under-representation of data over time.

Fortunately, just like we specify triggers for automations, HASS offers the possibility to specify [triggers for template entities](https://www.home-assistant.io/integrations/template/#trigger-based-template-sensors).  There's a large variety of triggers that can be used here (e.g, `webhook`, `mqtt`) but for **longitudinal analysis**, the most useful one is the [**time pattern** trigger](https://www.home-assistant.io/docs/automation/trigger#time-pattern-trigger), which is aptly called `time_pattern`.  Time pattern triggers can be specified for hours (`hours:`), minutes (`minutes:`), and seconds (`seconds:`), and for each one, it's possible to prefix the value with a `/` to match whenever the current value is divisible by the specified value (e.g., `hours: &quot;/2&quot;` will match every 2 hours) or use `*` to match any value (e.g., `minutes: &quot;*&quot;` to match every minute).

To create a time pattern trigger for one or more template entity sensor, simply add a list of time-based `sensor:` and `binary_sensor:` under a `trigger:` configuration in the `templates.yaml` configuration file, as follows:

{% raw %}
```yaml
# Time pattern trigger
- trigger:
    - platform: time_pattern
      # Update every 5 minutes
      minutes: &quot;/5&quot;
  # Sensor templates
  sensor:
    - name: &quot;template sun elevation - time-based&quot;
      unit_of_measurement: &quot;°&quot;
      state: &gt;
        {{ state_attr('sun.sun', 'elevation') | float | round(0) }}
      attributes:
        timestamp: &gt;
          {{ as_timestamp(now()) }}
```
{% endraw %}

Of note, the `timestamp:` under `attributes:` forces HASS to create a new entry on the DB (update) whenever the template is triggered.  This keeps the number of data points constant over time and each one of them will have a timestamp as attribute.  (In the DB, you will also see that if the state remained unchanged, it maintains the correct `last_changed` date and updates the `last_updated` variable.)

Also, notice that it does not make sense to use a `time_pattern` trigger rule that has higher resolution than the device's *measurement* resolution because then, there's no chance for a new value to occur and the DB would just repeat the last transmitted measurement.  Ideally, the time pattern should **match the measurement resolution** but to save space, you might want to set a lower time pattern resolution (as in 1:2, or 1:4, and so on).

Beware that depending on how triggers are configured and how many template entities are created, the HASS DB might end up using **a lot of space** and computations are bound to use **ever more CPU (and possibly RAM) resources**, owing to the number of entries in the DB.  Be sure to monitor such resources after configuring your HASS instance; Otherwise, your HASS instance might experience serious problems.
{:.notice .notice--warning}

Finally, there is the topic of statistical sampling (representativeness) when it comes to making generalizations from a couple of samples (e.g., environmental sensors in my bedroom and kitchen) to a population (temperature and humidity in my entire house).  In this guide, however, we will not delve too far into statistical inferences, owing to limitations of the current set of analytical tools.  Nonetheless, extended **service outages**, for example, might comprise summary statistics.  For proper representation, it is fundamental that your HASS has been running and collecting data for as long as the monitored time period of any statistic.  To put it in simple, a sensor that monitors weekly activity, for example, won't make sense until your HASS instance has been running and collecting data over at least one week.

## Utilities
The [**Utility integrations**](https://www.home-assistant.io/integrations/#utility) offer users tools to parse and analyze data from recorded entities.  There are more than 30 different such integrations and they sometimes have overlapping functionalities.  For example, the gradient (ratio of change) over the last two data points can be computed by both the [Trend](https://www.home-assistant.io/integrations/trend/) integration and the [Derivative](https://www.home-assistant.io/integrations/derivative/).  In what follows, I covered only three of the utility integrations that I find most comprehensive and useful, namely:

1. [History Stats](#history-stats)
2. [Statistics](#statistics-1)
3. [Trend](#trend)

Trend is covered last because out of the set, it's the only one that actually makes use of inferential tools via the Python package `numpy`. The others provide counting, other mathematical resources, and ways of summarize historical data.  For each utility, I provided a brief description, usage examples to follow along, and reference to the documentation and source code.

### History Stats
The [History Stats](https://www.home-assistant.io/integrations/history_stats/) integration provides useful statistics for discrete variables over a user-specified time-range.  More specifically, this integration can do one of three things depending on the chosen type of sensor:

- `type: time`: calculate the *amount of hours* that an entity has spent on a given state;
- `type: ratio`: calculate the *percentage of time* that an entity has spent on a given state;
- `type: count`: count how many times an entity has changed to a given state.

The use of this integration requires specification of **at least two** of the following time period variables:

- `start:`: It indicates when the time period starts.  Use [time templating](https://www.home-assistant.io/docs/configuration/templating/#time) to specify the time;
- `end:`: It indicates when the time period ends.  Use [time templating](https://www.home-assistant.io/docs/configuration/templating/#time) to specify the time;
- `duration:`: It indicates how long the time period lasts.  If `start:` is specified, then how long forwards;  if `end:` is specified, then how long backwards.  The syntax can be either the traditional `HH:MM:SS` format or as follows:
  ```yaml
  duration:
    days: 2
    hours: 4
    minutes: 15
    seconds: 30
  ```

#### Usage examples
`history_stats` are defined as a platform (`- platform: history_stats`) under `sensor:` in your `configuration.yaml` file.  To keep things organized, go to the `configuration.yaml` and append a reference to `sensors.yaml`, as follows:

```yaml
# Sensors
sensor: !include sensors.yaml
```

Then using a text editor, create a `sensors.yaml` file where we will configure the following three `history_stats` sensors to consume the data from the default [`weather.home`](https://www.home-assistant.io/integrations/weather/) entity:

1. `sunny yesterday hours`: Number of hours that the `weather.home` entity remained in the `sunny` state *yesterday*;
2. `cloudy today ratio`: Percentage of time that the `weather.home` entity remained in the `cloudy` state *today*;
3. `rainy week count`: Number of times that the `weather.home` entity changed to the `rainy` state over the *last seven days*.

The [Meteorologisk institutt (Met.no)](https://www.home-assistant.io/integrations/met/) is the current default meteorological information service used by HASS. This integration's measurement resolution is 1 hour (via cloud polling) and it follows state-based updates (a new entry in the DB is only created if any of the values has changed).
{:.notice}

To create those three `history_stats` sensor entities, append the following to `sensors.yaml`:

{% raw %}
```yaml
# History Stats
- platform: history_stats
  name: &quot;sunny yesterday hours&quot;
  entity_id: weather.home
  state: &quot;sunny&quot;
  type: time
  # end today at 00:00:00
  end: &gt;
    {{ now().replace(hour=0, minute=0, second=0) }}
  # start 24h before the end time
  duration:
    hours: 24
- platform: history_stats
  name: &quot;cloudy today ratio&quot;
  entity_id: weather.home
  state: &quot;cloudy&quot;
  type: ratio
  # start today at 00:00:00
  start: &gt;
    {{ now().replace(hour=0, minute=0, second=0) }}
  # end right now
  end: &gt;
    {{ now() }}
- platform: history_stats
  name: &quot;rainy week count&quot;
  entity_id: weather.home
  state: &quot;rainy&quot;
  type: count
  # end right now
  end: &gt;
    {{ now() }}
  # start 7 days before the end time
  duration:
    days: 7
```
{% endraw %}

Now **check your configuration file** and if everything looks good, **restart HASS**.  Afterwards, check your **log** file for related errors and if it all looks good, then head to **Developer Tools** &gt; States and you should now see the three new entities we just created:

[![HASS utility history stats](/assets/posts/2021-06-04-smarter-hass/hass-utility-historystats.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-utility-historystats.jpg)

In the example above, it's been cloudy for 2.6% of the time today, we had roughly 10 hours of sunny weather yesterday, and the weather changed to rainy 5 times over the week. 

Because I have not been running HASS and collecting `weather.home` data over this week in a reliable way, **the reported metrics can be quite misleading**, as noted in the [Sampling](#sampling) section.  For a proper representation of the statistics over the configured time-range, make sure to keep your HASS instance running (and in this case, check that the cloud polling has been working without extended service outages) for at least as long as the configured time-range.
{:.notice--warning}

#### Additional references
- History Stats **documentation**: [https://www.home-assistant.io/integrations/history_stats/](https://www.home-assistant.io/integrations/history_stats/)
- History Stats **source**: [https://github.com/home-assistant/core/tree/dev/homeassistant/components/history_stats](https://github.com/home-assistant/core/tree/dev/homeassistant/components/history_stats)

[Utilities](#utilities){:.btn .btn--info .btn--small}


### Statistics
The [Statistics](https://www.home-assistant.io/integrations/statistics/) integration is by far the most useful integration for describing the past values from other entities.  In brief, it consumes the data from another entity and returns the traditional descriptive measures of central tendency (`mean` and `median`) and variability (`quantiles`, `variance`, `standard_deviation`, `min_value`, `max_value`), as well as a few other descriptive measures.

Similarly to the [History Stats](#history-stats) integration, the Statistics integration has **two time period variables**:

- `sampling_size`: The maximum number of data points to be used within the `max_age` interval in **descending order** (oldest to newest). By default, it is `20`;
- `max_age`: The maximum age of the oldest data point. This variable is equivalent to `duration:` in the [History Stats](#history-stats) when {% raw %}`end: {{ now() }}`{% endraw %} and similarly, its time syntax can be defined in the traditional `HH:MM:SS` format or the following:
  ```yaml
  max_age:
    days: 3
    hours: 6
    minutes: 10
    seconds: 45
  ```
  That is, `max_age` specifies an interval relative to `now()` in which the Statistics integration will collect a maximum number of data points equal to the `sampling_size` (e.g., `20`) in **descending** order. If `max_age` is not specified, then it spans until the last value in the HASS DB for the given `entity_id`.

To illustrate how the specification of time works in this integration, let's suppose we create a template sensor that triggers every **5 min** and **forces an update** (DB entry), such as the `sensor.template_sun_elevation_time_based` from the [Sampling](#sampling) section, and we leave it running for exactly 7 days from now.  Therefore, the HASS DB collects 12 data points *per hour* for this template sensor, 288 data points *per day*, and 2016 data points *per week*.  Now, because the `sampling_size` works in **descending order**, by default, it will compute statistics for the `20` oldest data points, which will range from exactly `7 days old` to `6 days, 22 hours, and 20 minutes old` (or simply from `oldest` until `100 minutes` afterwards).  However, if we also specified the `max_age` to 3 days ago, as follows:
```yaml
max_age:
  days: 3
```
then the time-range would instead span from exactly `3 days old` to `2 days, 22 hours, 20 minutes old`.  Finally, because there will be 288 data points per day, if we set `sampling_size: 288` in the last example, then the time-range would instead span from exactly `3 days old` to `2 days old`.

While proper configuration of the `sampling_size` and `max_age` allow for the specification of a variety of different time-ranges, it does require clear understanding of the entity's **measurement resolution** and how it is updated in the DB because otherwise, the computed statistics are bound to misrepresent the desired time-ranges.  I feel the [History Stats](#history-stats) integration is more flexible and precise in its definition of the time-range by using the more intuitive `start:`, `end:`, and `duration:` time variables.  For example, the [time templating](https://www.home-assistant.io/docs/configuration/templating/#time) used in the History Stats integration allows for the specification of any hour of any day (e.g., start yesterday at `00:00:00` and end today at `00:00:00`), whereas such level of precision is not possible with the Statistics integration alone.

#### Usage examples
As before, `statistics` are defined as a platform (`- platform: statistics`) under `sensor:` in your `configuration.yaml` file.  In this example, we will configure two `statistics` sensors to consume the data from the `sensor.template_sun_elevation_time_based` entity:

1. `sun elevation one hour ago`: Descriptive measures for the `sensor.template_sun_elevation_time_based` over the last one *hour*;

2. `sun elevation one day ago`: Descriptive measures for the `sensor.template_sun_elevation_time_based` over the last one *day*.

To create those two `statistics` sensor entities, append the following to the `sensors.yaml`:

```yaml
# Statistics
- platform: statistics
  name: &quot;sun elevation one hour ago&quot;
  entity_id: sensor.template_sun_elevation_time_based
  # measurement resolution is 5/min
  sampling_size: 12
  max_age:
    hours: 1
- platform: statistics
  name: &quot;sun elevation one day ago&quot;
  entity_id: sensor.template_sun_elevation_time_based
  # measurement resolution is 5/min
  sampling_size: 288
  max_age:
    days: 1
```

Now **check your configuration file** and if everything looks good, **restart HASS**. Afterwards, check your log file for related errors and if it all looks good, then head to **Developer Tools** &gt; States and you should now see the two new entities we just created:

[![HASS utility statistics 01](/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-01.jpg)

Notice that in `sensor.sun_elevation_one_day_ago`, the number of actual data points (`count: 101`) is lower than expected for this time-range (`sampling_size: 288`).  This happened because my HASS instance has not been collecting the `elevation` attribute  data from the `sun.sun` entity in a reliable fashion over the last day.  However, in `sensor.sun_elevation_one_hour_ago`, the number of actual data points (`count: 12`) is indeed equal to the expected (`sampling_size: 12`).  (Also, inspection of the `min_age` and `max_age` is very useful in making sure that the time-rage is the expected one.)

In addition, any `statistics` sensor entity shows the `mean` as both **state** and **attribute**.  Other descriptive statistics for each `statistics` sensor entity are shown only as **attribute**.  In the example, the Sun has increased in elevation from 34° to 36° over the last hour (`min_value: 34`, `max_value: 36`, `change: 2`), with an average of 35.2° above the horizon (`mean: 35.17`).

Now, weather data are much less predictable and subject to multiple sources of variability over time than the `sun.sun` metrics.  As mentioned before, however, many of the default weather metrics (e.g., `temperature`, `humidity`, `pressure`) are provided as attributes of a state-based, cloud polling entity--namely, the `weather.home` entity that by default uses data from the [Met.no](https://www.home-assistant.io/integrations/met/) integration.  This poses multiple challenges to the analysis of the `weather.home` data over time but just as before, we can fix it by creating [time-pattern, template sensors](https://www.home-assistant.io/integrations/template/) for each relevant attribute.  To do so, append the following to the `templates.yaml` configuration file:

{% raw %}
```yaml
- trigger:
    - platform: time_pattern
      # Update every 1 hour
      hours: &quot;/1&quot;
  # Hourly sensor templates
  sensor:
    - name: &quot;template weather temperature - time-based&quot;
      unit_of_measurement: &quot;C&quot;
      state: &gt;
        {{ state_attr('weather.home', 'temperature') | float | round(1) }}
      attributes:
        timestamp: &gt;
          {{ as_timestamp(now()) }}
    - name: &quot;template weather humidity - time-based&quot;
      unit_of_measurement: &quot;%&quot;
      state: &gt;
        {{ state_attr('weather.home', 'humidity') | int }}
      attributes:
        timestamp: &gt;
          {{ as_timestamp(now()) }}
    - name: &quot;template weather pressure - time-based&quot;
      unit_of_measurement: &quot;hPa&quot;
      state: &gt;
        {{ state_attr('weather.home', 'pressure') | float | round(1) }}
      attributes:
        timestamp: &gt;
          {{ as_timestamp(now()) }}
```
{% endraw %}

The `time_pattern` trigger is every 1 hour because the measurement resolution for the Met.no integration is 1 hour.  Obviously, if this is different for your weather integration, then set it to a different trigger value to match the measurement resolution.
{:.notice}

**Check your config** and **restart your HASS**.  Now **wait** for it to collect enough data points to allow meaningful analysis (at least 2 hours).

Afterwards, we will create the following three `statistics` sensors for the new entities which will provide descriptive metrics for each of them over a time period of *one day*:

1. `weather temperature one day ago`: Descriptive measures for the `sensor.template_weather_temperature_time_based` over the last one *day*;

2. `weather humidity one day ago`: Descriptive measures for the `sensor.template_weather_humidity_time_based` over the last one *day*;

3. `weather pressure one day ago`: Descriptive measures for the `sensor.template_weather_pressure_time_based` over the last one *day*;

To create those three `statistics` sensor entities, append the following to the `sensors.yaml`:

```yaml
- platform: statistics
  name: &quot;weather temperature one day ago&quot;
  entity_id: sensor.template_weather_temperature_time_based
  # measurement resolution is 1/hour
  sampling_size: 24
  max_age:
    days: 1
- platform: statistics
  name: &quot;weather humidity one day ago&quot;
  entity_id: sensor.template_weather_humidity_time_based
  # measurement resolution is 1/hour
  sampling_size: 24
  max_age:
    days: 1
- platform: statistics
  name: &quot;weather pressure one day ago&quot;
  entity_id: sensor.template_weather_pressure_time_based
  # measurement resolution is 1/hour
  sampling_size: 24
  max_age:
    days: 1
```

Once again, check your configuration file and then restart your HASS. Check your log file and **wait** at least one hour.  Remember that such sensors will only update when the monitored entities also update, which in our case is every 1 hour.  Afterwards, head to **Developer Tools** &gt; States and you should now see the three new entities we just created:

[![HASS utility statistics 02](/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-02.jpg)

This examples shows that over the last 24h, the temperature ranged from 9.7°C to 13.8°C, with a mean of 11.3°C and standard deviation of ±1.2°C.

#### Additional references
- Statistics **documentation**: [https://www.home-assistant.io/integrations/statistics/](https://www.home-assistant.io/integrations/statistics/)
- Statistics **source**: [https://github.com/home-assistant/core/blob/dev/homeassistant/components/statistics/](https://github.com/home-assistant/core/blob/dev/homeassistant/components/statistics/)
- Statistics noteworthy **dependencies**:
  - Python `statistics` core pkg: [https://docs.python.org/3/library/statistics.html](https://docs.python.org/3/library/statistics.html)

[Utilities](#utilities){:.btn .btn--info .btn--small}


### Trend
The [Trend](https://www.home-assistant.io/integrations/trend/) integration is the only one that depends on an external Python package, namely the [`numpy`](https://numpy.org) package, and it does exactly what you'd expect from its name: it provides a trend coefficient for the data set spanning a user-specified time period.  More specifically, this integration fits a **linear** function to the data points of an entity--via NumPy's `np.polyfit()` method--and outputs the **slope** of the function, which is called by *gradient*.  As such, it is a very useful integration for any scenario in which we need to know whether the data are *increasing* or *decreasing* over time.

The specification of time in this integration is very similar to the [Statistics](#statistics-01) integration, except that (a) `sampling_size` is now called `max_samples`, (b) `max_age` is now called `sample_duration`, and (c) the latter is specified in *seconds* instead of using a duration syntax.  Specifically, the time period is specified by the following two time variables:

- `max_samples`: The maximum number of data points. By default, it uses the last two data points (`max_samples: 2`);
- `sample_duration`: The duration (in seconds) of the oldest data point.  By default, it is unconstrained (`sample_duration: 0`).

#### Usage examples
Contrary to the previous two utilities, a `trend` sensor is defined as a platform (`- platform: trend`) under **`binary_sensor:`** in your `configuration.yaml` file.  For this reason, first, let's include a reference to a `binary_sensors.yaml` in the `configuration.yaml` file, as follows:

```yaml
# Binary sensors
binary_sensor: !include binary_sensors.yaml
```

Then using a text editor, create a `binary_sensors.yaml` file where we will configure the following four `trend` binary sensors to consume the data from the temperature, humidity, and pressure time-based template sensors, as well as the Sun elevation:

1. `trend weather temperature six hours`: Gradient of the `sensor.template_weather_temperature_time_based` template sensor over the *last six hours*;
2. `trend weather humidity six hours`: Gradient of the `sensor.template_weather_humidity_time_based` template sensor over the *last six hours*;
3. `trend weather pressure twelve hours`: Gradient of the `sensor.template_weather_pressure_time_based` template sensor over the *last twelve hours*;
4. `trend sun elevation twenty minutes`: Gradient of the `sensor.template_sun_elevation_time_based` template sensor over the *last twenty minutes*;

To create those `trend` entities, append the following to the `binary_sensors.yaml` file:

{% raw %}
```yaml
# Trend
- platform: trend
  sensors:
    trend_weather_temperature_six_hours:
      entity_id: sensor.template_weather_temperature_time_based
      # resolution is 1/h
      max_samples: 6
      # 6 hours in seconds
      sample_duration: 21600
    trend_weather_humidity_six_hours:
      entity_id: sensor.template_weather_humidity_time_based
      # resolution is 1/h
      max_samples: 6
      # 6 hours in seconds
      sample_duration: 21600
    trend_weather_pressure_twelve_hours:
      entity_id: sensor.template_weather_pressure_time_based
      # resolution is 1/h
      max_samples: 12
      # 12 hours in seconds
      sample_duration: 43200
    trend_sun_elevation_twenty_minutes:
      entity_id: sensor.template_sun_elevation_time_based
      # resolution is 1 every 5 minutes
      max_samples: 4
      # 20 minutes in seconds
      sample_duration: 1200
```
{% endraw %}

**Check your configuration file** and if everything looks good, **restart HASS**. Afterwards, check your log file for related errors and if it all looks good, then head to **Developer Tools** &gt; States and you should now see the new trend entities we just created:

[![HASS utility trend 01](/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-01.jpg)

[![HASS utility trend 02](/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-02.jpg){:.PostImage}](/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-02.jpg)

Two noteworthy observations need to be made at this point.  First, notice that this integration does not analyze the data from previously stored entity data but actually stores its own data.  Therefore, it's necessary to keep it running to collect data from all monitored entities before drawing any meaningful conclusions from it.  Second, the slope of the linear function that was fit over the data points (`gradient`) is reported as an **attribute** and because it uses *seconds* as time unit, the coefficient refers to the ratio of change *per second*.  Therefore, to make it easier working with `gradient`, I usually create a slave entity to output the gradient as its state instead. This is accomplished with **template sensors**.  More specifically, let's append the following *Trend helper entities* under our default (state-based) **Sensor Templates** in the `templates.yaml` file:

{% raw %}
```yaml
    # Trend helper entities
    - name: &quot;template trend sun elevation twenty minutes&quot;
      unit_of_measurement: &quot;°/h&quot;
      # if statement makes sure the gradient is valid
      # change the scale from sec to hour
      state: &gt;
        {% if state_attr('binary_sensor.trend_sun_elevation_twenty_minutes', 'gradient') is number %}
           {{ (state_attr('binary_sensor.trend_sun_elevation_twenty_minutes', 'gradient') * 3600) | round(1) }}
        {% endif %}
    - name: &quot;template trend weather temperature six hours&quot;
      unit_of_measurement: &quot;C/h&quot;
      state: &gt;
        {% if state_attr('binary_sensor.trend_weather_temperature_six_hours', 'gradient') is number %}
           {{ (state_attr('binary_sensor.trend_weather_temperature_six_hours', 'gradient') * 3600) | round(2) }}
        {% endif %}
    - name: &quot;template trend weather humidity six hours&quot;
      unit_of_measurement: &quot;%/h&quot;
      state: &gt;
        {% if state_attr('binary_sensor.trend_weather_humidity_six_hours', 'gradient') is number %}
           {{ (state_attr('binary_sensor.trend_weather_humidity_six_hours', 'gradient') * 3600) | round(2) }}
        {% endif %}
    - name: &quot;template trend weather pressure twelve hours&quot;
      unit_of_measurement: &quot;hPa/h&quot;
      state: &gt;
        {% if state_attr('binary_sensor.trend_weather_pressure_twelve_hours', 'gradient') is number %}
           {{ (state_attr('binary_sensor.trend_weather_pressure_twelve_hours', 'gradient') * 3600) | round(0) }}
        {% endif %}
```
{% endraw %}

The `if` statement is used to validate (`is number`) the appropriate variables in the unit conversion and rounding operations.  Otherwise, the template sensor might attempt to perform a mathematical operation on something other than a number, such as when the `gradient` attribute is not yet defined, which would result in an error.

Now **reload your configuration** and afterwards, HASS will create new `sensor.template_trend_*` entities that should contain the converted gradient as their state.

[![HASS utility trend 03](/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-03.jpg){:.PostImage}](/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-03.jpg)

#### Additional references
- Trend **documentation**: [https://www.home-assistant.io/integrations/trend/](https://www.home-assistant.io/integrations/trend/)
- Trend **source code**: [https://github.com/home-assistant/core/blob/dev/homeassistant/components/trend/](https://github.com/home-assistant/core/blob/dev/homeassistant/components/trend/)
- Trend noteworthy **dependencies**:
  - Python `numpy` pkg: [https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html](https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html)

[Utilities](#utilities){:.btn .btn--info .btn--small}


## Visualizing analytical data
There are many different ways of using and visualizing the analytical data reported with the utilities described in this guide.  Using the default configuration, for example, one might be inclined to display the mean or gradient using a [History Graph Card](https://www.home-assistant.io/lovelace/history-graph/).  

Of note, if one or more of your sensors make use of the [long-term statistics](#long-term-statistics) feature, then the new [Statistics Graph Card](https://www.home-assistant.io/lovelace/statistics-graph/) is the only way of visualizing their long-term summary data. The remaining part of this section describes visualization resources for sensor data stored on the `states` table of the HASS DB, instead of the `statistics` table.
{: .notice--info }

In this section, however, we will learn about two dashboard resources that I think are better alternatives to the History Graph Card, namely the [Mini Graph Card](https://github.com/kalkih/mini-graph-card) and the [Lovelace Card Templater](https://github.com/gadgetchnnel/lovelace-card-templater). More specifically, we will use the Mini Graph Card within the Lovelace Card Templater to build the following Dashboard card previewed in the [Introduction](#introduction):

[![HASS graph dynamic temperature 01](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif){:.PostImage}](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif)

And here's how it has changed a few hours later:

[![HASS graph dynamic temperature 02](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-02.gif){:.PostImage}](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-02.gif)

This card displays **six temperature** (Met.no) **metrics** over a 24h time-range:

- The main (colored) line shows the **current temperature**, in which the colors are selected by the following ever changing (dynamic) thresholds:
  
  | very high | high | low | very low |
  |:---:|:---:|:---:|:---:|
  | *max* to (*mean* **+** *stdev*) | (*mean* **+** *stdev*) to *mean* | *mean* to (*mean* **-** *stdev*) | (*mean* **-** *stdev*) to *min* |

  And the corresponding colors were selected from the following [palette](https://coolors.co) (hex color code shown above the color label):

  [![Color palette](/assets/posts/2021-06-04-smarter-hass/color-palette.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/color-palette.jpg)

- The highest valued shaded area in the background corresponds to the **max temperature** over the last 24hrs;
- The second highest shaded area corresponds to **plus one standard deviation** from the mean temperature over the last 24hrs;
- The middle shaded area corresponds to the **mean temperature** over the last 24hrs;
- The second lowest value shaded area corresponds to **minus one standard deviation** from the mean temperature over the last 24hrs;
- And finally, the lowest shaded area corresponds to the **min temperature** over the last 24hrs.

The graph therefore provides a visually appealing way of assessing the current temperature relative to its 24hrs distribution, which is much more convenient than inspecting a table of values over time. Next, I will describe how to create the graph step-by-step.

### How-to: Temperature with dynamic color thresholds
First, make sure you have an entity for each of the six metrics described before.  All such metrics can be obtained from the **[Statistics](#statistics-01) integration**, which will consume the data from a temperature sensor (e.g., `weather.home` via Met.no) and by using custom **template sensors**.  More specifically, make sure your `configuration.yaml` file has an `!include` for both `sensors.yaml` and `templates.yaml`, as follows:

```yaml
# Sensors
sensor: !include sensors.yaml
# Templates
template: !include templates.yaml
```

Then using a text editor, add the following to `templates.yaml` to create a `time_pattern` triggered entity that extracts and stores the `temperature` attribute from `weather.home`:

{% raw %}
```yaml
# Time pattern trigger
- trigger:
    - platform: time_pattern
      # Update every 1 hour
      hours: &quot;/1&quot;
  # Hourly sensor templates
  sensor:
    - name: &quot;template weather temperature&quot;
      unit_of_measurement: &quot;C&quot;
      state: &gt;
        {% if state_attr('weather.home', 'temperature') is number %}
          {{ state_attr('weather.home', 'temperature') }}
        {% endif %}
      attributes:
        # Force an update with a timestamp change to ensure proper representation of state values over time
        timestamp: &gt;
          {{ as_timestamp(now()) }}
```
{% endraw %}

In your `sensors.yaml` file, append the following to create a Statistics sensor for the temperature over the last 24hrs:

{% raw %}
```yaml
# Statistics
- platform: statistics
  name: &quot;weather temperature one day&quot;
  entity_id: sensor.template_weather_temperature
  # measurement resolution is 1/hour
  sampling_size: 24
  max_age:
    days: 1
```
{% endraw %}

Now go back to `templates.yaml` and add a few helper entities to extract the attributes from the `sensor.weather_temperature_one_day` Statistics sensor, as follows:

{% raw %}
```yaml
# Sensor Templates
- sensor:
    # Statistics helper entities
    - name: &quot;template weather temperature one day mean plus stdev&quot;
      unit_of_measurement: &quot;C&quot;
      state: &gt;
        {% if state_attr('sensor.weather_temperature_one_day', 'mean') is number and state_attr('sensor.weather_temperature_one_day', 'standard_deviation') is number %}
           {{ (state_attr('sensor.weather_temperature_one_day', 'mean') + state_attr('sensor.weather_temperature_one_day', 'standard_deviation')) | round(1) }}
        {% endif %}
    - name: &quot;template weather temperature one day mean minus stdev&quot;
      unit_of_measurement: &quot;C&quot;
      state: &gt;
        {% if state_attr('sensor.weather_temperature_one_day', 'mean') is number and state_attr('sensor.weather_temperature_one_day', 'standard_deviation') is number %}
           {{ (state_attr('sensor.weather_temperature_one_day', 'mean') - state_attr('sensor.weather_temperature_one_day', 'standard_deviation')) | round(1) }}
        {% endif %}
    - name: &quot;template weather temperature one day max&quot;
      unit_of_measurement: &quot;C&quot;
      state: &gt;
        {% if state_attr('sensor.weather_temperature_one_day', 'max_value') is number %}
           {{ state_attr('sensor.weather_temperature_one_day', 'max_value') | round(1) }}
        {% endif %}
    - name: &quot;template weather temperature one day min&quot;
      unit_of_measurement: &quot;C&quot;
      state: &gt;
        {% if state_attr('sensor.weather_temperature_one_day', 'min_value') is number %}
           {{ state_attr('sensor.weather_temperature_one_day', 'min_value') | round(1) }}
        {% endif %}
```
{% endraw %}

As before, the `if` statements ensure the variables are valid (`is number`) before performing mathematical operations with them.
{:.notice}

Finally, **check your configuration** and **restart your HASS**.  Now **wait at least one day** because your new entities need to collect data before showing anything meaningful.  But in the meantime, go ahead and install the two JavaScripts to your dashboard:

- [Install Mini Card Graph](https://github.com/kalkih/mini-graph-card#install)
- [Install Lovelace Card Templater](https://github.com/gadgetchnnel/lovelace-card-templater#installation)

Personally, I prefer to install such resources manually, instead of using the Community Store.  To do so:

1. **Download** their respective `.js` scripts to your HASS `config/www/` directory;
2. Navigate to Configuration &gt; Lovelace Dashboards &gt; **Resources** and select **add resource**;
3. In the **Add new resource** window, set the URL to `/local/MODULE_NAME.js`, in which `MODULE_NAME` will be the name of the JavaScript module (e.g., for the Mini Graph Card, that would be `/local/mini-graph-card-bundle.js`). HASS should automatically detect that the Resource Type is a `JavaScript Module` but if doesn't, then select it;
4. Press **update** and repeat the operation to add as many resources as necessary;
5. **Restart your HASS**.

If an entire day has already passed, then you should be able to configure a proper graph card using the JavaScript modules you added to the HASS dashboard, as follows:

1. Navigate to Overview &gt; Edit Dashboard and select **add card**;
2. Choose a **Manual card** and in the card configuration, paste the following:

{% raw %}
```yaml
type: custom:card-templater
card:
  type: custom:mini-graph-card
  name: Temperature - Met.no
  hours_to_show: 24
  animate: true
  align_state: right
  align_icon: left
  align_header: left
  font_size_header: 12
  font_size: 80
  decimals: 1
  line_width: 4
  entities:
    - entity: sensor.template_weather_temperature
      show_fill: false
      state_adaptive_color: true
      unit: °C
    - entity: sensor.template_weather_temperature_one_day_max
      show_line: false
      show_points: false
      color: white
    - entity: sensor.template_weather_temperature_one_day_mean_plus_stdev
      show_line: false
      show_points: false
      color: white
    - entity: sensor.weather_temperature_one_day
      show_line: false
      show_points: false
      color: white
    - entity: sensor.template_weather_temperature_one_day_mean_minus_stdev
      show_line: false
      show_points: false
      color: white
    - entity: sensor.template_weather_temperature_one_day_min
      show_line: false
      show_points: false
      color: white
  color_thresholds:
    - value_template: '{{ states(&quot;sensor.template_weather_temperature_one_day_min&quot;) }}'
      color: '#0799BA'
    - value_template: '{{ states(&quot;sensor.template_weather_temperature_one_day_mean_minus_stdev&quot;) }}'
      color: '#30BFBF'
    - value_template: '{{ states(&quot;sensor.weather_temperature_one_day&quot;) }}'
      color: '#ECD711'
    - value_template: '{{ states(&quot;sensor.template_weather_temperature_one_day_mean_plus_stdev&quot;) }}'
      color: '#F17D28'
  show:
    labels: true
    legend: false
    name_adaptive_color: true
    icon_adaptive_color: true
entities:
  - sensor.weather_temperature_one_day
  - sensor.template_weather_temperature_one_day_mean_plus_stdev
  - sensor.template_weather_temperature_one_day_mean_minus_stdev
  - sensor.template_weather_temperature_one_day_max
  - sensor.template_weather_temperature_one_day_min
```
{% endraw %}

That is it!  You should now be able to see a graph similar to the following one:

[![HASS graph dynamic temperature 03](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-03.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-03.jpg)

If the values are not showing up correctly, check Developer Tools &gt; States to make sure the entities are there and the states are displaying the correct values.  If you want to reset the entity data, go to Developer Tools &gt; Services, select `recorder.purge_entities`, select the entities you want to reset in Targets (e.g., `sensor.weather_temperature_one_day`), and press **call service** to purge their data.

Of course, many other options are available using the **Mini Graph Card** and the **Lovelace Card Templater** in combination with the other card options (e.g., [Entities Card](https://www.home-assistant.io/lovelace/entities/), [Gauge Card](https://www.home-assistant.io/lovelace/gauge/)).  Feel free to explore them (and let me know about it, too).

[top](#){:.btn .btn--light-outline .btn--small}


# Development
In this guide, we've seen how the current set of analytical tools can greatly improve the way we **describe** past and current states.  (*The following was changed on August 14th, 2021, in connection with the addition of quantiles to the Statistics integration.*)  However, the lack of a flexible and standardized specification of the *time variables* make the current analytical tools very narrow in scope.  Compare, for example, how the [History Stats](#history-stats) and the [Statistics](#statistics-1) integration deal with the specification of a time period.

In addition, statistics is not just about summarizing the past; it is also a tool for making **data-driven inferences** about the future.  This is a topic that I find largely unexplored in home automation systems and would allow for the creation of what I call **inferential automations**.  Inferential automations determine actions based on abnormal states and measurements, for example, or reliable tendencies over a user-specified period of time:

- if the water level is *significantly lower than yesterday*, then __ .
- if the number of detected cars on my camera is *significantly higher than thirty minutes ago*, then __ .
- if the temperature started *decreasing significantly over the last five minutes*, then __ .
- if the VOC started *increasing significantly over the last fifteen minutes*, then __ .

[![VOC plot linear fit](/assets/posts/2021-06-04-smarter-hass/voc-plot-linear-fit.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-06-04-smarter-hass/voc-plot-linear-fit.jpg)

Sadly, none of the integrations currently enables the use of inferential automations.  The closest we have to such a thing is via the use of the [Trend](#trend) integration but even then, we lack the output of fit metrics for proper inference, such as the residuals of the least-square fit.  

Of course, there's a lot that can be done via templating but moving forward, there's a need for advanced analytical integrations if we want to create inferential automations.  As I pointed out before, HASS integrations are written in the Python programming language, which means we can take advantage of the various analytical packages that are already available in Python, such as:

- [Pandas](https://pandas.pydata.org/)
- [NumPy](https://numpy.org/)
- [SciPy](https://www.scipy.org/)

For anyone who might want to help out, the folks at the HASS wiki were very kind to write a super detailed guide about developing new integrations:

- [Development Workflow](https://developers.home-assistant.io/docs/development_index/)

[Reach out](/contact) if you are thinking about development.

[top](#){:.btn .btn--light-outline .btn--small}


# Conclusion
This marks the end of this guide.  My intention was to highlight a few of the currently available [Utility integrations](https://www.home-assistant.io/integrations/#utility) because they are rarely used but are fairly easy to implement and incredibly useful.  There are a few gotchas to how data are sampled and stored in HASS, as well as how a few of the reviewed integrations work, which I hope were made verbatim in this guide and will help you decide what is best for your own use-case.

Moving forward, there is a clear trajectory for implementing what I called **inferential automations**.  This begins with improving existing [Utility integrations](https://www.home-assistant.io/integrations/#utility) and ends with porting advanced analytical Python packages to the HASS environment.  The culmination of this path is the largely unexplored concept of automating the future using data-driven inferences in home automation systems.

[top](#){:.btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="hass" /><category term="iot" /><category term="automation" /><category term="math" /><category term="stats" /><category term="inference" /></entry><entry><title type="html">How to make a chimarrão Gaúcho</title><link href="/blog/chimarrao-gaucho/" rel="alternate" type="text/html" title="How to make a chimarrão Gaúcho" /><published>2021-03-09T12:30:00-03:00</published><updated>2021-03-09T12:30:00-03:00</updated><id>/blog/chimarrao-gaucho</id><content type="html" xml:base="/blog/chimarrao-gaucho/"># Changelog
**September 3rd, 2021**: Added information about buying linen/reusable teabags as a filter solution to the [Items](#items) section.  Also included a note about cleaning the *bomba* every so often.
{: .notice--info }

**Mar 9th, 2021**: Publication of the original article
{: .notice--info }

[top](#){: .btn .btn--light-outline .btn--small}


# Introduction
In this guide, I will provide all the essential information on how to make the same ***chimarrão Gaúcho***--pronounced [ʃimɐˈʁɐ̃w̃ ɡaˈuʃu](https://en.wikipedia.org/wiki/Help:IPA/Portuguese) in Portuguese or roughly, *shemaHaoom gaOOshoo*--that I drink almost on a daily basis.  I feel my previous posts have focused too much on tech-related content, so this should provide a nice change of pace.  If you enjoy hot tea and would like to learn and try a different one, then read on.  The required ingredients and utensils can be found worldwide (or easily imported) and the preparation takes less than 5 min.

[![Chimarrão](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao.jpg)

I am not a historian and do not claim to have a deep understanding of the *Gaúcho* culture and history.  To be very honest, I do not share the opinion that such knowledge is required to appreciate a *chimarrão* at all.  In fact, some of the drinking customs/etiquette are arguably unhygienic (e.g., sharing the same drink with multiple individuals) or petty (e.g., the way one holds the container or positions the straw inside the container) and you definitely do not need to abide to any such customs if all that you want is to enjoy the drink.  Therefore, I won't delve too much into history, culture, and etiquette but will provide external sources in the appropriate sections.  

However, if you want to have a taste of the culture and get in the mood for a *mate*, here is a song by the Brazilian *payador* [Jayme Guilherme Caetano Braun](https://en.wikipedia.org/wiki/Jaime_Caetano_Braun), called ***Mateando***:

{% include video id=&quot;ewfIVyRJDFk&quot; provider=&quot;youtube&quot; %}
{:. text-center}

(If you liked it, you might want to listen to the album [*Payador*](https://www.youtube.com/watch?v=52X4H6KZ5Qc) while you read the remaining part of this guide.) As usual, feel free to [get in touch with me](/contact) if you have suggestions on how to improve this guide.

[top](#){: .btn .btn--light-outline .btn--small}


# Overview
This guide was organized as follows.  First, I presented the definition of *chimarrão* and more specifially, the *Gaúcho* style of preparing a *chimarrão*.  Next, I covered the ingredients and utensils that are necessary to prepare the traditional *chimarrão Gaúcho*, as well as alternatives more commonly found worldwide.  Then, at the end, there is a step-by-step procedure describing how I make my chimarrão that anyone can follow along.  If you are already familiar with *chimarrão* and just want to check the method I use to prepare mine, then skip to the last part of this guide.

[top](#){: .btn .btn--light-outline .btn--small}


# Definition
According to the [Wikipedia entry for *Mate*](https://en.wikipedia.org/wiki/Mate_(drink)),

&gt; Mate or maté, also known as chimarrão or cimarrón, is a traditional South American caffeine-rich infused drink. It is made by soaking dried leaves of the holly species [Ilex paraguariensis](https://en.wikipedia.org/wiki/Yerba_mate) in hot water and is served with a metal straw in a container typically made from a [calabash gourd](https://en.wikipedia.org/wiki/Calabash_gourd).

In this guide, the Brazilian Portuguese term *chimarrão Gaúcho* refers to the infused drink commonly prepared in the Southern states of Brazil, typically in the state of *[Rio Grande do Sul](https://en.wikipedia.org/wiki/Rio_Grande_do_Sul)*.  Its main ingredient is the **yerba mate**, which is the *dried, toasted, and shredded* leaf of the *Ilex paraguariensis*.  As opposed to the yerba mate often used in [Argentina](https://en.wikipedia.org/wiki/Argentina), [Uruguay](https://en.wikipedia.org/wiki/Uruguay), and other regions in South America, the yerba mate used to make a *chimarrão Gaúcho* is packed just a few days after processing to prevent oxidation, which gives it a characteristic **bright green color** from the higher concentration of [chlorophyll](https://en.wikipedia.org/wiki/Chlorophyll).

[![Chimarrão](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-mate-types.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-mate-types.jpg)

Flavor-wise, the yerba mate used to make the *chimarrão Gaúcho* is **less bitter** and **less toasted** than its aged counterparts.  This makes it well-suited for people who have never tried yerba mate before, for example, or for anyone who finds the other yerba mates too strong.  This is the main ingredient of the *chimarrão* and as such, it cannot be replaced; otherwise, you would be making a different infused drink.  

The yerba mate is a well-known source of **caffeine** and vitamins B and C, and has slightly higher concentration of antioxidants than [green tea](https://en.wikipedia.org/wiki/Green_tea).  As far as I am aware, it is not prohibited by any food and drugs agency and therefore, it can be found and commercialized worldwide.  That said, if you drink it outdoors in a country where it is not popular, you are bound to draw a little bit of attention but in my case, it's been more of a conversation piece than a trouble maker.  Psychologically, the effects are very much similar to drinking coffee or black tea, and as such, the *chimarrão Gaúcho* is best when consumed early in the morning and during cold days.

This drink **will not** get you high.  At most, some people report upset stomach and acid reflux.  Of course, stop consuming *chimarrão* if you experience such symptoms and it might be a good idea to see a physician because those symptoms might be related to an undiagnosed and treatable medical condition.  The risks associated with the consumption this drink are the same as any common tea.
{:.notice .notice--warning}

Another noteworthy difference between the *chimarrão Gaúcho* and other yerba mate drinks is the container used, called ***cuia*** in Portuguese.  More specifically, the *cuia* used in a *chimarrão Gaúcho* is made of a [calabash](https://en.wikipedia.org/wiki/Calabash) (*Lagenaria siceraria*) gourd that has thicker walls than the more traditional mate gourds and a larger neck as well.

[![Calabash gourd](/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd.jpg)

[![Dry calabash gourd](/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd-dry.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd-dry.jpg)

[![Cuia de chimarrão](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-cuia.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-cuia.jpg)

Finally, there is the metal/wooden straw used to drink, called ***bomba*** in Portuguese.  The *bomba* is not a utensil exclusively used in the *chimarrão Gaúcho* and therefore, it is more easily found worldwide than the *cuia* and the yerba mate for *chimarrão Gaúcho*, for example.  It comes in various sizes, shapes, and with none or multiple decorations.

[![Cuia de chimarrão](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-bomba.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-bomba.jpg)

[top](#){: .btn .btn--light-outline .btn--small}


# History, Myths, and Folklore
There are many stories about the **origins of the mate** that predate the *Gaúcho* culture and the Portuguese and Spanish colonization.  The [*Tupi*](https://en.wikipedia.org/wiki/Tupi_people) and [*Guarani*](https://en.wikipedia.org/wiki/Guaran%C3%AD_people) tribes (indigenous peoples of South America), for example, tell several tales about how the moon, the sun, and tribe warriors where involved in gifting the *mate* to humanity.  If you want to learn more about the history and myths, take a look at the following:

* Native Leaf's article on the [**History of Yerba Mate**](https://www.nativeleaf.co.uk/the-history-of-yerba-mate/): A short article about the early and modern history of the yerba mate, including its use in the Middle East, which I was not aware of.

* earthstOriez's article about [**the origins of mate**](https://www.earthstoriez.com/legend-mate/): Contains multiple tales from indigenous peoples about the origins of the yerba mate.

* ClicRBS' article on [**the legend of the yerba mate**](/assets/pdf/clicrbs-lenda-da-erva-mate.pdf): This article focuses on the *Guarani* tales about the origins of the mate and how it became part of the *Gaúcho* culture.  Unfortunately, it is in Portuguese.

[top](#){: .btn .btn--light-outline .btn--small}


# Ingredients and Utensils

## Where to buy
If you happen to be in Southern Brazil, then you will likely find everything you need in any large retail grocery store chain (e.g., Zaffari, Carrefour, Walmart, Bourbon) or specialized stores in any major cities.  However, I figure that most of you are nowhere near this part of the world.  Fortunately, big online **marketplaces** are available worldwide and come handy in these cases but you will need to be willing to pay a little more for the convenience of buying imported goods online.  So, let me tell you about a few alternatives I have used in the past:

* [Amazon](https://www.amazon.com/): The largest marketplace out there.  In the US, you can find everything you will need to make a *chimarrão* right here.

* [Mercado Libre](https://mercadolibre.com/): One of the largest marketplace in South and Cental America.  Chances are you can find everything here as well.  

* [Walmart](https://www.walmart.com): A possible alternative to Amazon for people in Europe.  You can find everything at Walmart as well.

* [AliExpress](https://aliexpress.com): An alternative to Amazon for people in Asia and Oceania.  However, you will only find utensils at AliExpress.  Check your local marketplaces for yerba mate.

Of course, there are many other options out there.  Dig around **the marketplaces available in your country** before trying the global-scale ones because the former probably has better prices than the latter.  

Lastly, if your city has a large public market or stores that specialized in selling organic products, teas, herbs, etc., **do not be afraid to ask them** about yerba mate and related utensils.  Even if they do not have any of them, most will go above and beyond to find out where to buy in your city.  

In the next section, I will talk about all the traditional items and a few alternatives for those not willing to buy the real deal just yet.

## Items
To make a *chimarrão Gaúcho*, you will need the following ingredients and utensils:

* **Yerba mate for *chimarrão Gaúcho***: As mentioned before, this is the **main ingredient** and it is not replaceable.  The quality of your *chimarrão* is highly dependent on the quality of the *mate* used to prepare it.  Some people like to mix it with herbs and teas to create a more complex flavor (see below) but that is definitely optional.  (I drink mine plain but it is fairly common to add chamomile and lemon grass, for example.)  
  
  When buying online, make sure there is a photo of the product showing that the yerba mate has a **bright green** color and that the yerba **does not contain sugar** (*sem açúcar* in Portuguese).  
  
  [![Yerba Mate for Chimarrao](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-yerba-mate.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-yerba-mate.jpg)
  
  Use the following keywords to help selecting the right type of yerba mate: &quot;**yerba mate for chimarrao**&quot;, &quot;**brazilian yerba mate**&quot;, or language-specific variations of those.  

  These items have a **long shelf life**, so if you start enjoying the drink, buy lots of yerba mate (between 3kg and 6kg, or roughly 105-215 ounces) and store them at home.  **Vacuum sealed** packages (*embalada a vácuo* in Portuguese) are the best ones for long-term storage.

  The following are three of my favorite brands that I have seen being sold abroad:

  * [**Ximango**](https://www.ximango.com.br/)

    [![Yerba Ximango](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-ximango.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-ximango.jpg)

  * [**Madrugada**](http://www.madrugada.com.br/)

    [![Yerba Madrugada](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-madrugada.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-madrugada.jpg)

  * [**Barão de Cotegipe**](https://www.baraoervamate.com.br/en/)

    [![Yerba Barao](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-barao.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/yerba-barao.jpg)
  
  I suggest you to buy a brand name because in Brazil, those companies must comply with health regulations in order to distribute their product.  There are other details about the selection of yerba mates for *chimarrão* but they are non-essential for most people.  They include leaf-to-stem ratios, maturation, and various processing techniques, for example.  (If planning on consuming for long periods, it might be worth looking into the processing methods and making sure it **does not** involve smoke from burning wood, as the latter can produce carcinogenic compounds.)

  It goes without saying that yerba mate sold in *tea bags* are **no good** here.  The taste of *chimarrão* is actually **very** different from the tea.  In fact, I drink *chimarrão* every day but I do not like the yerba mate tea at all.
  {:.notice .notice--warning}

* 01x ***Cuia***: The traditional *cuia* made of a galash gourd (*porongo* in Portuguese) can be bought online or via specialized stores.  A single one can be used and re-used multiple times, even for years if well maintained.
  
  [![Traditional Cuia](/assets/posts/2021-02-25-chimarrao-gaucho/cuia-traditional.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/cuia-traditional.jpg)

  After acquiring a **brand-new** *cuia*, it is **required to curate** it before use. The [Yerb Matero](https://yerbamatero.com/) has a fairly good guide on [curating, cleaning, and mainting the *cuia*](https://yerbamatero.com/blogs/guides/taking-care-of-your-yerba-mate-kit); or check this [Youtube video that illustrates the entire process](https://www.youtube.com/watch?v=8l7li3PVYL4).  In brief, go over the following steps to curate a brand-new *cuia* made of a galash gourd:

  1. Wash the inside of the *cuia* with **boiling** water (be careful!). Remove all the water before moving on;
  2. Fill 1/3 of the *cuia* with yerba mate, fill the remaining with **warm** water, and using a spoon, gently mix it. Then, **let it sit for 24h** with the mate inside.  If you notice that the water level has dropped (the galash gourd should absorb a little bit), add more warm water to try to keep the *cuia* always full;
  3. After 24h, remove the contents of the *cuia* with the help of a spoon and **repeat steps #1 and #2** at least once;
  4. Rinse it well (**only use running water**; **never** use cleaning products) and **let it dry**.  If your *cuia* does not have leather, let it dry in the sun;
  5. (Optional.) For better results, repeat steps #1 and #2 and after rinsing, add a little bit of yerba mate to **coat the internal surface of the *cuia*** and let it dry this way for 12h.
  6. When you are done, you should notice that inside the *cuia*, there is now a slightly green color from the yerba mate and a few greener spots.  If you find **any mold**, don't worry.  Just curate it again and you are ready to go.  The more you use the *cuia*, the more evenly curated it becomes.  After a few weeks of use, it should be much darker in the inside.
  
  Contrary to the yerba mate for *chimarrão*, the traditional *cuia* is actually replaceable.  In fact, you can use pretty much any container that you would normally use with hot beverages.  The preparation method described in this guide should work even with flat, non-porous surfaces, like a standard coffee mug.  A coffee mug won't look as good as the *cuia* but it should work.  I have even managed to make a *chimarrão* using a 5cm-long coffee mug:
  
  [![Experimental Cuia](/assets/posts/2021-02-25-chimarrao-gaucho/cuia-experimental.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/cuia-experimental.jpg)

  More common variations include *cuias* made of wood (e.g., [*Imbuia*](https://en.wikipedia.org/wiki/Ocotea_porosa)), ceramic, or glass.  Of course, you don't need to curate any such types of *cuia* (but make sure to rinse very well before using it for the first time).  They are more expensive, though.

  [![Cuia made of Wood](/assets/posts/2021-02-25-chimarrao-gaucho/cuia-imbuia.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/cuia-imbuia.jpg)

* 01x ***Bomba***: The traditional *bomba* is a metal (stainless steel) straw that has a filter at its bottom.  It is re-usable and if well-maintained, can last several years.
  
  [![Bomba Tradicional](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-tradicional.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-tradicional.jpg)

  As mentioned before, a traditional *bomba* comes in many shapes and sizes.  The size of it depends on the size of the *cuia*.  More specifically, the *bomba* should be roughly **twice the size** of the *cuia*--or at the very least, taller than the *cuia*.  The decorations are a personal choice.  You **do not** need a *bomba* with a spoon-like filter head to drink a *chimarrão Gaúcho*.  Any *bomba* that fits your *cuia* will do just fine.  Personally, I am a fan of the ones that have a **removable filter head** because they are easier to maintain than the non-removable ones.

  [![Bomba Removable Filter](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-removable-filter.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-removable-filter.jpg)

  The traditional *bomba* is replaceable though. If you cannot find one in your country, you might want to try looking for **wooden straws**, usually made of bamboo.  I have never used them before but if they do not have a filter, you **have to add an external filter** to it (see below).  The latter type of straw is not always reusable though (depends on the type of wood), so I strongly recommend to stick to metal straws for long-term use.

  [![Wooden Bomba](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-wooden.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-wooden.jpg)

  Regardless of the *bomba* used, make sure to clean inside of it every once in a while.  It can get pretty dirty in there and if your *bomba* does not allow you to properly clean it, then that is a good reason to use a different one.
  {:.notice--warning}

* 01x [**Portable and insulated beverage dispenser**](https://www.amazon.com/s?k=portable+insulated+beverage+dispenser): Anything that can hold at least 1l (52oz) of hot water will do.  Make sure there is enough space to serve your *cuia*--prefer the ones with a dispenser at the top, instead of bottom, for example.
  
  [![Insulated Beverage Dispenser](/assets/posts/2021-02-25-chimarrao-gaucho/hot-water-dispenser.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/hot-water-dispenser.jpg)

* 1l-3l of **hot water**: As in most traditional infused drinks, we will need hot water.  **Do not** use boiling water--it will ruin the yerba mate and it is unhealthy for you.  The water needs to be hot, as in a black tea or hot coffee.

* 01x **Dinner spoon**.
  
  [![Spoon](/assets/posts/2021-02-25-chimarrao-gaucho/spoon.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/spoon.jpg)

* (Optional.) External filters for the *bomba*: If you dislike when an occasional mate leaf passes the *bomba* filter, or your *chimarrão* clogs too often, you might want to try an external filter for your *bomba*.  In the US, UK, and other English-speaking territories, they are usually referred to as **linen/reusable teabags** and they can be found in [most market places out there](https://www.walmart.com/search/?query=reusable%20Tea%20Bags&amp;cat_id=976759).  If you cannot find them, buy a tea brand that makes use of them, then remove the tea from one of them and use the bag.  
  
  [![External Filter](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-filter.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/bomba-filter.jpg)

  These filters are reusable (usually between 2-3 weeks) and are tied around the filter head of your *bomba*.  This is **required if using straws without a built-in filter**, such as common wooden straws.

* (Optional.) Herbs/teas: If you ever get bored with the taste of plain *chimarrão*, you might want to make its flavor a little bit more complex by adding tea to the water or mixing herbs with your yerba mate.  Here are a few herbs/teas that are often mixed with *chimarrão*:
  
  * Organge (or any other citrus) peel

    [![Orange peel](/assets/posts/2021-02-25-chimarrao-gaucho/orange-peel.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/orange-peel.jpg)

  * [Chamomile (*Matriacaria chamomilia*, *Chamaemelum nobile*)](https://en.wikipedia.org/wiki/Chamomile)

    [![Chamomile](/assets/posts/2021-02-25-chimarrao-gaucho/chamomile.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/chamomile.jpg)

  * [Lemon grass (*Cymbopogon citratus*)](https://en.wikipedia.org/wiki/Cymbopogon_citratus)

    [![Lemon grass](/assets/posts/2021-02-25-chimarrao-gaucho/lemon-grass.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/lemon-grass.jpg)

  * [Anise (*Pimpinella anisum*)](https://en.wikipedia.org/wiki/Anise)

    [![Anise bush](/assets/posts/2021-02-25-chimarrao-gaucho/anise.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/anise.jpg)

  * [Star anise (*Illicium verum*)](https://en.wikipedia.org/wiki/Illicium_verum)

    [![Dried star anise](/assets/posts/2021-02-25-chimarrao-gaucho/star-anise.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/star-anise.jpg)

   Many herbs can cause **allergic reactions** or have **adverse interactions** with other herbal products and prescription drugs.  Before trying anything unusual, make sure to check it is safe for you to use.
   {:.notice .notice--danger}

[top](#){: .btn .btn--light-outline .btn--small}


# Making the *chimarrão Gaúcho*
Once you have acquired all the ingredients and utensils, it is time to make your first *chimarrão Gaúcho*.  There are many different ways of making a *chimarrão*.  The following is the fastest, the most fool-proof and efficient way of making a *chimarrão* that I am aware of and the technique that I have been using over the last ten years.

[![How-to 000](/assets/posts/2021-02-25-chimarrao-gaucho/howto-000.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-000.jpg)

1. This is a hot beverage, so start by **warming up between 1l (35oz) and 3l (105z) of water**, depending on how much liquid you can store on your insulated beverage dispenser.  If you want to boil the water first, then let it cool down until it is hot but not burning hot when it finally reaches your body.  **Store at a temperature between 55°C (131°F) and 70°C (158°F)**.

   You might want to compensate for room temperature as well.  If it is a really cold day, you might want to store the water at a higher temperature than you would in a hot, sunny day, because your *chimarrão* will lose heat much faster when exposed to low temperatures.  Similarly, different types of *cuia* will be more or less prone to lose heat over time, and wind also plays a role in decreasing the temperature when consuming *chimarrão* outdoors.  As you can see, there are multiple factors to take into account if you want to keep your *chimarrão* warm. However, **never** drink or pour boiling water in your *chimarrão*.
   {:.notice .notice--warning}

2. Fill your insulated beverage dispenser with the hot water.

3. Grab your **curated** *cuia*, yerba mate for *chimarrão*, and a kitchen spoon.  If you have not cureated your *cuia* yet, review the procedure described in the [items](#items) section; Otherwise, go the next step.

   [![How-to 001](/assets/posts/2021-02-25-chimarrao-gaucho/howto-001.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-001.jpg)

4. Using a spoon, fill 1/10 of the *cuia* with yerba mate.  This will create a thin layer of yerba mate at the bottom of your *chimarrão* that will help giving it its characteristic taste.
   
   [![How-to 002](/assets/posts/2021-02-25-chimarrao-gaucho/howto-002.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-002.jpg)

5. Fill between 5/10 and 6/10 of the cuia with warm water.
   
   [![How-to 003](/assets/posts/2021-02-25-chimarrao-gaucho/howto-003.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-003.jpg)

   [![How-to 004](/assets/posts/2021-02-25-chimarrao-gaucho/howto-004.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-004.jpg)

6. Grab your *bomba*.  (If you want to add an external filter to it, this is the time.) Then, using your **thumb**, cover its mouthpiece **to prevent the air from escaping the bomba** and thus, prevent the water from getting inside the bomba while you insert and position it into the *cuia*.

   [![How to hold the bomba 001](/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-01.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-01.jpg)

   [![How to hold the bomba 002](/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-02.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-02.jpg)

   [![How to hold the bomba 003](/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-03.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-03.jpg)

7. Now, **while still holding the mouthpiece with your thumb**, insert the *bomba* into the *cuia* until its filter head reaches the opposite side of the bottom of the *cuia*.  Then, lay the *bomba* diagonally on the inner wall of the *cuia*.
   
     [![How-to 005](/assets/posts/2021-02-25-chimarrao-gaucho/howto-005.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-005.jpg)

8. Using a spoon, start adding yerba mate on top of the water until the inside of the *cuia* is completely covered with yerba mate.
   
   [![How-to 006](/assets/posts/2021-02-25-chimarrao-gaucho/howto-006.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-006.jpg)

9. Using the bottom side of the spoon, gently distribute the yerba mate over the entire top of the *cuia*.  Do so until there is a flat surface of yerba mate.
   
   [![How-to 007](/assets/posts/2021-02-25-chimarrao-gaucho/howto-007.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-007.jpg)

10. At this point, you can do all sorts of things to create an entrance to refill your *chimarrão* with water. 

    [![Decorated Chimarrao](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-decorated.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-decorated.jpg)
   
    If you are not feeling adventurous, then do the following:  In the side opposite to where your *bomba* is, use the spoon to push the yerba mate *towards* the side where the *bomba* is.  The goal is to dig the surface until you find the water laying underneath.

    [![How-to 008](/assets/posts/2021-02-25-chimarrao-gaucho/howto-008.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-008.jpg)
    
    [![How-to 009](/assets/posts/2021-02-25-chimarrao-gaucho/howto-009.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-009.jpg)

11. Once you have found the water, fill the entrance with more warm water.  The yerba mate directly in contact with the water will start absorbing it.
   
    [![How-to 006](/assets/posts/2021-02-25-chimarrao-gaucho/howto-010.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-010.jpg)

12. Using the spoon, mold the entrance and gently increase the bottom part of the layer by pushing it a little further towards the direction where your *bomba* is.  This will create a cleaner entrance to refill your *chimarrão*.
   
    [![How-to 011](/assets/posts/2021-02-25-chimarrao-gaucho/howto-011.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-011.jpg)

    [![How-to 012](/assets/posts/2021-02-25-chimarrao-gaucho/howto-012.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-012.jpg)

13. That is it!  Now, enjoy your drink.  The first batch is much stronger than the next ones.  Some people find it too strong and discard the first one (suck and spit until it is empty; then, refill and drink the next one).  
   
    [![How-to 013](/assets/posts/2021-02-25-chimarrao-gaucho/howto-013.jpg){:.PostImage}](/assets/posts/2021-02-25-chimarrao-gaucho/howto-013.jpg)

Once the *chimarrão* is empty, you will start sucking air from the *bomba*, which should make a sound because the filter head is not completely submerged into water anymore.  Whenever you hear it, you should refill the *chimarrão* to prevent it from getting cold--this is particularly important during the winter or when drinking outdoors--and help preserving its taste a little longer.

**Do not** move your *bomba* around. In fact, never hold/touch the *bomba* once you are done making the *chimarrão*.  This will very likely clog your *chimarrão* even further and completely ruin it.

**Do not** blow air through your *bomba*.  If it gets clogged, try using an **external filter**, or a different type of yerba mate, or a *bomba* with a different filter head, or any combination of those.

[top](#){: .btn .btn--light-outline .btn--small}


# Conclusion
This concludes my guide on how to make a *chimarrão Gaúcho*.  If you find it interesting, give it a try yourself!  The ingredients and utensils are fairly easy to find nowadays and the *chimarrão* is a fantastic way of keeping yourself hydrated, especially for those of us who spend a lot of time in front of a computer screen.  It is also a conversation piece for socializing and in my opinion, one of the best drinks for cold days.

[top](#){: .btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="culture" /><category term="food" /><category term="beverage" /><category term="brazil" /></entry><entry><title type="html">Flashing Tasmota firmware onto Sonoff devices over-the-air: “How-to” using just a terminal and web-browser</title><link href="/blog/ota-tasmota-sonoff/" rel="alternate" type="text/html" title="Flashing Tasmota firmware onto Sonoff devices over-the-air: “How-to” using just a terminal and web-browser" /><published>2021-02-01T10:20:00-03:00</published><updated>2021-02-01T10:20:00-03:00</updated><id>/blog/ota-tasmota-sonoff</id><content type="html" xml:base="/blog/ota-tasmota-sonoff/"># Changelog
**Feb 1st, 2021**: Publication of the original article
{: .notice .notice--info }

[top](#){: .btn .btn--light-outline .btn--small}


# Introduction
**[Sonoff](https://sonoff.tech/)** devices are very popular home-automation devices developed by a Chinese company called [ITEAD](https://www.itead.cc). By default, they are controlled by a closed-source application developed by ITEAD--called [EWeLink](https://www.itead.cc/wiki/EWeLink_Introduction)--that can be installed onto iOS and Android cellphones, for example, making use of cloud services.  However, this makes it hard to integrate with existing home-automation servers, such as [Home Assistant](https://www.home-assistant.io/) and [OpenHAB](https://www.openhab.org/), or to simply control the devices locally--that is, without access to the Internet.  

Fortunately, there are alternatives that require flashing a different firmware onto Sonoff devices. The **[Tasmota](https://github.com/arendst/tasmota/) firmware**, for example, is a well-known alternative that provides easy integration with existing home-automation servers and let users control devices via multiple methods, such as webUI, HTTP requests, and MQTT, all of which can be accessed either locally or remotely or both.  On top of that, it is **free and open-source**.  Traditionally, flashing a Tasmota firmware onto a Sonoff device involves finding a **serial connection**, soldering a few cables/pins, and connecting the device to a **serial-to-USB** adapter.  However, more often than not, this takes time, knowledge about electronics, and soldering very small components.

ITEAD is aware that many users do not user their app or even their firmware for Sonoff devices.  Instead of forcing the use of their own software, recently, they have taken the much smarter path of *making it easier* for users to control Sonoff devices independently of their software via the release of a **[DIY mode](https://github.com/itead/Sonoff_Devices_DIY_Tools)** in the latest firmware versions.  In DIY mode, it is possible to use the device's **RESTful API** to monitor and control a variety of attributes, such as toggle a relay ON/OFF, checking the wireless signal quality, and more importantly for any Tasmota enthusiast, **flashing custom firmware over-the-air (OTA)**.

In this tutorial, I will describe how to flash the `tasmota-lite.bin` binary onto **Sonoff Mini** relays and any other **Sonoff device that can operate in DIY mode**.  This will be done OTA (wirelessly) using only `curl` to send `POST` requests and then either the BusyBox HTTP Daemon (`busybox httpd`) or a common webserver application (e.g., Apache, Nginx) to create a simple webserver to serve the Tasmota binary to the local network. There is no need to install and run any other application, executable, or whatever.  Software-wise, we just need a terminal and web-browser.

**DISCLAIMER**.The procedure described in this tutorial is **one-way**.  That is, once flashed the Tasmota firmware, it is **not possible to go back** to the original ITEAD firmware.
{:.notice .notice--warning}

**ATTENTION**. From this part and on, the tutorial describes procedures that involve working with **mains power**.  If you have not taken the necessary time to learn how to work with it safely, **stop right now** and ask for someone knowledgeable to assist and teach you.  **Do not take this warning lightly**.  Mains power can kill you or set your house on fire or both (or worse).  **Be safe**.
{:.notice .notice--danger}

[top](#){: .btn .btn--light-outline .btn--small}


# Requirements
Only follow this tutorial if your Sonoff device satisfies all of the following criteria:

* **Device**
   * [Sonoff Basic R3](https://www.itead.cc/sonoff-basicr3-wifi-diy-smart-switch.html)
   * [Sonoff RF R3](https://www.itead.cc/sonoff-rfr3.html)
   * [Sonoff Mini](https://www.itead.cc/sonoff-mini.html)

* **ITEAD firmware**
   * Version `3.5` or higher
     
     If running version `3.3` or `3.4`, you can try the [protocol v`1.4` documentation](https://github.com/itead/Sonoff_Devices_DIY_Tools/blob/master/SONOFF%20DIY%20MODE%20Protocol%20Doc%20v1.4.md#diy-mode-description) instead. The procedure does not require soldering but you need to open the device to connect the OTA jumper manually.  The interaction with the RESTful API is the same as described here, so come back to follow the procedure for flashing Tasmota OTA with `curl`.
     {:.notice .notice--info}

     Alternatively, if running an outdated version, install the EWeLink app, create a bogus acount, update the firmware to latest, uninstall the app, come back and follow this guide.
     {:.notice .notice--info}

That said, it's possible that this tutorial is partially or completely applicable to other Sonoff devices that can operate in **DIY mode**.  The ones listed here are the ones that [ITEAD listed as supported](https://github.com/itead/Sonoff_Devices_DIY_Tools).

## Additional hardware requirements
You **won't need** to do any soldering and won't even need to open the device.  However, we will need to **power the device using mains (110-220v AC) power**.  For the **Sonoff Mini**, for example, you need to wire it as follows:

[![Sonoff Mini Wiring](/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-mini-wiring.jpg){:.PostImage}](/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-mini-wiring.jpg)

Please note that color conventions, outlet format, etc., are not always the same accross countries.  Check (and double check) the ones in your country and property **before wiring the Sonoff device to mains**.  

For other Sonoff devices, check their manual.  At this point, you just need to provide power to the device itself--there is no need to connect it to whatever the relay is going to control, for example, or any switches.

Therefore, the only additional hardware requirements are the following:

* **Stripped mains power cable** with live (**L**) and neutral (**N**) wires;
* A wifi capable **laptop or PC**.

## Additional software requirements
I wrote this tutorial for **GNU/Linux** users.  That is, unless otherwise specified, the instructions assume that you are running a Linux distribution on your PC/laptop that will be used to interact with (and serve files to) the Sonoff device.  If running iOS, you might be able to adapt the procedure more easily than if you were running Windows or other OS.

Therefore, the only additional software requirement is the following:

* **GNU/Linux distro** installed on the host machine, preferrably **apt**-based distros, such as Debian or Ubuntu.

[top](#){: .btn .btn--light-outline .btn--small}


# Installation
This section describes how to flash the Tasmota firmware onto a Sonoff device OTA.  In brief, the procedure consists of (a) putting the Sonoff device in DIY mode, (b) configuring it to access your existing wireless network, (c) using a set of GNU/Linux utilities to interact with the device's RESTful API, (d) creating a simple webserver to serve the Tasmota firmware locally, and finally, (e) flashing the Tasmota firmware OTA.  Each of those steps is explained in more detail next.

## Preparing the Sonoff device
1. **Turn ON** your Sonoff device by connecting it to the mains power;

2. Enable the **DIY mode** by pressing its button for at **least 5 seconds**;

3. Once the DIY mode is enabled, the device will create a wireless access point (WAP) with the following credentials:
   ```
   SSID: ITEAD-X
   Password: 12345678
   ```
   Using your laptop/PC, find the SSID and enter the credentials to **join the ITEAD WAP**;

4. The Sonoff device will assign an IP to your laptop/PC in the `10.10.7.0/24` network, which you can check with `ip a`.  If it does, then **open a web-browser and type the following IP**:
   ```
   10.10.7.1:80
   ```
   If your laptop/PC was assigned to a different IP pool than `10.10.7.0/24`, then simply try the first address of whichever pool it was assigned to (e.g., if `10.10.1.0/24`, then `10.10.1.1`);

5. Follow the inscructions on the screen to **let the Sonoff device join your local network** via an existing WAP. **Save and let it reboot**.  

   In the meantime, tell your laptop/PC to **join the same local network** you configured in the Sonoff device webUI;

6. **Go to your DHCP server** and find out which IP address it assigned to the Sonoff device on the local network.  From now on, I will refer to its local IP address as `IP_SONOFF`.  Change it too its actual IP addr before running any command.

## Interacting with the RESTful API
1. Now, we will start using `curl` to send `POST` requests and pipe the output to `jq` to parse the `json` output.  Later on, we will use `wget` to download the Tasmota binary from its latest release.  To make sure all utlities are installed on your distro and you are running their latest version, **open a terminal** and run the following command:
   ```
   sudo apt update &amp;&amp; sudo apt install curl jq wget -y
   ```

   If not using an `apt` based distro, simply adapt the code to use your package manager instead.
   {:.notice .notice--info}

2. Let's check that the Sonoff device's API is working and **get information** about it, as follows:
   ```
   curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{&quot;data&quot;: {}}&quot; IP_SONOFF:8081/zeroconf/info | jq '.'
   ```
   which should output something like this:
   ```json
   {
    &quot;seq&quot;: 1,
    &quot;error&quot;: 0,
    &quot;data&quot;: {
        &quot;switch&quot;: &quot;off&quot;,
        &quot;startup&quot;: &quot;off&quot;,
        &quot;pulse&quot;: &quot;off&quot;,
        &quot;pulseWidth&quot;: 2000,
        &quot;ssid&quot;: &quot;SSID_WAP&quot;,
        &quot;otaUnlock&quot;: false,
        &quot;fwVersion&quot;: &quot;3.5.0&quot;,
        &quot;deviceid&quot;: &quot;ID_DEVICE&quot;,
        &quot;bssid&quot;: &quot;BSSID_WAP&quot;,
        &quot;signalStrength&quot;: -48
        }
   }
   ```

3. Of note, check that `otaUnlock` is `false`, which means that currently, it is not possible to flash a custom firmware OTA.  To enable it, we need to **set `otaUnlock` to `true`**, as follows:
   ```
   curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{&quot;data&quot;: {}}&quot; IP_SONOFF:8081/zeroconf/ota_unlock | jq '.'
   ```
   and we can now verify that OTA is unlocked by getting the device's info once again, as follows:
   ```
   curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{&quot;data&quot;: {}}&quot; IP_SONOFF:8081/zeroconf/info | jq '.'
   ```
   which should indicate that `otaUnlock` is now `true`:
      ```json
   {
    &quot;seq&quot;: 3,
    &quot;error&quot;: 0,
    &quot;data&quot;: {
        &quot;switch&quot;: &quot;off&quot;,
        &quot;startup&quot;: &quot;off&quot;,
        &quot;pulse&quot;: &quot;off&quot;,
        &quot;pulseWidth&quot;: 2000,
        &quot;ssid&quot;: &quot;SSID_WAP&quot;,
        &quot;otaUnlock&quot;: true,
        &quot;fwVersion&quot;: &quot;3.5.0&quot;,
        &quot;deviceid&quot;: &quot;ID_DEVICE&quot;,
        &quot;bssid&quot;: &quot;BSSID_WAP&quot;,
        &quot;signalStrength&quot;: -48
        }
   }
   ```
   If you are not seeing this, review your steps until now.  You can still reset the device powering it OFF and back ON, and the device should come back in DIY mode once again (test with the first `curl` command, for example).

4. **Download the latest `tasmota-lite.bin` binary** from the Tasmota Github repository to your user's `Downloads/tasmota` directory, as follows:
   ```
   mkdir /home/${USER}/Downloads/tasmota
   wget -P /home/${USER}/Downloads/tasmota $(curl -s https://api.github.com/repos/arendst/Tasmota/releases/latest | grep '\&quot;browser_download_url.*tasmota-lite.bin\&quot;' | cut -d '&quot;' -f 4)
   ```
   This should write a `tasmota-lite.bin` file onto your user's `Downloads/tasmota/` directory. If it does not, please [let me know about it](/contact) and in the meantime, try downloading the file manually from the [Tasmota Github repo](https://github.com/arendst/Tasmota/releases).

5. Check the `tasmota-lite.bin` SHA256 signature and save it to file `tasmota-lite-sha256.txt`, as follows:
    ```
    sha256sum &quot;/home/${USER}/Downloads/tasmota/tasmota-lite.bin&quot; &gt; &quot;/home/${USER}/Downloads/tasmota/tasmota-lite-sha256.txt&quot;
    ```
    **Take note of the signature** and paste it whenever I refer to `BIN_SHA256`.  You can find the signature with the following command (or just open the text file and copy the first string):
    ```
    cat &quot;/home/${USER}/Downloads/tasmota/tasmota-lite-sha256sum.txt&quot; | cut -d ' ' -f 1
    ```
    This signature is used to check the firmware integrity after the Sonoff device is done downloading it from a webserver. This is done to prevent the device from flashing a corrupted firmware, for example, because a corrupted file will likely yield a different SHA256 signature.

## Webserver configuration
The webserver has a few peculiar requirements (e.g., needs to accept the `Ranges` header, run in `http` instead of `https`) that does not allow us to point to Tasmota's OTA website, Github releases, or any other official source of the Tasmota firmware binary. Fortunately, we can run a webserver on the local network that satisfies all requirements by the ITEAD firmware and in my experience, the easiest way to do that is to either use the **BusyBox HTTP Daemon** or run an **Apache** webserver--or lighttp or Nginx, for instance, but **do not** try Python's `http.server` or PHP because they do not accept partial content.  

BusyBox and Apache are the easiest applications to get up and running because they often come pre-installed in several Linux distros, such as Debian, which means that all you need to do is run a simple command or enable a systemd service that controls the webserver application.  Here, I will focus on the former (`busybox`) rather than the latter (`apache2`) because in my opinion, BusyBox makes this step rather trivial.

If you have never heard of [BusyBox](https://www.busybox.net/) before, it is a sort of Swiss Army knife for Linux, Android, and many other POSIX environments.  It encapsulates multiple Unix utilities into a single and small executable, and for this reason, it is often used in resource limited applications (e.g., routers/modems, other embedded systems, cellphones).  Here, we will take advantage of one of its utilities, namely the **[HTTP Daemon](https://openwrt.org/docs/guide-user/services/webserver/http.httpd)**, to create a minimal webserver to serve the `tasmota-lite.bin` firmware to the Sonoff device.

1. First, make sure you have `busybox` **installed**, as follows:
    ```
    sudo apt update &amp;&amp; sudo apt install busybox -y
    ```

    If not using an `apt` based distro, simply adapt the code to use your package manager instead.
    {:.notice .notice--info}


2. Then, **create a webserver** with your user's `Downloads/tasmota` directory as root and using port `2020`:
   ```
   busybox httpd -p 2020 -h &quot;/home/${USER}/Downloads/tasmota/&quot;
   ```

   If you are running a **firewall** on your laptop/PC, make sure to allow incoming TCP/UDP to port `2020` as well.  Otherwise, other devices on your local network won't be able to access the webserver you just created.
   {:.notice .notice--warning}

3. Find the local **IP address of your laptop/PC** with `ip a` (e.g., `192.168.1.100`).  The address should be reachable by the Sonoff device (e.g., it is on the same subnet).  From this point forward, I will refer to the host IP address by `IP_HOST`.

4. *Optional.* Using another wifi capable device, test that the `tasmota-lite-bin` file is **available to the local network** by typing the following on a web-browser:
   ```
   http://IP_HOST:2020/tasmota-lite.bin
   ```

   If correctly configured, the device should be able to download the binary.  Otherwise, review your steps.

If you would like to use one of the most common webservers, such as Apache, Lighttpd, and Nginx, install any one of them using your system's package manager and then *copy the files in your user's* `Downloads/tasmota` *dir to the webserver's root*, which by default is usually on `/var/www/html`.
{:.notice .notice--info}

## Flashing the Tasmota firmware
1. Flash the `tasmota-lite.bin` binary onto the Sonoff device via a `curl` `POST`: (Change `IP_HOST`, `BIN_SHA256`, and `IP_SONOFF` **before running the command**.  Double check everything to make sure it is correct as well.)
   ```
   curl -v -H &quot;Content-Type: application/json&quot; -d '{&quot;data&quot;: {&quot;downloadUrl&quot;: &quot;http://IP_HOST:2020/tasmota-lite.bin&quot;, &quot;sha256sum&quot;: &quot;BIN_SHA256&quot;}}' IP_SONOFF:8081/zeroconf/ota_flash | jq '.'
   ```
   You should get an HTTP response fairly quickly.  The following codes indicate that there was an **error** and you should review your steps until now:

   * **403**: The operation failed and the OTA function was not unlocked.
   * **408**: The operation failed and the pre-download firmware timed out.
   * **413**: The operation failed and the request body size is too large.  Make sure the tasmota firmware is the right size for your device.  You should try the `tasmota-lite.bin` before anything else.
   * **424**: The operation failed and the firmware could not be downloaded. Check that your webserver and firmware file are both reachable by other devices on the same local network; check for typos in the URL.
   * **471**: The operation failed and the firmware integrity check failed.

2. **Wait 2 minutes** or so.

3. Once the device is done flashing the new firmware, **open a web-browser** and try reaching the Tasmota webUI at the following URL:
   ```
   IP_SONOFF:80
   ```
   If corretcly installed, you will be greeted by the following Tasmota webUI:

   [![Sonoff webUI](/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-webui.jpg){:.PostImage}](/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-webui.jpg)

   and then, see the next section for the basic settings; Otherwise, review your steps and try reflashing the firmware.

[top](#){: .btn .btn--light-outline .btn--small}


# Basic Tasmota configuration
Before wiring your device to anything else, you should first **configure** and **test** it.  Configuration-wise, there is a lot of possibilities with a Tasmota firmware.  If you've never used Tasmota before, check Robbert's ([The Hook Up](https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ)) introduction video:

{% include video id=&quot;08_GBROKQH0&quot; provider=&quot;youtube&quot; %}
{:. text-center}

At the very least, you should **update the firmware Template** to use the one appropriate for your device.  Templates are device-specific definitions of how their GPIO pins are assigned.  

1. **Copy the template** for your Sonoff device:

* [Sonoff Basic R3](https://www.itead.cc/sonoff-basicr3-wifi-diy-smart-switch.html):
   ```json
   {&quot;NAME&quot;:&quot;Sonoff Basic&quot;,&quot;GPIO&quot;:[17,255,255,255,255,0,0,0,21,56,255,0,0],&quot;FLAG&quot;:0,&quot;BASE&quot;:1}
   ```

* [Sonoff RF R3](https://www.itead.cc/sonoff-rfr3.html)
   ```json
   {&quot;NAME&quot;:&quot;Sonoff RF&quot;,&quot;GPIO&quot;:[17,255,255,255,255,0,0,0,21,56,255,0,0],&quot;FLAG&quot;:0,&quot;BASE&quot;:2}
   ```

* [Sonoff Mini](https://www.itead.cc/sonoff-mini.html)
  ```json
  {&quot;NAME&quot;:&quot;Sonoff Mini&quot;,&quot;GPIO&quot;:[17,0,0,0,9,0,0,0,21,56,0,0,255],&quot;FLAG&quot;:0,&quot;BASE&quot;:1}
  ```

2. **Open a web-browser** and navigate to the Tasmota webUI.

3. On the webUI, go to **Configuration** &gt; **Configure other** and then **paste the tempalte** into the *Template field*, check the *Activate* box and hit **Save**.  The device will then reboot.

4. Once the device is back up, check that its name is now the same as in the `NAME` property value.  For the Sonoff mini template, for example, it should be `Sonoff Mini`.  You can further configure your template at **Configuration** &gt; **Configure Template** to assign new components, if at all possible.  (The Mini does have an exposed GPIO available that was previously used by the ITEAD firmware for flashing mode, which is not going to be used anymore.)

## Fixing the timezone
If you installed a pre-compilled firmware, there's a chance your device is using the incorrect timezone.  To check the current timezone, go to the webUI main page and then **Console**. Now, type the following:
```
timezone
```
and if that is incorrect, to change it, enter the same `timezone` command with a value equal to your region's [standardized time zone](https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png) timezone.  For America/Sao_Paulo, for example, that would be `-3`, which can be set in your Tasmota device as follows
```
timezone -3
```

[top](#){: .btn .btn--light-outline .btn--small}


# Final remarks
Tasmota is a **featureful firmware** and it is worth taking a look at the **[official documentation](https://tasmota.github.io/docs/)** to learn about the possibilities.  If you run into issues, go to their [Github repository](https://github.com/arendst/tasmota/), search their open and closed issues, and if you do not find an answer to your problem, open a new one.  

Come back to this website every once in a while to check for changes in the [changelog](#changelog).  I try to keep all my guides up-to-date as much as possible because I actually use them myself.

[top](#){: .btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="iot" /><category term="tasmota" /><category term="sonoff" /><category term="wireless" /><category term="automation" /><category term="firmware" /></entry><entry><title type="html">TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink</title><link href="/blog/Tvhlink/" rel="alternate" type="text/html" title="TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink" /><published>2021-01-21T12:20:00-03:00</published><updated>2021-01-21T12:20:00-03:00</updated><id>/blog/Tvhlink</id><content type="html" xml:base="/blog/Tvhlink/"># Changelog
**July 16th, 2021**, Update #2: Added information about Twitch streams to the [Conclusion](#conclusion) section.
{:.notice .notice--info}
**July 16th, 2021**, Update #1: Updated all Youtube URLs to include the suffix `/live`, owing to [changes to the Youtube plugin for Streamlink](https://github.com/streamlink/streamlink/pull/3797).
{:.notice .notice--info}
**Jan 21st, 2021**: Publication of the original article
{:.notice .notice--info}

[top](#){:.btn .btn--light-outline .btn--small}


# Introduction
In my previous post titled [Youtube live as IPTV channels for TVHeadend](/blog/Youtube-as-IPTV-with-TVH/), I mentioned a method for capturing a Youtube livestream and feeding it into a **[TVHeadend](https://github.com/tvheadend/tvheadend)** (TVH) server via a Python utility called **[Streamlink](https://github.com/streamlink/streamlink)**.  In this tutorial, I will present an easier and more reliable method of doing that for Youtube as well as [*any* other supported sources](https://streamlink.github.io/plugin_matrix.html).  I called this integration **TVHlink**.  

The simplified TVHlink integration is largely due to the release of a new version of the Streamlink utility (**[Streamlink v2.0.0](https://github.com/streamlink/streamlink/releases/tag/2.0.0)**) that includes many bug fixes and more flexible plugins for Youtube, Twitch, and other livestream sources.  For Youtube, for example, it's now possible to simply point to a channel URL and the parser will automatically try to grab its livestream, instead of using the old method of pointing to the exact livestream URL, which often changes from time to time.  This is basically what I was doing with my [youtube4tvh](https://github.com/cgomesu/youtube4tvh) utility but now that the improved content parser has been implemented into Streamlink, we don't need youtube4tvh anymore because the livestream URL is found upon each TVH client request, rather than previously stored into a `.m3u` playlist.

**DISCLAIMER**. All the software used here is **free and open-source** and **all livestream sources are publicly available** and are provided by the copyright owners themselves via either plataforms such as [Youtube](https://www.youtube.com/), [Twitch](https://www.twitch.tv/), [Dailymotion](https://www.dailymotion.com/), etc., or their official channels (e.g., [CBS News](https://www.cbsnews.com/),  [DW](https://www.dw.com/), [Reuters](https://www.reuters.com/)) for anyone to use. If you enjoy the content, **please consider supporting the developers, streamers, and providers** who make this possible.
{:.notice .notice--warning}

## Client demo
Here is a preview of how the TVHlink integration looks like for mulitple TVH clients.  This is a *non-exhaustive* list because there are [other TVH compatible clients](https://tvheadend.org/projects/tvheadend/wiki/Clients).  For more information about TVH client configuration, refer to the [TVH clients](#tvh-clients) section in this tutorial.

For reference, all client demos were tested with a modest connection of D:**10Mbps** / U:**150Kbps**, which shows that the TVHlink integration works fairly well even if you have limited connectivity.  However, if your connection is better than that, you can **expect much better performance than demonstrated** in the videos, and fine-tuning the source quality via stream profiles will greatly improve performance as well (the demos used 720p for all streams).  Performance is also very much client-dependent.  The **TVH client addon for Kodi** has been the one that provided me the best experience so far.  It uses the HTSP protocol, which was designed for streaming, and allows the use of predictive tuning, which pre-loads channels before you access them, making the transition between channels next to each other much smoother than via webUI or VLC, as you can see in the demos.

* **[Kodi](#tvh-kodi-pvr-addon)**

{% include video id=&quot;uZw3M3by2tI&quot; provider=&quot;youtube&quot; %}

* **[Web-browser (TVH webUI)](#tvh-clients)**

{% include video id=&quot;EjJCRwiHXwY&quot; provider=&quot;youtube&quot; %}

* **[VLC player](#vlc-and-other-m3u-players)**

{% include video id=&quot;RBvuZXWxDMU&quot; provider=&quot;youtube&quot; %}

## Overview
This tutorial is organized into six main sections.  The first two sections introduce a few reasons two implement the TVH link integration ([motivation](#motivation)) and a general picture of how it works ([client-server flow](#client-server-flow)).  The third section, called [hardware](#hardware), contains a brief discussion about the hardware requirements to run a TVH server and my personal recommendation for new and experienced home users looking for hardware to buy. 

The last three sections contain the actual how-to guide for the [software](#software) components, such as the installation of a TVH server and Streamlink on a GNU/Linux host or Docker container, as well as their basic configuration.  Afterwards, the [TVHlink](#tvhlink) integration was described in detail, showing how to build customized IPTV networks of livestream channels.  The [TVH clients](#tvh-clients) were discussed at the end of the tutorial, with a focus on my two favorite ones--namely, the Kodi PVR addon and VLC/`m3u` players.

If you have already read my previous post called [Youtube live as IPTV channels for TVHeadend](/blog/Youtube-as-IPTV-with-TVH/), you might want to skip straight to the [software](#software) discussion and [TVHlink integration](#tvhlink).  Note that the installation sections are much more detailed than before and the TVHlink integration was greatly simplified because now, we do not need to generate and update `m3u` playlists outside of the TVH server environment.  That said, the current TVHlink tutorial is self-contained and does not require anyone to have read my previous post in order to implement the TVHlink integration.

If you are new to all of this, don't panic!  Grab a towel, save some time, and read through. Then, give it a try on your own first and if you run into an &quot;unsolvable&quot; issue, feel free to [get in touch with me](/contact).  I am glad to help out.

[top](#){:.btn .btn--light-outline .btn--small}


# Motivation
There are multiple reasons to watch livestreams as if they were IPTV channels via a centralized server such as TVH.  To mention a few:

* It is **free and all programs are open-source**;
* There is at least one **24/7 livestream** that you enjoy. For example, the following Youtube channels: 
  * **News**: ABC News, Sky News, DW, France 24
  * **Space**: NASA TV, Space Videos
  * **Webcam - Nature**: Cornell Bird Cams, Monterey Bay Aquarium, Explore Nature
  * **Webcam - Other**: earthTV, I Love You Venice, Railway
  * **Radio**:  BGM channel, Cafe del Mar, Stay See
* More options to access content from multiple networks using a single client;
* Keep your streaming services as centralized as possible.  That is, instead of multiple applications, you can manage everything from a single server;
* Record livestreams with the push of a button on any client or via a schedule;
* Take advantage of fast and reliable content delivery networks (e.g., Akamai, Youtube CDN).

[top](#){:.btn .btn--light-outline .btn--small}


# Client-server flow
The client-server flow underlying the TVHlink integration is illustrated next.

[![Client-server-flow](/assets/posts/2021-01-17-Tvhlink/client-server-flow.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/client-server-flow.jpg)

That is, the TVH server stores one or more IPTV networks as `m3u` playlists that contain one or more (livestreaming) channels as a track.  When a TVH client (any IPTV/`m3u` player) connects to the TVH server, the server executes a Streamlink command, which will in turn try to find the livestream data.  If successful, streamlink will output the data into the TVH server, which will then send back to the client that requested the livestream.  Otherwise, the request will either return an error or timeout.

A TVH server is not capable of multicasting any livestream.  This requires a third software component to the client-server flow, such as [VLC](https://www.videolan.org/vlc/).  This topic is beyond the scope of the current tutorial but if interested, check the following guide: [VLC Multicasting for IPTV into TVHeadend](https://tvheadend.org/projects/tvheadend/wiki/VLC_Multicasting#VLC-Multicasting-for-IPTV-into-TVHeadend).

[top](#){:.btn .btn--light-outline .btn--small}


# Hardware
The hardware requirement to run a TVH server depends largely on its usage.  It runs on a huge variety of devices, from a tiny ARM-based single-board computer (SBC) to a powerful AMD/Intel x86-64 machine.  (Users have even managed to run TVH on a [travel router](https://tvheadend.org/boards/4/topics/16579) with 8MB of flash storage, 64MB of RAM, and a 600 MHz MIPS CPU.)  However, if you want to use TV tuners in addition to the TVHlink integration, I strongly suggest you to use a x86-64 machine with at least one PCIe interface instead of a SBC.  This will give you more options to choose from than relying exclusively on USB tuners.

Most of the resource requirements to run TVH come from transcoding and networking.  For example, while a [Raspbery Pi 3B](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/) (RPi) will be more than enough to run a TVH server and use the TVHlink integration with default settings, CPU-wise, the RPi will strugle if you enable transcoding via different streaming profiles and feed it to multiple clients.  Fortunately, you can avoid transcoding altogether by configuring Streamlink to grab and feed lower resolution streams **directly from the source**, or even better, create **\_HD** and **\_SD** channels for the same livestream source and let the client choose what works best for them (e.g., in the pipe command to run `streamlink`, use the option `--default-stream 1080p,720p,best` for HD channels, and the option `--default-stream 480p,360p,worst` for SD).

Networking-wise, a 100Mbit ethernet port can get easily saturated if serving high-resolution streams to more than one client at once.  Wireless connections are okay for clients but your TVH server should not rely on them because too many things can interfere with wireless communication.  An alternative is to use the wireless interface for management (i.e., to access the webUI) and reserve one or more ethernet ports for streaming.  My suggestion is that at the very least, reserve a **1Gbit ethernet port** for TVH.

The RAM requirement is pretty low if not transcoding or recording to RAM.  In general, plan on dedicating **at least 1GB of RAM** to the TVH server.  Similarly, the TVH server **uses less than 100MB of storage space**.  However, TVH let's you record videos from any of your sources and depending on the recording profile, this can use a lot of space.

The hardware requirements for Streamlink are negligible.

## Device recomendations
If you are new to all of this and are looking for cheap and efficient hardware to get started, take a look at the [Raspberry Pi 4B](https://www.raspberrypi.org/products/raspberry-pi-4-model-b/) and the [Odroid C2](https://www.hardkernel.com/shop/odroid-c2/) or its latest iteration, the [Odroid C4](https://www.hardkernel.com/shop/odroid-c4/), for example.  They are solid, low-power devices that you can buy for less than US$ 50 and that meet the requirements to run a TVH server and more.  They can even be used as an **all-in-one** box--that is, TVH server and client at the same time.  All such boards are well-known and sold world-wide via AliExpress, Amazon, and the like.

[![RPi 4B](/assets/posts/2021-01-17-Tvhlink/rpi4b-board.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/rpi4b-board.jpg)

[![Odroid C2](/assets/posts/2021-01-17-Tvhlink/odroidc2-board.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/odroidc2-board.jpg)

[![Odroid C4](/assets/posts/2021-01-17-Tvhlink/odroidc4-board.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/odroidc4-board.jpg)

However, if you are an experienced user, consider using **virtualization** with your existing hardware.  This will save you money and provide an easy to manage plataform for TVH and other services.

[top](#){:.btn .btn--light-outline .btn--small}


# Software
As the name suggests, there are two main software components to the TVHlink integration, namely [TVH](https://github.com/tvheadend/tvheadend) and [Streamlink](https://github.com/streamlink/streamlink). The minor components are all their dependencies (e.g., `Python3`, `ffmpeg`) but their installation packages will take care of them in most cases.  As mentioned before, both projects are free and open-source, so anyone can download, install, use, and help developing and maintaining the projects.  (You don't need to be a programmer to help out.  Check if they need assistance with translations, for example, and check how to report bugs via the Github repositories whenever you find one.)  **Please consider supporting both projects** if you find them useful:

* **TVH Donations**: [https://tvheadend.org/projects/tvheadend/wiki/donate](https://tvheadend.org/projects/tvheadend/wiki/donate)

* **Streamlink Donations**: [https://streamlink.github.io/donate.html](https://streamlink.github.io/donate.html)

In this section of the tutorial, I will go over the installation process of the related software, their basic usage, concepts, and configuration.  Unless otherwise specified, I will assume the host is a **GNU/Linux OS** and more specifically, an `apt` based distribution, such as **Debian** or **Ubuntu**.  If this is not the case, simply adapt the commands to use your OS pkg manager instead.  In any case, a reference to the official documentation is always provided, which includes instructions for other distros as well.  However, make sure that by the end of the installation, you are running **the latest version** of both programs.  Otherwise, you will run into issues with the TVHlink integration.

## TVHeadned
&gt; Tvheadend is a TV streaming server for Linux supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, IPTV,SAT&gt;IP and other formats through the unix pipe as input sources.

The goal of this section is to cover the **installation** and **basic configuration** of a TVH server in order to use the TVHlink integration.  Therefore, tuners, drivers, and electronic program guide (EPG) data usage won't be covered here, even though they are all supported by a TVH server.  Fortunately, the configuration of such aspects and the TVHlink integration are **not** mutually exclusive--that is, you can configure your tuners and EPG data however you like after implementing the TVHlink integration. Similarly, if you use IPTV services, you can also run them in parallel to the TVHlink integration.

### Concepts
In addition to the [client-server flow](#client-server-flow) illustrated before, there are four key concepts related to how TVH organizes its content--namely, the notions of **networks**, **muxes**, **services**, and **channels**.  In brief, a network is composed of one or more muxes, which define services that are mapped onto channels.  

In the TVHlink and IPTV context, a *network* defines a meaningful `m3u` playlist (e.g., a livestreaming platform, like Youtube or Twitch) or the name of the IPTV service provider.  The `m3u` playlist contain *tracks*, which are translated into *muxes* in TVH lingo.  A mux carries and defines properties of each track, such as its name, icon, EPG source, provider, and so on.  Once a mux is verified to contain valid streaming data, it creates a corresponding *service*, and services are then mapped onto specific *channels* that will be accessible to a TVH client.  

The mapping of services onto channels is usually manual.  However, in this guide, we use *bouquets* to automatically map services to channels and generate their tags.  In the TVHlink/IPTV context, bouquets are just meaningful channel groupings with customized settings.

### Installation
Here is a list of various installation procedures.  Read the notes before following the official installation procedure.  Whatever method you choose, *after the installation*, check that your TVH server is either version `4.3` or higher.  Otherwise, review your installation or choose a different method because you are using an outdated version and compatibility is uncertain.

#### Host installation
* [Install on host Linux machine via APT](https://tvheadend.org/projects/tvheadend/wiki/AptRepositories): Suitable for Debian and Debian-based distros (e.g., Raspberry Pi OS, Ubuntu).  This is the recommended procedure for compatible devices because it allows you to keep your TVH updated via APT along with the other installed packages on your OS.

  In the **apt source** for tvheadend (`/etc/apt/sources.list.d/tvheadend.list`), use the **[Unstable](https://apt.tvheadend.org/unstable/)** repository instead of the Stable one. The latter is too outdated.
  {:.notice .notice--warning}

  **Before** running `sudo apt install tvheadend`, check the repo's package version with `sudo apt policy tvheadend`.  The package version must be `4.3*` or higher.  If it's not, double check your installation procedure or use a different installation method (see below).
  {:.notice .notice--warning}

  Specific package versions can be installed via `sudo apt install tvheadend=&lt;version&gt;`, in which `&lt;version&gt;` is an exact match to a repo's valid version (version table avaliable with `sudo apt policy tvheadend`). This is useful if the candidate version (i.e., what would be installed by defeault) is not the latest one.
  {:.notice .notice--info}

* [Install on host Linux machine via RPM](https://tvheadend.org/projects/tvheadend/wiki/RpmRepository): Suitable for Fedora and CentOS.
  
  In the `config-manager` command, add either the **[Fedora Unstable](https://dl.bintray.com/tvheadend/fedora/:bintray-tvheadend-fedora-unstable.repo)** (if FedoraOS) or the **[CentOS Unstable](https://dl.bintray.com/tvheadend/centos/bintray-tvheadend-centos-unstable.repo)** (if CentOS) repository instead of the other ones.  The other repos contain outdated releases.
  {:.notice .notice--warning}

* [Install on host Linux machine from the Github source](https://tvheadend.org/projects/tvheadend/wiki/Building): *Alternative* to using the APT/RPM repositories.  It takes some time to build from the source because dependencies and conflits have to be fixed manually and it's much harder to keep TVH updated this way.

  Always build from the `master` branch of the Github repo.
  {:.notice .notice--warning}

#### Docker installation
* [Install as a Docker Container with the LinuxServer image](https://docs.linuxserver.io/images/docker-tvheadend): *Alternative* to anyone who is not running a Linux host, for example, or already have other Dockerized services up and running.  The image is provided by an unofficial but well-known source--namely, [LinuxServer](https://www.linuxserver.io/).  The TVHlink integration is **non-trivial** because the container does not include Streamlink by default.  However, I've covered this in the section about [running Streamlink in a TVH Docker container](#docker-installation-1).  In short, it uses [custom script execution](https://blog.linuxserver.io/2019/09/14/customizing-our-containers/#custom-scripts) to install and update Streamlink in the container.

  Use the `latest` image tag for your architecture. This is the default, so you should not need to change anything to pull the right image.
  {:.notice .notice--warning}

### Basic configuration
1. Open a web-browser and navigate to the **TVH webUI**. If the web-browser is running on the same host as TVH, then the webUI will be at **[http://127.0.0.1:9981](http://127.0.0.1:9981)**; Otherwise, it will be at `http://HOST_IP:9981`, in which `HOST_IP` is the IP address of the machine hosting the TVH server.
  
    It goes without saying that the machine hosting the TVH server should have a **fixed IP address** at the local network because all the clients will be pointing to it.
    {:.notice .notice--info}

2. If you provided admin credentials during the installation, you will be prompted to enter the credentials now.

3. TVH will start **the wizard** the first time you access the webUI but go ahead and skip it altogether:
   ```
   # Press Cancel
   ```

4. Notice that there are several tabs in the webUI but many options will not show up if the **View level** is set to `Basic`. Change it to `Expert`, as follows: 
   ```
   # Configuration &gt; General &gt; Base &gt; Web Interface Settings &gt; Default view level
   ```
   ```
   # Press Save
   ```

   [![TVH config 01](/assets/posts/2021-01-17-Tvhlink/tvh-config01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-config01.jpg)

5. *Optional.* In the same tab as before, change the **Authentication type** to `Both plain and digest` to make the TVH server compatible with more clients than before.  (VLC, for example, is unable to authenticate if type is set to `Digest`.)
   ```
   # Configuration &gt; General &gt; Base &gt; HTTP Server Settings &gt; Authentication type
   ```
   ```
   # Press Save
   ```

   [![TVH config 02](/assets/posts/2021-01-17-Tvhlink/tvh-config02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-config02.jpg)

   **Note on exposing TVH to WAN**. This configuration allows clients to send all their credentials *in plain text*.  This is *not a problem* if your TVH server is only used locally.  However, *this is a problem* if your TVH server is reachable outside your private network because the credentials will be accessible to anyone able to intercept the packets between client and server--you should always assume that this is the case when sending packets over the WAN.  If you want to use your TVH server remotely, my suggestion is to either use (a) vpn or (b) wireguard or (c) ssh tunnel (key-based auth) or (d) a reverse proxy with SSL termination (TLS) and independent and hardened credentials.
   {:.notice .notice--danger}

6. Clients can access TVH using the same credentials as you (admin access). However, as a general rule of thumb, that is not a good practice. Also, if you have multiple clients, it is nice to know what each one is trying to access on your TVH server.  To create a single **user** called `client` with password `client` and permission to only access streaming, do the following:
   ```
   # Configuration &gt; Users &gt; Access Entries &gt; Add
   ```
   Then in the **Add Access Entry** window:
   ```
   # Enabled: Checked
   # Username: client
   # Streaming: Basic,Advanced,HTSP
   # Comment: default streaming client user
   ```
   ```
   # Press Create
   ```

   [![TVH config 03](/assets/posts/2021-01-17-Tvhlink/tvh-config03.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-config03.jpg)

   Now create a **password** for the `client` user:
   ```
   # Configuration &gt; Users &gt; Passwords &gt; Add
   ```
   Then in the **Add Password** window:
   ```
   # Enabled: Checked
   # Username: client
   # Password: client
   # Comment: default streaming client password
   ```
   ```
   # Press Create
   ```

   [![TVH config 04](/assets/posts/2021-01-17-Tvhlink/tvh-config04.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-config04.jpg)

   If you want to **add more users**, just repeat this step as many times as necessary.

7. *Optional.* By default, TVH will attempt to grab EPG data from any channel added to it at start-up.  In the TVHlink context, however, EPG data either don't make sense or there is no simple way of grabbing them. 
   
   Because some of the 24/7 news channels actually follow the same EPG as their Cable/Satellite broadcast, it is possible to use EPG tools like [WebGrab+Plus](http://webgrabplus.com/) to configure TVH to use them.  However, this is way beyond the scope of this tutorial.
   {:.notice .notice--info}

   Therefore, you can safely **disable automatic EPG grabbing at start-up**, as follows:
   ```
   # Configuration &gt; Channel / EPG &gt; EPG Grabber
   # Uncheck all 'grab at start-up' options
   ```
   ```
   # Press Save
   ```

   [![TVH config 05](/assets/posts/2021-01-17-Tvhlink/tvh-config05.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-config05.jpg)

   In addition, because you won't be using any tuner for the TVHlink integration, you can also **disable all EPG Grabber Modules**, as follows:
   ```
   # Configuration &gt; Channel / EPG &gt; EPG Grabber Modules
   # For each enabled module (green icon), make sure enabled is unchecked (red icon)
   ```
   ```
   # Press Save
   ```

   [![TVH config 06](/assets/posts/2021-01-17-Tvhlink/tvh-config06.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-config06.jpg)

8. That is it. There are [many other things you can do configuration-wise](https://tvheadend.org/projects/tvheadend/wiki/Documentation) but the ones covered are sufficient for the TVHlink integration.  Other things you might want to take a look at are the **[recording](https://docs.tvheadend.org/webui/config_dvr/)** settings and **[stream profiles](https://docs.tvheadend.org/webui/config_streamprofile/)**. 

## Streamlink
&gt; Streamlink is a command-line utility which pipes video streams from various services into a video player, such as VLC. The main purpose of Streamlink is to avoid resource-heavy and unoptimized websites, while still allowing the user to enjoy various streamed content.

This is an awesome Python utility and if you have never used it before, make sure to check their **[documentation](https://streamlink.github.io/)**.  In the TVHlink context, it is used to pipe data from a livestream channel to a TVH server, as [illustrated in the client-server flow](#client-server-flow).  

Streamlink has plugins for most of the major streaming platforms (Youtube, Twitch, Dailymotion, etc.) as well as a few specific websites (CBS News, NBC News, Reuters, etc.).  For an exhaustive list of the available plugins, check their [plugin matrix](https://streamlink.github.io/plugin_matrix.html#plugins).

### Installation
The official docs contain detailed instructions about [how to install Streamlink on a variety of platforms](https://streamlink.github.io/install.html).  However, a few of the package repositories contain **outdated versions** of the Streamlink utility.  If you choose to install via `apt`, `pacman`, `dnf`, and other common Linux distro package manager, make sure to install Streamlink version `2.0` or higher.  In my experience, keeping Streamlink up-to-date is more important than the TVH server because the former is more prone to changes than the latter, owning to required fixes/updates to content parsers.

Once installed, you can find the version by running 
```
streamlink --version
```
which should be at least `2.0` or higher, as mentioned before.  You can find the latest version number and a summary of the changes on their **[Releases page](https://github.com/streamlink/streamlink/releases)**.

#### Host installation
* [Install on host Linux or BSD machine via the system's package manager](https://streamlink.github.io/install.html#linux-and-bsd): At the time this tutorial was originally published, this was compatible with Arch, Debian, Fedora, Gentoo, NetBSD, NixOS, OpenBSD, Solus, Ubuntu, and Void.  This is the recommended procedure for compatible devices because it allows you to keep your Streamlink updated along with other packages installed on your OS.

* [Install via Python's package manager, `pip`](https://streamlink.github.io/install.html#pypi-package-and-source-code): *Alternative* to other installation methods when Streamlink is not available in the system's package manager or the version is outdated. This offers the highest cross-plataform compatibility--that is, as long as you can install Python, you can install Streamlink this way.

  Starting Streamlink version `2.*`, the utility is only compatible with **Python 3** (and I strongly recommend to use Python `3.7` or higher).  Therefore, first, install `python3` and its package manager, `python3-pip`.  Then, install Streamlink via `pip3` to make sure it is installed as a Python 3 package instead of Python 2.
  {:.notice .notice--warning}

  On Linux distributions, Python's package manager will install user-related packages on the user's `$HOME/.local/bin` directory, which by default, is not part of the user's `$PATH`.  This means that if you try to run `streamlink` after a `pip3 install --user streamlink` install, for example, your shell might not find the executable.  To fix this, you need to add `$HOME/.local/bin` to your user's `$PATH` as follows:
  ```
  echo &quot;export &quot;PATH=$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.profile&quot; &gt; /dev/null
  ```
  Then logoff and back on to apply the changes.

#### Docker installation
* [Install on the LinuxServer TVH docker container](https://github.com/cgomesu/tvhlink/blob/master/tools/docker/streamlink_for_tvh_container.sh): **Required for containerized TVH server installations** because by deafult, the LinuxServer TVH container does not include Streamlink.  I created a repo called **[tvhlink](https://github.com/cgomesu/tvhlink)** where I wrote a script to handle the automatic installation and update of the Streamlink utility via LinuxServer's [custom script execution feature](https://blog.linuxserver.io/2019/09/14/customizing-our-containers/#custom-scripts).  To use it, do the following:

  1. **Install git** on the docker *host machine* (*not* the container):
    ```
    sudo apt update &amp;&amp; sudo apt install git
    ```
  
  2. **Clone the tvhlink repo** to `/opt`:
    ```
    cd /opt &amp;&amp; sudo git clone https://github.com/cgomesu/tvhlink.git
    ```
  
  3. Go to your TVH container's `/config` directory (edit `&lt;TVH_CONTAINER&gt;` below before running the command; this is the dir where the TVH's `/config` subdir is) and **create a new dir** called `custom-cont-init.d`. Any scripts in this dir are automatically executed at the container's start-up:
    ```
    cd &lt;TVH_CONTAINER&gt;/config &amp;&amp; sudo mkdir custom-cont-init.d
    ```
  
  4. **Copy** the `streamlink_for_tvh_container.sh` script from the `tvhlink` repo to the new `custom-cont-init.d` dir:
    ```
    sudo cp /opt/tvhlink/tools/docker/streamlink_for_tvh_container.sh custom-cont-init.d/
    ```
  
  5. **Fix the dir and script ownership** to match the `PUID` (e.g., `1010`) and `PGID` (e.g., `100`) of your TVH container (edit the values before running the command below; if uncertain, then type `id &lt;TVH_USER&gt;`, in which `&lt;TVH_USER&gt;` is the user running the TVH container):
    ```
    sudo chown -R 1010:100 custom-cont-init.d/
    ```
  
  6. **Restart your TVH container** and the script should automatically install and update Streamlink at every startup.  Check the logs for any `[TVHlink]` messages.  If you don't see any, just **recreate the container** and wait until it's done installing--it can take a few minutes.

     Because the script is in the `/config` dir, it should persist after a TVH container update and will automatically be triggered at start-up to reinstall the required packages and Streamlink.  If you notice it's broken, check the [tvhlink repo](https://github.com/cgomesu/tvhlink) for an update or open an issue to let me know about it.  The script also updates Streamlink after it has been installed, so it makes sure your container is always runnig the latest version of it.  However, the script only triggers at start-up, so it will only try to update Streamlink then.  Therefore, if there's a [new Streamlink release](https://github.com/streamlink/streamlink/releases/) and you want to update it in the TVH container, simply restart the container and the script should take care of it.  (The script uses Python's package manager, `pip`, so it will only install the latest version available there.)
     {:.notice .notice--warning}
  
  For other TVH docker images, either go to my [tvhlink repo](https://github.com/cgomesu/tvhlink) and open an issue to request support or you will need to install Streamlink manually and then disable automatic container updates.
  {:.notice .notice--info}

### Standalone usage
After installing Streamlink, you should be able to run it by itself with
```
streamlink [OPTIONS] &lt;URL&gt; [STREAM]
```
in which `&lt;URL&gt;` is a livestreaming channel (e.g., *Explore Live Nature Cams* Youtube channel: [https://www.youtube.com/channel/UC-2KSeUU5SMCX6XLRD-AEvw/live](https://www.youtube.com/channel/UC-2KSeUU5SMCX6XLRD-AEvw/live)) or [a parsable website](https://streamlink.github.io/plugin_matrix.html) URL; and `[STREAM]` is a streaming quality profile (e.g., `worst`, `best`, `720p`, `360p`)--if you omit the latter, `streamlink` will show a list of all available profiles for the given `&lt;URL&gt;`.  You can find a complete list of additional options (`[OPTIONS]`) with the `--help` usage argument, as follows:
```
streamlink --help
```
Streamlink is compatible with multiple popular video players, such as [VLC](https://videolan.org/) and [MPV](https://mpv.io/).  For a non-exhaustive compatibility list and their transport modes, check the [official player compatibility table](https://streamlink.github.io/players.html#player-compatibility).

[top](#){:.btn .btn--light-outline .btn--small}


# TVHlink
Now that you have installed both TVH and Streamlink, the TVHlink integration is rather trivial.  In fact, the only difference between its implementation and the implementation of any IPTV is that in the configuration of each *mux* in the TVH server, we will be using a `pipe://` command with our `streamlink` utility, instead of pointing it to an external `MPEG-TS` or similar file.

## Single livestream channel
To add a single livestream channel to your TVH server, first, you need to manually create an IPTV network and then add muxes to it.  We will configure the network to automatically create services for the muxes, instead of scanning them one by one, and then enable a bouquet to automatically map services to channels.
1. Open your TVH webUI and go to the **Networks** tab of your TV inputs settings:
   ```
   # Configuration &gt; DVB Inputs &gt; Networks
   ```
2. Create a **new network** called `Youtube`:
   ```
   # Press Add
   ```
   In the **Add Network** window, select the following:
   ```
   # Type: IPTV Network
   ```
   
   [![TVHlink config 01](/assets/posts/2021-01-17-Tvhlink/tvhlink-config01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config01.jpg)

   Now, in the **Add IPTV Network** window, change the following:
   ```
   # Enabled: Checked
   # Network name: Youtube
   # Create bouquet: Checked
   # Provider name: Youtube
   # Ignore provider's channel numbers: Checked
   # Character set: UTF-8
   # Scan after creation: Unchecked
   # Skip startup scan: Checked
   # Service ID: 1
   ```
   ```
   # Press Create
   ```
   
   [![TVHlink config 02](/assets/posts/2021-01-17-Tvhlink/tvhlink-config02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config02.jpg)

3. Create a **new mux** called `France 24 English`:
   ```
   # Configuration &gt; DVB Inputs &gt; Muxes
   ```
   ```
   # Press Add
   ```
   and in **Add Mux** window, select the following:
   ```
   # Network: Youtube
   ```
   
   [![TVHlink config 03](/assets/posts/2021-01-17-Tvhlink/tvhlink-config03.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config03.jpg)

   Then, change the following settings:
   ```
   # Enabled: Enable
   # EPG scan: Disabled
   # URL: pipe:///usr/bin/env streamlink --stdout --default-stream best --url https://www.youtube.com/user/france24english/live
   # Mux name: Youtube - France 24 English
   # Channel number: 1
   # Service name: France 24 English
   # Icon URL: https://yt3.ggpht.com/ytc/AAUvwnjQokqv8-b-XLH34XJulaY0W27AzlCmyeEY7TayMw=s176-c-k-c0x00ffffff-no-rj
   # Channel tags: News
   # Accept zero value for TSID: Checked
   ```
   ```
   # Press Create
   ```
   
   [![TVHlink config 04](/assets/posts/2021-01-17-Tvhlink/tvhlink-config04.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config04.jpg)

   Notice the `pipe://` command in *URL*. In brief, it tells your TVH server to call `streamlink` with the options:
   * `--stdout`: Output the stream data to `stdout`, which will be read by your TVH server
   * `--default-stream`: Stream quality, which is `best` but could be `720p`, `480p`, or whatever is acceptable by the source (Youtube)
   * `--url`: France 24 English Youtube channel URL. Sometimes, this will be the channelID instead of an alias.

   It is possible to include additional options but these are both necessary and sufficient to get the TVHlink integration working.  Also, I tend to use the *Icon URL* from the official Youtube channels because the address has proved to be quite reliable and the image format is perfect for what we are doing.  Lastly, *Channel tags* are optional but it will help your clients finding what they want more efficiently.

4. Open the **Tvheadend log** window in the webUI (at the bottom) and check that the TVH is correctly requesting and reading data from `streamlink`.  If it is, you should see something like this:

   [![TVH Kodi config 05](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg)

   ```
   2021-01-21 10:31:51.171 bouquet: new bouquet 'Youtube'
   2021-01-21 10:55:26.380 mpegts: Youtube - France 24 English in Youtube - tuning on IPTV #1
   2021-01-21 10:55:26.381 subscription: 0001: &quot;scan&quot; subscribing to mux &quot;Youtube - France 24 English&quot;, weight: 5, adapter: &quot;IPTV #1&quot;, network: &quot;Youtube&quot;, service: &quot;Raw PID Subscription&quot;
   2021-01-21 10:55:26.381 spawn: Executing &quot;/usr/bin/env&quot;
   2021-01-21 10:55:27.575 spawn: [cli][info] Found matching plugin youtube for URL https://www.youtube.com/user/france24english/live
   2021-01-21 10:55:30.524 spawn: [cli][info] Available streams: 144p (worst), 240p, 360p, 480p, 720p, 1080p (best)
   2021-01-21 10:55:30.524 spawn: [cli][info] Opening stream: 1080p (hls)
   2021-01-21 10:55:41.380 mpegts: Youtube - France 24 English in Youtube scan complete
   2021-01-21 10:55:41.380 subscription: 0001: &quot;scan&quot; unsubscribing
   ```
   And in the *Scan result* of the mux, you should now see a `OK` status, which means we can configure the bouquet to automap the service to a channel that any TVH client will be able to watch.

5. Enable the `Youtube` **bouquet**, as follows:
   ```
   # Configuration &gt; Channel / EPG &gt; Bouquets
   ```
   Scroll down until you find `Youtube` and enable it:
   ```
   # Enabled: Checked
   ```
   ```
   # Press Save
   ```
   
   [![TVHlink config 05](/assets/posts/2021-01-17-Tvhlink/tvhlink-config05.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config05.jpg)
   
   And in the **Tvheadend log**, you should see a message confirming that the service was mapped:
   ```
   2021-01-21 11:02:41.575 bouquet: Youtube/Youtube - France 24 English/{PMT:0}: mapped service from Youtube
   ```
   which will then show up in the **Channels** tab:

   [![TVHlink config 06](/assets/posts/2021-01-17-Tvhlink/tvhlink-config06.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config06.jpg)

6. To test your new channel using the webUI itself, do the following:
   ```
   # Electronic Program Guide &gt; Watch TV
   ```
   ```
   # Select channel: 1 France 24 English
   ```
   The webUI playback is not very reliable because lots of things depend on the web-browser you are using and how it handles the video playback.  (In other words, even if you're unable to see the video or hear the sound using the webUI, chances are the stream is working just fine when using a *proper video player*.)  If you really want to test the connection at this point, then skip to the [TVH clients](#tvh-clients) section and use one of the methods described there.

## Automatic network of livestream channels
If you were paying attention to the IPTV network creation step described before, you might have noticed that there is an **IPTV Automatic Network** option in the network *Type*.  In this type of network, we **import** an external `m3u` file to the TVH server and it reads its *tracks* as *muxes*, which means that we don't need to create muxes one by one.  The drawback is that you need to know the `m3u` syntax in order to build one yourself or find someone who has already done that for you and made the file available.  In this section, I will describe both alternatives.

### Building m3u playlists
Anyone can create and edit `m3u` playlists using any simple text editor, such as Pluma, `nano`, `vi`, Vim, and so on.  For example, open a text editor of your choice and copy and paste the following:
```
#EXTM3U
#EXTINF:-1 tvg-name=&quot;France 24 English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnjQokqv8-b-XLH34XJulaY0W27AzlCmyeEY7TayMw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,France 24 English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/france24english/live
#EXTINF:-1 tvg-name=&quot;France 24&quot; tvg-language=&quot;French&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngwSBIFO5UNdycjzkUjIRFEq0n5YWKTOgsfbgKdoQ=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,France 24
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/france24/live
#EXTINF:-1 tvg-name=&quot;DW English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;DE&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngnDcvUkm6jCn6TEENsvO8bdy60g-T4lCgUWOyemCs=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,DW English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/deutschewelleenglish/live
#EXTINF:-1 tvg-name=&quot;DW Deutsch&quot; tvg-language=&quot;German&quot; tvg-country=&quot;DE&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnhXY-iIvV4naxL4WWuS_JQKOqfjqwSgzMswGp4aJUc=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,DW Deutsch
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/deutschewelle/live
#EXTINF:-1 tvg-name=&quot;Euronews English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnja_dPZdy_el5IhBkj9BJUAd29fZzSs4-vaws_uPLw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/Euronews/live
#EXTINF:-1 tvg-name=&quot;Euronews Spanish&quot; tvg-language=&quot;Spanish&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnh8LYxyL6VKfHAGYV0qCJ4hqaWDO5GympC7lRIViw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews Spanish
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/euronewses/live
#EXTINF:-1 tvg-name=&quot;Euronews Portuguese&quot; tvg-language=&quot;Portuguese&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngxE0l-vGHBafT-fP7WfCq_Xo7QfDLATRspf0agKA=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews Portuguese
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/euronewspt/live
```
Then, observe that

1. The first row always contains `#EXTM3U` to identify this file as being an `m3u` playlist;

2. The remaining rows contain two distinct rows, namely (a) one starting with `#EXTINF:` that defines properties of a mux, and (b) another immediately below it that contains the `pipe://` command to request the stream data.

Regarding the `#EXTINF:` row, the `-1` next to it simply indicates that this *track* has infinite length; the meaning of the other variables is quite intuitive. Of note, however, I've ommitted the `tvg-id` variable that is often found in such files because it has no useful meaning outside the context of EPG data.  If you choose to play around with EPG, then you might want to add one that matches the channel's `id` in a given EPG data provider, for example.

As long as you follow the structure in the example, you can add as many livestreaming channels as you want.  When you are done, you can import your `m3u` playlist to the TVH server as follows:

1. **Save your `m3u` playlist** with the name `youtube.m3u` on a dir **accessible to your TVH server**. In Dockerized installations, I suggest to create a subdir on the container's appdata (next to its `/config` dir, for example) and in the container's settings, add a new volume bind pointing to the new dir you created. Make sure to fix permissions, so that the new dir and `m3u` files match the `PUID` and `PGID` of the TVH server;

2. Open your TVH webUI and naviagate to the **Networks** tab:
   ```
   # Configuration &gt; DVB Inputs &gt; Networks
   ```

3. Create a **new network** called `Youtube Auto`:
   ```
   # Press Add
   ```
   In the **Add Network** window, select the following:
   ```
   # Type: IPTV Automatic Network
   ```

   Now, in the **Add IPTV Network** window, change the following:
   ```
   # Enabled: Checked
   # Network name: Youtube Auto
   # Create bouquet: Checked
   # URL: file:///full/path/to/youtube.m3u
   # Channel numbers from: 101
   # Accept zero value for TSID: Checked
   # Provider name: Youtube
   # Ignore provider's channel numbers: Checked
   # Character set: UTF-8
   # Scan after creation: Unchecked
   # Content character set: UTF-8
   # Skip startup scan: Checked
   # Service ID: 1
   ```
   ```
   # Press Create
   ```

  [![TVHlink config 07](/assets/posts/2021-01-17-Tvhlink/tvhlink-config07.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvhlink-config07.jpg)

4. Enable the `Youtube Auto` **bouquet**, as follows:
   ```
   # Configuration &gt; Channel / EPG &gt; Bouquets
   ```
   Scroll down until you find `Youtube Auto` and enable it:
   ```
   # Enabled: Checked
   ```
   ```
   # Press Save
   ```
   which should map all services to channels in the **Channels** tab:

6. To test your new channels using the webUI itself, do the following:
   ```
   # Electronic Program Guide &gt; Watch TV
   ```

7. That is it!  You have learned how to build and import a customized `m3u` playlist of livestreams to your TVH server.  If you think this is a lot of work, check the following section then.

### Curated m3u playlists
I create a Github repository called **[tvhlink](https://github.com/cgomesu/tvhlink)** that contains [tools](https://github.com/cgomesu/tvhlink/tree/master/tools) and [`m3u` playlists](https://github.com/cgomesu/tvhlink/tree/master/m3u) I personally use for my TVHlink integration.  You are all welcome to use my `m3u` playlists and contribute to keep them up-to-date ([fork, make changes, push commits, and submit a PR with a description of what and why](https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/)).

To add one of my curated `m3u` playlists to your TVH server, follow the same steps as in the previous section, with the following exceptions:

* You **do not need to save any playlist locally**, unless you want to edit them before importing to the TVH server.  Instead, you can tell your TVH server to automatically **fetch from the tvhlink repo**, as follows:
  * In the **Add IPTV Automatic Network** copy and paste the following on the *URL* option to fetch my `youtube.m3u` playlist:

     ```
     https://raw.githubusercontent.com/cgomesu/tvhlink/master/m3u/youtube.m3u
     ```
     
     or alternatively, my `direct.m3u` playlist:

     ```
     https://raw.githubusercontent.com/cgomesu/tvhlink/master/m3u/direct.m3u
     ```

That is it! Your TVH server will automatically check the **tvhlink** repo every hour for changes and if detected, it will update all your channels accordingly.

[top](#){:.btn .btn--light-outline .btn--small}


# TVH clients
Now that there is a TVH server up and running with the TVHlink integration enabled, you should configure at least one TVH *client* for testing purpose.  There are [multiple ways to watch the channels on your TVH server](https://tvheadend.org/projects/tvheadend/wiki/Clients), including directly from the **TVH webUI** itself:
```
# Electronic Program Guide &gt; Watch TV
```

[![TVH webUI config 01](/assets/posts/2021-01-17-Tvhlink/tvh-webui-config01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-webui-config01.jpg)

The webUI player uses a very specific streaming profile though, and because it requires access to the webUI, it's not possible to test the `client` user this way (because it doesn't have permission to access the webUI).

There are clients (apps) for **iOS** and **Android**, for example.  They can be clients developed *for* a TVH server--such as Robert's [TVHClient](https://play.google.com/store/apps/details?id=org.tvheadend.tvhclient) for Android or Luis' [TvhClient](https://apps.apple.com/us/app/tvhclient/id638900112) for iOS--or general use *IPTV players*.  The latter works because the TVH server can provide a parsable `m3u` file to such players--see the section about the [VLC player](#vlc-player) for an example of how to obtain such file.

Here, however, I will show how to configure my two preferred clients.  Specifically, the **[Kodi PVR addon](#tvh-kodi-pvr-addon)** and **[VLC and other `m3u` players](#vlc-and-other-m3u-players)**. 

## TVH Kodi PVR addon
The [TVH HTSP client addon](https://kodi.wiki/view/add-on:Tvheadend_HTSP_Client) for the [**Kodi Media Center**](https://kodi.tv/download) is *by far* my favorite client.  It uses the proper protocol for streaming (HTSP) and has **predictive tuning**, which makes the channel transitions very smooth because it loads neighboring channels in advance, threfore reducing the initial livestream request time (but this also greatly incrases bandwidth usage).

You can install Kodi on pretty much any OS.  The [official Kodi website](https://kodi.tv/) provides a variety of installation packages to [download](https://kodi.tv/download) and you will find a *HOW-TO* button for each one of them. Choose one of them and follow the installation instructions.  When you are done, come back to see **how to install the [TVH PVR addon](https://kodi.wiki/view/addon:Tvheadend_HTSP_Client)**.

1. To install the PVR addon, open Kodi and try to install via the **official repo**:
   ```
   # Addons &gt; Install from repo &gt; PVR clients
   ```

   [![TVH Kodi config 01](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config01.jpg)

2. **If you find** the `PVR clients` option, then select it, then select `Tvheadend HTSP Client` and install it.  However, if you **do not find** the `PVR clients` option, this means the PVR clients binary was not packaged with your Kodi version, which happens with a few `apt`-based distributions.  The solution is to manually install the missing addon.  Close Kodi and open a terminal, then with a `sudo` user, type the following:
   ```
   sudo apt update &amp;&amp; sudo apt install kodi-pvr-hts
   ```
   Restart Kodi and the `PVR clients` option should be available and will contain the `Tvheadend HTSP Client` installed.

   [![TVH Kodi config 02](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config02.jpg)

   Another option to install a missing addon is to download a `.zip` of it from a public website and in the Kodi addons tab, choose `install from zip`.  However, do not go around installing addons from random websites.  **Do your research first**.  Unofficial addons can contain all sorts of bad stuff.
   {:.notice .notice--info}

3. Now, to configure the PVR addon, do the following:
   ```
   # Addons &gt; My addons &gt; PVR clients &gt; Tvheadend HTSP Client &gt; Configure
   ```
   and in the **Connection settings** tab, change the following:
   ```
   # IP address: &lt;IP of the machine hosting the TVH server&gt;
   # HTTP port: 9981
   # HTSP port: 9982
   # Username: client
   # Password: client
   ```

   [![TVH Kodi config 03](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config03.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config03.jpg)

   and in the **Streaming settings**, change the following:
   ```
   # Profile to use: htsp
   # Use predictive tuning: Enabled
   # Number of subscriptions: 3
   # Unused subscription delay: 50
   ```
   ```
   # Press OK
   ```

   [![TVH Kodi config 04](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config04.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config04.jpg)

4. Every time you change the client configuration, you will be required to **restart Kodi** to see the changes.  So, restart your Kodi now. Once it comes back, all the channels will show up in
   ```
   # TV &gt; Channels
   ```

5. Go ahead and test a few of them.  If you want to debug the connection, open a web-browser and navigate to your TVH webUI.  At the bottom of the webUI, there's a button to open the TVH log.  Press the buttom and see the log updates live.

   [![TVH Kodi config 05](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg)

   [![TVH Kodi config 06](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config06.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config06.jpg)

6. Lastly, **additional Kodi PVR settings** can be changed in
   ```
   # Settings &gt; PVR &amp; Live TV settings
   ```

7. That is it!  Enjoy your TVHlink integration.

## VLC and other m3u players
&gt; VLC media player (previously the VideoLAN Client and commonly known as simply VLC) is a free and open-source, portable, cross-platform media player software, and streaming media server developed by the VideoLAN project. VLC is available for desktop operating systems, and mobile platforms, such as Android, iOS, iPadOS, Tizen, Windows 10 Mobile, and Windows Phone. VLC is also available on digital distribution platforms such as Apple's App Store, Google Play, and Microsoft Store. 

The VLC player is available to a variety of platforms and can be [downloaded from the official website](https://www.videolan.org/vlc/#download).

There is an [unofficial TVH HTSP plugin for VLC](https://github.com/BtbN/vlc-htsp-plugin) but the repository has been archived and according to the author:
&gt; I am no longer working on this (..). Also, if you export an m3u playlist of your channels from tvh, and open it in VLC, you have the same set of features this plugin offers, just without all the weird bugs.

Fortunately, it is very easy to export your TVH channels `m3u` playlist and use it with the VLC player or any other `m3u` capable player:

1. Open a web-browser and navigate to your TVH webUI;

2. Append `/playlist` to the TVH webUI address, as follows:
   ```
   http://TVH_HOST_IP:9981/playlist
   ```

   [![TVH VLC config 01](/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config01.jpg)

3. This will request an `m3u` playlist from your TVH server called `channels`.  It contains all currently configured channels from your server.  **Save it** on a directory accessible to your VLC player or other `m3u` player.

   If you open the `m3u` playlist with a text editor, you will see that below each `#EXTINF`, there is a network address (`http://...`).  If the address does not contain the IP address of your TVH server host, go ahead and replace them.  Please do not do this manually; use the editor's *find a replace* tool instead.  For example, if your client is not running on the same host as the TVH server, then instead of `http://localhost` or `http://127.0.0.1`, you would want to use `http://TVH_IP`, in which `TVH_IP` is the IP address of the TVH server host in your local network.  When you're done making the changes, just save the `m3u` file.
   {:.notice .notice--warning}

4. Open your VLC player and open the `channels` `m3u` playlist as follows:
   ```
   # Media &gt; Open files
   ```
   Then, in the **Select on or more files to open** window, select *All Files* type, navigate to where you stored the `channels` playlist and open it.

   [![TVH VLC config 02](/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config02.jpg)

5. You should be prompted to authenticate yourself now.  Use your `client` credentials.

6. That is it! Enjoy your TVHlink integration.

[top](#){:.btn .btn--light-outline .btn--small}


# Conclusion
You have reached the end of this tutorial.  If you have not started configuring your TVH server, this is the perfect time to do so.  I have been using this integration for multiple months now and it has been absolutely great.  I strongly recommend it for any cord-cutters out there and in my opinion, it is a *must have* if you already have a TVH server up and running.  

Streamlink v2.0 made the implementation of Youtube channels so much simpler than before and in my experience, Youtube provides the most reliable 24/7 livestream channels (mostly news, webcams, and music).  I am not a big fan of gaming streams in general, so I don't ever watch Twitch streams, for example.  But as pointed out previously, Streamlink has plugins able to parse content from many sources other than Youtube and you are welcome to try them out.

Of note, if you are trying to add a [Twitch](https://www.twitch.tv/) stream to your TVHlink integration, make sure to use the `--twitch-disable-ads` flag in the `pipe://` command, per [recommendation from the Twitch plugin maintainers](https://github.com/streamlink/streamlink/issues/3210).  Otherwise, you will likely see a [warning message](https://user-images.githubusercontent.com/50534116/124325965-01e21500-db5c-11eb-8390-7c524b887737.png).  It is also suggested to increase your TVH network timeout settings because the filtering of the initial ad [might be incorrectly interpreted as lack of signal](https://github.com/cgomesu/tvhlink/issues/2), thus causing the stream's termination.

That is it for now.  If you enjoyed or have a few suggestions, [let me know](/contact).  Every once in a while, come back and check the [changelog](#changelog) for updates.

[top](#){:.btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="tvhlink" /><category term="streamlink" /><category term="tvheadend" /><category term="github" /><category term="iptv" /><category term="kodi" /><category term="youtube" /><category term="streaming" /><category term="livestream" /></entry><entry><title type="html">Tasmota webcam server for the ESP32-cam</title><link href="/blog/Esp32cam-tasmota-webcam-server/" rel="alternate" type="text/html" title="Tasmota webcam server for the ESP32-cam" /><published>2021-01-15T09:00:00-03:00</published><updated>2021-01-15T09:00:00-03:00</updated><id>/blog/Esp32cam-tasmota-webcam-server</id><content type="html" xml:base="/blog/Esp32cam-tasmota-webcam-server/"># Changelog
**September 3rd, 2021**: Included a new section called [RTSP server](#rtsp-server) that describes how to enable and access the video stream via the Real Time Streaming Protocol (`rtsp://`).  Also made a few related changes to the table in [Webcam server additional configurations](#webcam-server-additional-configurations).
{: .notice--success }

**September 1st, 2021**, Update #3: Extended the information about the flash and red LEDs at the end of the [Webcam server additional configurations](#webcam-server-additional-configurations) section.
{: .notice--info }

**September 1st, 2021**, Update #2: Updated the [Standalone wiring](#standalone-wiring) section to recommend a power supply able to deliver at least 1A instead of the 400mA previously suggested. At boot and when scanning for WiFi networks, the module can use more than 400mA, which might cause it to become unreliable if the power supply is unable to deliver more than that.
{: .notice--info }

**September 1st, 2021**, Update #1: Fixed a few typos (e.g., `ESP_HOME` instead of `ESP_PORT`) and updated the AITHINKER CAM template in [Updating the template](#updating-the-template).  Also, added minor notes to help troubleshooting issues when flashing the latest firmware.
{: .notice--info }

**August 12th, 2021**, Update #3: Made minor changes to a few commands to improve readability.
{: .notice--info }

**August 12th, 2021**, Update #2: Per a user suggestion (Tobias), the [Flashing Tasmota32 webcam server](#flashing-tasmota32-webcam-server) section has been updated. Specifically, the baud rate in the `esptool-py` utility (`-b`) has been omitted to use the default value (`115200`), which seems to work fine with the ESP32-cam module and most adapters.  However, if you run into issues, try the previous value when flashing the Tasmota32-webcam binaries (`-b 921600`).
{: .notice--info }

**August 12th, 2021**, Update #1: There has been changes to the location of the binary files because they moved from the [Tasmota](https://github.com/arendst/Tasmota) repository to the new [Tasmota-firmware](https://github.com/arendst/Tasmota-firmware) repository, which currently has a single branch (`main`).  The location of the necessary binaries to flash the Tasmota32-webcam firmware via the `esptool.py` utility was changed accordingly in the [Flashing Tasmota32 webcam server](#flashing-tasmota32-webcam-server) section. (It seems that changes are still being made to the organization of such files, so if the URLs do not work, check the new repo directly.)
{: .notice--warning }

**July 16th, 2021**: Updated the `WcResolution` command in the [Webcam server additional configurations](#webcam-server-additional-configurations) section to reflect the latest support (firmware `9.5.0`) for higher resolutions (`11`, `12`, `13`).  Thanks to Eric for the heads up!
{: .notice--info }

**April 6th, 2021**, Update #2: Created a bonus content section at the end called [**Firmware customization**](#bonus-content-firmware-customization). The new section describes how to create a customized Tasmota firmware to use any supported I2C or other peripherals that are not available in the pre-compiled binary. The *BME280* sensor--a cheap and very reliable ambient temperature, humidity, and pressure sensor--was used as an example but the same procedure applies for displays and other I2C sensors that you might wish to use with your ESP32-cam board. This provides a very easy way to turn a simple webcam server into a weather station, smoke detector, relay controller, and more.
{: .notice--info }

**April 6th, 2021**, Update #1: Added a pinout diagram for the ESP32-cam AI-Thinker board to the [Hardware](#hardware) section.
{: .notice--info }

**Jan 26th, 2021**: Added an alternative source for the Tasmota32 binaries to the [Flashing Tasmota32 webcam server](#flashing-tasmota32-webcam-server) section.  I few individuals reported issues flashing the latest (`firmware` branch) binaries, so I added a reference to the more stable (`release-firmware` branch) binaries instead.  A list of currently active branches can be found in the official Github repo's [active branches](https://github.com/arendst/Tasmota/branches/active) website.
{: .notice--info }

**Jan 16th, 2021**: Publication of the original article
{: .notice--info }

[top](#){: .btn .btn--light-outline .btn--small}


# Introduction
The ESP32 is a cheap and low-power microcontroller developed by [Espressif](https://www.espressif.com).  In addition to its low-cost, the ESP32 is known for its tiny and robust design, the versatility of its applications, and for having onboard Wi-Fi and Bluetooth.  It is sold world-wide (e.g., [Amazon](https://www.amazon.com/s?k=esp32), [Aliexpress](https://aliexpress.com/wholesale?SearchText=esp32), [Mercado Livre](https://lista.mercadolivre.com.br/esp32)) in a variety of boards (e.g., NodeMCU, TTGO, Lolin32).  

In this tutorial, I will talk about one type of ESP32 board that has an **integrated camera module**, called the **ESP32-cam**, which can be found for [less than US$10](https://www.amazon.com/s?k=esp32+cam&amp;s=price-asc-rank&amp;ref=sr_st_price-asc-rank).  The goal is to build a cheap alternative to commercial wireless cameras using an open-source firmware that can be easily controlled via HTTP or MQTT and integrated to an existing camera surveillance server (e.g., [MotionEye](https://github.com/ccrisan/motioneye/), [Shinobi](https://shinobi.video/), [ZoneMinder](https://www.zoneminder.com/), [iSpy](https://www.ispyconnect.com/)) or multi-purpose automation server (e.g., [HomeAssistant](https://www.home-assistant.io/), [OpenHAB](https://www.openhab.org/), [NodeRed](https://nodered.org/)) by capturing its live stream from a simple MJPEG URL.  All that can be accomplished with **[Tasmota](https://tasmota.github.io/)** and its (beta) **[webcam server firmware for the ESP32-cam](https://github.com/arendst/Tasmota-firmware/tree/main/release-firmware/tasmota32)**.

---

If you're new to **ESP32** boards, check Bill's ([DroneBot Workshop](https://www.youtube.com/channel/UCzml9bXoEM0itbcE96CB03w)) review video:

{% include video id=&quot;xPlN_Tk3VLQ&quot; provider=&quot;youtube&quot; %}
{:. text-center}

---

For a comparison of a few different **ESP32-cam** boards, check [Andreas Spiess'](https://www.youtube.com/channel/UCu7_D0o48KbfhpEohoP7YSQ) video:

{% include video id=&quot;5IhhyJjjCxo&quot; provider=&quot;youtube&quot; %}
{:. text-center}

---

[top](#){: .btn .btn--light-outline .btn--small}


# Overview
This tutorial was organized as follows.  First, I presented the motivation behind the use of Tasmota32 webcam server over one of the most common firmwares for the ESP32-cam, the Espressif CameraWebServer Arduino sketch.  This is followed by a list of the main hardware components involved into flashing a firmware onto the ESP32-cam.  Most of the tutorial focused on the installation and configuration of the Tasmota32 webcam server using a GNU/Linux OS.

[top](#){: .btn .btn--light-outline .btn--small}


# Why Tasmota?
Tasmota was created and it is still maintanted by [Theo Arends](https://github.com/arendst). It started as hacky alternative to the [Sonoff](https://sonoff.tech/) commercial firmware and moved onto an independent, [free and open-source project](https://github.com/arendst/Tasmota) that provides multiple firmwares for ESP8266-based devices.  The firmwares come with a simple webUI that let's you control and configure the board main modules as well as integration with a MQTT server and more. Even though Tasmota [support for the ESP32 is still in beta development](https://tasmota.github.io/docs/ESP32/), my experience with it has been very positive.  

One of the main webcam firmwares for the **ESP32-cam** is the one provided by Espressif themselves, the [CameraWebServer](https://github.com/espressif/arduino-esp32/tree/master/libraries/ESP32/examples/Camera/CameraWebServer) Arduino sketch.  This one has features that the Tasmota32 webcam firmware does not offer, such as face recognition and motion detection.  However, my experience with the **video streaming** has been negative.  Specifically, the streaming runs smoothly when the video resolution is low (640x480) but it strugles quite a bit when running at medium to high resolutions--that is, the number of frames per second decreases noticeably.  I've also noticed that the board runs very hot when running the CameraWebServer Arduino sketch, even when the most CPU intensive tasks (motion detection and face reconition) are disabled. 

On the other hand, the **[Tasmota32 webcam server](https://github.com/arendst/Tasmota-firmware/tree/main/release-firmware/tasmota32)** seems to perform much better in the areas the CameraWebServer Arduino sketch strugles with.  More specifically, the streaming is smoother and the board does not seem to get as hot.  I've not had a chance to investigate why this happens and to measure the actual difference in frames per second and temperature, so don't take my opinion too seriously.  Also, I cannot tell if this happens for all ESP32-cam boards because I've only tested with the **AI-Thinker** module.  Overall, however, my experience with the Tasmota32 firmware has been better than with the Espressif firmware in the area that I think is the most relevant one for a camera module, namely video streaming performance.  On top of that, the Tasmota firmware offers a multitude of methods to interact with the ESP32-cam remotely, while the Espressif sketch is very limited in that regard.

---

If you've never heard of Tasmota before, check Robbert's ([The Hook Up](https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ)) introduction video:

{% include video id=&quot;08_GBROKQH0&quot; provider=&quot;youtube&quot; %}
{:. text-center}

---

[top](#){: .btn .btn--light-outline .btn--small}


# Hardware
To make a single wireless camera based on the ESP32-cam board, you'll need at least the following items:

* Board: 
  * 01x [ESP32-CAM, AI-Thinker board](https://www.amazon.com/s?k=esp32cam+ai-thinker)

  [![ESP32cam](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam.jpg){:.PostImage}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam.jpg)

  [![ESP32cam pinout](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-pinout.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-pinout.jpg)

* USB to TTL adapter:
  * 01x [FTDI FT232RL USB to TTL/serial module with 5v/3v3 voltage jumper](https://www.amazon.com/s?k=ftdi+ft232RL+usb+to+ttl)

  [![FTDI FT232RL](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/ftdi-usb-ttl.jpg){:.PostImage}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/ftdi-usb-ttl.jpg)

* Cables:
  * 05x [Female-Female dupont/jumper wires](https://www.amazon.com/s?k=female+dupont+wires)

  [![Female dupont wires](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/female-dupont.jpg){:.PostImage}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/female-dupont.jpg)

  * 01x USB cable compatible with your USB to TTL adapter: Check the USB type and use a short cable to decrease resistance as much as possible because initially, we will be powering the ESP32-cam via your computer's USB port.

  [![USB cable](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-cable.jpg){:.PostImage}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-cable.jpg)

*Optional.* If you wish to add a case to your ESP32-cam project, there are many [3D printed options to choose from](https://duckduckgo.com/?q=esp32-cam+case).  (Notice that the use of an external antenna requires (de)soldering very small components.  If you plan on installing the camera on an area with good wireless coverage, don't bother with an external antenna.  Otherwise, plan accordingly.)  In addition, you might want to add a [USB to DIP adapter](https://www.amazon.com/s?k=USB+to+DIP) to your shopping list in order to power your ESP32-cam without the USB to TTL adapter.  The USB to DIP adapter is highly dependent on the casing choice and most 3D printed enclosure projects for the ESP32-cam include assembly instructions.  **Casing and assembly are not covered in this tutorial**, owing to the plethora of alternatives.

[top](#){: .btn .btn--light-outline .btn--small}


# Installation
This guide assumes you're running a **Linux** distribution, and more specifically, an **apt-based distro**, such as Debian or Ubuntu.  If you're running a different distro, simply change the apt code to reflect your system's package manager.  For non-Linux users, check [Tasmota's Getting Started](https://tasmota.github.io/docs/Getting-Started/) but use the binaries mentioned here and come back for the post-flashing configuration of the webcam server.

## Required packages and user permissions
Before we can flash the Tasmota32 webcam server onto the ESP32-cam, we will need to install a few packages and configure the permissions of our Linux user.

1. Open a terminal and install the required packages:

   ```
   sudo apt update
   sudo apt install wget python3 python3-pip
   ```

2. Install `esptool.py` via `pip3`:

   ```
   pip3 install esptool
   ```

3. Find out if `esptool.py` can be found in your user's `$PATH`.

   ```
   whereis esptool.py
   ```

   Alternatively, when required to run `esptool.py`, instead of `esptool.py OPTIONS`, run as `python3 -m esptool OPTIONS`. If you choose to do this, skip the next step.
   {: .notice }

4. If `esptool.py` was not found, it means your user's `.local/bin` is not in your `$PATH`.  Add it as follows:

   ```
   echo &quot;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.bashrc&quot; &gt; /dev/null
   ```

5. Connect your ESP32-cam to the USB to TTL/serial adapter in flash mode:
   
   [![ESP32cam flash mode](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg)

   **Attention.** Make sure your USB to TTL adapter has **VCC in 5V mode** and in the ESP32, the VCC cable is connected to the 5V pin.  Double check the wiring before moving on.
   {: .notice .notice--warning}

6. Connect the adapter to a USB port on your computer and check the new device in `/dev/`:

   ```
   ls -l /dev/ttyUSB*
   ```

7. Add your `$USER` to the same group as `/dev/ttyUSB*` (it's usually `dialout` but if different, change in the command below) and `tty`:

   ```
   sudo usermod -aG dialout,tty ${USER}
   ```

8. Log off and back on.  (If you continue to run into permission issues, try rebooting instead.  You can check your user's permissions with `id ${USER}`.)

## Flashing Tasmota32 webcam server
We are now ready to flash the Tasmota firmware.  For reference, the official information is available at [https://tasmota.github.io/docs/ESP32](https://tasmota.github.io/docs/ESP32).

1. Create a `tasmota32` dir in `/opt`:

   ```
   cd /opt
   sudo mkdir tasmota32
   ```

2. Change ownership of the new directory to the current user instead of `root`:

   ```
   sudo chown ${USER}:${USER} tasmota32/
   ```

3. Download the `tasmota32-webcam.bin` binary and the needed ESP32 Tasmota binaries from the official Github repo via `wget`.  (*The following was updated on August 12th, 2021.*) The binaries are now available in a different repository than [before](https://github.com/arendst/Tasmota), namely [arendst/Tasmota-firmware](https://github.com/arendst/Tasmota-firmware), and currently, the new repository has a single branch (`main`). There are two versions of the `tasmota32-wecam.bin`, one from the `release` and another from the `development` portions of the Tasmota32 project. My advice is to try the release first, then development if you have any issues.
   
   To download the **stable release** binaries, use the following command:

   ```
   wget -P /opt/tasmota32/ \
     https://ota.tasmota.com/tasmota32/release/tasmota32-webcam.bin \
     https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/boot_app0.bin \
     https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/bootloader_dout_40m.bin \
     https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/partitions.bin
   ```

   **Alternatively**, to download the **development** binaries, use the following command:

   ```
   wget -P /opt/tasmota32/ \
     https://ota.tasmota.com/tasmota32/tasmota32-webcam.bin \
     https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/boot_app0.bin \
     https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/bootloader_dout_40m.bin \
     https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/partitions.bin
   ```

4. Make sure your ESP32-cam is connected to your computer in [flash mode](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg) (GPIO0-GND jumper).  Now find the USB port your device is using in `/dev/` and set it to the environmental variable `ESP_PORT`, as follows:
   
   **Attention.** While convenient, the following command assumes there is a single USB to serial adapter connected to your computer.  If this is not the case, manually set `ESP_PORT` to whichever port your USB adapter is currently using. You can find the port via `ls /dev/ttyUSB*` and testing one by one until you find the one used by the adapter. Alternatively, simply disconnect all other USB to serial adapters for this procedure and continue.
   {: .notice--warning }

   ```
   ESP_PORT=$(ls /dev/ttyUSB*)
   ```

   Please notice that this only works if you continue to use the **same shell** in which `ESP_PORT` was defined.  If you log off or even close the current terminal, you will have to redefine `ESP_PORT` to keep using it.
   {: .notice }

   You can check that `ESP_PORT` was correctly defined by `echo`ing it, as follows:

   ```
   echo $ESP_PORT
   ```

   which should output something like this:

   ```
   /dev/ttyUSB0
   ```

5. Erase the current firmware (or whatever data) from your ESP32-cam. 
   
   **Attention.** The following procedure will **wipe all the data** on the ESP32-cam. 
   {: .notice--warning }

   ```
   esptool.py --port $ESP_PORT erase_flash
   ```

   **Wait** until `esptool.py` is done. Then, press the **reset button on the ESP32-cam**.  Now, check that `$ESP_PORT` is available again.
   {: .notice--danger }

6. Flash the `tasmota32-webcam.bin` webcam server binary and the required Tasmota binaries to the ESP32-cam.

   ```
   esptool.py --chip esp32 \
     --port $ESP_PORT \
     --before default_reset \
     --after hard_reset \
     write_flash -z \
     --flash_mode dout \
     --flash_freq 40m \
     --flash_size detect \
     0x1000 /opt/tasmota32/bootloader_dout_40m.bin \
     0x8000 /opt/tasmota32/partitions.bin \
     0xe000 /opt/tasmota32/boot_app0.bin \
     0x10000 /opt/tasmota32/tasmota32-webcam.bin
   ```

   **Wait** until `esptool.py` is completely done before moving on. Flashing a firmware can take a few minutes to complete.  If you experience issues while flashing, try a different baud rate (`-b`) than the default `115200`, such as `-b 921600`. The [Tasmota FAQ](https://tasmota.github.io/docs/FAQ/#flashing) can help with this and other issues.
   {: .notice--danger }

   If `esptool.py` hangs at `Connecting...`, then press the **Restart** button (`RST`) on your ESP-cam module.
   {: .notice }

8. **Wait until `esptool.py` is done**. Then, **remove the flash mode (GPIO0-GND) jumper** from the ESP32-cam.
   
   [![ESP32cam nonflash mode](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-nonflash-mode.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-nonflash-mode.jpg)

9.  Now **press the reset button** on your ESP32-cam.

[top](#){: .btn .btn--light-outline .btn--small}


# Configuration
By default, the Tasmota firmware will create a wireless access point for your ESP32-cam. 

If you cannot find the Tasmota wireless access point, it is possible that the USB adapter is unable to provide enough power to operate the WiFi features in a reliable way.  In this case, check the [Standalone wiring](#standalone-wiring) section and use a power supply able to deliver at least 1A at 5V.
{:.notice}

1. Use a wifi-capable device (e.g., laptop) and connect to it. The ESP32-cam will give your device an IP address, which you can check via `ip a`. Usually, the device's IP address is in the `192.168.4.0/24` pool, which means the ESP32-cam webUI is at `192.168.4.1:80`; Otherwise, the webUI will be at the first addr in whichever pool your device connected to after joining the wireless access point created by the Tasmota firmware.

2. Open a web-browser of your choice and navigate to the ESP32-cam webUI. You should be prompted to change the wifi settings to allow your ESP32-cam to connect to your local wifi network.  Change the settings, save it, and wait for the ESP32-cam to reboot.

3. Navigate to the **DHCP server** of your local network and find the IP address assigned to your ESP32-cam.  At this point, it's a good idea to assign a static address to it as well.  (If you set a static address, then reboot the ESP32-cam before moving on.)

4. Navigate to the ESP32-cam webUI on your local network.

## Updating the template
Tasmota templates are device-specific definitions of how their GPIO pins are assigned. As mentioned before, there are multiple ESP32-cam boards out there with different definitions.  In my case, I'm using the **AI-Thinker cam** module and therefore, I should configure the Tasmota32 webcam server to use the [AITHINKER CAM template](https://tasmota.github.io/docs/ESP32/#aithinker-cam) instead of the default one.  (If your ESP32-cam is different, then check [https://tasmota.github.io/docs/ESP32/](https://tasmota.github.io/docs/ESP32/) for the appropriate template and use that one instead of the AITHINKER CAM.)

1. Copy the **AITHINKER CAM template** (*Updated on September 1st, 2021*):

   ```json
   {&quot;NAME&quot;:&quot;AITHINKER CAM&quot;,&quot;GPIO&quot;:[4992,1,672,1,416,5088,1,1,1,6720,736,704,1,1,5089,5090,0,5091,5184,5152,0,5120,5024,5056,0,0,0,0,4928,576,5094,5095,5092,0,0,5093],&quot;FLAG&quot;:0,&quot;BASE&quot;:2}
   ```

2. From the ESP32-cam webUI, go to **Configuration &gt; Configure &gt; Configure other**.

3. Paste the template under **Other parameters &gt; Template**; **Check Activate**; Save it and wait for the reboot.
   
   If you lose connection to the ESP-cam afterwards, it is very likely that the AITHINKER CAM template has changed since the last time this article was updated.  In this case, put the ESP-cam in **flash mode** and flash the Tasmota32-webcam firmware once again.  Then, when updating the **Template**, use the one from [https://tasmota.github.io/docs/ESP32/#aithinker-cam](https://tasmota.github.io/docs/ESP32/#aithinker-cam) instead of the one mentioned before.
   {:.notice}

4. The device should now be named 'AITHINKER CAM' (or whaterver NAME was in the template).

5. The MJPEG stream should be accessible at `http://DEVICE_IP:81/stream` or `http://DEVICE_IP:81/cam.mjpeg`.

6. A single snapshot can be obtained at `http://DEVICE_IP:80/snapshot.jpg`.

## Auto-enabling the webcam server at boot
If your board is like mine, the stream does not initialize on its own at boot--it requires a request to get webUI to initialize the stream.  This will happen whenever you try to visit the device's webUI.  However, if you want to automatically initialize the webserver and video stream at boot, we can do so using Tasmota's **[rules](https://tasmota.github.io/docs/Rules/)**.  More specifically, we will add `Rule1` that tells the ESP32-cam to start the stream once Tasmota is fully initialized (i.e., after wifi and MQTT are connected, if configured).

1. Copy the following rule:

   ```
   Rule1 ON System#Boot DO WcInit ENDON
   ```

2. Go to the ESP32-cam webUI and then **Console**.

3. Paste the rule in the **enter command** box and press enter.

4. To enable `Rule1`, enter the following command:

   ```
   Rule1 1
   ```

5. Restart the ESP32-cam with the following command:

   ```
   Restart 1
   ```

6. Once it comes back on, check the console if `RULE 1` was executed.  It should show something similar to the following if the rule is working as expected:

   ```
   ... RUL: SYSTEM#BOOT performs &quot;WcInit&quot;
   ... SRC: Rule
   ... CMD: Group 0, Index 1, Command &quot;WCINIT&quot;, Data &quot;&quot;
   ... CAM: Stream init
   ... CAM: User template
   ... CAM: PSRAM found
   ... CAM: Initialized
   ... RSL: stat/tasmota_***/RESULT = {&quot;WCInit&quot;:&quot;Done&quot;}
   ```

7. The MJPEG stream should now be accessible at `http://DEVICE_IP:81/stream` or `http://DEVICE_IP:81/cam.mjpeg` without ever accessing the webUI's main page.

By the way, **rules** are a great way to program your Tasmota device indepedently of any automation server. Make sure to read about [how to add or modify rules](https://tasmota.github.io/docs/Rules/) and [the list of available rule commands](https://tasmota.github.io/docs/Commands/#rules).

## RTSP server
As of release `9.5.0`, it is possible to use [Real Time Streaming Protocol (RTSP)](https://en.wikipedia.org/wiki/Real_Time_Streaming_Protocol) to access the video streaming from the ESP32-cam module running the Tasmota32-webcam firmware.  (Thanks to [@gemu2015](https://github.com/gemu2015) for the initial implementation and [pull request](https://github.com/arendst/Tasmota/pull/9575).)  To do so, follow these steps:

1. Navigate to the ESP32-cam webUI and then go to the **Console**.

2. **Enable the RTSP server** by entering the following command:
   
   ```
   WcRtsp 1
   ```

3. Now, the video stream should be accessible via RTSP using the following address:
   
   ```
   rtsp://DEVICE_IP:8554/mjpeg/1
   ```

   Remember to change `DEVICE_IP` for the IP address of your ESP32-cam.
   {:.notice}

Currently, the RTSP server only needs to be enabled once.  So, contrary to `WcInit`, we won't need to write a new rule to re-enable it at boot.  Of note, the RTSP server is independent of the HTTP one.  In addition, I've only tested it with VLC and [there are reports of compatibility issues with other players](https://github.com/arendst/Tasmota/issues/9293#issuecomment-720108532).

## Webcam server additional configurations
A full list of commands for ESP32 devices can be found at [the official docs page](https://tasmota.github.io/docs/Commands/#esp32).  However, by the time I finished writing this, many of the commands that are specific to the Tasmota32 webcam server binary were gone... I'm not sure what happened there.  For this reason, I've decided to post here all the additional commands (`wc`) that I'm aware of (in alphabetical order):

| Command | Definition | Values |
|:---:|:---:|:---:|
| `Wc` | Displays all the current webcam settings | - |
| `WcBrightness` | Image brightness | `-2`, `-1`, `0`, `1`, `2` |
| `WcContrast` | Image contrast | `-2`, `-1`, `0`, `1`, `2` |
| `WCFlip` | Flips the image vertically | `1`, `0` |
| `WcInit` | Initializes the HTTP webcam server | - |
| `WCMirror` | Flips the image horizontally | `1`, `0` |
| `WcResolution` | Image resolution | `0`: `FRAMESIZE 96x96` |
|  |  | `1`: `FRAMESIZE 160x120` |
|  |  | `2`: `FRAMESIZE 176x144` |
|  |  | `3`: `FRAMESIZE 240x176` |
|  |  | `4`: `FRAMESIZE 240x240` |
|  |  | `5`: `FRAMESIZE 320x240` |
|  |  | `6`: `FRAMESIZE 400x256` |
|  |  | `7`: `FRAMESIZE 480x320` |
|  |  | `8`: `FRAMESIZE 640x480` |
|  |  | `9`: `FRAMESIZE 800x600` |
|  |  | `10`: `FRAMESIZE 1024x768` |
|  |  | `11`: `FRAMESIZE 1280x720` |
|  |  | `12`: `FRAMESIZE 1280x1024` |
|  |  | `13`: `FRAMESIZE 1600x1200` |
| `WcRtsp` | RTSP server | `0`: disable, `1`: enable |
| `WcSaturation` | Image saturation | `-2`, `-1`, `0`, `1`, `2` |
| `WcStream` | Controls the video streaming | `0`: stop, `1`: start |


For example, to set the stream resolution to 800x600, go to the **Console** and enter the following command :

```
WcResolution 9
```

Alternatively, it's possible to send commands via HTTP.  The previous example via web-browser: `http://DEVICE_IP/cm?cmnd=WcResolution%209`.  If using a terminal, you can send via `curl`, as follows:

```
curl http://DEVICE_IP/cm?cmnd=WcResolution%209
```

which should reply with a `json` parsable by utilities such as `jq`.

Finally, the **flash LED** is controlled by **GPIO4** and the **red LED** is controlled by **GPIO33**. Their state can be changed programmatically as well.  (*Updated on September 1st, 2021.*) As of release `9.5.0`, the default stable release automatically creates a `PWM` component for the **flash LED**, which allows to turn it `on` and `off`, as well as control its intensity, and it also creates a `LedLink_i` component for the **red LED**, which blinks whenever the ESP32-cam is not connected to a wireless network, as a physical marker of lack of connectivity.

## Fixing the timezone
If you installed a pre-compiled firmware, there's a chance your device is using the incorrect timezone.  To check the current timezone, go to **Console** and type

```
timezone
```

and to change it, enter the command with a value equal to your region's [standardized time zone](https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png).  For America/Sao_Paulo, for example, that would be `-3`, which can be set in your Tasmota device as follows

```
timezone -3
```

[top](#){: .btn .btn--light-outline .btn--small}


# Basic usage
You can now capture the live stream of your ESP32-cam at either `http://DEVICE_IP:81/stream` or `http://DEVICE_IP:81/cam.mjpeg`, and a single snapshot at `http://DEVICE_IP:80/snapshot.jpg`.  Such URLs can be easily fed into most camera surveillance servers, such as [MotionEye](https://github.com/ccrisan/motioneye/), [Shinobi](https://shinobi.video/), [ZoneMinder](https://www.zoneminder.com/), or [iSpy](https://www.ispyconnect.com/).  As mentioned before, the Tasmota32 webcam server can be configure to connect to a **[MQTT server](https://mqtt.org/)** (see **Configuration** &gt; **Configure MQTT**) and then integrated with most home automation servers, such as [HomeAssistant](https://www.home-assistant.io/), [OpenHAB](https://www.openhab.org/), or one based on [NodeRed](https://nodered.org/)'s flow programming.

## Standalone wiring
If you bought a USB to DIP adapter, you can now power your ESP32-cam independent of your USB to TTL/serial adapter using a cheap **5V USB power supply** that is able to deliver at least **1A** (of note, **500mA** should work as well but it might be unreliable), such as an old cellphone charger, as follows:

[![ESP32cam standalone mode](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-standalone-mode.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-standalone-mode.jpg)

[top](#){: .btn .btn--light-outline .btn--small}


# Bonus content: Firmware customization
Even though many of the GPIO pins in the ESP32-cam board are used for the built-in camera module, the board certainly has more than enough pins to interface with additional peripherals.  In other words, while you can use your ESP32-cam as a simple webcam server, it is possible--and as we will see, very easy--to turn it into something more than that, such as a weather station, smoke detector, relay controller, and so on, owning to the multitude of peripherals that are currently supported by the Tasmota firmware.  For an up-to-date list, see the [**official Supported Peripherals table**](https://tasmota.github.io/docs/Supported-Peripherals/#supported-peripherals).

However, due to space limitations, support for some peripherals are not included in pre-compilled binaries.  In the official docs, for example, it says that support for the [**BME280 sensor module**](https://tasmota.github.io/docs/BME280/) is only available in the `tasmota-sensors.bin` pre-compiled binary.  Fortunately, it is now very easy to customize the `tasmota32-webcam.bin` to support the BME280 and any other supported peripherals.

[![BME280](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/bme280.jpg){:.PostImage}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/bme280.jpg)

In the following sections, I described how to customize the Tasmota32 firmware to support a BME280 sensor module.  This was accomplished with [**Docker**](https://www.docker.com/) and the container [**TasmoCompiler**](https://github.com/benzino77/tasmocompiler).  At the end, I showed how to update the firmware over-the-air and how to configure the template to interface with peripherals connected to GPIO pins.

There are [many different ways of customizing a Tasmota firmware](https://tasmota.github.io/docs/Compile-your-build/).  TasmoCompiler is just one of them that does not use an IDE and has a user-friendly GUI.
{: .notice .notice--info }

## Installing Docker and running TasmoCompiler
**Docker** is a ver well-known, documented, and used virtualization platform. To install Docker, follow the official documentation:

* [**Get Docker** and **install it** on your OS](https://docs.docker.com/get-docker/)

Once you have Docker up and running, it is time to pull and run the **TasmoCompiler** container. TasmoCompiler was developed by user [benzino77](https://github.com/benzino77) to do only one thing, namely compile a Tasmota firmware with customized settings via a simple (web) GUI.  To run it in a Docker container, **open a terminal** and pull the image, as follows:

```
docker pull benzino77/tasmocompiler
```

[![tasmocompiler pull](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-pull.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-pull.jpg)

If you run into permission issues, either append `sudo` to any docker command or create and add your current user to a `docker` group, as follows: `sudo groupadd docker &amp;&amp; sudo usermod -aG docker $USER`. Other post-install configurations for Linux users can be found at the official docs: [Optional post-install steps](https://docs.docker.com/engine/install/linux-postinstall/).
{: .notice .notice--info }

Then, run the `tasmocompiler` container, as follows:

```
docker run \
  --rm \
  --name tasmocompiler \
  -p 3000:3000 \
  -e DEBUG=server,git,compile \
  benzino77/tasmocompiler
```

[![tasmocompiler run](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-run.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-run.jpg)

Of course, if you use [Portainer](https://www.portainer.io/) or other application for managing your docker containers, you can also pull and run `tasmocompiler` via the application instead of a terminal.  In this case, translate the commands to your application.  This also applies to users who are not running Docker on Linux.
{: .notice .notice--info }

This will create a container named `tasmocompiler` that has a web GUI exposed on port `3000` of the local machine.  To access it, go to the following address using any web-browser: 

* [**http://localhost:3000**](http://localhost:3000)

## Customizing the tasmota32-webcam firmware
Now that the `tasmocompiler` container is running, we can compile a new customized Tasmota firmware for the ESP32-cam in just a few simple steps:

1. Open any web-browser and navigate to [**http://localhost:3000**](http://localhost:3000);

2. In **Tasmota source code**, select *Refresh Source* (this can take a few minutes, depending on your connection) and afterwards, *Next*; 
   
   [![tasmocompiler step 01](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step01.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step01.jpg)

3. In **WiFi configuration**, add your wifi credentials and hit *Next*;
   
   [![tasmocompiler step 02](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step02.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step02.jpg)

4. In **Select Features**, select **ESP32 webcam** as your board.  For this example, we are adding the **BME280 sensor module** and therefore, in feature, we add the *Temp/Hum sensors* feature to support the BME280 sensor. If you are attaching another device, check the appropriate feature to support it here (e.g., check *Displays (I2C/SPI)* to support an OLED display module).  When done, hit *Next*;
   
   [![tasmocompiler step 03](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step03.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step03.jpg)

5. It is not necessary to edit any parameter in **Custom Parameters**, so hit *Next*;

6. Finally, in **Select Version and Compile**, choose a Tasmota version (*development* is usually fine but if you run into issues later on, try the latest stable) and base language for the interface.  Then, select **Compile** and wait until it is done (this can take a few minutes);

   [![tasmocompiler step 05](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step05.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step05.jpg)

   [![tasmocompiler step 06](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step06.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step06.jpg)

7. Once it is done compiling, check that the firmware was successfully compiled and if all looks good, **download the firmware** (and optionally, any of the other files);

   [![tasmocompiler step 07](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step07.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step07.jpg)

If you run into issues, check the [issues tab](https://github.com/benzino77/tasmocompiler/issues) of the TasmoCompiler repository for open and closed issues similar to the one you are experiencing. If you do not find anything similar, open a new issue there to warn the developer know about it.

## Updating the firmware
If you have already flashed a pre-compiled Tasmota binary onto the ESP32-cam, then it is possible to update the firmware over-the-air (OTA).  To update the firmware OTA, do the following:

1. Open a web-browser and go to the IP address of your Tasmota ESP32-cam;

2. Then navigate to **Firmware Upgrade** &gt; **Upgrade by file upload** &gt; Browse and select the `firmware.bin` file you compiled with TasmoCompiler.  Afterwards, select **Start Upgrade** and wait until it is done;

3. The device will reboot automatically and once it is back on, it should connect to the wireless network configured with TasmoCompiler.

Now, if you have not flashed any pre-compiled Tasmota binary, simply switch the `tasmota32-webcam.bin` file mentioned in [Flashing Tasmota32 webcam server](#flashing-tasmota32-webcam-server) for the `firmware.bin` file you compiled with TasmoCompiler.

## Wiring and template configuration
Suppose we have a **BME280 sensor module** wired to an ESP32-cam (AI-Thinker) board as follows:

[![Wiring BME280](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-bme280.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-bme280.jpg)

Note that to use the VCC output pin as a 3.3V output pin, you need to make sure the board has a **resistor connecting the two 3v3 pads** and nothing connecting the two 5V pads. This was indicated by the red arrow in the image above. From my experience, a resistor connecting the 3v3 pads is the default for all ESP32-cam AI-Thinker boards, meaning that it should output 3.3V by default and if you want to change it to 5V, you need to desolder the resistor between the 3v3 pads and solder it between the 5V pads.  However, make sure to double check this before wiring any peripheral that will use the VCC out pin from the board.
{:.notice .notice--warning}

Then, now that the board is running a customized firmware that should support the BME280 sensor module, all that we need to do is to configure its template to inform the program about (a) which GPIO pins the peripheral is using and (b) how the pins should be configured.

To configure the ESP32-cam template, do the following:

1. Open a web-browser and go to the IP address of your Tasmota ESP32-cam;

2. Follow the instructions in [**Updating the template**](#updating-the-template) if you have not done that before. Afterwards, navigate to **Configuration** &gt; **Configure Other** &gt; **Other parameters** &gt; **Template** and make sure the **Activate** is checked. 

3. Navigate to **Configuration** &gt; **Configure Template**.  The name of the template should be the same one you specified in the previous step.  Remember that according to the wiring of the BME280 board, **SDA** and **SCL** are connected to pins **GPIO14** and **GPIO15**, respectively.  Therefore, **find the GPIO14 pin** and instead of `User`, select `I2C SDA`; and similarly, **find the GPIO15 pin** and instead of `User`, select `I2C SCL`.
   
   [![BME280 template](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-template-bme280.jpg){:.PostImage}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-template-bme280.jpg)

4. Hit *Save* and wait for the device to reboot. Once it comes back on, the firmware should automatically detect and configure the I2C device and on the **Main Page**, there should be some of the metrics associated with the device.  Because we are connecting the board to a BME280 sensor module, the Main page will show measures for the ambient temperature, humidity, dew point, and pressure.
   
   [![ESP32-cam BME280](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-bme280.jpg){:.PostImage .PostImage--large}](/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-bme280.jpg)

   Of course, different peripherals will show different metrics, buttons, sliders, etc., on the main page. As before, the camera stream should be available on the main page and via port `81` at `/stream` and `/cam.mjpeg`.

[top](#){: .btn .btn--light-outline .btn--small}


# Conclusion
This concludes the tutorial on how to install and configure the Tasmota32 webcam server onto the ESP32-cam.  As usual, if you spot an error or want to share an idea, feel free to [get in touch with me](/contact).  I try to keep my articles updated as much as possible to reflect my current understanding about the topic.  All such updates are noted in the [changelog](#changelog).

[top](#){: .btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="iot" /><category term="esp32" /><category term="tasmota" /><category term="mqtt" /><category term="cam" /><category term="webcam" /><category term="surveillance" /><category term="wifi" /><category term="wireless" /><category term="network" /></entry><entry><title type="html">Repurposing external HDD enclosures into button boxes for the Raspberry Pi</title><link href="/blog/Rpi-button-box-ehdd-enclosure/" rel="alternate" type="text/html" title="Repurposing external HDD enclosures into button boxes for the Raspberry Pi" /><published>2020-12-18T12:08:00-03:00</published><updated>2020-12-18T12:08:00-03:00</updated><id>/blog/Rpi-button-box-ehdd-enclosure</id><content type="html" xml:base="/blog/Rpi-button-box-ehdd-enclosure/"># Changelog
**Dec 18th, 2020**: Publication of the original guide
{: .notice .notice--info }

[top](#){: .btn .btn--light-outline .btn--small}

# Introduction
Hard disk drives (HDDs) are often sold in an external enclosure with easy-to-use interfaces as a detachable, semi-mobile data storage solution. Every so often, however, their price goes below the market price for an equivalent internal HDD and when that happens, many of us will buy them only to remove the HDD from its external enclosure and use it as a regular HDD in our PCs and servers--a practice called **shucking**.

[![Amazon ad Seagate expansion 4tb](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/amazon-seagate-4tb-ehdd.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/amazon-seagate-4tb-ehdd.jpg) 

But what do you do with the external enclosure afterwards? Do you throw it away?  Well, you could do that but here I'll show that such enclosures can be repurposed into nice looking **button boxes** for most single board computers (SBCs).  More specifically, I'll transform an old, shucked [**Seagate Expansion 4TB USB3.0 HDD** (STBV4000100)](https://www.newegg.com/seagate-expansion-4tb/p/N82E16822178354) into a button box for the [**Raspberry Pi** (RPi)](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/). Here's a preview of how it looks like:

[![RPi and buttons](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons.jpg) 

[![RPi and buttons - Closed 01](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg) 

[![RPi and buttons - Closed 02](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed-2.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed-2.jpg) 

In the first section of this tutorial, I described a few general points to consider when [planning your button box](#assessment), such as whether the SBC fits, if it already has holes, and so on.  Then, I go into the specifics of my own case, such as the [hardware components](#hardware) of it (e.g., buttons, switches), the [software](#software) used (Pi OS and a Python button box controller), and finally, the [assembly](#assembly) of hardware and software into a functional button box.  If that sounds good, let's get started.

**ATTENTION**. I do not recommend to use an external HDD enclosure as a button box to control **mains power**.  None of those enclosures was designed to have 110-220V AC running inside of it and things might melt and catch fire, and of course, you don't want someone to get electrocuted because of a loose mains cable.  Even though some of the buttons and switches might be rated 110-220V AC at 10A, for instance, to be safe, stick to **low voltage DC** inside the button box.
{: .notice .notice--danger}

[top](#){: .btn .btn--light-outline .btn--small}

# Assessment
* Does the enclosure have a **flat surface** to attach the buttons?

* Will the SBC **fit** inside of the enclosure?
  
  Height-wise, make sure there's a little bit of room for the jumper cables that will be connected to the GPIO pins--*at least* 5cm (roughly 2 inches) of space above the GPIO pins.

* Will the buttons fit inside the enclosure? 
  
  Some buttons have fairly long terminals that could hit the bottom of the enclosure once the lid is closed.  You also need to take into consideration that jumper cables will be soldered to the button's terminal and might need additional room.

* If the SBC will go inside of the enclosure, does it have holes to **remove hot air from inside**?
  
  Depending on the SBC and usage, you might need to plan a small fan to remove the hot air generated by the board. However, this is likely not necessary for external HDD enclosures because heat will also harm HDDs and manufacturers will design their external cases with that in mind.

* Can you repurpose some of the **existing holes**?

  It's much easier to use existing holes than making new ones and they usually look better because the case was designed with them in mind, as opposed to the new ones.

* Is it **safe to drill** holes in the enclosure?

  Some materials can crack/break easily and a few can be harmful to you if you do not take the necessary precautions.

[top](#){: .btn .btn--light-outline .btn--small}

# Hardware

* SBC:
  * [Raspberry Pi 3B](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/)
    
    [![RPi model 3B](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/rpi-model-3b.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/rpi-model-3b.jpg)

* External HDD enclosure:
  * [Seagate Expansion 4TB USB3.0 HDD (STBV4000100)](https://www.newegg.com/seagate-expansion-4tb/p/N82E16822178354)
    
    [![Seagate HDD enclosure](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/seagate-external-enclosure.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/seagate-external-enclosure.jpg)

* [Push buttons](https://www.amazon.com/s?k=push+button):
  * 02x Red push button
  * 02x Black push button
  * 02x Green push button
    
    [![Push Button](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/push-button.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/push-button.jpg)

* [Toggle switches](https://www.amazon.com/s?k=toggle+switch):
  * 03x OFF/on toggle switch
  * 02x Red safety cover for the toggle switch
  * 01x &quot;ON/OFF&quot; label for the toggle switch
    
    [![Toggle Switch](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/toggle-switch.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/toggle-switch.jpg)

* [Buzzer]((https://www.amazon.com/s?k=active+buzzer))
  * 01x Active buzzer

  [![Buzzer](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/buzzer.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/buzzer.jpg)

* Cover:
  * [Textured vynil/PVC film](https://www.amazon.com/s?k=carbon+fiber+vinyl+wrap)
    
    The size depends on the surface area you want to cover with it.  My suggestion is to use a **thin** film instead of a thick layer because it is flexible and therefore, easy to attach to the enclosure.  By the way, these things are actually super useful to have around if you are into DIY projets.
    
    [![Vynil Film](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/textured-vynil-film.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/textured-vynil-film.jpg)

* Cables and related materials:
  * 18x [Female-X Dupont/jumper wires](https://www.amazon.com/s?k=dupont+wires)

    The female side connects to GPIO pins and the other side can be whatever because is soldered to terminals or otherwise attached to them.
    
    [![Jumper Cables](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/jumper-cables.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/jumper-cables.jpg)

  * 06x [Heat shrink tube](https://www.amazon.com/s?k=heat+shrink+tube)

    Cut them in half to protect both terminals of each push button
    
    [![Heat Shrink Tube](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/heat-shrink-tube.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/heat-shrink-tube.jpg)

  * 01x [Electrical tape](https://www.amazon.com/s?k=electrical+tape)

    [![Electrical Tape](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/electrical-tape.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/electrical-tape.jpg)

* Other tools
  * [Basic soldering kit](https://www.amazon.com/s?k=soldering+kit)

    [![Soldering Kit](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/soldering-kit.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/soldering-kit.jpg)

  * Any low power drill or even a manual [hand drill](https://www.amazon.com/s?k=hand+drill): An electric drill will save you a lot of time.  For better results, use a step drill bit after making the center hole.

    [![Step Drill Bit](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/step-drill-bit.jpg){:.PostImage}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/step-drill-bit.jpg)  


[top](#){: .btn .btn--light-outline .btn--small}

# Software

* Operating System (OS):
  * [Raspberry Pi OS Lite](https://www.raspberrypi.org/software/operating-systems/): `Raspbian GNU/Linux 10 (buster)`, `lite edition`
    * Kernel: `5.4`
    * Release date: `December 2nd 2020`

* Button box controller:
  * [`rpi-button-box`](https://github.com/cgomesu/rpi-button-box): `1.0` 
    * A custom-made controller written in Python

* Controller requirements:
  * [Python](https://www.python.org): `3.7.3`
    * [`gpiozero`](https://gpiozero.readthedocs.io/en/stable/): An interface to GPIO devices
    * [`argparse`](https://docs.python.org/3/library/argparse.html), [`logging`](https://docs.python.org/3/library/logging.html), [`signal`](https://docs.python.org/3/library/signal.html), [`subprocess`](https://docs.python.org/3/library/subprocess.html): Standard, built-in libraries

* Optional:
  * [Logrotate](https://linux.die.net/man/8/logrotate): `3.14.0`
    * Manage the `button-box.log` log files generated by the controller

[top](#){: .btn .btn--light-outline .btn--small}

## `rpi-button-box` controller
&gt; Core program for a Raspberry Pi button box controller that uses the `gpiozero` Python library.

I wrote this program with the current project in mind--that is, a 40-pins Raspberry Pi with six push buttons and three switches, one of them being a power on/off for the box--but hopefully, my comments and documentation will be enough to allow adapting the program to multiple types of button boxes.  In this section, I'll explain the program's main logic and its functionalities.  The installation procedure and usage examples are described in [assembly](#assembly).

The `gpiozero` library is at the core of the button box controller.  The library makes it very easy to enable GPIO devices with just a few lines of code because it leaves much of the device configuration and cleanup procedures to the background.  All that we need to do is create objects for the GPIO devices of the appropriate class, which in our case is the [`Button`](https://gpiozero.readthedocs.io/en/stable/api_input.html#button) class and [`Buzzer`](https://gpiozero.readthedocs.io/en/stable/api_output.html#buzzer) class.

The `rpi-button-box` controller's main logic is explained next.
```python
def main():
  try:
    logging.basicConfig(filename='/opt/rpi-button-box/button-box.log', level=logging.INFO,
      format='%(asctime)s.%(msecs)03d %(levelname)s %(module)s : %(message)s',
      datefmt='%Y-%m-%d %H:%M:%S')
    logging.info('Started the button box controller')
    buttons = config_buttons()
```
* The program starts by configuring and initializing the logging of controller-related events, such as whether button `G1` was pressed, which `GPIO` pins are being used, and so on. Then, it asks `config_buttons` for a list of `buttons` to be used by the controller, as follows:

```python
def config_buttons():
  logging.info('Loading buttons...')
  Button.label, Button.type, Button.cmdheld, Button.cmdpressed, Button.cmdreleased = False, False, False, False, False
  g1, g1.label, g1.type, g1.cmdpressed, g1.cmdreleased = Button(26), 'green #1', 'push', args['g1_pressed'], args['g1_released']
  b1, b1.label, b1.type, b1.cmdpressed, b1.cmdreleased = Button(19), 'black #1', 'push', args['b1_pressed'], args['b1_released']
  r1, r1.label, r1.type, r1.cmdpressed, r1.cmdreleased = Button(13), 'red #1', 'push', args['r1_pressed'], args['r1_released']
  g2, g2.label, g2.type, g2.cmdpressed, g2.cmdreleased = Button(6), 'green #2', 'push', args['g2_pressed'], args['g2_released']
  b2, b2.label, b2.type, b2.cmdpressed, b2.cmdreleased = Button(5), 'black #2', 'push', args['b2_pressed'], args['b2_released']
  r2, r2.label, r2.type, r2.cmdpressed, r2.cmdreleased = Button(12), 'red #2', 'push', args['r2_pressed'], args['r2_released']
  s1, s1.label, s1.type, s1.cmdheld, s1.cmdreleased = Button(16, hold_time=2), 'power', 'switch', args['s1_held'], args['s1_released']
  s2, s2.label, s2.type, s2.cmdheld, s2.cmdreleased = Button(20, hold_time=2), 'middle S2', 'switch', args['s2_held'], args['s2_released']
  s3, s3.label, s3.type, s3.cmdheld, s3.cmdreleased = Button(21, hold_time=2), 'right S3', 'switch', args['s3_held'], args['s3_released']
  logging.info('Buttons loaded')
  return [g1, b1, r1, g2, b2, r2, s1, s2, s3]

```

* Notice that it starts by creating *new* attributes for the `Button` class, which are called `label`, `type`, and `cmd*`. I found this to be useful when working with multiple buttons because it allows me to define events on a *per button basis*.  For example, one might want to set different triggers for **switches** and **push buttons**, and the `type` attribute will help differentiate those.  Similarly, one might want to execute a different command for a button labeled `power` than a button labeled `reboot`.  It goes without saying that if your box does not follow the same layout as mine, you have to edit this part of the code.

* Going back to `main`:

```python
    logging.info('Trying to find a power switch...')
    for button in buttons:
      if button.label == 'power':
        logging.info('Power switch found at {}'.format(button.pin))
        if not button.is_active:
          print('Waiting for the power button ({}) to be turned ON...'.format(button.pin))
          button.wait_for_active()
          logging.info('Power switch was turned ON by user'.format(button.pin))
          sleep(button.hold_time)  # wait for the power button to enter is_held state
        break
```

* In my original design for the button box, I had a toggle, on/off `switch` labeled `power` that I wanted to use to **enable** and **disable** the button box controller.  The code above handles the activation of the button box depending on the state of a button labeled `power`.

```python
    push_buttons, switches = [], []
    for button in buttons:
      if button.type == 'switch':
        switches.append(button)
        button.when_held, button.when_released = event_held, event_released
        logging.info('Configured the switch button ({0}) at {1}'.format(button.label, button.pin))
      else:
        push_buttons.append(button)
        button.when_pressed, button.when_released = event_pressed, event_released
        logging.info('Configured the push button ({0}) at {1}'.format(button.label, button.pin))
```

* Here, the program learns what triggers each button.  As mentioend before, the `type` attr is used to set different triggers for `switch` and `push` buttons.

* Of note, `when_*` properties will pass the device that activated it to a function that takes a single parameter (`btn`), and because there are multiple new attributes for each button object, it is possible to use a single function to control all buttons by reading the `btn` attributes.  For example, take a look at the `event_held`, in which we have code for invoking an external command/script using the `btn.cmdheld` attribute:

```python
def event_held(btn):
  logging.info('The button labeled \'{0}\' at {1} was held'.format(btn.label, btn.pin))
  if args['debug']:
    print('Detected a HELD event by {0} : {1} button : {2}'.format(btn.pin, btn.type, btn.label))
  if btn.cmdheld:
    logging.info('Started running the following command: \'{}\''.format(btn.cmdheld))
    Popen(btn.cmdheld) if args['cmd'] == 'Popen' else run(btn.cmdheld)
    if args['debug']:
      print('Finished invoking the script at \'{}\''.format(btn.cmdheld))
    logging.info('Finished waiting for the following command: \'{}\''.format(btn.cmdheld))

```

* Going back to `main`:

```python
    if args['buzzer']:
      buzzer, buzzer.source = Buzzer(args['buzzer']), any_values(*push_buttons)
      logging.info('Configured a buzzer at {}'.format(buzzer.pin))
```

* This configures the `Buzzer` object to be activated whenever a `push` button is pressed.

```python
    print('The button box is now turned ON. To close it, release the power button or press Ctrl+C.')
    logging.info('The button box is ON and waiting for user input')
    pause()
  except KeyboardInterrupt:
    end(msg='Received a signal to stop.', status=1)
  except GPIOZeroError as err:
    end(msg='GPIOZero error: {}'.format(err), status=1)
```

* And finally, at the end of our main logic, the program is `pause`d to wait for a user input to trigger an event (`when_pressed`, `when_held`, `when_released`). This is a better alternative to using an infinite loop (`while True`).

There's a little bit more to the code than that but this covers the most important aspects of it. [Check the repo for updates](https://github.com/cgomesu/rpi-button-box), [start a discussion](https://github.com/cgomesu/rpi-button-box/discussions) if you had an idea, or [open an issue](https://github.com/cgomesu/rpi-button-box/issues) if you're having trouble with the program.  

# Assembly

## Installing the software

### Raspberry Pi OS
Follow [the official instructions to install the Raspberry Pi OS](https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up). If you don't feel like it, here's a brief summary:

1. Download the image file from the official repository.
2. Verify checksum.  On Linux distros, run the following, changing `img.zip` for the filename of the downloaded OS zipped image:
```
sha256sum img.zip
```
3. Flash onto a microSD card with [balenaEtcher](https://www.balena.io/etcher/) or similar application.
4. For headless access, add an empty `ssh` file to the root of the `boot` drive.
5. Insert the microSD card into the RPi and boot it up.
6. Find the RPi IP and `ssh` into it (`ssh pi@IP` and the default passwd is `raspberry`).
7. Config the RPi with `sudo raspi-config` (locale, time, wireless, etc.) then **reboot it**.
8. Reconnect to the RPi and update the package list &amp;&amp; upgrade all eligible pkgs, as follows:
```
sudo apt update &amp;&amp; sudo apt upgrade -y
```
9. Reboot the device once again and you're done!

### Python3, `rpi-button-box`, and installing the requirements
The button box controller was developed for the Lite version of the [Raspberry Pi OS](https://www.raspberrypi.org/software/) but it should work with other similar systems for single board computers (e.g., [Armbian](https://www.armbian.com/)).

The following instructions assume you're logged in with the `pi` user with `sudo` permission. (This is not a requirement but if different, make sure to change file permissions accordingly.  This applies to `systemd` service file and `logrotate/button-box` config as well.)

1. Use `apt` to install required programs
```
sudo apt update
sudo apt install git python3 python3-pip
```
2. Clone the `rpi-button-box` repo in `/opt`
```
cd /opt
sudo git clone https://github.com/cgomesu/rpi-button-box.git
sudo chown -R pi rpi-button-box
```
3. Install Python libraries from `requirements.txt`
```
pip3 install -r /opt/rpi-button-box/requirements.txt
```
* If you get a warning that `.local/bin` is not in your user's `$PATH`, then add it to your existing `$PATH` as follows:
  ```
  export PATH=/home/pi/.local/bin:$PATH
  ```
  and then append it to your user's `.bashrc`:
  ```
  echo &quot;export PATH=/home/pi/.local/bin:$PATH&quot; | tee -a /home/pi/.bashrc &gt; /dev/null
  ```
4. Test `button-box.py` and read its usage
```
cd /opt/rpi-button-box
./button-box.py -h
```
If you wish to skip to a more detailed description of the button box controller, go to [Using the button box controller](#using-the-button-box-controller) section in this tutorial.

### Configure logrotate
(Optional.) The `rpi-button-box` controller generates a `button-box.log` file upon execution where it stores a couple of controller-related messages, such as initialization configs and button presses, releases, and so on.  Over time, this file will grow forever unless you manually rotate it.  Obviously, you don't need to do that.  The easiest way to rotate log files in a GNU/Linux system is to configure [logrotate](#) to manage your log files.  I've already written such a config file for the button box controller (see `logrotate.d/button-box`).  To enable it, just copy the config to your `/etc/logrotate.d/` directory, as follows
```
sudo cp /opt/rpi-button-box/logrotate.d/button-box /etc/logrotate.d/
```
If you want, you can edit the rotation settings in `button-box`.  The default should be good enough though.

## Building the button box
**ATTENTION.**  If you have never used a drill before, take a few minutes to learn about best practices first.  When drilling holes into the case, make sure to secure the case very well before you begin.  When soldering cables to terminals, use a fan to move the fumes away from you and anyone else.  Wash your hands very well afterwards.
{: .notice .notice--danger}

**REMINDER.**  Inside the button box, stick to **low voltage DC**.  External HDD enclosures were not made to house mains power and unless you have taken the time to learn how to handle it, do not tinker with it.
{: .notice .notice--warning}

After the [assessment](#assessment), it's DIY time.

* Start by drawing the location of each button on the box.  Use a ruler and pencil.

[![Drawing](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-drawing.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-drawing.jpg)

* Then, drill the holes and check that the buttons fit them.

* Cut the vynil film and attach it to the surface of your button box.  

* Find the holes by gently pressing the surface of the vynil film.  Then, get a scissors or other cutting tool and either cut a circle where the hole is or cut an X where the hole is and fold the vynil film inwards.

* Attach the buttons to the enclosure.  It should look like this now:

[![Buttons](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-buttons.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-buttons.jpg)

* Flip the case and it's time to solder the jumper cables to each button terminal.

* Tricks for working with dupont cables: 
  {% include video id=&quot;eI3fxTH6f6I&quot; provider=&quot;youtube&quot; %}

* Because the buttons use a common ground, you *could* solder them together (terminal to terminal or splicing). However, if you want to reuse the buttons for another project in the future, or simply replace one of them, this will make it much harder to do that.  I wanted to make each button detachable without any desoldering, so I used the following idea for a custom-made header:
  {% include video id=&quot;OC3aAuhU3og&quot; provider=&quot;youtube&quot; %}

* If your heat shrinking tubes are pretty long, cut them.  Also, remember to insert the tubes into the cable before soldering.  (For a hobbyist like me, it's very easy to forget that. Ugh!)
  
* If at all possible, use different colors for ground (black, grey) and live/vcc (any thing else).

* After it's all done, it should look like this:

[![Soldered Cables](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering.jpg)

[![Soldered Cables 2](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering-2.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering-2.jpg)

* If you have a [multimeter](https://www.amazon.com/s?k=multimeter), **test all your connections**.

* Connect the dupont cables to the RPi GPIO pins according to the following wiring schema:

[![Wiring](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/button-box-wiring.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/button-box-wiring.jpg)

This uses the **internal pull-up resistor** to simplify the wiring ([enabled by default in the `Button` class of the `gpiozero` Python library](https://gpiozero.readthedocs.io/en/stable/_modules/gpiozero/input_devices.html)). Otherwise, check the wiring on my [`rpi-buttons`](https://github.com/cgomesu/rpi-buttons) repo for an example of how to wire **current-limiting** (1k ohms) resistors and **pull-down** (10k ohms) resistors.  However, if you choose the latter alternative, you'll have to change the `gpiozero` deafult settings for the `Button` class. 
{: .notice .notice--info}

* Secure the cables as much as possible:

[![Securing the Cables](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-secure.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-secure.jpg)

* **Before closing the box**, [test your button box controller](#using-the-button-box-controller).  Remember that once closed, these cases are not meant to be (easily) opened.  If there's anything that needs to be connected to the Raspberry Pi, this is the time to do so.  For example, I wanted to make extra GPIO pins available to an LCD and added power and ethernet cable extensions:

[![Extra Cables](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-extra-cables.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-extra-cables.jpg)

* **Once you got everything working as intended**, close the box.  Try to leave the area where the cpu heatsink is as clear as possible.  Be gentle when closing the box and guide the cables where they should be while closing the box (use a pen or something).

[![RPi and buttons - Closed 01](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg) 

* Go play with it!

## Using the button box controller

### Usage
```
./button-box.py -h
```
```
usage: button-box.py [-h] [--buzzer BUZZER] [--cmd {Popen,run}]
                     [--g1_pressed G1_PRESSED] [--g1_released G1_RELEASED]
                     [--s1_held S1_HELD] [--s1_released S1_RELEASED] [-i] [-d]

RPi button box controller. Repo: https://github.com/cgomesu/rpi-button-box

optional arguments:
  -h, --help            show this help message and exit
  --buzzer BUZZER       If installed, the buzzer's GPIO number.
  --cmd {Popen,run}     Popen: run external scripts in a NON-BLOCKING fashion.
                        run: run external scripts in a BLOCKING fashion.
                        Default=run
  --g1_pressed G1_PRESSED
                        /path/to/script to run when G1 is pressed. The
                        --btn_pressed arg is available to other PUSH buttons
                        as well.
  --g1_released G1_RELEASED
                        /path/to/script to run when G1 is released. The
                        --btn_released arg is available to other PUSH buttons
                        as well.
  --s1_held S1_HELD     /path/to/script to run when S1 is held. The
                        --btn_held arg is available to other SWITCHES as well.
  --s1_released S1_RELEASED
                        /path/to/script to run when S1 is released. The
                        --btn_released arg is available to other SWITCHES as
                        well.
  -i, --info            Show the board information.
  -d, --debug           Print additional messages to the terminal.
```

As mentioned, there are **hidden arguments** for passing external scripts to be executed upon a button event, such as pressing `G2`, or releasing `S3`.  More specifically, in addition to `--g1_*` and `--s1_*` args shown in the help output, the program accepts args for any of the other seven buttons, as follows:

* script for `pressed` and `released` events: the **push buttons** `--g1_*`, `--b1_*`, `--r1_*`, `--g2_*`, `--b2_*`, and `--r2_*`,
* script for `held` and `released` events: the **switches** `--s1_*`, `--s2_*`, and `--s3_*`.

The script generates a `button-box.log` log file to keep track of controller-related events.

### Examples
* Output info about the board
```
./button-box.py -i
```

* Run the controller in debug mode (prints more messages to the terminal) and enable the buzzer (`GPIO4`)
```
./button-box.py -d --buzzer 4
```

* Run the controller with a buzzer and execute `/opt/rpi-button-box/scripts/template.sh` whenever the push button `R2` is **pressed**:
```
./button-box.py --buzzer 4 \
--r2_pressed '/opt/rpi-button-box/scripts/template.sh'
```

* Same as before, but don't wait for the external script to finish running (**non-blocking** command execution):
```
./button-box.py --buzzer 4 --cmd Popen \
--r2_pressed '/opt/rpi-button-box/scripts/template.sh'
```

### Run the controller as a service
If you're using options different than the default values, first edit the `systemd/button-box.service` file to include those options into the `ExecStart=` command execution.  (Reminder: If you've installed Python3 libraries with a user different than `pi` and the `rpi-button-box` dir is owned by another user, you'll have to edit the `systemd/button-box.service` file to reflect such changes. Otherwise, you will run into errors related to permission.) Then, run `button-box.py` as a service, as follows:

1. Copy the `systemd/button-box.service` file to your systemd directory
```
sudo cp /opt/rpi-button-box/systemd/button-box.service /lib/systemd/system/
```
2. Enable the service and start it
```
sudo systemctl enable button-box.service
sudo systemctl start button-box.service
```
3. Check the service status to make sure it's running without issues
```
systemctl status button-box.service
```

### Bash script template
I've included a template for bash scripts on `scripts/template.sh` that anyone can use to create their customized set of commands to run upon a button event.  Just copy the template, rename it, edit it according to your needs, and when running the `button-box.py` controller, add the full path to the new script to one (or more) of the `--btn_*` arguments.  For example:
```
./button-box.py --buzzer 4 \
--g1_pressed '/opt/rpi-button-box/scripts/notification.sh' \
--b1_pressed '/opt/rpi-button-box/scripts/switch_cameras.sh' \
--r1_pressed '/opt/rpi-button-box/scripts/lights_toggle.sh' \
--g2_pressed '/opt/rpi-button-box/scripts/test_connectivity.sh' \
--b2_pressed '/opt/rpi-button-box/scripts/shutdown.sh' \
--r2_pressed '/opt/rpi-button-box/scripts/reboot.sh' \
--s2_held '/opt/rpi-button-box/scripts/alarm_on.sh' \
--s2_released '/opt/rpi-button-box/scripts/alarm_off.sh' \
--s3_held '/opt/rpi-button-box/scripts/emergency.sh'
```

## Alternatives to Python
There are many other languages you can use to make your own button box controller. [**Node-RED**](https://nodered.org/), for example, is a nice alternative to users unfamiliarized with programming languages.  It uses flow-based programming and has built-in input nodes for the RPi GPIO pins, which makes programming a button box a matter of connecting a line between two nodes.  Also, it makes very easy to create a web dashboard for your button-box that you can access from anywhere.  Check it out.

[top](#){: .btn .btn--light-outline .btn--small}

# Conclusion
This conlcudes the tutorial on how to repurpose an old external HDD enclosure into a button box for the Raspberry Pi (or any other SBC).  Check the [changelog](#changelog) for updates.  If you have any questions, feel free to [get in touch with me](/contact/).  For anything related to the controller, please visit the [rpi-button-box repo](https://github.com/cgomesu/rpi-button-box).

[top](#){: .btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="DIY" /><category term="raspberrypi" /><category term="rpi" /><category term="hdd" /><category term="enclosure" /><category term="button" /><category term="box" /></entry><entry><title type="html">Mesh networking: A guide to using free and open-source software with common hardware</title><link href="/blog/Mesh-networking-openwrt-batman/" rel="alternate" type="text/html" title="Mesh networking: A guide to using free and open-source software with common hardware" /><published>2020-12-07T12:10:00-03:00</published><updated>2020-12-07T12:10:00-03:00</updated><id>/blog/Mesh-networking-openwrt-batman</id><content type="html" xml:base="/blog/Mesh-networking-openwrt-batman/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;September 16th, 2021&lt;/strong&gt;: Updated the information about OpenWrt 21 in the section &lt;a href=&quot;#bonus-content-moving-from-openwrt-19-to-21&quot;&gt;&lt;strong&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/strong&gt;&lt;/a&gt;.  In brief, DSA support is still very limited and OpenWrt has officially started rolling out version 21 with the &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0&quot;&gt;release of OpenWrt 21.02&lt;/a&gt;. I’m currently testing the new version and network configuration on a few devices and once I get everything running as well as it was in version 19, I will update the entire article to reflect the new (and current) configuration.  It is, of course, still possible to download and use &lt;a href=&quot;https://downloads.openwrt.org/releases/19.07.8/targets/&quot;&gt;the latest OpenWrt 19 images&lt;/a&gt;, which should be just fine for a long time still.  However, if you want to make use of OpenWrt 21, then read the aforementioned bonus section for guidance on the syntax changes and updated hardware requirements.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 6th, 2021&lt;/strong&gt;: Added information about transitioning from OpenWrt 19 (current stable release) to OpenWrt 21 (next stable release) to a new section called &lt;a href=&quot;#bonus-content-moving-from-openwrt-19-to-21&quot;&gt;&lt;strong&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/strong&gt;&lt;/a&gt;.  In brief, the &lt;em&gt;next&lt;/em&gt; stable release includes changes to the network configuration syntax that are incompatible with this guide.  Once the release version 21 becomes the &lt;em&gt;current&lt;/em&gt; stable, however, I will update the main guide to reflect those changes.  In the meantime, I added a few references to the OpenWrt forum that should help anyone interested in using version 21 instead of 19.  Thanks to &lt;a href=&quot;https://forum.openwrt.org/u/SteveNewcomb&quot;&gt;Steve&lt;/a&gt; for testing and sharing his &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; configuration running on OpenWrt 21.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Feb 17th, 2021&lt;/strong&gt;: Per a reader’s suggestion (Joshua), I added a &lt;a href=&quot;#vi-cheat-table&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; cheat table&lt;/a&gt; that has a summary of the main commands, and in the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/a&gt; section, I included additional instructions on how to copy and paste the configuration files from one mesh node to another using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;.  (Alternatively, it’s also possible to do so using Luci’s backup/restore option.)&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 9th, 2021&lt;/strong&gt;, Update #2: Added instructions on how to automatically upgrade all installed packages with a single command.  This information is in &lt;a href=&quot;#updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 9th, 2021&lt;/strong&gt;, Update #1: Added a new section about &lt;a href=&quot;#hardware-specific-configurations&quot;&gt;hardware-specific configurations&lt;/a&gt; that are sometimes required for enabling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode of operation.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Dec 7th, 2020&lt;/strong&gt;: Publication of the original guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this tutorial, we will learn how to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;&lt;strong&gt;mesh networks&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;IEEE 802.11s&lt;/strong&gt;&lt;/a&gt;) using &lt;a href=&quot;https://openwrt.org/&quot;&gt;&lt;strong&gt;OpenWrt&lt;/strong&gt;&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_link_layer&quot;&gt;layer-2&lt;/a&gt; implementation of the &lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;, called &lt;a href=&quot;https://www.kernel.org/doc/html/v4.15/networking/batman-adv.html&quot;&gt;&lt;strong&gt;batman-adv&lt;/strong&gt;&lt;/a&gt;.  All the software mentioned here is &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;open-source&lt;/strong&gt;, as opposed to commercial alternatives (&lt;a href=&quot;https://unifi-mesh.ui.com&quot;&gt;UniFi Mesh&lt;/a&gt; or &lt;a href=&quot;https://store.google.com/us/product/nest_wifi&quot;&gt;Google’s Nest Wifi&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is not meant to be an exhaustive presentation of any of the covered topics. If you have suggestions on how to improve this guide, feel free to &lt;a href=&quot;/contact/&quot;&gt;get in touch with me&lt;/a&gt;. I’m always eager to learn new things and share them. Also, I plan on updating this article every once in a while to best reflect my knowledge about the topics covered here and to add information provided by the readers. Check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-am-i-writing-this-guide&quot;&gt;Why am I writing this guide?&lt;/h1&gt;
&lt;p&gt;Even though the concept of mesh networking has been around for quite some time now, the documentation of its implementation is still scarce/nichey, proprietary, or outdated.  I don’t feel qualified to speculate on why this is so but I find it odd because many of the radio devices found in popular wireless routers actually support mesh networking–but the original firmware rarely supports it.&lt;/p&gt;

&lt;p&gt;My intention with this tutorial is to help closing the gap between concept and implementation of mesh networking using up-to-date software that anyone can download and install on cheap, commonly available hardware–primarily consumer wireless routers (from old to new, single- or multi-band) but the principles should be extendable to any cellphones, laptops, PCs or servers running &lt;strong&gt;Linux&lt;/strong&gt;.  The content is partially based on my own experience and builds upon the work of other, much more talented individuals who shared their knowledge on the Web.  More specifically, the content is notably influenced by the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brian Innes workshop about using Raspberry Pis to create a mesh network for sharing sensor data wirelessly (&lt;a href=&quot;https://github.com/binnes/WiFiMeshRaspberryPi&quot;&gt;Github repo&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Andreas Spiess &lt;a href=&quot;https://www.youtube.com/watch?v=TY6m6fS8bxU&quot;&gt;LoRa mesh project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maintaners of the &lt;a href=&quot;https://openwrt.org/docs/start&quot;&gt;OpenWRT documentation&lt;/a&gt; and the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;B.A.T.M.A.N. wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Multiple users from the OpenWrt forum who shared their opinions over the years. To name a few,  the users &lt;a href=&quot;https://forum.openwrt.org/u/jeff&quot;&gt;jeff&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/mcarni&quot;&gt;mcarni&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/oavaldezi&quot;&gt;oavaldezi&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/slh&quot;&gt;slh&lt;/a&gt;, and many others. Thanks for keeping the posts public.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Get familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; files in OpenWrt devices (namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireless&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;) to quickly and permanently configure mesh nodes.&lt;/li&gt;
  &lt;li&gt;Edit files directly from the terminal using the default text editor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Configure OpenWrt devices to play one of three possible roles in the network: (a) mesh node, (b) mesh + bridge node, or (c) mesh + gateway node.&lt;/li&gt;
  &lt;li&gt;Install and configure the Kernel module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on an OpenWrt device using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt; package manager.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to test, debug, and monitor connectivity within the mesh.&lt;/li&gt;
  &lt;li&gt;Add encryption to the mesh network with the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use VLANs to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; networks within the mesh using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;From this point forward, the article is divided into four main parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/a&gt;: &lt;em&gt;Optional for advanced users.&lt;/em&gt; Brief introduction to just enough network concepts to allow the implementation of simple mesh networks. When appropriate, a link to the relevant OpenWrt documentation was also provided.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the hardware used in the examples and recommendations for those who are planning on buying new/used devices for their mesh project.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the software used in the examples.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt;: &lt;em&gt;Required&lt;/em&gt;. Step-by-step procedure to configure mesh nodes, bridges, and gateways.  It goes from flashing OpenWrt to configuring VLANs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;. You probably came here for this part.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/h1&gt;

&lt;h2 id=&quot;main-network-definitions&quot;&gt;Main network definitions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mesh &lt;a href=&quot;https://en.wikipedia.org/wiki/Node_(networking)&quot;&gt;node&lt;/a&gt;: Any network device that is connected to the mesh network and that helps routing data to (and from) mesh clients.  Here, however, if a mesh node acts as a bridge or gateway, it will always be referred by the latter role, even though by definition, mesh bridges and mesh gateways are also mesh nodes.&lt;br /&gt;
In addition, even though it’s possible to route mesh traffic via cable, in this tutorial, &lt;em&gt;all mesh nodes are also wireless devices&lt;/em&gt;, meaning that they have access to a radio with &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;mesh point&lt;/strong&gt; (802.11s)&lt;/a&gt; capabilities.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;Learn about the OpenWrt wireless config &lt;strong&gt;/etc/config/wireless&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridging_(networking)&quot;&gt;Bridge&lt;/a&gt;: A network device that joins any two or more network interfaces (e.g., LAN ethernet and wireless) into a single network.  Here, when a device is referred to as a bridge, it means that in addition to being a mesh node, the only other thing it does is bridge interfaces.  But of course, a gateway &lt;em&gt;device&lt;/em&gt;, such as a router with a built-in modem, or a firewall appliance, may also work as a bridge for multiple interfaces. The distinction in the examples is just used to highlight its main role in the network.  Therefore, a mesh bridge in this tutorial is a mesh node that simply bridges the mesh network with a WiFi access point  for non-mesh clients, for example, or its LAN ports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gateway_(telecommunications)&quot;&gt;Gateway&lt;/a&gt;: A network device that translates traffic from one network (LAN) to another (WAN) and here, acts as both a &lt;strong&gt;firewall&lt;/strong&gt; and &lt;strong&gt;DHCP server&lt;/strong&gt;.  (If there’s more than one DHCP server in the same network, they assign IPs to different ranges, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.1-100&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.101-200&lt;/code&gt;, and so on.)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;Learn about the OpenWrt network config &lt;strong&gt;/etc/config/network&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt;: In brief, a system for translating domain names (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgomesu.com&lt;/code&gt;) into IP addresses (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.108.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.109.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.110.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.111.153&lt;/code&gt;). DNS filtering systems, such as &lt;a href=&quot;https://pi-hole.net/&quot;&gt;PiHole&lt;/a&gt;, work by catching such requests–usually sent through port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt;–and checking if the domain is blacklisted or not.  In this tutorial, we will always use an external DNS server, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.1.1.1&lt;/code&gt; (Cloudflare) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt; (Google), but if you have your own DNS resolver, feel free to use it instead when configuring your mesh network but then make sure the mesh network/VLAN has access to its address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&quot;&gt;DHCP&lt;/a&gt;: An IP management system that dynamically assigns layer-3 addresses for devices connected to a network. For instance, it might dynamically assign IPs between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.255&lt;/code&gt; (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) to any devices connected to LAN. Of note, because this is a network layer protocol, it uses IP addresses, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; uses MAC addresses because it works at the data link layer (and therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; actually doesn’t need DHCP and IPs to discover and manage mesh clients but we’re going to use them to make it more intuitive and easier to integrate mesh with non-mesh clients).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;Learn about the OpenWrt DNS and DHCP config &lt;strong&gt;/etc/config/dhcp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Firewall_(computing)&quot;&gt;Firewall&lt;/a&gt;: A network system that monitors and controls network traffic, such as specifying rules for incoming WAN traffic (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deny all&lt;/code&gt;), outgoing LAN traffic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept all&lt;/code&gt;), geoblocking and IP filtering systems, intrusion prevention/detection systems (&lt;a href=&quot;https://suricata-ids.org/&quot;&gt;Suricata&lt;/a&gt;), and so on.  &lt;a href=&quot;https://opnsense.org/&quot;&gt;OpenSense&lt;/a&gt; and &lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense&lt;/a&gt; are examples of dedicated firewall software. If a mesh node is acting as a mesh gateway, it’s imperative to configure the firewall or your mesh network will likely end up without access to external networks (e.g., WAN) and their services (e.g., DNS servers).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;Learn about the OpenWrt firewall config &lt;strong&gt;/etc/config/firewall&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_LAN&quot;&gt;VLAN&lt;/a&gt;: A &lt;em&gt;virtual&lt;/em&gt; LAN that is partitioned and isolated in a network at the layer-2 level.  They are often followed by an integer to differentiate each other (e.g., VLAN 1, VLAN 50) and used to better manage network clients that belong to different groups (e.g., administrators, IoT devices, security cameras, guests).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-topologies&quot;&gt;Network topologies&lt;/h2&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zbqrNg4C98U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;mesh-networks&quot;&gt;Mesh networks&lt;/h2&gt;

&lt;h3 id=&quot;what-are-mesh-networks&quot;&gt;What are mesh networks?&lt;/h3&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/tYLU755T6_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;where-can-i-learn-more-about-mesh-networking&quot;&gt;Where can I learn more about mesh networking?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Wikipedia articles about &lt;a href=&quot;https://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;mesh networking&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;wireless mesh networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scholar.google.com/scholar?q=mesh+networking&quot;&gt;Peer-reviewed papers or books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing-protocols&quot;&gt;Routing protocols&lt;/h3&gt;
&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network#Protocols&quot;&gt;dozens of algorithms&lt;/a&gt; for routing packets in a mesh network.  A few notable ones are the Optimized Link State Routing (OLSR) and the Hybrid Wireless Mesh Protocol (HWMP).&lt;/p&gt;

&lt;p&gt;In this tutorial, however, we will cover only one of them, called &lt;a href=&quot;https://en.wikipedia.org/wiki/B.A.T.M.A.N.&quot;&gt;&lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;B.A.T.M.A.N.&lt;/strong&gt;), because &lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/batman-adv.html&quot;&gt;it has long been incorporated into the Linux Kernel&lt;/a&gt; and is thus easily enabled on Linux devices.  It is also a &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;fairly well-documented&lt;/a&gt; algorithm that &lt;a href=&quot;https://www.open-mesh.org/projects/open-mesh/activity&quot;&gt;has been continuously improved&lt;/a&gt; over the years.  Another noteworthy feature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; is its lack of reliance on layer-3 protocols for managing mesh clients because it works at the layer-2 and its ability to create VLANs.  Think of it as if it were a big, smart, virtual switch, in which its VLANs are port-based segmentations.  If you want an interface to use a particular mesh VLAN, just “plug it” into the approriate port of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; switch (e.g., bridge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-guest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; to give the guest network access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN 2).&lt;/p&gt;

&lt;h4 id=&quot;batman-adv&quot;&gt;batman-adv&lt;/h4&gt;
&lt;p&gt;As mentioned before, B.A.T.M.A.N. has gone through multiple changes over the years, which means that there are actually &lt;em&gt;multiple versions of the algorithm&lt;/em&gt;. I’ve had a good experience with &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/BATMAN_IV&quot;&gt;&lt;strong&gt;B.A.T.M.A.N. IV&lt;/strong&gt;&lt;/a&gt; and therefore, the examples here make use of it.  However, you are free to try whatever version you want and even run them in parallel to each other, by assigning a different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface to each version of the algorithm (versions are chosen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option routing_algo&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file for each enabled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface).&lt;/p&gt;

&lt;p&gt;Config-wise, there’s very little to do because the default settings should work very well in most environments.  One exception is when you have multiple gateways in the network to provide high availability, for example, and you might want to let each mesh node know about them and their speeds to better route the mesh traffic.  This requires setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt;, for example.  Many other tweaks that are not covered here are &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Doc-overview#Protocol-Documentation&quot;&gt;described in their wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;batctl&quot;&gt;batctl&lt;/h4&gt;
&lt;p&gt;Another very cool feature of B.A.T.M.A.N. is the ability to test, debug, monitor, and set settings with the package &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;&lt;/a&gt;.  A few noteworthy options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ping mesh node/client with its MAC address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:00&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/tcpdump&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;&lt;/a&gt; for all mesh traffic in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Prints useful stats for all mesh traffic, such as sent and received bytes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Shows the neighboring mesh nodes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Displays the gateway servers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt;) in the mesh network
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl gwl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It goes without saying that if you want to dive deep into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, you should take a good look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes used in the various implementations had the following hardware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;: &lt;a href=&quot;https://www.tp-link.com/us/home-networking/wifi-router/tl-wr1043nd/&quot;&gt;TP-Link WR-1043ND&lt;/a&gt; v1.8&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Architecture&lt;/strong&gt;: Atheros AR9132 rev 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-wr1043nd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-wr1043nd.jpg&quot; alt=&quot;TP-Link 1043nd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was mainly a matter of convenience–I had a few lying around and they are very, very cheap–and because the examples in the OpenWrt documentation often refer to them as well, so the community support is good.&lt;/p&gt;

&lt;p&gt;However, the general ideas presented here should apply to &lt;strong&gt;any wireless device&lt;/strong&gt; that meets the following criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compatible with the latest OpenWRT version. Refer to their &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Hardware List&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has access to a radio that supports the &lt;strong&gt;mesh point&lt;/strong&gt; (&lt;strong&gt;802.11s&lt;/strong&gt;) mode of operation. If you already have OpenWrt installed on a wireless device, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt; and search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; under &lt;strong&gt;Supported interface modes&lt;/strong&gt;, or simply check if the following command outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* mesh point&lt;/code&gt; below the name of a detected radio (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy1&lt;/code&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list | grep -ix &quot;^wiphy.*\|^.*mesh point$&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If it does, then the associated radio can be configured as a mesh point.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you’re looking for devices to buy and experiment on, my suggestion is to look for dual-band wireless routers to allow a better segmentation of the wireless networks.  If you can afford spending more for a mesh node, look for tri-band devices.  Netgear and Linksys have solid options that are compatible with OpenWrt. For example, the Linksys WRT1900AC (v1/v2) dual-band wireless router would make for a good mesh node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-wrt1900ac.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-wrt1900ac.jpg&quot; alt=&quot;Linksys WRT1900AC&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For single-board computer (SBC) fans like me, you can run OpenWrt with most of them and then use a combination of on-board wireless and USB adapter to create a powerful mesh node. &lt;a href=&quot;https://shop.solid-run.com/product-category/embedded-computers/marvell-family/clearfog-base-pro/&quot;&gt;ClearFog boards&lt;/a&gt; with one or two mini PCIe wireless cards would make very good candidates for such a project, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot; alt=&quot;ClearFog Pro&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you can install OpenWrt on bare metal x86-64 machines (e.g., standard PC or server running Intel/AMD), which will give you lots of options to put together an impressive mesh device. However, if you just want your work/home laptops/PCs to &lt;em&gt;be part of the mesh&lt;/em&gt; (i.e., become a mesh node), there are better alternatives than installing OpenWrt as its OS.  For example, you can run OpenWrt with a &lt;a href=&quot;https://openwrt.org/docs/guide-user/virtualization/start&quot;&gt;virtual machine&lt;/a&gt; or as a &lt;a href=&quot;https://github.com/openwrt/docker&quot;&gt;docker container&lt;/a&gt;.  Naturally, it’s also possible to configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on Linux distributions other than OpenWrt, such as Arch, Debian, and Ubuntu.  See &lt;a href=&quot;#getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on any Linux device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned before, even if the existing/on-board radio of your SBC/laptop/PC/server does not support the mesh point mode of operation, you can always buy a compatible PCIe card or USB adapter to turn your device into a mesh node and then use the other radio for another purpose.  For example, many &lt;a href=&quot;https://www.alfa.com.tw/&quot;&gt;Alfa Network&lt;/a&gt; adapters can operate in mesh point mode, like the cheap AWUS036NH:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot; alt=&quot;Alfa AWUS036NH&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All that said&lt;/strong&gt;, most home users will be &lt;strong&gt;just fine with a cheapo, used, old, single-band router&lt;/strong&gt;.  For a brand reference, TP-Link has good and affordable devices that can be used in a mesh networking project without issues.  If you’re new to this, start from here (small, simple) and think about efficiency over power.  You don’t need to drive a Lamborghini to get a snack at the grocery store.&lt;/p&gt;

&lt;h2 id=&quot;hardware-specific-configurations&quot;&gt;Hardware-specific configurations&lt;/h2&gt;
&lt;p&gt;Every once in a while, I run into hardware that is capable of operating in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode but the default OpenWrt firmware uses a module for the wireless adapter that is loaded with incompatible parameters.  Here is a list of a few of the known ones and their solution.&lt;/p&gt;

&lt;h3 id=&quot;ath9k-modules&quot;&gt;ath9k modules&lt;/h3&gt;
&lt;p&gt;If your device uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt; module, there’s a chance that you’ll need to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; parameter of the module to use the mesh &lt;em&gt;with encryption&lt;/em&gt;.  First, however, try without changing the default module parameters.  After rulling out possible typos in the network and wireless configuration files, try the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules.d/ath9k&lt;/code&gt; file and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt=1&lt;/code&gt; to it.  If there’s something in the file, use a whitespace to separate parameters.&lt;/li&gt;
  &lt;li&gt;Save the file, and &lt;strong&gt;reboot&lt;/strong&gt; your device.&lt;/li&gt;
  &lt;li&gt;Once the device comes back, check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is now enabled by typing
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /sys/module/ath9k/parameters/nohwcrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is enabled, the output will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;; otherwise, it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check your mesh configuration once again and add encryption to your wireless mesh stanza.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Known affected devices:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;brand&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;model&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;WR-1043-ND&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1.8&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ath10k-modules&quot;&gt;ath10k modules&lt;/h3&gt;
&lt;p&gt;I’ve noticed that radio devices that use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; module and more specifically, the ones using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k-firmware-qca988x-ct&lt;/code&gt;, are not able to operate in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode by default.  If you check the syslog, you’ll notice that there will be a few messages stating that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; module must be loaded with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rawmode=1&lt;/code&gt; to allow mesh.  However, I’ve tried that before without much success.  Instead, my current recommendation to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; working with the &lt;strong&gt;QCA988x&lt;/strong&gt; is the following (&lt;strong&gt;Internet connection required&lt;/strong&gt; to download packages via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt;):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Remove the &lt;strong&gt;Candela Tech&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-ct&lt;/code&gt;) modules as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove ath10k-firmware-qca988x-ct kmod-ath10k-ct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the non-ct modules:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update &amp;amp;&amp;amp; opkg install ath10k-firmware-qca988x kmod-ath10k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot your device and then check the status of your mesh network.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Known affected devices:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;brand&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;model&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Archer C7&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Archer C7 (US)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes were running the following software:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot; alt=&quot;OpenWrt default SSH welcome&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Operating System&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Firmware&lt;/strong&gt;: OpenWrt 19.07.4 r11208-ce6496d796&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Linux kernel&lt;/strong&gt;: 4.14.195&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Packages mentioned in the tutorial&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/batctl-default&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;&lt;/a&gt;: 2019.2-7&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/kmod-batman-adv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;&lt;/a&gt;: 4.14.195+2019.2-9&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/wpad-mesh-openssl&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;&lt;/a&gt;: 2019-08-08-ca8c2bd2-4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find out the version of all installed packages, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you prefer to filter the output, use grep.  For example, the following will show the version of all installed packages containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed | grep bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Huge differences in firmware, kernel, or package versions &lt;em&gt;might&lt;/em&gt; make the implementation of a mesh network a little bit different than the way it was explained here.  Of note, devices running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; &lt;strong&gt;version 2019.0-2 and older&lt;/strong&gt; are certainly incompatible with the instructions found in this tutorial, the reason being that the module was modified after then to better integrate with the &lt;a href=&quot;https://openwrt.org/docs/techref/netifd&quot;&gt;network interface daemon&lt;/a&gt;.  Fortunately, the implementation using old modules is just a simple as with the latest one. &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Batman-adv-openwrt-config#Batman-adv-20190-2-and-older&quot;&gt;Check what the B.A.T.M.A.N. wiki has to say about it&lt;/a&gt;.  However, it’s worth mentioning that with old batman modules, changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; will likely require a reboot instead of simply reloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/init.d/network&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I’ve noticed that when installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will install a minimal version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-tiny&lt;/code&gt;, that lacks some of the options mentioned here (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batnctl o&lt;/code&gt;).  However, if you install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; first and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will preserve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;, which is the package used in this tutorial and that has all the options referred to in the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;batctl man page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt; will conflict with the already installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package.  This means &lt;strong&gt;you have to remove the latter before installing the former&lt;/strong&gt;.  To remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package, simply type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vi-text-editor&quot;&gt;VI text editor&lt;/h2&gt;
&lt;p&gt;The default text editor in a standard OpenWrt image is &lt;a href=&quot;https://en.wikipedia.org/wiki/Vi&quot;&gt;&lt;strong&gt;vi&lt;/strong&gt;&lt;/a&gt;, which is an old, screen oriented editor that most modern users will find counterintuitive to use.  Fortunately, once you get the hang of it, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; becomes very easy to use and it becomes a very convenient way of editing config files.  Here’s all that you need to know about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in a terminal:&lt;/p&gt;

&lt;p&gt;You can open a file by adding the filename as an argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if the file does not exist, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will create one with that name.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will start in &lt;strong&gt;command mode&lt;/strong&gt;.  Such a mode let’s you navigate the file with the arrow keys and use the &lt;em&gt;delete button&lt;/em&gt; to delete characters.  (Also, in command mode, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; to delete entire lines, which is very useful if you need to delete lots of things quickly.)&lt;/p&gt;

&lt;p&gt;However, if you need to type characters and have more flexibility to edit the file, you need to tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; to enter &lt;strong&gt;insert mode&lt;/strong&gt;.  To enter insert mode, type (no need to hit return/enter afterwards)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the bottom of the screen, you will see that it now shows a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; to indicate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; is in insert mode.  You can now type freely and even paste multiple things at once in insert mode.&lt;/p&gt;

&lt;p&gt;When you’re done, press the button &lt;strong&gt;Esc&lt;/strong&gt; to go back into command mode.  Notice that at the bottom of the screen, now there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; was, which tells you you’re in command mode once again.&lt;/p&gt;

&lt;p&gt;In command mode, you can then &lt;strong&gt;write changes to the file&lt;/strong&gt; by typing (followed by return/enter)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ve saved the file. To quit, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can &lt;em&gt;write and quit&lt;/em&gt; by simply typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; has other commands as well but honestly, that’s pretty much all that you need to know about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in order to use in the examples covered here.  Give it a try!&lt;/p&gt;

&lt;h3 id=&quot;vi-cheat-table&quot;&gt;VI cheat table&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mode&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;key/command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Enter &lt;em&gt;insert&lt;/em&gt; mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;insert&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Esc&lt;/code&gt; key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Return to &lt;em&gt;command&lt;/em&gt; mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; (or hold &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; key)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Erase entire row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Write to file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quit to terminal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quit without saving changes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Write to file and quit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;alternatives-to-vi&quot;&gt;Alternatives to VI&lt;/h3&gt;
&lt;p&gt;Now, if you still don’t like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, you can always transfer files from your laptop/PC to OpenWrt via sftp, for example, or utilities like &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_copy_protocol&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;In this section, we will see how to configure &lt;strong&gt;four mesh nodes&lt;/strong&gt; in &lt;strong&gt;three different network topologies&lt;/strong&gt;. More specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Bridge&lt;/strong&gt;: A mesh network in which one node plays the role of a mesh gateway and another, of a bridge, while the remaining are just mesh nodes.  This is a very typical scenario for a home or small office, for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bridge-Bridge&lt;/strong&gt;: Two nodes play the role of a bridge, therefore making the mesh network transparent to the external (non-mesh) networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Gateway&lt;/strong&gt;: Two nodes play the role of a gateway to provide high-availability to mesh clients/nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, however, we will start with the aspects that are common to all topologies, such as planning the mesh network, and the installation and basic configuration of OpenWrt mesh nodes.  Then, we will move to the specifics of each of the aforementioned mesh network topologies.  Finally, we end the section with a slightly more complex scenario to illustrate how to create &lt;strong&gt;mesh VLANs&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; and a very brief introduction to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on other Linux distros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though the examples show static nodes, &lt;strong&gt;none of the mesh nodes need to be static&lt;/strong&gt;. The mesh network and its components can be partially or totally mobile. For example, if some of your nodes are mobile units (e.g., vehicles, drones, robots, cellphones, laptops), they can leave and join the mesh, recreate the mesh elsewhere, join a completely different mesh, and so on.  The routing algorithm (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;) will automatically (and  seamlessly) take care of changes to the network topology. (But of course, if there’s a single gateway and it does not reach any node, the network is bound to stop working as intended without proper configuration to handle such scenarios.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot; alt=&quot;Topology - Moving nodes&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;p&gt;Just like any other type of network, deploying a mesh network–especially over large areas, with dozens of nodes–requires a fair deal of planning; Otherwise, you are bound to experience, for instance, bottlenecks, uneven access point signal quality, and unstable WAN connectivity across the mesh.  Also, features like &lt;strong&gt;high availability&lt;/strong&gt; go well beyond the configuration and topology of a mesh network (e.g., power source, whre your WAN connections are coming from, and the hardware you are using all play important roles when it comes to high availability).  Mesh networks are very, very easy to scale but planning is key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eli the Computer Guy&lt;/em&gt; has an old video about mesh networks that goes into things like high availability and bottlenecks.  If that matters to you, take a look. The relevant content &lt;strong&gt;starts at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;03:30&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;ends at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17:30&lt;/code&gt;&lt;/strong&gt;, approximately.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/T7fJwAyALss&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;The examples in this tutorial are simple &lt;em&gt;by design&lt;/em&gt;–they were created to illustrate different scenarios in a way that makes it easy to understand what is going on. The idea is to use the examples as templates for more complex implementations.&lt;/p&gt;

&lt;h2 id=&quot;openwrt-installation-and-initial-configuration&quot;&gt;OpenWrt installation and initial configuration&lt;/h2&gt;
&lt;p&gt;Now that you have the hardware, the first thing to do is to install OpenWrt.  Flashing a default OpenWrt image onto a &lt;strong&gt;&lt;em&gt;compatible device&lt;/em&gt; is a very easy and safe procedure&lt;/strong&gt; because it’s been tested multiple times.  (For extra safety precautions, you might want to search the Web for your device + OpenWrt to see if there’s any indexed forum post or comment regarding installation issues and bugs, for example.)&lt;/p&gt;

&lt;p&gt;If you’re new to this, the folks at OpenWrt were kind enough to provide a plethora of instructions on &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/start&quot;&gt;how to install and uninstall OpenWrt&lt;/a&gt; and even put together an &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/generic.flashing#installation_checklist&quot;&gt;&lt;strong&gt;installation checklist&lt;/strong&gt;&lt;/a&gt;.  At the very least, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look for your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Table of Hardware&lt;/strong&gt;&lt;/a&gt; and open its &lt;strong&gt;Device Page&lt;/strong&gt; (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd&quot;&gt;TP-Link TL-WR1043ND&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;Double check that the &lt;strong&gt;model and version&lt;/strong&gt; match your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;strong&gt;Supported Versions&lt;/strong&gt; table;&lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;Installation&lt;/strong&gt; table, you will find a column called &lt;em&gt;Firmware OpenWrt Install URL&lt;/em&gt; and another one called &lt;em&gt;Firmware OpenWrt Upgrade URL&lt;/em&gt;. If your device is &lt;strong&gt;still running the original firmware&lt;/strong&gt;, then download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Install&lt;/strong&gt; URL&lt;/em&gt; column; otherwise, download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Upgrade&lt;/strong&gt; URL&lt;/em&gt; column.  Both files should have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bin&lt;/code&gt; extension;&lt;/li&gt;
  &lt;li&gt;Regardless of the binary file downloaded, &lt;a href=&quot;https://openwrt.org/docs/guide-quick-start/verify_firmware_checksum&quot;&gt;&lt;strong&gt;verify its checksum&lt;/strong&gt;&lt;/a&gt; afterwards;&lt;/li&gt;
  &lt;li&gt;Disconnect your laptop/PC from any access point or switch, and connect your laptop/PC directly to the device’s ethernet port.&lt;/li&gt;
  &lt;li&gt;Open your device’s web UI, go to its Settings and/or find the &lt;strong&gt;Firmware Upgrade&lt;/strong&gt; option. Then, select the downloaded OpenWrt binary, and let it do its thing. Once it’s done, the device will reboot with OpenWrt installed. (You should be able to reach it at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; if connected to a LAN port.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you can reach the OpenWrt web UI, then you’ve successfully installed OpenWrt and it’s now time to configure it.&lt;/p&gt;

&lt;h3 id=&quot;initial-configuration&quot;&gt;Initial configuration&lt;/h3&gt;
&lt;p&gt;As mentioned before, we &lt;strong&gt;will not use the web UI&lt;/strong&gt; in this tutorial, even if the OpenWrt image you’re using has LuCI installed by default.  Instead, we will access our device and configure it using only &lt;strong&gt;SSH&lt;/strong&gt;.  So, open a terminal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into your OpenWrt device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; is your OpenWrt device’s IP address (that’s usually the case after a fresh install but if it’s different, use the proper IP then). Because this is the first time using the system, you’ll need to set a password for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user.  You can do that by typing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and following the instructions.  At this point, it’s good practice to label this device (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node01&lt;/code&gt;) and take note of its &lt;strong&gt;MAC address&lt;/strong&gt;.  To find out the latter, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and keep a record of the device’s name and its MAC address–if there are multiple different addresses, take note of all of them and their interface.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: &lt;a href=&quot;https://openwrt.org/docs/guide-user/security/dropbear.public-key.auth&quot;&gt;Configure key-based authentication&lt;/a&gt; and &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dropbear&quot;&gt;disable password login&lt;/a&gt;. Reboot and check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; access methods are correctly configured.)&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;From this point forward, we will start editing files using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.  If you’ve not read the &lt;a href=&quot;#vi-text-editor&quot;&gt;section about how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;&lt;/a&gt; yet, this is a good time to do so.&lt;/p&gt;

&lt;h3 id=&quot;default-config-for-the-hardware&quot;&gt;Default config for the hardware&lt;/h3&gt;
&lt;p&gt;Regardless of the hardware, &lt;strong&gt;before doing anything related to the mesh network&lt;/strong&gt;, always take your time and &lt;strong&gt;study the default configuration&lt;/strong&gt; found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt;.  For reference, I usually go over the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many ethernet ports?&lt;/li&gt;
  &lt;li&gt;Are they labeled either LAN or WAN or there’s both?&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, how is the router handling multiple ethernet ports? If there’s both LAN and WAN, how is the router separating LAN from WAN?&lt;/li&gt;
  &lt;li&gt;If there is both LAN and WAN, how is the firewall handling them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;? (Probably two zones, LAN and WAN, with LAN-&amp;gt;WAN accept all but WAN-&amp;gt;LAN deny all?)&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;, how is the device handling IP addresses?  (Is there a DHCP server for LAN?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, look at the wireless settings (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many radio devices and their names? (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Configuration-wise, what is the device using by default vs. what is it capable of? (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Is the radio enabled or disabled? (Keep/add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option disabled 1&lt;/code&gt; to disable it before configuration; to re-enable, simply comment this line out or set the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;Are there pre-configured wireless access points being broadcast?  If yes, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option network&lt;/code&gt; is it using by default? (Likely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; or whatever the LAN interface is being called in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, many wireless routers, including the TP-Link WR1043ND, have LAN and WAN ports which are handled by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; configuration with VLANs enabled to separate LAN from WAN.  Take note of it;  understand what is going on in the config files;  play with them;  then, continue.  Also, take this opportunity to go over the &lt;strong&gt;Device Page&lt;/strong&gt; to check if there’s any warnings or special configuration notes (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#warningsgotchas&quot;&gt;warnings and gotchas with the 1043ND&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This understanding is instrumental to the way the device will be configured to play different roles in the mesh network and a good grasp of the device’s default settings will greatly reward you later on.&lt;/p&gt;

&lt;h3 id=&quot;updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/h3&gt;
&lt;p&gt;(&lt;em&gt;Only experienced users&lt;/em&gt;: If you used a default image, this is a good opportunity to remove unnecessary packages. See the OpenWrt FAQ for a reference of &lt;a href=&quot;https://openwrt.org/faq/which_packages_can_i_safely_remove_to_save_space&quot;&gt;safe to remove packages&lt;/a&gt;, for example. If this is your first time playing with mesh, leave any unmentioned pkg alone until you get everything working as intended.)&lt;/p&gt;

&lt;p&gt;In order to update and install packages, you need to give your device &lt;strong&gt;temporary access to the Internet&lt;/strong&gt;.  More often than not, if you have an existing network with access to the Internet on-site, then just connect the device to a router/switch via cable.  If that doesn’t work, go ahead and configure your device to act like a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt;&lt;/a&gt; first.  You can check that the device has access to the Internet by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt;ing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, it’s time to &lt;strong&gt;update the package list&lt;/strong&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. Upgrade all installed packages. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; to find which packages can be upgraded and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg upgrade PKG&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKG&lt;/code&gt; is the package name.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; run into memory issues, try commenting out a few lines in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/opkg/distfeeds.conf&lt;/code&gt; and try again. Alternatively, it’s possible to use the following command to automatically upgrade all packages at once, per the &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/opkg#examples&quot;&gt;opkg openwrt wiki examples&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-upgradable | cut -f 1 -d ' ' | xargs opkg upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Be careful with mass upgrades though&lt;/strong&gt;, especially if you’re running a device with limited memory.  You might end up even bricking your device.&lt;/p&gt;

&lt;p&gt;Now, let’s install the mesh-related packages and remove conflicting packages.  First, remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg install batctl kmod-batman-adv wpad-mesh-openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure there are no error messages and if there are, troubleshoot them before proceeding.&lt;/p&gt;

&lt;p&gt;Remove the connection that gave your device temporary access to the Internet.  Then, &lt;strong&gt;reboot&lt;/strong&gt; (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and restart the SSH session with your laptop/PC still connected to the device via cable.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;If you’re using the &lt;strong&gt;TP-Link WR1043ND v1.x&lt;/strong&gt; in your mesh project, take a look at my previous note about the &lt;a href=&quot;#ath9k-modules&quot;&gt;ath9k module&lt;/a&gt; in the &lt;a href=&quot;#hardware&quot;&gt;hardware section&lt;/a&gt;.  In brief, if you have issues running the mesh with encryption, then you have to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; parameter of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt; module.&lt;/p&gt;

&lt;h2 id=&quot;mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/h2&gt;
&lt;p&gt;It is time to configure the basics of our mesh network and nodes.  To do so, we will edit multiple files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; but first, let’s find out the capabilities of the detected radios in our wireless device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will output something like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Wiphy phy0
	max # scan SSIDs: 4
	max scan IEs length: 2257 bytes
	max # sched scan SSIDs: 0
	max # match sets: 0
	max # scan plans: 1
	max scan plan interval: -1
	max scan plan iterations: 0
	Retry short limit: 7
	Retry long limit: 4
	Coverage class: 0 (up to 0m)
	Device supports AP-side u-APSD.
	Device supports T-DLS.
	Available Antennas: TX 0x7 RX 0x7
	Configured Antennas: TX 0x7 RX 0x7
	Supported interface modes:
		 * IBSS
		 * managed
		 * AP
		 * AP/VLAN
		 * monitor
		 * mesh point
		 * P2P-client
		 * P2P-GO
		 * outside context of a BSS
	Band 1:
		Capabilities: 0x104e
			HT20/HT40
			SM Power Save disabled
			RX HT40 SGI
			No RX STBC
			Max AMSDU length: 3839 bytes
			DSSS/CCK HT40
		Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
		Minimum RX AMPDU time spacing: 8 usec (0x06)
		HT TX/RX MCS rate indexes supported: 0-15
		Frequencies:
			* 2412 MHz [1] (20.0 dBm)
			* 2417 MHz [2] (20.0 dBm)
			* 2422 MHz [3] (20.0 dBm)
			* 2427 MHz [4] (20.0 dBm)
			* 2432 MHz [5] (20.0 dBm)
			* 2437 MHz [6] (20.0 dBm)
			* 2442 MHz [7] (20.0 dBm)
			* 2447 MHz [8] (20.0 dBm)
			* 2452 MHz [9] (20.0 dBm)
			* 2457 MHz [10] (20.0 dBm)
			* 2462 MHz [11] (20.0 dBm)
			* 2467 MHz [12] (20.0 dBm)
			* 2472 MHz [13] (20.0 dBm)
			* 2484 MHz [14] (disabled)
	valid interface combinations:
		 * #{ managed } &amp;lt;= 2048, #{ AP, mesh point } &amp;lt;= 8, #{ P2P-client, P2P-GO } &amp;lt;= 1, #{ IBSS } &amp;lt;= 1,
		   total &amp;lt;= 2048, #channels &amp;lt;= 1, STA/AP BI must match, radar detect widths: { 20 MHz (no HT), 20 MHz, 40 MHz }
	HT Capability overrides:
		 * MCS: ff ff ff ff ff ff ff ff ff ff
		 * maximum A-MSDU length
		 * supported channel width
		 * short GI for 40 MHz
		 * max A-MPDU length exponent
		 * min MPDU start spacing
	Supported extended features:
		* [ RRM ]: RRM
		* [ CQM_RSSI_LIST ]: multiple CQM_RSSI_THOLD records
		* [ CONTROL_PORT_OVER_NL80211 ]: control port over nl80211
		* [ TXQS ]: FQ-CoDel-enabled intermediate TXQs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we are particularly interested in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;strong&gt;supported modes of operation&lt;/strong&gt;, and more specifically, that the device is indeed able to operate in &lt;strong&gt;mesh point&lt;/strong&gt; mode (it is), as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supported interface modes:&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;total number of bands&lt;/strong&gt; (only one band, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Band 1&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;then for each band
    &lt;ul&gt;
      &lt;li&gt;the possible &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width&quot;&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode 'HT20'&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode 'HT40'&lt;/code&gt;), as shown in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt;, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Capabilities:&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;acceptable channels&lt;/strong&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel '1'&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel '13'&lt;/code&gt;), as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frequencies:&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With such information, we can now configure our radio devices in &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;&lt;/a&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/wireless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then edit each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-device&lt;/code&gt; accordingly.  In the 1043ND, there’s only one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-device&lt;/code&gt; and my config looks like the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-device 'radio0'
        option type 'mac80211'
        option channel 3
        option hwmode '11g'
        option path 'platform/ahb/180c0000.wmac'
        option htmode 'HT20'
        option country 'BR'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this radio device will be used for the mesh traffic, make sure all mesh nodes &lt;strong&gt;use the same channel&lt;/strong&gt;.  However, if the radio will be used as an access point for non-mesh clients, &lt;strong&gt;use a different channel than the mesh channel&lt;/strong&gt;.  In addition, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt; devices, stick to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt; if you are deploying the mesh in a crowded area, such as an apartment building; otherwise, the interference might make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT40&lt;/code&gt; actually slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt;.  Finally, remember to edit the &lt;strong&gt;country code&lt;/strong&gt; before enabling the radio.&lt;/p&gt;

&lt;p&gt;Comment out any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface&lt;/code&gt; automatically generated after a fresh install by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; at the beginning of each line, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config wifi-iface 'default_radio0'
#        option device 'radio0'
#        option network 'lan'
#        option mode 'ap'
#        option ssid 'OpenWrt'
#        option encryption 'none'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, at the end of the file, let’s add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-iface&lt;/code&gt; for the wireless mesh, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-iface 'wmesh'
        option device 'radio0'	#must match the name of a wifi-device
        option ifname 'if-mesh'	#name for this iface
        option network 'mesh'	#mesh stanza in /etc/config/network
        option mode 'mesh'		#use 802.11s mode
        option mesh_id 'MeshCloud'	#like an ssid of the wireless mesh
        option encryption 'sae'	#https://openwrt.org/docs/guide-user/network/wifi/basic#wpa_modes
        option key 'MeshPassword123'	#mesh password if encryption is enabled
        option mesh_fwding 0	#let batman-adv handle routing
        option mesh_ttl 1		#time to live in the mesh
        option mcast_rate 24000	#routes with a lower throughput rate than the mcast_rate will not be visible to batman-adv
#       option disabled 1		#uncomment to disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;The comments are just for educational purpose. Feel free to remove them in your device’s config file.&lt;/p&gt;

&lt;p&gt;Because all mesh nodes must operate on the same channel, use the same authentication, etc., multiple config options are often dictated by the “lowest common denominator” across all mesh nodes–that is, the best possible config that will work with &lt;strong&gt;all nodes&lt;/strong&gt;, not just the ones with the best hardware and software available.  For example, not all devices will necessarily be able to use SAE because it’s very new and therefore, won’t be able to connect to mesh networks that use it. Instead, you might want to set encryption to something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psk2+aes&lt;/code&gt;, which should be good enough for most devices out there. So, keep that in mind when configuring your mesh nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now we need to configure &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;&lt;/a&gt; to allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To do so, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt; file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and let’s add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; at the bottom of the file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'bat0'
        option proto 'batadv'
        option routing_algo 'BATMAN_IV'
        option aggregated_ogms 1
        option ap_isolation 0
        option bonding 0
        option bridge_loop_avoidance 1
        option distributed_arp_table 1
        option fragmentation 1
        option gw_mode 'off'
        option hop_penalty 30
        option isolation_mark '0x00000000/0x00000000'
        option log_level 0
        option multicast_mode 1
        option multicast_fanout 16
        option network_coding 0
        option orig_interval 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which has options with (mostly) default values to facilitate fine-tuning later on.  (For more details, refer to the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki#Protocol-Documentation&quot;&gt;&lt;strong&gt;Protocol Documentation&lt;/strong&gt;&lt;/a&gt; and more specifically, the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;&lt;strong&gt;Tweaking&lt;/strong&gt;&lt;/a&gt; section.)  Then, at the bottom of the same file, let’s add an actual &lt;strong&gt;network&lt;/strong&gt; interface to transport &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; packets, which in our case will be the network used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'mesh'
        option proto 'batadv_hardif'
        option master 'bat0'
        option mtu 2304
        option throughput_override 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;Next, let’s &lt;strong&gt;reboot&lt;/strong&gt; the device (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and once it comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again because we want to check that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interfaces are up.  To do so, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and if the config is right, you should now see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt; in the output. Similarly, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to show us all active interfaces, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl if
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, exit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; session, disconnect your laptop/PC from the wireless device (but keep it running nearby), and &lt;strong&gt;go ahead and configure at least one other node&lt;/strong&gt;.  This can be done manually just like you’ve just configured the current node.  However, if your other mesh nodes are identical to the one you have already configured–that is, it is the same brand, model, and it is running the same OpenWrt version–then you can simply &lt;strong&gt;copy the modified files&lt;/strong&gt; and then &lt;strong&gt;paste them on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; dir of the new device&lt;/strong&gt;.  To copy all such files from the configured device to your laptop/PC current directory, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -r root@IP_MESH_NODE:/etc/config ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; dir on your laptop/PC that has all the config files from the already configured device.  Then, it’s just a matter of doing the reverse process on the unconfigured devices:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -r ./config/* root@IP_NEW_MESH_NODE:/etc/config/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Because we’re starting SSH sessions with &lt;em&gt;different machines&lt;/em&gt; using the &lt;em&gt;same IP addr&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;), it’s quite possible that your SSH client will complaint about the authenticity of the host at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  To get rid of this message, simply remove the relevant entry in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file or delete it altogether.  On Linux distros, such file can be found at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/known_hosts&lt;/code&gt;–that is, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; folder for your current user.&lt;/p&gt;

&lt;p&gt;Afterwards, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into one of the configured mesh nodes and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will show a table with the interfaces (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt;), MAC address of the neighboring mesh nodes, and when each of them was last seen.  Copy the MAC address (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:01&lt;/code&gt;) from each neighboring mesh node and ping them through the mesh (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl p&lt;/code&gt;) to see if they are all replying, as follows (press Ctrl+C to stop)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should output something like the following if everything is working fine&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PING f0:f0:00:00:00:01 (f0:f0:00:00:00:01) 20(48) bytes of data
20 bytes from f0:f0:00:00:00:01 icmp_seq=1 ttl=50 time=3.01 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=2 ttl=50 time=1.71 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=3 ttl=50 time=1.10 ms
--- f0:f0:00:00:00:01 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss
rtt min/avg/max/mdev = 1.103/1.942/3.008/0.794 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pat yourself on the back because you have successfully configured multiple mesh nodes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go ahead and configure all your mesh nodes the same way as before&lt;/strong&gt; and only then move on to bridges, gateways, and VLAN configs, as described next.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: This is a good time to &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;tweak the mesh configuration&lt;/a&gt; as well.)&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting-mesh-issues&quot;&gt;Troubleshooting mesh issues&lt;/h2&gt;
&lt;p&gt;These are a few tips in case you run into issues when configuring gateways and bridges.&lt;/p&gt;

&lt;p&gt;To test node to node connectivity, connect to a mesh node and use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p MAC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC&lt;/code&gt; is another node’s MAC address.  If the node does not reply, there’s an issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; or its configuration.  Try rebooting both nodes before doing anything else.&lt;/p&gt;

&lt;p&gt;A more powerful tool to see what is going on in the mesh network is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; utility for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To use it, connect to a mesh node and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td batX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interface (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; but if you have more than one, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat1&lt;/code&gt;, etc.).  This is quite useful when configuring VLANs because it will show the VLAN ID of each client as well.  In addition, it is possible to specify the VLAN ID in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;td&lt;/code&gt; argument to constraint the output to one particular VLAN (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl td bat0.1&lt;/code&gt;).  Depending on the scale of your mesh network, you might need to filter the output because things can get wild with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; really fast.&lt;/p&gt;

&lt;p&gt;For more details, see the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;strong&gt;batctl man page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you’ve been following my suggestion to name and take note of each device’s MAC address, you can create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; that contains pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC address&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f0:f0:00:00:00:00 node01
f0:f1:00:00:00:00 node02
f0:f2:00:00:00:00 node03
f0:f3:00:00:00:00 node04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which makes it much easier to identify the mesh nodes when issuing a command like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and other debug tables.  As far as I’m aware, however, you have to create and update such file in each node because such information will just be available to nodes that have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;configuring-common-mesh-networks&quot;&gt;Configuring common mesh networks&lt;/h2&gt;
&lt;p&gt;Here, we will see how to turn one or two of our configured mesh nodes into either a mesh &lt;strong&gt;bridge&lt;/strong&gt; or a mesh &lt;strong&gt;gateway&lt;/strong&gt;.  To avoid repetition, the configuration of bridges and gateways is described in more detail in the &lt;a href=&quot;#gateway-bridge&quot;&gt;first example&lt;/a&gt;, and only a few small differences and observations are highlighted afterwards.  In addition, only IPv4 addresses and configurations were used but nothing prohibits the use of IPv6 in a mesh network.&lt;/p&gt;

&lt;h3 id=&quot;gateway-bridge&quot;&gt;Gateway-Bridge&lt;/h3&gt;
&lt;p&gt;This first example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More specifically, the mesh has access to the WAN (&lt;strong&gt;Network A&lt;/strong&gt;) via a &lt;em&gt;gateway device&lt;/em&gt; and has a single, private network defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, which is used by both the &lt;strong&gt;mesh network&lt;/strong&gt; devices and the &lt;strong&gt;Network B&lt;/strong&gt;, non-mesh devices. The latter is enabled by a &lt;em&gt;bridge device&lt;/em&gt; that works as an access point for non-mesh clients.&lt;/p&gt;

&lt;p&gt;First, let’s configure our &lt;strong&gt;mesh gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mesh-gateway-configuration&quot;&gt;Mesh gateway configuration&lt;/h4&gt;

&lt;p&gt;Get one of the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; that has at the very least two ethernet ports, a LAN port and a WAN port.  (This, of course, is not required for a gateway device because &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wan/internet.connection&quot;&gt;there are multiple ways to connect to WAN&lt;/a&gt; but having separate physical ports makes the explanation much simpler to follow.  If that is not your case, just adapt to whatever interfaces you have configured that play the role of default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;.)&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;If you’ve configured this node as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt; to temporarily give it access to the Internet while updating and installing packages, undo the configuration before proceeding because we will use both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; config files in the gateway configuration.&lt;/p&gt;

&lt;p&gt;Connect your laptop/PC to the mesh node via cable using the LAN port–this way, the mesh node’s IP address should still be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the mesh node and let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the beginning of the file, there should a bunch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loopback&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;, for example, and at the end, there should be the mesh interfaces we previously created for the mesh node, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;.  There are at least two options at this point:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an entirely new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;), at the expense of additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; configuration;&lt;/li&gt;
  &lt;li&gt;Or use the existing, default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface by simply bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the latter option is much easier than the former, we will choose the first here (i.e., create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; from the ground up) because it makes this tutorial compatible with multiple devices (switched or switchless) and it allows us to keep the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) as a management/debugging network.  (Later on, we will see how to bridge the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN, for example, so the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; becomes accessible to the mesh as well.  For now, keep it simple.)&lt;/p&gt;

&lt;p&gt;At the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; configuration&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0'
#        option type 'bridge'	#uncomment if bridging in ifname as well
        option ifname 'bat0'
        option proto 'static'
        option ipaddr '192.168.10.1'	#static addr for this gateway on the 192.168.10.0/24 net
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#uncomment to enable cloudflare dns server instead
        list dns '8.8.8.8'	#google dns server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Next, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;&lt;/a&gt; config to run a DHCP server on the new interface, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end of the file, add the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0'
        option interface 'lan_bat0'
        option start 50		#start leasing at addr 192.168.10.50
        option limit 100		#max leases, so for 100, leased addr goes from .50 to .149
        option leasetime '3h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;&lt;/a&gt; config.  Many things that can be done at the firewall level and for this reason, it’s often the most overwhelming part of the configuration.  Fortunately, in our case, all that we need to do here is simply &lt;strong&gt;copy&lt;/strong&gt; the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config for the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;.  That is, anything that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; we will&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy the related config;&lt;/li&gt;
  &lt;li&gt;paste it immediately below the equivalent default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config;&lt;/li&gt;
  &lt;li&gt;and then change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; in the new config.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then the first set of configs we will add (immediately below the equivalent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config) is the &lt;strong&gt;zone&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0
        list network    'lan_bat0'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the second set of configs will be for the &lt;strong&gt;forwarding&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;strong&gt;that is it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: At the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file, there’s a bunch of examples that you could use as template for more avdanced usage of this device’s firewall.  Feel free to play around with them &lt;strong&gt;once you get everything up and running&lt;/strong&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: Because we’re not going to use IPv6, I suggest disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and you could also comment out any related config in the files we just edited.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device and connect the &lt;strong&gt;WAN&lt;/strong&gt; cable to the device’s &lt;strong&gt;WAN ethernet port&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the device comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it. Then, let’s check the new configuration.  First, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and as before, there should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt; interfaces, but now, your gateway device should have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; in the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.  (Of note, if you enabled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option type 'bridge'&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; stanza, then there should be an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan_bat0&lt;/code&gt;interface now because OpenWrt adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-&lt;/code&gt; prefix to bridges, and your device’s static IP should be associated to it instead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.)&lt;/p&gt;

&lt;p&gt;In addition, because we preserved the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; configuration, the device will continue to have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; and should always be reachable there with an ethernet cable directly connected to one of its LAN ethernet ports.&lt;/p&gt;

&lt;p&gt;If you &lt;strong&gt;don’t see the static IP on the new network&lt;/strong&gt;, then review the files we have just configured because there’s likely a misconfiguration.  Don’t expect to get things working until you fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;mesh-bridge-configuration&quot;&gt;Mesh bridge configuration&lt;/h4&gt;
&lt;p&gt;The configuration of a mesh bridge is much simpler than of a mesh gateway because contrary to the gateway config, our mesh bridge doesn’t require the use of a DHCP server and firewall.  In fact, both services will be disabled in a mesh bridge and instead, the ony thing we will do is join interfaces to make them look like a single one to any connected device.&lt;/p&gt;

&lt;p&gt;As before, get one of the other &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; and to start things off, we will configure it as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt;.  Follow the instructions in the OpenWrt documentation, except for the following when configuring the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; to the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;set a static IP for the device on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, pointing to our gateway at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the configuration of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; should then look something like this
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface lan
      option type 'bridge'
      option ifname 'eth0.1 eth1 bat0'	#ethX might be different for your device
      option proto 'static'
      option ipaddr '192.168.10.10'
      option netmask '255.255.255.0'
      option gateway '192.168.10.1'
      option dns '192.168.10.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After applying this configuration, it will let any &lt;strong&gt;non-mesh client&lt;/strong&gt; to join the mesh &lt;strong&gt;via ethernet cable&lt;/strong&gt;–that is, by connecting a cable to one of the LAN/WAN ports of the mesh bridge device.  As long as the gateway is reachable, everything should work like a standard network, you could use the device’s own switch or connect the device to a switch and manage things there, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Similarly, you can create a &lt;strong&gt;wireless access point&lt;/strong&gt; (WAP) for non-mesh clients, and the instructions in the &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt; documentation&lt;/a&gt; will work just fine because it uses a network that is bridged with our mesh–namely, the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.  To avoid confusion, make sure to use &lt;strong&gt;a different SSID&lt;/strong&gt; for the WAP(s) than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh_id&lt;/code&gt; used for the mesh.  In addition, if at all possible, use &lt;strong&gt;a different radio or band&lt;/strong&gt; for the WAP(s) and set it to operate on &lt;strong&gt;a different channel&lt;/strong&gt; than the mesh channel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel 3&lt;/code&gt;, unless you changed yours).  If that is not possible, that is probably okay for most home users but keep in mind that node hoping will start affecting performance quite noticeably.&lt;/p&gt;

&lt;p&gt;Finally, in the terminal, make sure to disable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/dnsmasq stop &amp;amp;&amp;amp; /etc/init.d/dnsmasq disable 
/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
/etc/init.d/firewall stop &amp;amp;&amp;amp; /etc/init.d/firewall disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device and on your laptop/PC, &lt;strong&gt;disable networking&lt;/strong&gt; altogether (this will force it to get a new IP from the bridge when it comes back)–alternatively, just disconnect the ethernet cable.&lt;/p&gt;

&lt;p&gt;Once the bridge is back online (wait at least a minute or two to give it enough time to connect to the mesh first), &lt;strong&gt;re-enable networking&lt;/strong&gt; on your laptop/PC (or reconnect the ethernet cable) and it should receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network (on a Linux distro, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip addr&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;), the bridge node should now be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, and you should be able to access the Internet from your laptop/PC through the mesh (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).  If something doesn’t work, review the config files mentioned here and then go over the ones for the gateway, reboot all mesh nodes (gateway first, then nodes, then bridge) and test again.&lt;/p&gt;

&lt;h3 id=&quot;bridge-bridge&quot;&gt;Bridge-Bridge&lt;/h3&gt;
&lt;p&gt;This second example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contrary to the first example, there’s no mesh gateway device and as such, this topology could be used to extend an already existing private network (Networks A and B) over the wireless mesh (all defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range).  However, to make matters simple, we will assume that &lt;strong&gt;the existing network has a gateway/firewall&lt;/strong&gt; in either Network A or B that can be found at the IP addr &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;, and &lt;strong&gt;there’s a DHCP server being advertised on the network&lt;/strong&gt;.  (If your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, just edit your previous config files accordingly and the mesh network will follow your existing network instead.)&lt;/p&gt;

&lt;p&gt;Config-wise, the mesh bridges in this topology are configured exactly &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the first example&lt;/a&gt;, except for the following differences in the configuration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Each mesh bridge&lt;/strong&gt; should have a different static IP address in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface, as indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;.  For example, the first mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.10'&lt;/code&gt;, while the second mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.11'&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway '192.168.10.1'&lt;/code&gt; in the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; stanza must match an existing gateway on either Network A or B, and similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns '192.168.10.1'&lt;/code&gt; must point to a valid DNS resolver;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned before, if your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, then just edit the config file accordingly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gateway-gateway&quot;&gt;Gateway-Gateway&lt;/h3&gt;
&lt;p&gt;The third and final example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specifically, there’s only one private network (mesh, defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range) and notably, &lt;strong&gt;two&lt;/strong&gt; mesh gateways.  This provides “high availability” of the Internet connection to mesh nodes and surprisingly enough, the configuration of each mesh gateway is &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;just like in the first example&lt;/a&gt;, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Like in the &lt;a href=&quot;#bridge-bridge&quot;&gt;bridge-bridge example&lt;/a&gt;, we must assign different static IP addresses to &lt;strong&gt;each&lt;/strong&gt; mesh gateway.  This is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface configuration, add a different IP addr next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt; option.  For example, the first mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.1'&lt;/code&gt;, while the second mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.2'&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because we will now run &lt;strong&gt;two&lt;/strong&gt; DHCP servers on &lt;strong&gt;the same network&lt;/strong&gt;, we need to find a way of avoiding conflicts when assigning an IP address to new clients.  The easiest way of doing that is by assigning &lt;strong&gt;different intervals&lt;/strong&gt; to each DHCP server running on the same network.  In OpenWrt, this is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; DHCP configuration, we add a different starting point next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start&lt;/code&gt; option.  For example, while the DHCP server running on the first gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '50'&lt;/code&gt;, the DHCP server running on the second gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '150'&lt;/code&gt; instead.  This way, the first DHCP server leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.50&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.149&lt;/code&gt;, whereas the second leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.150&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.249&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface config of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, we can now enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt; and specify the WAN connection speed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_bandwidth '10000/2000'&lt;/code&gt; (i.e., 10000kbps download and 2000kbps upload).  Then, in each other &lt;strong&gt;mesh node&lt;/strong&gt;, we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'client'&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'off'&lt;/code&gt;.  This way, we can make each mesh node aware of the two gateways on the network (and their speeds) to better route mesh traffic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mesh-vlans&quot;&gt;Mesh VLANs&lt;/h2&gt;
&lt;p&gt;You don’t need to configure VLANs in order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; but it is one of its best features.  In brief, this is a way of using &lt;strong&gt;our already configured&lt;/strong&gt; wireless mesh network to route traffic &lt;strong&gt;to/from multiple and all networks&lt;/strong&gt; in a secure, isolated way (as far as VLANs go).  No need for additional hardware–the combination of OpenWrt and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; turns even cheap wireless hardware into powerful virtual switches.  It’s just a matter of tagging the additional (and virtual) networks instead of using the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (or similarly, in a port-based analogy, “plugging” standard interfaces into different ports of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; switch).  This is a fairly advanced topic but surprisingly easy to incorporate to our existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Consider, for example, the following network&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a single gateway device that provides WAN access to the mesh and Networks B, C, and D, which are all private networks defined in different IP ranges. In addition, all the Networks B, C, and D traffic should go via &lt;strong&gt;any&lt;/strong&gt; mesh node in the mesh network while keeping them &lt;strong&gt;isolated from each other&lt;/strong&gt;.  To make it easier to remember and distinguish each private network, let’s call&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Network &lt;strong&gt;B&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;Network &lt;strong&gt;C&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;and Network &lt;strong&gt;D&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement such a mesh network with VLANs, we’re going to follow very similar steps to &lt;a href=&quot;#gateway-bridge&quot;&gt;the first example of a gateway-bridge mesh network&lt;/a&gt;, except for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will have two additional bridges in the network–that is, one for each mesh VLAN, for a total of three bridges. This is not a necessity but a matter of convenience to keep the example simple. The same bridge device can definitely bridge more than one mesh VLAN;&lt;/li&gt;
  &lt;li&gt;In the gateway device, we will create VLAN IDs for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; (&lt;strong&gt;2&lt;/strong&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; (&lt;strong&gt;5&lt;/strong&gt;), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; (&lt;strong&gt;1&lt;/strong&gt;) networks, each with a separate set of DHCP server and firewall rules;&lt;/li&gt;
  &lt;li&gt;In each bridge device, we will join the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with the &lt;strong&gt;VLAN ID&lt;/strong&gt; of the mesh VLAN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Surprisingly enough, we don’t need to do a thing about the &lt;strong&gt;mesh nodes&lt;/strong&gt; that are not &lt;strong&gt;gateways&lt;/strong&gt; or &lt;strong&gt;bridges&lt;/strong&gt;–that is, the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;mesh node basic config&lt;/a&gt; is both necessary and sufficient for simple mesh nodes, even when using VLANs.  The only exception is if one of your mesh nodes is, for example, a laptop and you want it to use a particular mesh VLAN instead of the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.  In our case, however, the pre-configured mesh nodes are ready to route traffic of any VLAN that belongs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, let’s start with the &lt;strong&gt;gateway&lt;/strong&gt; configuration.&lt;/p&gt;

&lt;h3 id=&quot;mesh-gateway-with-vlan-configuration&quot;&gt;Mesh gateway with VLAN configuration&lt;/h3&gt;
&lt;p&gt;First, configure the gateway &lt;strong&gt;the same way&lt;/strong&gt; &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;, we’re going to change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; in the config files, then do the same for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;.  So, if you’re ready, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; back into it and let’s start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end, comment out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; config, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config interface 'lan_bat0'
#        option type 'bridge'		#uncomment if adding other interfaces to ifname
#        option ifname 'bat0'
#        option proto 'static'
#        option ipaddr '192.168.10.1'	#static addr for this gateway on the 192.168.10.0/24 net
#        option netmask '255.255.255.0'
#        list dns '1.1.1.1'			#cloudflare dns server
#        list dns '8.8.8.8'			#google dns server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then below it, let’s add a new interface for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_1'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.1'
        option proto 'static'
        option ipaddr '192.168.10.1'
        option netmask '255.255.255.0'
        list dns '1.1.1.1'
#        list dns '8.8.8.8'	#make it use cloudflare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_2'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.2'
        option proto 'static'
        option ipaddr '192.168.20.1'
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#make it use google
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_5'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.5'
        option proto 'static'
        option ipaddr '192.168.50.1'
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#make it use google
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, comment out all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; config, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config dhcp 'lan_bat0'
#        option interface 'lan_bat0'
#        option start 50		#start leasing at addr 192.168.10.50
#        option limit 100		#max leases, so for 100, leased addr goes from .50 to .149
#        option leasetime '3h'
#        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then add a DHCP server config for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface below it&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_1'
        option interface 'lan_bat0_1'
        option start 50
        option limit 100
        option leasetime '12h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and like before, we will add another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_2'
        option interface 'lan_bat0_2'
        option start 50
        option limit 100
        option leasetime '6h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_5'
        option interface 'lan_bat0_5'
        option start 50
        option limit 100
        option leasetime '1h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, comment out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; configs, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config zone
#        option name     lan_bat0
#        list network    'lan_bat0'
#        option input    ACCEPT
#        option output   ACCEPT
#        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config forwarding
#        option src   lan_bat0
#        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and below each one of them, add one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_1
        list network    'lan_bat0_1'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_1
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_2
        list network    'lan_bat0_2'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_2
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_5
        list network    'lan_bat0_5'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_5
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device.&lt;/p&gt;

&lt;p&gt;Once the gateway device is back online–by the way, it should still be at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; because the gateway’s default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; is intact, so even if we fuck something up, we should be able to find the gateway via a direct cable connection–&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which now should show the new interfaces we created (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1@bat0&lt;/code&gt;) and the static IP addr of your device in each one of them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;).  (As mentioned before, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option type 'bridge'&lt;/code&gt; was enabled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config stanza, then there will be an additional interface with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-&lt;/code&gt; prefix attached to it and the static IP addr of your device will be associated with it.)&lt;/p&gt;

&lt;p&gt;If everything looks good, we’re done with the gateway configuration!  We’re now ready to tell our bridges which VLAN ID to join with their standard interfaces.&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;You don’t need to use &lt;strong&gt;interface names&lt;/strong&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0_1&lt;/code&gt;; they can be whatever you find intuitive.  However, whatever you choose, &lt;strong&gt;keep them short&lt;/strong&gt;–that is, less than 14 characters long–or you’ll start experiencing config issues.&lt;/p&gt;

&lt;h3 id=&quot;mesh-bridge-with-vlan-configuration&quot;&gt;Mesh bridge with VLAN configuration&lt;/h3&gt;
&lt;p&gt;Here, we’ll also configure the bridges &lt;strong&gt;the same way&lt;/strong&gt; as in the gateway-bridge example. However, each bridge device will bridge &lt;strong&gt;a different VLAN ID&lt;/strong&gt;–namely, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;–with its default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, instead of bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; with its default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with the Network B (&lt;strong&gt;IoT&lt;/strong&gt;) bridge.&lt;/p&gt;

&lt;p&gt;Configure one of the mesh nodes &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;, except that in the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface stanza of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ifname&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Then, the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; stanza should look something like this
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface lan
      option type 'bridge'
      option ifname 'eth0.1 eth1 bat0.2'	#ethX might be different for your device
      option proto 'static'
      option ipaddr '192.168.20.10'
      option netmask '255.255.255.0'
      option gateway '192.168.20.1'
      option dns '192.168.20.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device.&lt;/p&gt;

&lt;p&gt;Once it comes back on, your laptop/PC will receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt; network, the bridge node should be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.10&lt;/code&gt;, and you should be able to access the Internet via the &lt;strong&gt;IoT&lt;/strong&gt; network (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If something doesn’t work&lt;/strong&gt;, review the config files from your gateway and then from the bridge, then reboot the gateway and the bridge, and test again.&lt;/p&gt;

&lt;p&gt;If this config is working, &lt;strong&gt;repeat the same steps&lt;/strong&gt; in the config of the other two bridges, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the Network C bridge (&lt;strong&gt;Guest&lt;/strong&gt;), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, and similarly, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.&lt;/code&gt; IP addr instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Network D bridge (&lt;strong&gt;Default&lt;/strong&gt;), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, and similarly, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.&lt;/code&gt; IP addr instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: When configuring a &lt;strong&gt;Guest&lt;/strong&gt; WAP, for example, you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option isolate 1&lt;/code&gt; to the relevant stanza in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file to deny client-to-client connectivity without the need of re-enabling the firewall in the bridge device.  If that’s not enough, re-enable the firewall and configure it according to your needs–at the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; file, there are examples you can use as template.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with batman-adv on any Linux device&lt;/h2&gt;
&lt;p&gt;OpenWrt makes using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; a nearly trivial thing but you certainly don’t need OpenWrt to implement a mesh network or even to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; in your mesh.  As mentioned before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; has long been added to the Linux Kernel and therefore, you should be able to configure it on pretty much &lt;em&gt;any&lt;/em&gt; device running Linux.&lt;/p&gt;

&lt;p&gt;Even though the specifics of configuring network interfaces and managing connections might be different across Linux distributions, the initial steps always consist of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Installing (in popular distros, this is &lt;em&gt;not needed&lt;/em&gt;) and loading (&lt;em&gt;always&lt;/em&gt; needed) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; Kernel module.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsmod&lt;/code&gt; will show a list of active modules, so we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; it to check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module has already been loaded, as follows
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;then if it isn’t loaded, we add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; kmod to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules&lt;/code&gt; and load it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modprobe&lt;/code&gt;, as follows&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# append batman-adv to /etc/modules
echo 'batman-adv' | sudo tee -a /etc/modules &amp;gt; /dev/null
# load the batman-adv module
sudo modprobe batman-adv
# check that the batman-adv module is now loaded
lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Afterwards, you can check the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sysfs&quot;&gt;&lt;strong&gt;sysfs&lt;/strong&gt;&lt;/a&gt; of each network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and there should be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv&lt;/code&gt; folder.  When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module gets configured to use a particular network device, the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/iface_status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/mesh_iface&lt;/code&gt; will change their contents to reflect that. In addition, once enabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; will show up as a new network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and its options (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gw_mode&lt;/code&gt;) can be modified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing new values to their corresponding file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/bat0/mesh/&lt;/code&gt;  (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 'client' &amp;gt; /sys/class/net/bat0/mesh/gw_mode&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; package. On apt-based distros like Debian, you should be able to install it with the following
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install batctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Using a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt; to configure the network interfaces, as illustrated in the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Quick-start-guide&quot;&gt;B.A.T.M.A.N. quick start guide&lt;/a&gt;.  In our case, however, the wireless mode of operation (as in the specification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; interface creation command) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mp&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adhoc&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibss&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Using something like &lt;a href=&quot;https://en.wikipedia.org/wiki/Wpa_supplicant&quot;&gt;wpa_supplicant&lt;/a&gt; to manage connections.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you know of a program that has a GUI and is able to handle such configurations on popular Linux distros, let me know about it. As far as I know, there’s currently nothing like that and it would be so very useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-physical-computing&quot;&gt;Bonus content: Physical computing&lt;/h1&gt;
&lt;p&gt;If your device has unused &lt;strong&gt;general purpose I/O&lt;/strong&gt; pins, it’s possible to do all sorts of things with them.  Check the &lt;a href=&quot;https://openwrt.org/docs/techref/hardware/port.gpio&quot;&gt;GPIO documentation&lt;/a&gt; for examples of how to install new LEDs and buttons, for instance.  (&lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#gpios&quot;&gt;Your device’s OpenWrt page can be very useful as well&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Also, if you want to change the functionality of a few of the existing LEDs on your wireless device, check the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/led_configuration&quot;&gt;LED configuration documentation&lt;/a&gt;.  Now that you have new mesh interfaces, you can use the LEDs to blink depending on the status of neighboring nodes, mesh gateways, or WAN connectivity through the mesh, to mention a few examples. (As mentioned before, &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#leds&quot;&gt;your device’s OpenWrt page can be very useful here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-moving-from-openwrt-19-to-21&quot;&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/h1&gt;
&lt;p&gt;When this guide was first written, &lt;a href=&quot;https://openwrt.org/releases/19.07/start&quot;&gt;OpenWrt 19&lt;/a&gt; was the &lt;strong&gt;current stable&lt;/strong&gt; release version.  However, as of September 4th, OpenWrt 19 transitioned to &lt;strong&gt;old stable&lt;/strong&gt; and &lt;a href=&quot;https://openwrt.org/releases/21.02/start&quot;&gt;&lt;strong&gt;OpenWrt 21&lt;/strong&gt;&lt;/a&gt; is now the current stable release.  For one, this means that most device pages (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/archer_c7&quot;&gt;TP-Link Archer C7 AC1750&lt;/a&gt;) have been updated to link to the OpenWrt 21 firmware binaries.  However, it is still possible to download and use the latest version of the OpenWrt 19 binaries (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19.07.8&lt;/code&gt;), which should be just fine for now.  To still use OpenWrt 19, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find the target for your device in the device’s page.  For instance, for the &lt;a href=&quot;https://openwrt.org/toh/tp-link/archer_c7&quot;&gt;TP-Link Archer C7 AC1750&lt;/a&gt;, the target is &lt;em&gt;ath79/generic&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Navigate to the root of the available targets for the &lt;a href=&quot;https://downloads.openwrt.org/releases/19.07.8/targets/&quot;&gt;latest version of the OpenWrt 19 release (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19.07.8&lt;/code&gt;)&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Navigate to the root of your device’s target (e.g., for the C7, that would be &lt;a href=&quot;https://downloads.openwrt.org/releases/19.07.8/targets/ath79/&quot;&gt;&lt;em&gt;ath79&lt;/em&gt;&lt;/a&gt; &amp;gt; &lt;a href=&quot;https://downloads.openwrt.org/releases/19.07.8/targets/ath79/generic/&quot;&gt;&lt;em&gt;generic&lt;/em&gt;&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And finally, search for the &lt;strong&gt;binary for your device and model version&lt;/strong&gt;, download it, check the hash, and flash it onto your device, as instructed on the device’s page.&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;Remember to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-factory.bin&lt;/code&gt; if your device is still running the original firmware, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-sysupgrade.bin&lt;/code&gt; if your devices is already running OpenWrt.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This same procedure can be used with &lt;a href=&quot;https://downloads.openwrt.org/releases/&quot;&gt;&lt;em&gt;any&lt;/em&gt; of the still available releases&lt;/a&gt;. Making use of OpenWrt 19 means that the (tested) instructions in this guide are fully compatible with it.  However, it is generally a good idea to run the latest release version for multiple reasons, security being the main one.  For this reason, I’ve started upgrading a few of my devices to use OpenWrt 21 instead of 19 and once I’m done testing, I will update this guide in its entirety to reflect the configuration used in OpenWrt 21.  (This should happen before the end of October.)  In the meantime, here are a few notes about OpenWrt 21:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thanks to &lt;strong&gt;SteveNewcomb&lt;/strong&gt;, we have known for many months that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; also works under OpenWrt 21.  For reference, here are two of his forum posts that detail the specifics of his devices and configuration:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://forum.openwrt.org/t/batman-in-production-with-post-19-07-snapshot-not-working-under-21-02&quot;&gt;Batman (in production with post 19.07 snapshot) not working under 21.02&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://forum.openwrt.org/t/how-to-specify-the-mac-address-of-a-batman-mesh-member/100164/2&quot;&gt;How to specify the mac address of a batman mesh member?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OpenWrt 21 introduces initial support for the &lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/dsa/dsa.html&quot;&gt;&lt;strong&gt;Distributed Switch Architecture&lt;/strong&gt; (&lt;strong&gt;DSA&lt;/strong&gt;)&lt;/a&gt;.  This only applies to &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#initial_dsa_support&quot;&gt;a very limited number of devices though&lt;/a&gt;.  If you have one of such devices, then make sure to read &lt;strong&gt;rmilecki&lt;/strong&gt;’s &lt;a href=&quot;https://forum.openwrt.org/t/mini-tutorial-for-dsa-network-config/96998&quot;&gt;mini tutorial for DSA network configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#increased_minimum_hardware_requirements8_mb_flash_64_mb_ram&quot;&gt;hardware requirements to run OpenWrt 21&lt;/a&gt; has increased to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8 MB&lt;/code&gt; of flash memory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64 MB&lt;/code&gt; of RAM.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;There is a small but important &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#new_network_configuration_syntax_and_boardjson_change&quot;&gt;change in the configuration &lt;strong&gt;syntax&lt;/strong&gt;&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, namely:
    &lt;ol&gt;
      &lt;li&gt;The option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device&lt;/code&gt; in all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; stanzas;&lt;/li&gt;
      &lt;li&gt;The option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ports&lt;/code&gt; in all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config device&lt;/code&gt; stanzas of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;Fortunately, it seems that the &lt;strong&gt;old syntax&lt;/strong&gt; (as the one shown in this guide) is &lt;strong&gt;still supported&lt;/strong&gt; but if you are using LuCI, you will run into compatibility issues and will be prompted to update.  For a template, &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#new_uci_syntax&quot;&gt;check an example of the new UCI syntax&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There many other changes in the new stable release.  Please check the &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0&quot;&gt;&lt;strong&gt;OpenWrt 21.02.0 release notes&lt;/strong&gt;&lt;/a&gt; for other highlights and additional instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final remarks&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/futurama.jpg&quot; alt=&quot;Futurama Hubert Farnsworth&quot; class=&quot;PostImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good news, everyone! You’ve reached the end of this tutorial, which means it’s time to start planning your own mesh networking project.  I love to hear about different takes on the projects I post on my blog, so don’t hesitate to &lt;a href=&quot;/contact/&quot;&gt;contact me&lt;/a&gt; if you just want to share or bounce a few ideas.  Different perspectives give an opportunity to learn, grow, and innovate.&lt;/p&gt;

&lt;h2 id=&quot;other-similar-mesh-solutions&quot;&gt;Other similar mesh solutions&lt;/h2&gt;
&lt;p&gt;If you find this guide overwhelming but you’re still curious about mesh networking, take a look at the following alternatives (in alphabetical order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.commotionwireless.net&quot;&gt;Commotion Wireless&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://libremesh.org&quot;&gt;LibreMesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They have pre-configured images that will work “out of the box” with compatible devices.  You might find instructive to start playing around with their software first and once comfortable, build your own configuration from a default (or customized from the source) OpenWrt image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mesh" /><category term="adhoc" /><category term="ieee" /><category term="wifi" /><category term="wireless" /><category term="radio" /><category term="network" /><category term="router" /><category term="openwrt" /><category term="batman" /></entry><entry><title type="html">NanoPi M4 mini-NAS</title><link href="/blog/Nanopi-m4-mini-nas/" rel="alternate" type="text/html" title="NanoPi M4 mini-NAS" /><published>2020-07-06T13:42:00-03:00</published><updated>2020-07-06T13:42:00-03:00</updated><id>/blog/Nanopi-m4-mini-nas</id><content type="html" xml:base="/blog/Nanopi-m4-mini-nas/">This article is about my mini network-attached storage (NAS) project based on FriendlyARM's [NanoPi M4](http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4) and its [SATA hat](http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4_SATA_HAT).  If you're looking for a cheap, low-profile, low-power NAS solution for your home--or if you just like single-board computers (SBC)--then this article is for you.  

Here's a preview of how my NanoPi M4 mini-NAS looks like:

[![Final NAS 02](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg)

[![Final NAS 01](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg)

And for comparison, here's the unit next to a Raspberry Pi 3B:

[![Final NAS next to RPi](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg)

This article should give you a fairly good idea about the following:

* What to buy; 
* What to install at the operating system (OS) and NAS management level;
* How to put everything together and get it up and running.  

After that, you're free to do whatever you want for your own use-case (disk partitions, storage systems, file sharing method, applications, etc.). 

# Changelog
**October 16th, 2020**, (#1 of 2): I've re-written the [pwm-fan script for the NanoPi-M4](https://github.com/cgomesu/nanopim4-satahat-fan) and updated [the section about it](#pwm-fan-controller) accordingly.
{: .notice .notice--info }

**October 16th, 2020**, (#2 of 2): Despite the CPU tuning improvements I mentioned in my previous update, I've continued to have a few stability issues with Kernel 5.x.  After a while, I've decided to reinstall **Armbian Buster** with **Kernel 4.4.213-rk3399 (legacy)** and it has been smooth sailing ever since.  I updated the [section about OS installation](#software) accordingly.
{: .notice .notice--warning }

**July 14th, 2020**: Added [information about CPU tuning to improve system stability](#cpu-tuning).
{: .notice .notice--info }

**July 8th, 2020**: Added a [cautionary note about SATA power cables](#nanopi-m4-sata-hat--passive-cooler--cables); Added a [table with the cost of all hardware components of this build](#cost-estimate); I also got a hold of a DC jack adapter that will let me measure the actual current draw from my final mini-NAS and will make it available here as soon as I'm done testing it.  If you've additional suggestions, please [reach out](/contact).
{: .notice .notice--info }

[top](#){: .btn .btn--small .btn--light-outline }

# Introduction
The NanoPi M4 is a SBC made by FriendlyARM (a.k.a. FriendlyElec), a Chinese company based in Guandong.  They have their own [online store](https://www.friendlyarm.com/) that you can use to buy a few of the boards and components they develop but chances are you can also buy from pretty much any of the large retail stores out there (e.g., AliExpress, Amazon, Newegg).  [I bought all components from AliExpress, for example, from the folks at [RealQvol](https://embedunion.aliexpress.com/store/113595).]  FriendlyARM also has a fairly good [wiki](http://wiki.friendlyarm.com/wiki/index.php/Main_Page) that documents the main aspects of their boards.

For a general review of the board, check these two videos:

{% include video id=&quot;knS854Taz-E&quot; provider=&quot;youtube&quot; %}

{% include video id=&quot;sxND3lLSwB4&quot; provider=&quot;youtube&quot; %}

You can also find a CPU performance comparison between the NanoPi M4 v2 and the Raspberry Pi 4 at [this blog post](https://www.androidpimp.com/embedded-single-board-computers/raspberry-pi-4-vs-nanopi-m4v2/), which suggests that the NanoPi M4 is superior and will be able to run tasks more efficiently than the RPi 4.

In the following sections, I talked about the hardware (board, hat, case, drive choices and power supply), then the software (OS + NAS management interface) and finally, assembly and board/hat testing.  The article ends with a very brief presentation of my current configuration for the mini-NAS.

[top](#){: .btn .btn--small .btn--light-outline }

# Hardware
For this project, I'm using the following hardware:
## NanoPi M4 v2
I'm using the **2nd version** (v2) of this board but everything should apply to v1.  I think the major differences between the two is that the **v2 has LPDDR4 RAM**, instead of LPDDR3, a power button, the eMMC is connected the opposite way and screwed to the board, and the v2 looks slightly cleaner than the v1.  Other than that, when buying one, you'll have the option to buy with 2GB or 4GB of RAM.  I'm using the one with **4GB of RAM** and I recommend it if you're going to use it as a NAS, even if you're not going to use a RAM intensive filesystem like ZFS.  (For reference, ext4 uses very little RAM and a 2GB version won't have any issues sharing files at all.  The problem in those cases is when you start adding applications to your NAS.)

[![Nanopi M4 v2 board](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg){: .PostImage .PostImage--large }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg)

## NanoPi M4 heatsink
This little fella gets pretty hot but fortunately, this massive heatsink does a decent job at keeping it cool.  For even better performance, try adding a fan, use thermal paste instead of a pad, or use a copper heatsink with a large surface area.

[![Nanopi M4 heatsink](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg)

## NanoPi M4 16-32gb eMMC (+ micro-SD adapter)
The adapter makes it easy to flash an OS image directly onto the eMMC, so make sure to buy one.  As far as I know, you don't need to use an eMMC with the NanoPi M4.  A micro-SD will do the trick but of course, it's slower than an eMMC.  However, an eMMC is slower than a solid state drive (SSD), so if you know how to run the OS from a SSD, let me know.  Either way, the OS and NAS program we're going to use is already configured to reduce the amount of writes to the eMMC/micro-SD/SSD (it comes configured to not use a swap partition, for example), which is good news if you're worried about wearing it out.

[![Nanopi M4 eMMC](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg)

## NanoPi M4 SATA hat (+ passive cooler + cables)
This little hat has a [Marvell 88SE9215](https://www.marvell.com/content/dam/marvell/en/public-collateral/storage/marvell-storage-88se92xx-product-brief-2012-04.pdf) Four-Port 6 Gbps SATA I/O Controller.  It usually comes with two SATA interface cables and one SATA power cable able to power two drives.  If you're going to use more than two drives, like me, make sure to buy additional SATA interface cables and an extension/splitter for the SATA power cable (e.g., [StarTech splitter](https://www.amazon.com/StarTech-com-Power-Splitter-Adapter-PYO4SATA/dp/B0086OGN9E/ref=sr_1_7?dchild=1&amp;keywords=sata+power+extension+cable&amp;qid=1591723716&amp;sr=8-7)).

[![Nanopi M4 SATA hat](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg)

When buying your SATA power cables, make sure the terminals are **crimped** (use blade connectors) instead of **molded**. In brief, molded terminals are not faulty by design but they are error prone, owning to the method that the cables are terminated (molding plastic), and such errors might lead to [catastrophic events](https://duckduckgo.com/?t=ffab&amp;q=sata+power+fire&amp;ia=web). The ones in my original pictures were all molded and **you should not use them**.  Thanks to **/u/Fuck_Birches** and **/u/WordBoxLLC** for pointing that out.  I have changed them for crimped ones now.  Here's an instructive video about the issue:
{: .notice .notice--danger }

{% include video id=&quot;TataDaUNEFc&quot; provider=&quot;youtube&quot; %}

If you plan on using the same 3d printed case I'm using (see [kirkdis' 3D printed case](#kirkdis-3d-printed-case)), make sure to buy SATA cables with **a straight/horizontal connector on both ends of the cable**.  That case is *very* tight, so you might want to consider buying at least two shorter than usual SATA cables for the HDDs closer to the base.

[![Nanopi M4 SATA hat](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg)

## 12v (8A) power supply unit (PSU)
If you're using the SATA hat, you only need a single PSU to provide power to everything, and there are even two different options to do that: (a) via the DC 5.5x2.1mm jack on the SATA hat, using an external PSU (e.g., [Alitove](https://www.amazon.com/ALITOVE-100-240V-Converter-Transformer-5-5x2-1mm/dp/B07MXXXBV8/ref=sr_1_3?dchild=1&amp;keywords=psu+12v+10a+5.5x2.1mm&amp;qid=1591721696&amp;s=electronics&amp;sr=1-3)); or (b) via the 4-pin 12v connector, also on the SATA hat, using a low power (&lt; 200W) PC PSU.  If you're going to use four low revolutions per minute (RPM) 2.5&quot; HDDs (e.g., 5400 RPM), or four SSDs, a 12v PSU that is able to deliver up to 3A should be enough.  However, if you're driving high-RPM 2.5&quot; HDDs (e.g., 7200RPM) or 3.5&quot; HDDs, then do the math before powering the components.  If you want to be safe, just get a 12v PSU that is able to deliver up to 8A.

[![NanoPi M4 PSU connections](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg)

Please note that if you're planning on using a PC PSU, you'll need to &quot;hack it&quot; in order to use the PSU without plugging it into a mobo. 

If you're not 100% sure about tinkering with anything related to electricity, do not attempt to modify any PSU you might have lying around and just buy a 12v (8A) external PSU.  You can die even if the PSU is not connected to an outlet, owing to the presence of massive capacitors inside the PSU.  I cannot emphasize this enough.  Also, don't go around cutting its cables to just make it look cute.  You might need them later. 
{:.notice--danger}

Alright, if you really want to use a PC PSU, follow the instructions in this video (but use a proper cable to connect the pins and make sure it's well secured):

{% include video id=&quot;j4erf6SuqdI&quot; provider=&quot;youtube&quot; %}
{:. text-center}

## 2.5&quot; hard disk drive (HDD)
You can run 3.5&quot; drives as well but if you plan to keep power consumption at a minimum, I suggest running 2.5&quot; drives instead or better yet, SSDs.  Here, I'm going to use **four 2.5&quot; WD Black HDD** because they are fast (7200rpm as opposed to the traditional 5400rpm for 2.5&quot; drives) and I don't have a need for a large local storage space.  (Just be careful that the 1TB 2.5&quot; WD Black [model WD10SPSX is actually SMR](https://www.westerndigital.com/products/internal-drives/wd-black-hdd).)  In general, my preference order is the following: SSD &gt; 2.5&quot; CMR HDD &gt; 3.5&quot; NAS HDD &gt; 3.5&quot; other CMR HDD &gt; 2.5&quot; whatever HDD &gt; 3.5&quot; whatever HDD.  Of course, you don't need to use all four SATA ports if there's no demand for it.

[![2.5&quot; WD Black HDD 500GB](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg)

[![2.5&quot; WD Black HDD 750GB](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg)

## [kirkdis' 3D printed case](https://www.thingiverse.com/thing:3736661)
There are other 3D printed cases out there but I like kirkdis' take on a minimal case for the NanoPi M4 and 2.5&quot; drives.  Notice that there are 3- and 4-bay versions of the HDD case and mounts.  More specifically, for this project, I printed the following pieces: 

* 01 x `topcase_all_versions.stl`
* 01 x `fanmount_all_versions.stl`
* 04 x `4bay_discmount.stl`
* 01 x `4bay_hddbase.stl`

If you don't have a 3D printer, don't worry about it!  Just Google `3d printing service` and you'll find plenty of options to choose from.  You shouldn't have to pay more than $100 for this case, for reference.  Also, remember to [**buy screws**](https://www.amazon.com/hard-drive-screws/s?k=hard+drive+screws) for your HDDs, if you don't have a bunch a lying around. You'll need 08 for the bottom and top HDDs (16) + 04 for each in between (08), for a total of **24 screws** for four drives.

[![3D case stl](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png)

Another option is to buy a [4-bay enclosure for your drives](https://www.amazon.co.uk/OImaster-Backplane-Function-Hot-swap-Transmission/dp/B074V52L9D) and use some sort of [stackable case](https://www.amazon.com/GeeekPi-Raspberry-Cluster-Cooling-Heatsink/dp/B07MW3GM1T/ref=sr_1_1?dchild=1&amp;keywords=stackable+case+rpi&amp;qid=1591726436&amp;sr=8-1) for your NanoPi M4.  If you go with this solution, remember to buy extra spacers to make room for the SATA hat and cables (and you might need longer cables).  Alternatively, you can always use a standard computer case (or rack mounted) that has support for 4 drives.  Get rid of the mobo and you're probably all set (see my note on modifying a PC PSU).

## Fan 50x50x15mm 12v (.08A)
(This fan size is for kirkdis' 3D printed case. You'd want something different if you're using another case.) You can probably find a .2A fan with the same dimensions, which will move more air but will be louder.  (If you're going to use the PWM connector, take a look at [PWM Fan controller](#pwm-fan-controller) to learn how to use it.)

[![50x50x15mm Fan](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png)

Additionally, you might want to buy a filter for the fan. However, notice that *there's no space for the filter inside the 3d printed case* but you can glue/attach it to the outside (that's what I've done with the one I bought).

[![50x50x15mm Fan-filter](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png)

## Cost estimate
For reference, here's how much each hardware component cost me in Brazilian Real (BRL$) and US Dollar (USD$), except for the HDDs.  Values were the total for all units, instead of per unit.  When appropriate, values were converted using the exchange rate from **July 8th, 2020**. Shipping costs were not included.  Notice that all values are likely **overestimating the actual cost** because many products include Brazilian taxes and were bought multiple months ago.

| component | quantity | BRL$ | USD$ |
|:---:|:---:|:---:|:---:|
| NanoPi M4 v2 4GB RAM | 01 | 477.25 | 89.04 |
| Heatsink | 01 | 37.41 | 6.98 |
| 32gb eMMC + mSD adapter | 01 | 144.61 | 26.98 |
| SATA hat | 01 | 149.97 | 27.98 |
| SATA III cable | 10 | 35.9 | 6.7 |
| RTC battery | 01 | 23.52 | 4.39 |
| SATA power Y splitter | 02 | 37.3 | 5.96 |
| 3d printed case | 01 | 155 | 28.92 |
| PSU 12v 10A | 01 | 53.9 | 10.06 |
| 50mm Fan 12v .08A | 01 | 18.8 | 3.51 |
| 50mm Fan filter | 01 | 19.5 | 3.64 |
| TOTAL | - | 1153.16 | 214.16 |

[top](#){: .btn .btn--light-outline .btn--small}

# Software
For the OS, I'm using the **server edition** of the **Armbian Buster** with **Kernell 4.4 (legacy)**. *(Of note, this section has been updated since the original article. In the previous version of the article, I suggested installing the latest Kernel 5.x instead of the legacy 4.4.x. The reason is that I've had multiple stability issues with Kernel 5.x and after switching to legacy, it's been solid as a rock.  That said, I've also read that many users have been running the latest Kernel without any issues, which makes me suspicious that there was somthing corrupted with my previous installation. So, my suggestion is the following: if you can afford testing for a few days, do try the latest Kernel 5.x first, and if you run into issues, reinstall the OS with legacy Kernel; otherwise, if you want it ready and solid right away, go straight to legacy Kernel.)*  You can download the image from the [official Armbian website](https://www.armbian.com/nanopi-m4/#kernels-archive-all).  Don't skip the integrity check.  On Linux, just open a terminal and run ```sha1sum /path/to/file.img.xz``` and check the output against the SHA file from the Armbian website.  This ensures your downloaded file has the same hash as the true file.  If you've ever used Debian or derivatives before (e.g., Ubuntu, Raspbian), Armbian will feel like home. 

[![SSH welcome and lscpu](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg){:.PostImage .PostImage--large }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg)

If you don't like terminals, don't worry.  You pretty much don't need to ever see it again because we'll be managing everything from [Openmediavault 5 (OMV5)](https://www.openmediavault.org).  I've been using OMV since the 3rd edition as my go-to NAS solution and it has never let me down.  It's not super fancy, like freeNAS and unraid, but it will get the job done for most home-users.  Plus, it's free and [open-source](https://github.com/openmediavault/openmediavault) and this matters to me.  It also comes with a bunch of packages that facilitate file sharing, monitoring resources, manage users, plug-ins, etc., and it has a very clean graphical user interface accessible via web-browser (webUI):

[![OMV4 dashboard](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png){:.PostImage .PostImage--large }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png)

In addition, the folks at OMV put together a guide on their Github repo that tells exactly [how to install OMV on Armbian](https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Adden-A-Installing_OMV5_on_Armbian.pdf).  Download their PDF and follow it step-by-step, with the following exceptions:

* Instead of flashing the OS image onto a micro-SD, plug your eMMC into the micro-SD adapter and then flash the OS image onto the eMMC.
* Before turning the NanoPi M4 on with the eMMC installed for the first time, remove any drives connected to the SATA hat.  This is more of a cautionary move than anything else.  We want to minimize the risk of corrupting the eMMC at these initial configuration steps and there's no need for additional drives at this point.  We'll add them after we're done installing OMV5.  The same applies to any other device connected to the NanoPi M4, like USB devices.  Keep it simple right now.

As you'll learn, the OMV installation script will take some time to finish.  We're talking about more than 10min.  Be patient!  Afterwards, open a web browser and log into OMV's WebUI and do your thing or read the [Getting Started Guide](https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Getting_Started-OMV5.pdf) that the OMV team wrote.

## CPU tuning
The **Rockchip RK3399** is a fairly new and nichey system on a chip and therefore, its implementation is not widely stable. On Armbian with Kernel 5.4, for example, I've noticed a few CPU-related Kernel panics that cause the board to freeze/reboot. [Upon further investigation](https://forum.armbian.com/topic/11710-nanopi-m4-v2-m4-image-not-working/page/7/?tab=comments#comment-93238), it seems this issue can be fixed by changing the default CPU governor from *ondemand* to ***conservative***, and setting the *minimum CPU frequency to **1.4GhZ*** and the *maximum to **1.8GhZ***. 

Be extra careful when tuning your CPU because things can go wrong if you set the board to operate in a condition that it was not meant to.  Move slowly and keep an eye on related statistics afterwards to make sure you're not going to fry the board. 
{:. .notice .notice--warning }

There are two ways to change the CPU frequency and governor. The first and recommended one is via the `armbian-config` configuration utility:
```
# Run the configuration utility
armbian-config
# Navitage to CPU options: System / CPU
# Set min frequency to 1416000 Hz
# Set max frequency to 1800000 Hz
# Set the governor to conservative
# Confirm 
# Exit the configuration utility
# Reboot
```

The second method is by making direct changes to the `cpufrequtils` file, as follows:
```
# Edit the cpufrequtils file
echo -e 'ENABLE=&quot;true&quot;\nGOVERNOR=conservative\nMAX_SPEED=1800000\nMIN_SPEED=1416000' &gt; /etc/default/cpufrequtils
# Reboot
```

My board has been running rock solid after making such changes, so I recommend it.  Of course, you can try to use other configurations.  My understanding from what I read about the Kernel panics is that it's likely a power issue caused by the rapid switching of CPU frequencies that the *ondemand* governor makes.  The *conservative* governor also scales the CPU frequency dynamically but much more gradually than the *ondemand* governor.
By this logic, setting the governor to either *performance* or *powersaving* will likely improve stability as well because those governors do not change the CPU frequency at all.


## PWM Fan controller
The **2-PIN PH2.0 connector** on the SATA hat is a power width modulated (PWM) connector for a 12v fan.  

[![PWM fan connector](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg)

However, this connector is not enabled by default and furthermore, the Armbian OS does not come with a service that allows you to control the fan speed according to the CPU temperature.  Fortunately, other users have reported this issue before and a few of them have even written scripts to fix this issue.  I've made several changes to previous scripts (e.g., [mar0ni's script](https://forum.armbian.com/topic/11086-pwm-fan-on-nanopi-m4/?tab=comments#comment-95180)) and wrote a highly configurable fan controller that uses a bounded model to set the fan speed dynamically.  To make it easier for me (and everyone else), I've created a Github repo (**[cgomesu/nanopim4-satahat-fan](https://github.com/cgomesu/nanopim4-satahat-fan)**) for the fan controller.  For more detailed and updated info about the controller, please refer to the repo (and if you've any issues or suggestions, open an issue there).

Briefly, to install and run the script, read the [README.md](https://github.com/cgomesu/nanopim4-satahat-fan/blob/master/README.md) or follow these instructions:

```
# Install git, clone the repo, and test the script

apt update
apt install git
cd /opt

# From now on, if you're not running as root, append 'sudo' if you run into permission issues
git clone https://github.com/cgomesu/nanopim4-satahat-fan.git
cd nanopim4-satahat-fan

# Allow the script to be executed
chmod +x pwm-fan.sh

# Test the script
./pwm-fan.sh

# Check for any error messages 
# When done, press Ctrl+C after to send a SIGINT and stop the script
```

If everything looks good, then run the fan controller in the background (as a systemd service), as follows:

```
# Copy the pwm-fan.service file to your systemd folder
cp /opt/nanopim4-satahat-fan/pwm-fan.service /lib/systemd/system/

# Enable the service and start it
systemctl enable pwm-fan.service
systemctl start pwm-fan.service

# Check the service status to make sure it's running without issues
systemctl status pwm-fan.service
```

**Alternatively**, if you don't want to play around with PWM stuff and are okay with having your fan at 100%, 24/7, then you can just connect it to the board as follows:

[![PWM fan alt connector](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg){:.PostImage .PostImage--small }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg)

Of note, you can also do the latter using the fan controller by running the script in *full speed mode*, as follows:

```
./pwm-fan.sh -f
```

[top](#){: .btn .btn--light-outline .btn--small}

# Assembly
If you're like me, you'll not receive all parts at the same time and you'll only print the case after making sure that the board and hat are both working.

[![Nanopi M4 parts on table](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg){:.PostImage .PostImage--large }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg)

The first thing you'll want to do is **to flash the OS onto the eMMC**.  That's because the eMMC will not be as accessible as a micro-SD card and HDDs once the SATA hat is installed--it is screwed to the board itself, above the audio jack (in v2, and above the HDMI in v1).

After that, install the eMMC and the SATA hat.  Your SBC should look something like this right now:

[![Nanopi M4 with hat 01](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg)

[![Nanopi M4 with hat 02](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg)

Now, it's time to test the board and the SATA hat.  **Connect the board to an Ethernet cable and plug it into your 12v PSU.**  Observe the red and green LEDs as it turns on and starts running the OS for the first time. 

[![Nanopi M4 connected to PSU](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg)

Go ahead and **find out which IP address your DHCP server gave to your NanoPi M4** (you might also be able to find it via the hostname nanopim4) and ping it to check it's up and running.  If it's replying, then **SSH into it** with `root` (default pass is `1234`).  When logging in for the first time, Armbian will ask to change password and to create a new sudo user.  Go ahead and do that.  (I'll assume that from this point on, you'll still be using `root` instead of the sudo user.  If you're using the latter though, then add a ```sudo``` prefix to each of the commands below.)

Afterwards, run the [**armbian configuration utility**](https://docs.armbian.com/User-Guide_Armbian-Config/) to make sure your NAS has the correct time, date, UTC offset, apt mirrors, etc., by running the command
```
armbian-config
```
(Depending on what you chose to change here, Armbian will need to reboot.  That's fine.  Just SSH into it again afterwards.)  Now, let's make sure all packages that came with the OS are up-to-date by running
```
apt update &amp;&amp; apt upgrade -y
```
Go back to your router/firewall and assign a static IP address to your NanoPi M4 and then reboot the NanoPi
```
reboot now
```
After reboot, wait a few seconds and try to SSH into the static IP address you gave to the NanoPi and if everything looks good, it's time to run the **OMV installation script** (see [**software**](#software)).  Again, this will take some time.  **Be patient!**  When it's done, open a web-browser and type the static IP address of your NanoPi M4.  At this point, it's a good idea to do at least the following in **System** (remember to **Apply changed settings** every time it asks you to):

1. Change your default admin password in **General Settings**.  This will only affect access to OMV's webUI.  It has nothing to do with your Linux user credentials;
2. Check **Date/Time** settings to make sure they are right;
3. Enable **System Monitoring**;
4. Enable and configure **Notification**;
5. In **Power Management**, enable Monitoring and select the Shutdown action for the power button;
6. **Reboot** via the webUI (arrow at the top right corner / reboot).

After rebooting, check your **Storage** and **Diagnostics** tabs.  In Storage / Disks, there should be a single device for the OS eMMC.  Later on, we will come back to see if the drives plugged into the SATA hat are showing up here. 

In Diagnostics / Sys Info, check all tabs to make sure they are displaying things correctly.  Your OMV should be collecting Performance Stats at this point, so there should be graphs available. 

(If you're new to OMV, take your time here and explore it a little bit.  This is a good time to read the Getting Started guide and get yourself familiarized with the webUI.)

If everything is good, **shutdown the NanoPi via the webUI**.  With everything off (none of the LEDs should be red), plug one or more HDDs to the SATA hat, as follows (I'm using an old 500GB Toshiba 2.5&quot; HDD in the pictures below just for testing):

[![Nanopi M4 hat HDD test](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg)

Now, **turn on** the board.  You should notice a new LED on the other side of the SATA hat lighting up right away.  (The hat has LEDs for each SATA port.  If it's not lighting up for a connected drive, you already know there's a problem, like insufficient power or a bad connection.)  Go to the **OMV webUI** and in **Storage / Disks**, see if the NanoPi was able to detect your HDD connected to the SATA hat correctly.  If not, press the 'Scan' button and check again.  You can repeat this process for each SATA interface if you want.

[![Storage/Disks OMV webUI](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg){:.PostImage .PostImage--large }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg)

At this point, if it looks like the board and SATA hat are working as they should, then **it's time to put everything inside the case**.  

## My printed cases
As I've mentioned before, I'm using kirkdis' 3D printed case. I printed two cases for this project. This is the first one:

[![CGomesu case 01](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg)

[![CGomesu case 02](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg)

And here's the second (backup) case:

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg)

[In kirkdis' last post](https://scheisser.net/?p=7781), he mentioned 
&gt; &quot;... to be careful when you put the upper case over the external ports as this is the most fragile part. Designwise I didn´t found a workaround for this area as result it can happen if you push too much that the connections between the ports break off but with a liztle bit patience you can set iz in place as one piece.&quot; 

I think I read his comment a bit too late:

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg)

but I managed to fix it a little bit by the end:

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg)

### My opinion about the case

The HDD case and disk mounts feel very sturdy in comparison to the board case (a.k.a. upper case). I feel the **board case** could be improved in the following way:

1. Add **thicker walls**, especially where the USB ports and the DC jack are;
2. Add a way of **screwing** the board to the case;
3. Make the base of the fan mount thinner, so we can use the screws that come along with the board, instead of having to find longer screws just for that.  

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg)

Regarding the **whole case**:

1. It could be **a bit larger** to make room for the cables and improve air flow.  Right now, it's an extremelly tight fit if you're using four HDDs and some cables get bent in ways that are probably not good for them in the long run;
2. Because all printed pieces are so tightly connected to each other, **there's very little room for error** when printing them. I feel that both the HDD case and board case should be a little looser and rely more on **screws** to secure the printed pieces to the hardware.  Honestly, it was kind of a pain to attach and remove the board to the board case, and similarly, the HDD stack to the HDD case. It felt *too* tight with both cases I printed.

Honestly, I don't know shit about 3d printing.  This is just my opinion on how the case could be improved.  If something I said doesn't make sense, let me know.

### Procedure
If you don't want to figure out how to put all pieces together on your own, take a look at kirkdis' video and notice how he disassembled his unit:

{% include video id=&quot;zmxovsvsy_I&quot; provider=&quot;youtube&quot; %}

My advice is to do the following:

* Start by attaching the HDDs to the four disk mount pieces, so that you have a nice stack by the end of this step;

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg)

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg)

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg)

* Connect all the SATA data and SATA power cables to the SATA hat;

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg)

* Attach the fan to the mount and the mount to the SATA hat and plug it to the board;

* Put the board with the fan mount inside its case, making sure all the SATA cables are accessible from the other side of the case, where the HDDs will be;

* Attach the HDD stack to the base of the board case and connect the SATA cables;

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg)

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg)

* Now, cover the HDD stack with its case and screw the bottom of the case to the last HDD;

[![CGomesu backup case](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg){:.PostImage}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg)

* Connect your PSU to the DC power jack on the SATA hat;

* Turn it on.

Voilà!  Check your OMV webUI to make sure it detected all connected disks and then start mounting them and adding your file sharing configurations, installing applications, adding users, etc. 

[![Nanopi M4 hat 4 HDD test](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg){:.PostImage .PostImage--large}](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg)

[top](#){: .btn .btn--light-outline .btn--small}

# Final Remarks
I'm very happy with this mini-NAS.  It's arguably not as powerful as my previous HP Proliant Gen8 that I turned into a NAS but it is **more energy efficient**, **smaller**, **quieter** and **cheaper**.  

Regarding applications, I strongly suggest you to take a look at [Docker](https://www.docker.com/) and [Portainer](https://www.portainer.io/).  You can install both Docker and Portainer from within the OMV webUI (System / OMV-Extras / Docker - Docker Install; Portainer Install).  They make installing and managing applications so much easier.  Just be mindful that you're running docker within an **ARM architecture**, so any image must have a compatible **arm release** to be able to run with the NanoPi M4.

I don't use any sort of RAID solution for this NAS.  Instead, I use unionFS/mergerFS to pool multiple drives/folders into individual folders and then have various applications running periodic local backups and overnight remote backups.  (The SATA hat *does not support hardware RAID* but if you're into redundancy, then it's possible to create a software RAID from within the OMV webUI.)

Here's an overview of how I'm currently organizing my mini-NAS:

[![mini-NAS drives and folders](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png){:.PostImage .PostImage--large }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png)

[According to kirkdis](https://forum.openmediavault.org/index.php?thread/29089-nanonas-nanopi-m4-3-bay-or-4-bay-most-compact-and-low-consumption-raid/), a NanoPi M4 mini-NAS with three 2.5&quot; HDDs consumes between **7W** (idle) and **20W** (heavy load). I cannot measure the actual power consumption of my build but I think it's safe to assume that it consumes a bit more power than kirkdis', especially under heavy load. I estimate that mine consumes between 9W (idle) and 25W (heavy load), owing to the fact that my HDDs have a higher RPM and I'm using an additional 2.5&quot; HDD.  For comparison, a [Synology Diskstation DS918+ with four 3.5&quot; HDDs](https://www.techpowerup.com/review/synology-ds918plus/13.html) consumes between 27W (idle) and 44W (heavy load).

Well, this concludes my NanoPi M4 mini-NAS project. I hope you enjoyed this article and that it will inspire you to create something for your own use-case.  As usual, let me know if you have any questions or suggestions.

[top](#){: .btn .btn--light-outline .btn--small}

# Bonus Content
## Real time clock
The NanoPi M4 comes with a built-in real time clock (RTC) module and to use it, all that you need is a compatible **RTC battery** with a *Molex 53398-0271 connector*:

[![RTC battery](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg){:.PostImage }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg)

As the name suggests, its main purpose is to keep track of time, regardless of the board's power state.  However, it also supports waking up the NanoPi from various power states.  On Linux, you can access and configure all such options with a package called `rtcwake`, which comes pre-installed on Armbian (and pretty much any other Linux distro, by the way, because it's part of the `util-linux` core package).  (If the package is not accessible from within your user's `$PATH`, try `whereis rtcwake` and type the entire `/path/to/rtcwake`.)  You can find info about its usage with the standard `--help` argument. For more detailed info, read `man rtcwake`. An RTC battery is *really* cheap ([less than $10](https://www.amazon.com/Rtc-Battery/s?k=Rtc+Battery)) and worthy of your attention for such a key component of a home network.  You definitely don't want your mini-NAS time travelling to 1970...

[![RTC battery](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg){:.PostImage }](/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg)

[top](#){: .btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="sbc" /><category term="arm" /><category term="homelab" /><category term="homeserver" /><category term="storage" /></entry><entry><title type="html">The ASRock J3355b-itx pfSense box</title><link href="/blog/Pfsense-white-box/" rel="alternate" type="text/html" title="The ASRock J3355b-itx pfSense box" /><published>2020-06-25T10:31:25-03:00</published><updated>2020-06-25T10:31:25-03:00</updated><id>/blog/Pfsense-white-box</id><content type="html" xml:base="/blog/Pfsense-white-box/"># Introduction
[pfSense CE](https://www.pfsense.org/) is a free, [open-source](https://github.com/pfsense/pfsense), and very popular **firewall/router** that runs on [FreeBSD](https://www.freebsd.org/) and is developed by [Netgate](https://www.netgate.com/).  Even though Netgate sells [official pfSense appliances](https://www.netgate.com/products/appliances/), it's possible to build your own, custom-made pfSense box for (way) less money (at the expense of way less support from Netgate). 

In this article, I talked about **my ASRock mini-ITX pfSense box project**.  In the first part, I listed all the necessary hardware to build the box, and in the second part, I briefly talked about the software.

[top](#){: .btn .btn--small .btn--light-outline}

# Hardware
This project has five main hardware components, namely the **motherboard** (mobo), the **network interface card** (NIC), **storage**, **case**, and **power supply unit** (PSU).

## Motherboard
Chances are that if you search for ```pfSense white-box```, you'll find someone mentioning the [**ASRock J3355b-itx**](https://www.asrock.com/mb/Intel/J3355B-ITX/).  This is definitely **not a top of the line** mobo but it comes with a **passively cooled [Intel dual-core processor](https://ark.intel.com/content/www/us/en/ark/products/95597/intel-celeron-processor-j3355-2m-cache-up-to-2-5-ghz.html)** (AES-NI enabled), two **SO-DIMM DDR3L** memory slots, a **PCIe 2.0x16** expansion slot, and 2x SATA III ports.  On top of that, this is a ***mini*-ITX mobo**, so we can put it inside a low-profile case.  At the very least, if you're looking for a more recent mobo, my suggestion is to use the ASRock J3355b-itx as reference.

[![ASRock J3355b-itx](/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg)

## Network interface card
Even though the ASRock mini-itx comes with a built-in NIC, it's a single port Realtek NIC that pfSense will likely not recognize out of the box.  Ideally, you'd buy and install an Intel NIC using the PCI-e expansion slot on the ASRock mobo.  The card choice depends on your needs but at the very least, consider a **Gigabit Intel NIC with two ports**, one for WAN and another for LAN.  (It's possible to use a single port with a VLAN-capable switch but this is a far more complex setup.)  Also, make sure the Intel NIC comes with a **low-profile support** or it won't fit many min-ITX cases.

[![Intel NIC with 2 ports](/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg)

## Storage
pfSense uses very little storage space, so you don't need TBs of storage here.  The things that matter are read/write speed and reliability.  A simple **120GB solid-state drive (SSD)** will be more than enough, for example. 

[![SSD](/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg)

## Case
You can use *any* mini-ITX case *as long as* it has support for at least **one expansion slot**.  Also, note that some mini-itx cases have an expansion slot parallel to the mobo (it sits above the mobo's i/o plate), instead of perpendicular (next to the mobo's i/o plate).  That will usually be okay but you'll need to buy compatible PCI-e extension cable then.

[![Case](/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg)

[![Case](/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg)

[![Case](/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg)

[![Case](/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg)

## Power supply unit
If you bought an expensive case with a built-in PSU, go ahead and use it.  However, if you bought a cheap case with a PSU or one that even doesn't have a built-in PSU, then buy and use a [**pico PSU**](https://www.amazon.com/s?k=pico+PSU). My experience is that **cheap PSUs come with bad fans**, so avoid them if your firewall will be next to anyone in the house because it will eventually start making a lot of noise.  A pico PSU is the way to go, and because this box uses very little power, buy a low power PSU (anything between 60W-180W should be okay, for reference).

[![PicoPSU](/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg){: .PostImage}](/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg)

[top](#){: .btn .btn--light-outline .btn--small}

# Software
Software-wise, there's not much to say other than

1. Download the ISO from the [official website](https://www.pfsense.org/download/);
2. Check the SHA signature of the downloaded file against the one from the official website;
3. Flash the image onto a USB stick;
4. Connect a monitor and keyboard to your pfSense box;
5. Insert the USB stick into your pfSense box, turn it on, and follow the instructions.

Now, if you want a more in-depth look into installation and initial configuration, check [**the official docummentation**](https://docs.netgate.com/pfsense/en/latest/install/installing-pfsense.html).  Alternatively, there's a very easy to follow video tutorial that [Lawrence Systems](https://www.youtube.com/channel/UCHkYOD-3fZbuGhwsADBd9ZQ) put together. (It's a bit old but still valid.)

{% include video id=&quot;9kSZ1oM-4ZM&quot; provider=&quot;youtube&quot; %}

[top](#){: .btn .btn--light-outline .btn--small}

# Conclusion
This concludes the basics of a cheap, low-profile, and low-power (yet powerful) pfSense white-box.  I've never had any issues with this hardware and recommend it to anyone interested in diving into firewalls or just looking for something a bit more advanced than what commercial routers can offer.  If you want to try something different than pfSense, take a look at [OPNsense](https://opnsense.org/)--a pfSense fork--for another free and open-source firewall software.

[top](#){: .btn .btn--light-outline .btn--small}</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="homelab" /><category term="homeserver" /><category term="firewall" /><category term="network" /></entry></feed>