<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-07-22T13:22:46-03:00</updated><id>/feed.xml</id><title type="html">CGomesu</title><subtitle>A blog and portfolio website built with Jekyll and hosted on Github Pages</subtitle><author><name>Carlos Gomes</name></author><entry><title type="html">Forge and XMage: The best free and open source rules engines for ‘Magic: the Gathering’</title><link href="/blog/forge-xmage-mtg/" rel="alternate" type="text/html" title="Forge and XMage: The best free and open source rules engines for ‘Magic: the Gathering’" /><published>2022-07-18T12:00:00-03:00</published><updated>2022-07-18T12:00:00-03:00</updated><id>/blog/forge-xmage-mtg</id><content type="html" xml:base="/blog/forge-xmage-mtg/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;July 18th, 2022&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been playing &lt;a href=&quot;https://magic.wizards.com&quot;&gt;Magic: the Gathering&lt;/a&gt; (MtG) for as long as the game exists. If you have never heard about it before, MtG is a trading card game (TCG) created by &lt;a href=&quot;#&quot;&gt;Richard Garfield&lt;/a&gt; and released in 1993 by &lt;a href=&quot;#&quot;&gt;Wizards of the Coast&lt;/a&gt; (WotC). It is arguably the most successful TCG ever made and even though it was originally popularized as a paper format TCG, it has long been ported to digital formats. The main MtG client developed by WotC is called &lt;a href=&quot;#&quot;&gt;MTG Online&lt;/a&gt; (MTGO) and it requires users to buy digital versions of paper Magic cards to trade and play with other users on private servers. The development of such client has gone through many changes over the years but most of the details are unknown to the public because MTGO is not open source and a large portion of its functionality happens in the cloud. On top of that, MTGO only runs on Windows, leaving many of us nix users (e.g., GNU/Linux, macOS) without official support.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/card-fow.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/card-fow.jpg&quot; alt=&quot;Card - FoW&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, there are &lt;strong&gt;free and open source software&lt;/strong&gt; (FOSS) alternatives to MTGO that &lt;strong&gt;do not&lt;/strong&gt; require users to buy digital objects (cards) to play MtG. In this article, I talked about two of the main MtG rules engines (RE) currently available for offline and online play: &lt;strong&gt;Forge&lt;/strong&gt; and &lt;strong&gt;XMage&lt;/strong&gt;. More specifically, the article covers the main features of the Forge and XMage REs, how to install and use each one of them, and how you can contribute to maintain their development because these two projects are essentially community-driven. This is possible and completely legal because just like no company can claim ownership over the game of &lt;a href=&quot;https://en.wikipedia.org/wiki/Poker&quot;&gt;poker&lt;/a&gt;, WotC cannot claim ownership over the rules that constitute a game of MtG.&lt;/p&gt;

&lt;p&gt;If you are interested in using and learning more about Forge and XMage, then keep on reading. As it is customary with my articles, I try to keep them up-to-date to reflect my current knowledge about the content, so if this is not your first time here, make sure to check the &lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt; for updates. Also, if you spot an error or disagree with something that I wrote or want to improve this article, feel free &lt;a href=&quot;/contact&quot;&gt;to get in touch with me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This article is divided into four main sections. The first is an optional and brief introduction to the game of MtG, called &lt;a href=&quot;#the-basics-of-mtg&quot;&gt;the basics of MtG&lt;/a&gt;. This section is recommended only for those who are not familiar with the basic rules of MtG and want to get a taste of what the game is all about.&lt;/p&gt;

&lt;p&gt;The next two main sections are part of the &lt;a href=&quot;#mtg-rules-engines&quot;&gt;MtG rules engines&lt;/a&gt;, in which I described the &lt;a href=&quot;#forge&quot;&gt;Forge&lt;/a&gt; and the &lt;a href=&quot;#xmage&quot;&gt;XMage&lt;/a&gt; MtG REs in detail. More specifically, each of those two sections cover the development, features, and installation process of each RE. If you are only interested in learning how to install and use them, then simply jump straight to their respective section.&lt;/p&gt;

&lt;p&gt;The third and last main section, called &lt;a href=&quot;#contributing&quot;&gt;Contributing&lt;/a&gt;, covers aspects about how you can help each project. I found this necessary because both Forge and XMage are quintessential community-driven projects and on top of that, they are very good examples of FOSS applied to gaming.  Reporting issues, writing card scripts, and setting up a (versioned) project directory are examples of the content covered in the last section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-basics-of-mtg&quot;&gt;The basics of MtG&lt;/h1&gt;
&lt;p class=&quot;notice--success&quot;&gt;This section is optional for anyone who is already familiar with MtG. Feel free to &lt;a href=&quot;#mtg-rules-engines&quot;&gt;skip to the next section&lt;/a&gt; if this is the case.&lt;/p&gt;

&lt;p&gt;If you have never played MtG before and you are curious about it, then take a look at the following video to learn the basics before moving onto the next sections.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/RZyXU1L3JXk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h1 id=&quot;mtg-rules-engines&quot;&gt;MtG rules engines&lt;/h1&gt;
&lt;p&gt;The starting point of any game is a set of rules that tell us how the game is played. In most card games (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Bank&quot;&gt;monte bank&lt;/a&gt;), this amounts to just a few basic rules that we can count on our fingers. In MtG, however, there are &lt;strong&gt;over 250 pages of rules&lt;/strong&gt;, which are described in detail in the &lt;a href=&quot;https://magic.wizards.com/en/rules&quot;&gt;MtG Comprehensive Rules book&lt;/a&gt;. As a player, you are not supposed to go over all such rules in order to play the game. In fact, most of us just learn the basics first (e.g., the concepts of mana, casting, phases, card zones, and win conditions), leaving the specifics to be learned as we play the game. Nonetheless, the sheer amount of specific rules in MtG does indicate that MtG is a complex game, and therefore, its digital implementation is non-trivial. This alone speaks volumes about the individuals who have taken for themselves the task of implementing the game, especially those who have done so without the support of a business, and the development of both Forge and XMage falls very much into such category.&lt;/p&gt;

&lt;p&gt;Forge and XMage have in common the fact that they are both written in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/a&gt;–a mature and object oriented language–which makes them easily portable. In fact, contrary to MTGO, they run on pretty much any operating system. In addition, neither Forge nor XMage tries to simply emulate MTGO features; they actually introduce many &lt;strong&gt;new features&lt;/strong&gt;. A major and common one is that both Forge and XMage allow users &lt;strong&gt;to play against the computer (AI)&lt;/strong&gt;. In addition, because both applications are free to use, it is not necessary to make any financial investment to play MtG, whereas buying MTGO cards can sometimes feel more like buying stocks than playing a card game.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;After that last point, I feel I should note that MTGO outshines any other MtG RE &lt;strong&gt;by a huge margin&lt;/strong&gt; when it comes to &lt;strong&gt;online play&lt;/strong&gt;. The community around it and the events are definitely unique and in my opinion, the strongest features of MTGO and I dare say, worth your money if you are into MtG.&lt;/p&gt;

&lt;p&gt;However, even though Forge and XMage are both MtG REs, they are not mutually exclusive implementations of the game. Forge, on the one hand, has very unique play modes for single player, such as &lt;strong&gt;Quests&lt;/strong&gt;, which are reminiscent of the old &lt;a href=&quot;#&quot;&gt;Shandalar&lt;/a&gt; MtG role playing game (RPG) by MicroPose. XMage, on the other hand, has a very reliable implementation of &lt;strong&gt;online play&lt;/strong&gt;, which is quite unreliable in Forge. In other words, each RE has its strengths and weaknesses, which I summarized in the following table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Engine&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Strengths&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Weaknesses&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Forge&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Various single player modes for &lt;strong&gt;offline play&lt;/strong&gt; against the computer. Beautiful and customizable graphical interface. Runs on mobile (Android) as well as desktop. Supports card scripting. Supports almost every single card in MtG.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The AI will occasionally make very dumb plays–it’s said that the AI works best with aggro strategies, as opposed to combos. Even though networking features exist for online play, it is quite unreliable.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;XMage&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Large community and arguably the most mature (unofficial) MtG RE available. Solid implementation of multiplayer, human vs. human, and &lt;strong&gt;online play&lt;/strong&gt;.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Installation and usage can be challenging for non-tech users. It does not support as many cards as Forge but you’ll only notice it if you play with unusual cards that were never reprinted since Eventide.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice--info&quot;&gt;For more comparisons, refer to the &lt;a href=&quot;https://www.slightlymagic.net/wiki/List_of_MTG_Engines&quot;&gt;Slightly Magic wiki list of MtG REs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In brief, my opinion is that if you are looking for a single player experience, then try Forge. Now, if you want to play with friends online, then try XMage. Are you unsure? Try both! I think they are both great examples of FOSS applied to gaming and they complement each other in many aspects.  In any case, check the following sections for specifics about each of those MtG REs.&lt;/p&gt;

&lt;h2 id=&quot;forge&quot;&gt;Forge&lt;/h2&gt;
&lt;p&gt;Forge was originally written by a single individual (&lt;a href=&quot;https://mtgrares.blogspot.com/&quot;&gt;mtgrares&lt;/a&gt;) around the mid-2000s, then started being (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;) versioned in 2011 by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jendave&lt;/code&gt;. The project has since grown a lot and is currently maintained by a large number of &lt;a href=&quot;https://github.com/Card-Forge/forge/graphs/contributors&quot;&gt;contributors and a group of core developers&lt;/a&gt;. It has been particularly active ever since 2017 and its repository is currently being hosted on Github (&lt;a href=&quot;https://github.com/Card-Forge/forge&quot;&gt;Card-Forge/forge&lt;/a&gt;). Of note, Forge has both a &lt;strong&gt;desktop release&lt;/strong&gt;, which is the main focus of this guide, and a mobile (Android) release, which is only briefly mentioned in the &lt;a href=&quot;#android-apk&quot;&gt;Android APK&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-01.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-01.png&quot; alt=&quot;Forge - GUI&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-gameplay-01.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-gameplay-01.png&quot; alt=&quot;Forge - GUI - Gameplay&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned before, Forge features a very unique (&lt;em&gt;and hella fun!&lt;/em&gt;) set of single player modes, namely &lt;strong&gt;Quest mode&lt;/strong&gt;, &lt;strong&gt;Puzzle mode&lt;/strong&gt;, and &lt;strong&gt;Gauntlets&lt;/strong&gt;. The Quest mode plays like an RPG game in which you can improve your deck over battles against the computer. The Puzzle mode is pretty much self-explanatory: it gives you MtG puzzles to solve, such as how to win given a board state. Finally, the Gauntlets consist of a group of customizable players that play each other in a tournament-like fashion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-quest.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-quest.png&quot; alt=&quot;Forge - GUI - Quest&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-puzzle.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-puzzle.png&quot; alt=&quot;Forge - GUI - Puzzle&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-gauntlet.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-gauntlet.png&quot; alt=&quot;Forge - GUI - Gauntlet&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it would be expected from an MtG RE, Forge also features a full blown &lt;strong&gt;deck editor&lt;/strong&gt;. The editor lets users customize existing decks, build new ones, import from other applications, websites or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txt&lt;/code&gt;, and also export decks created with Forge to other applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-editor.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-editor.png&quot; alt=&quot;Forge - GUI - Editor&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interface-wise, Forge is actually my favorite MtG RE. Almost everything can be edited to the user’s liking and they even have a &lt;strong&gt;theme&lt;/strong&gt; selector feature. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Magic&lt;/code&gt; is my favorite one.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-02.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-02.png&quot; alt=&quot;Forge - GUI - Alt 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-03.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-gui-03.png&quot; alt=&quot;Forge - GUI - Alt 03&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;gameplay-demo&quot;&gt;Gameplay demo&lt;/h3&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/VgBKh913oW8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;Forge requires a &lt;strong&gt;Java Runtime Environment&lt;/strong&gt; (JRE) to run the desktop application and a screen resolution of at least &lt;strong&gt;1024x768&lt;/strong&gt; (the bigger, the better). In my experience, the application can be a bit memory hungry at times but anything with at least &lt;strong&gt;4GB of RAM&lt;/strong&gt; should be just fine.&lt;/p&gt;

&lt;p&gt;For reference, the following table shows the versions of the software I used at the time of writing:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;application&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openjdk 11.0.15 2022-04-19&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forge&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.6.53&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For information about how to install JRE and Forge, take a look at the next section.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;As before, Forge requires JRE to run, so &lt;a href=&quot;https://www.java.com/download/&quot;&gt;download and install Java on your machine&lt;/a&gt;. If you are running GNU/Linux, you can check whether Java is already installed (and in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;) via terminal, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should output the full path to your Java application. If it doesn’t find anything, then you gonna have to install it.  In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;-based distributions, such as Debian and Ubuntu, you can install the OpenJDK JRE as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install default-jre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;The Java Development Kit (JDK) itself is not necessary to run Java applications. You only need the JDK if you want to, say, compile java files into bytecodes that can be executed by the Java Virtual Machine (JVM), which is something you would do if contributing to the development and testing of a Java project. However, if you want to install the JDK as well as JRE, you can do so via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install default-jre default-jdk&lt;/code&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;If your distro does not use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; as package manager, just change the previous command to match whatever package manager you use. &lt;strong&gt;Alternatively&lt;/strong&gt;, use the download link mentioned before to download Oracle JRE and follow the instructions mentioned there instead. (OpenJDK is also maintained by Oracle and in this sense, Oracle JRE and OpenJDK JRE are both official JREs.)&lt;/p&gt;

    &lt;p&gt;then check its version to make sure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; is now reachable and is associated to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; OpenJDK version we installed before:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openjdk 11.0.15 2022-04-19
OpenJDK Runtime Environment (build 11.0.15+10-post-Debian-1deb11u1)
OpenJDK 64-Bit Server VM (build 11.0.15+10-post-Debian-1deb11u1, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default-jre&lt;/code&gt; package is often way behind the latest release but should be enough to run most Java applications. However, if you want to install the latest OpenJDK JRE package via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;, you will have to find what is available for your distribution and its repositories first.  For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt show openjdk-*-jre&lt;/code&gt; should list all OpenJDK JREs available for you. At the time of writing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openjdk-17-jre&lt;/code&gt; is the latest OpenJDK JRE version available in Debian 11.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Download and install Forge&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Forge for desktop has &lt;strong&gt;stable&lt;/strong&gt; and &lt;strong&gt;snapshot&lt;/strong&gt; releases.  As the name suggests, snapshot are edge releases that contain the latest changes from source that have not been thoroughly tested, while stable releases contain changes that have been tested before. Most users should favor the &lt;strong&gt;stable release&lt;/strong&gt; over snapshot. The stable desktop releases can be found at the following website:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://releases.cardforge.org/forge/forge-gui-desktop/&quot;&gt;https://releases.cardforge.org/forge/forge-gui-desktop/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;then look for the latest release version (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.6.53&lt;/code&gt;), which you can check by looking at the dates or comparing against the &lt;a href=&quot;https://github.com/Card-Forge/forge/tags&quot;&gt;tags in the official repository&lt;/a&gt;, and download then the associated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar.bz2&lt;/code&gt; (and optionally, its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md5&lt;/code&gt; hash to make sure the downloaded file matches the remote). Alternatively, you might want to try the following to download the latest Forge tarball and hash via terminal:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;make sure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; are installed:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install curl jq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;move into this user’s Downloads dir:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Downloads/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;create a variable that stores de latest Forge version, according to the github repo:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FORGE_LATEST=$(curl https://api.github.com/repos/Card-Forge/forge/tags | jq -r '.[0].name' | grep -oE &quot;[[:digit:]]{1}\.+[[:digit:]]+\.+[[:digit:]]+&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;download the latest Forge files from cardforge.org:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O &quot;https://releases.cardforge.org/forge/forge-gui-desktop/$FORGE_LATEST/forge-gui-desktop-$FORGE_LATEST.tar.bz2&quot;
curl -O &quot;https://releases.cardforge.org/forge/forge-gui-desktop/$FORGE_LATEST/forge-gui-desktop-$FORGE_LATEST.tar.bz2.md5&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;after downloading the files, check hashes:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;$(cat forge-gui-desktop-$FORGE_LATEST.tar.bz2.md5) forge-gui-desktop-$FORGE_LATEST.tar.bz2&quot; | md5sum -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Once you have downloaded the tarball, extract it to a directory of your liking. Personally, I like to store such applications on a directory called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applications&lt;/code&gt; under my user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/cgomesu/Applications/&lt;/code&gt;):&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;create an Applications dir for the current user if it doesn’t exist:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ ! -d &quot;$HOME/Applications/&quot; ]; then mkdir &quot;$HOME/Applications&quot;; fi
cd &quot;$HOME/Applications/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;extract the tarball into a subdir called forge-gui:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir forge-gui
tar -xvf &quot;$HOME/Downloads/forge-gui-desktop-$FORGE_LATEST.tar.bz2&quot; -C ./forge-gui/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p class=&quot;notice--warning&quot;&gt;If you have not declared and initialized a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FORGE_LATEST&lt;/code&gt; variable before, then just edit the name of the tarball to match yours before running the command above.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Now move into the newly created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forge-gui&lt;/code&gt; dir&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd forge-gui/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and at its root, you should find executables to start the application. For &lt;strong&gt;GNU/Linux&lt;/strong&gt; and macOS users, there is a &lt;strong&gt;shell script&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forge.sh&lt;/code&gt; that can be used to run Forge via the script’s shebang:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./forge.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;or by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh&lt;/code&gt; directly:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh forge.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This will start loading the Forge’s graphical interface. If you run into issues, review your steps and then check the official &lt;a href=&quot;https://github.com/Card-Forge/forge/wiki&quot;&gt;Forge Wiki&lt;/a&gt; for alternative instructions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Initial configuration&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Now that Forge is up and running, go to &lt;strong&gt;Game Settings&lt;/strong&gt;. I usually take this opportunity to configure my &lt;strong&gt;Preferences&lt;/strong&gt; to automatically download missing art (Game Settings &amp;gt; Preferences &amp;gt; Graphic Options &amp;gt; Check ‘Automatically Download Missing Card Art’), which prompts Forge to download card art on demand. Afterwards, head to &lt;strong&gt;Content Downloaders&lt;/strong&gt; and at the very least, go ahead and download the following items:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Quest images&lt;/li&gt;
      &lt;li&gt;Achievement images&lt;/li&gt;
      &lt;li&gt;Card prices&lt;/li&gt;
      &lt;li&gt;Skins&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;The other options will take a long time to complete, so I usually prefer to let the on-demand option we checked before to handle missing art.&lt;/p&gt;

    &lt;p&gt;Now, if you don’t feel like opening a terminal every time you want to run Forge, I strongly suggest you to create a custom &lt;strong&gt;launcher&lt;/strong&gt; for it. In GNU/Linux, the specifics of how to create a launcher depends a lot on the distribution and more specifically, the desktop environment you are using (e.g., XFCE, GNOME, KDE). Here’s how my current launcher configuration looks like:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-xfce-launcher.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/forge-xfce-launcher.png&quot; alt=&quot;Forge - XFCE launcher&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice--info&quot;&gt;My desktop environment of choice for Debian is &lt;a href=&quot;https://www.xfce.org/&quot;&gt;XFCE&lt;/a&gt; and the maintainers have already documented &lt;a href=&quot;https://docs.xfce.org/xfce/xfce4-panel/launcher&quot;&gt;how to create custom launchers&lt;/a&gt;, so I won’t cover such details here.&lt;/p&gt;

    &lt;p&gt;If you change location of your current Forge desktop application, you can simply edit the desktop launcher to point to the new directory under which the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forge.sh&lt;/code&gt; helper script is located.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android-apk&quot;&gt;Android APK&lt;/h3&gt;
&lt;p&gt;Forge is very unique in which it also &lt;strong&gt;runs on Android&lt;/strong&gt;, so you can install it on your mobile or tablet running &lt;strong&gt;Android 9&lt;/strong&gt; or newer. The Android interface has its own peculiarities–because the application is designed for mobile–but if you are familiar with the desktop version, you will get the hang of the mobile version very quickly.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;There are older versions of the Forge MtG RE for Android that run on versions of Android older than Android 9 (Pie). This is an alternative if you are not running a modern Android OS but of course, such versions of the RE do not have cards from the latest sets, functionalities that were implemented recently, and so on. If that is okay, then when selecting the Forge version in the instructions below, just try older ones until you find one that works with your device and Android version.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/NyjU1KN1Rv4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;As far as I’m aware, the Forge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt; (Android package) is not distributed via any well known app store (e.g., Google’s Play Store, F-Droid), so you will need to download and install it from the official website.  In addition, the app requires &lt;em&gt;storage permission&lt;/em&gt; in order to function, so once we have installed it, we need to manually add such permission for it to work. If that sounds good and you want to give it a try, then follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Grab your Android device.&lt;/li&gt;
  &lt;li&gt;We need to allow our Internet Browser (and possibly, File Manager) to install apps from &lt;strong&gt;unknown sources&lt;/strong&gt;. By default, such option is disabled. To enable it, go to &lt;strong&gt;Settings&lt;/strong&gt; and search for ‘unknown source’, then follow the options to allow your Internet browser of choice (e.g., DuckDuckGo, Chrome) to install apps from unknown sources.&lt;/li&gt;
  &lt;li&gt;Navigate to the cardforge.org website (see below) to &lt;strong&gt;download the latest Forge apk&lt;/strong&gt;. First, you need to find the latest Forge version available (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.6.53&lt;/code&gt;). Then, find the corresponding directory that ends with three additional numbers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.6.53.001&lt;/code&gt;) and enter in whichever one is the highest for the last Forge version (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;004&lt;/code&gt;). Inside such subdirectory, there should be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt; file that you can download and then install.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://releases.cardforge.org/forge/forge-gui-android/&quot;&gt;https://releases.cardforge.org/forge/forge-gui-android/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After downloading, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt; and follow instructions to &lt;strong&gt;install the Forge&lt;/strong&gt;. When done, close the install window.&lt;/li&gt;
  &lt;li&gt;Search for the Forge app icon in your home screen or app list. Then go into its &lt;strong&gt;App info&lt;/strong&gt; &amp;gt; Permissions and allow it access to &lt;em&gt;Files and media&lt;/em&gt; (or &lt;em&gt;Storage&lt;/em&gt;, depending on which Android version you are running).&lt;/li&gt;
  &lt;li&gt;Now, open the Forge app and follow instructions to download the assets (main images, sounds, etc.) and when done, it should ask you to restart the application.&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Optional&lt;/em&gt;.) Once the application is up an running, go to its &lt;em&gt;Settings&lt;/em&gt; and check the option to download missing art on demand, just like we’ve done with the desktop release, and the go to the &lt;em&gt;Settings &amp;gt; Files&lt;/em&gt; tab and download the Quests, Achievements, etc., missing images as well.&lt;/li&gt;
  &lt;li&gt;That is it!  Enjoy Forge on your mobile.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;card-scripting&quot;&gt;Card scripting&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res/cardsfolder/&lt;/code&gt; directory of your Forge for desktop application, you will find a compressed directory containing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txt&lt;/code&gt; file for each MtG card supported by the Forge RE. Those files are &lt;strong&gt;card scripts&lt;/strong&gt; that tell Forge how each card works via parameters for the various properties, effects, and abilities that each card might have. Take, for example, the card &lt;strong&gt;Fyndhorn Elves&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/card-elves.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/card-elves.jpg&quot; alt=&quot;Card - Fyndhorn Elves&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and its script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res/cardsfolder/f/fyndhorn_elves&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name:Fyndhorn Elves
ManaCost:G
Types:Creature Elf Druid
PT:1/1
A:AB$ Mana | Cost$ T | Produced$ G | SpellDescription$ Add {G}.
Oracle:{T}: Add {G}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the card script is not written in Java or any other high level language and for the most part, its structure and parameters are quite intuitive, which means that anyone can help writing card scripts for upcoming sets, even if you are not a developer yourself. Of course, some cards can be more complex than others. Take a look, for example, at &lt;strong&gt;Ragavan, Nimble Pilferer&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/card-ragavan.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/card-ragavan.jpg&quot; alt=&quot;Card - Ragavan&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name:Ragavan, Nimble Pilferer
ManaCost:R
Types:Legendary Creature Monkey Pirate
PT:2/1
T:Mode$ DamageDone | ValidSource$ Card.Self | ValidTarget$ Player | CombatDamage$ True | Execute$ TrigTreasure | TriggerDescription$ Whenever CARDNAME deals combat damage to a player, create a Treasure token and exile the top card of that player's library. Until end of turn, you may cast that card.
SVar:TrigTreasure:DB$ Token | TokenAmount$ 1 | TokenScript$ c_a_treasure_sac | TokenOwner$ You | SubAbility$ TrigExile
SVar:TrigExile:DB$ Dig | Defined$ TriggeredTarget | DigNum$ 1 | ChangeNum$ All | DestinationZone$ Exile | RememberChanged$ True | SubAbility$ DBEffect
SVar:DBEffect:DB$ Effect | StaticAbilities$ STPlay | ForgetOnMoved$ Exile | RememberObjects$ Remembered | SubAbility$ DBCleanup
SVar:STPlay:Mode$ Continuous | MayPlay$ True | EffectZone$ Command | Affected$ Card.IsRemembered+nonLand | AffectedZone$ Exile | Description$ Until end of turn, you may cast that card and you may spend mana as though it were mana of any color to cast that spell.
SVar:DBCleanup:DB$ Cleanup | ClearRemembered$ True
K:Dash:1 R
Oracle:Whenever Ragavan, Nimble Pilferer deals combat damage to a player, create a Treasure token and exile the top card of that player's library. Until end of turn, you may cast that card.\nDash {1}{R} (You may cast this spell for its dash cost. If you do, it gains haste, and it's returned from the battlefield to its owner's hand at the beginning of the next end step.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, you can write scripts for whatever you feel comfortable with, for just a single card from an upcoming set or a bunch of them. The specifics of the so-called &lt;strong&gt;card API&lt;/strong&gt; can be found at the &lt;a href=&quot;https://github.com/Card-Forge/forge/wiki/Card-scripting-API&quot;&gt;Forge Wiki - Card Scripting API&lt;/a&gt;. To learn about which cards have not been scripted yet, check the &lt;a href=&quot;https://github.com/Card-Forge/forge/projects&quot;&gt;Projects&lt;/a&gt; tab, which should list a few (upcoming) sets and the status of each card.&lt;/p&gt;

&lt;p&gt;Writing card scripts for the Forge RE project is a great way to contribute and if you want to get involved, check the &lt;a href=&quot;#contributing&quot;&gt;Contributing&lt;/a&gt; section of this article to learn more about versioning (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;) and setting up your project dir.  However, before submitting a pull-request (PR) for a new card script, make sure to check the project’s current workflow for such contributions. As a general rule of thumb, go over the project’s wiki (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; guide) and if you cannot find any info about it, then &lt;strong&gt;ask one the maintainers&lt;/strong&gt; to explain how you can help with such a task.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;At the time of writing, for example, there seems to be an open issue for each upcoming card that has not been scripted yet (e.g., &lt;a href=&quot;https://github.com/Card-Forge/forge/issues/974&quot;&gt;issue#974&lt;/a&gt; for the card &lt;a href=&quot;https://gatherer.wizards.com/Pages/Card/Details.aspx?name=Windshaper%20Planetar&quot;&gt;Windshaper Planetar&lt;/a&gt; from the &lt;em&gt;Commander’s Legends: Battle for Baldur’s Gate&lt;/em&gt; set) and a successful PR is one that fixes this issue via a commit to the repo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch that adds the new card script(s) (e.g., &lt;a href=&quot;https://github.com/Card-Forge/forge/pull/994&quot;&gt;PR#994&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;xmage&quot;&gt;XMage&lt;/h2&gt;
&lt;p&gt;XMage, also referred to as &lt;strong&gt;Magic is Another Game Engine&lt;/strong&gt; (MAGE), is a MtG RE that started being developed in the early 2010s and now encompasses both a client and a server for offline or online MtG games. According to the project’s commit history, the first few commits date back to 2010 by users &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BetaSteward&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loki&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magenoxx&lt;/code&gt;. The project has been particularly active since 2018 and is now maintained by a large number of &lt;a href=&quot;https://github.com/magefree/mage/graphs/contributors&quot;&gt;developers and contributors&lt;/a&gt;. The official repository is currently hosted on Github (&lt;a href=&quot;https://github.com/magefree/mage&quot;&gt;magefree/mage&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-launcher-00.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-launcher-00.png&quot; alt=&quot;XMage - GUI - Launcher - 00&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-client-01.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-client-01.png&quot; alt=&quot;XMage - GUI - Client - 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-gui-gameplay-01.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-gui-gameplay-01.png&quot; alt=&quot;XMage - GUI - Gameplay - 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A major difference between XMage and Forge is that when launching XMage, you have the option to run it as a &lt;strong&gt;client&lt;/strong&gt; or &lt;strong&gt;server&lt;/strong&gt; or both. In brief, if you are hosting a game, then you need a server, even if you are playing locally against the computer (AI). However, if you are joining a local or remote game, then you need a client. For a single player game against the computer, for example, you need to launch both a server and a client, then within the client, connect to your local server (hosted on the same machine, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;, and XMage’s default port, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17171&lt;/code&gt;). Now, to join a game your friend is hosting, all you need is to launch a client but then you also need a network address to join your friend’s server over the WAN. (There are public servers, too, hosted by XMage maintainers. More on this in &lt;a href=&quot;#client-and-server-usage&quot;&gt;Client and Server usage&lt;/a&gt;.) These bits of technical stuff can sound intimidating to users who are not very familiar with networking concepts but XMage developers were kind enough to make these tasks a matter of clicking on a few buttons and once you get the hang of it, it becomes very trivial to start new MtG games with XMage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-launcher-03.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-launcher-03.png&quot; alt=&quot;XMage - Launcher - 03&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, XMage’s client has another unique feature, called &lt;strong&gt;card viewer&lt;/strong&gt;, that allows users to browse MtG collections. When I used to play paper MtG, I carried multiple binders with me that contained my most valuable cards and XMage’s card viewer is very reminiscent of such binders. It is also an interesting mode to browse cards from a new set to get yourself familiarized with them and see what could be tested and added to an existing deck.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-gui-viewer.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-gui-viewer.png&quot; alt=&quot;XMage - Card Viewer&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected, XMage features a comprehensive implementation of a &lt;strong&gt;deck editor&lt;/strong&gt;. This can be found when launching a client, under the tab properly dubbed &lt;em&gt;Deck Editor&lt;/em&gt;. Within the editor, users can lookup cards, use filters, preview art, build new decks for various formats, customize existing ones, import/export deck lists, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-gui-editor.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-gui-editor.png&quot; alt=&quot;XMage - Editor&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding XMage’s client interface, it is also possible to select &lt;strong&gt;themes&lt;/strong&gt; for it.  However, the number of options is more limited than in Forge and the visual changes are rather minor in most cases. (I personally like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Default&lt;/code&gt; one and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Grey&lt;/code&gt;.)  Visually, a game of MtG on the XMage client reminds me a lot of the old Magic Online with Digital Objects (MODO)–a WotC MtG RE that preceded MTGO–so it can feel a bit nostalgic to play MtG on XMage if you have also experienced the MODO days.&lt;/p&gt;

&lt;h3 id=&quot;gameplay-demo-1&quot;&gt;Gameplay demo&lt;/h3&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/iOMPxAm6vnw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;getting-started-1&quot;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;The requirements to run XMage are almost identical to Forge.  That is, it needs a JRE to run and the user experience is much better with a larger screen than what you would get using a tiny laptop / tablet. However, contrary to Forge, you should plan on saving a long time for the XMage initial setup because it takes multiple hours for it to finish downloading all the missing images.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;You might want to install XMage at night and leave your computer running overnight while XMage downloads the missing art, for example. You most definitely do not need to monitor XMage while it performs such task.&lt;/p&gt;

&lt;p&gt;The following table provides a summary of the software I used to run XMage at the time of writing:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;application&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; (host)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openjdk 11.0.15 2022-04-19&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; (XMage)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.8.0_201&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmage launcher&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.3.8&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmage client&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.4.50-v2 build: 2021-09-05&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmage server&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.4.50-v2 build: 2021-09-05&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;As mentioned before, XMage requires a JRE to run. For instructions on how to install JRE on your host machine, please refer to the &lt;a href=&quot;#installation&quot;&gt;Forge installation requirements&lt;/a&gt; because they are identical.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Download and install XMage&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The XMage RE can be divided into three distinct applications, namely &lt;strong&gt;launcher&lt;/strong&gt;, &lt;strong&gt;client&lt;/strong&gt;, and &lt;strong&gt;server&lt;/strong&gt;. The launcher is used to manage both the client and the server–that is, it checks the requisites, what client and server versions are installed, if they are up-to-date, and whether you want to start a client or a server or both. Therefore, the installation starts with the &lt;strong&gt;XMage launcher&lt;/strong&gt;, which you can manually download from the official website:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://xmage.de&quot;&gt;http://xmage.de&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;or via terminal, using curl to download the launcher to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads&lt;/code&gt; dir:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Downloads/
XMAGE_LAUNCHER=$(curl http://xmage.de | grep -oE &quot;http.*xmageLauncher[[:digit:]]+&quot;)
curl -L -o xmageLauncher.jar &quot;$XMAGE_LAUNCHER&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Before executing the launcher, you should &lt;strong&gt;define where the XMage application will be stored&lt;/strong&gt; because the launcher will create subdirs for the client and server inside the same directory it currently resides.  As I mentioned before, I like to put all such applications inside a directory called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applications&lt;/code&gt; in my user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ ! -d &quot;$HOME/Applications/&quot; ]; then mkdir &quot;$HOME/Applications&quot;; fi
cd &quot;$HOME/Applications/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now we can create a separate dir for XMage and move the launcher there:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir xmage
mv ~/Downloads/xmageLauncher.jar ./xmage/
cd xmage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The XMage launcher is a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/jar/index.html&quot;&gt;Java archive&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt;) file, so to execute it, run the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar xmageLauncher.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You should now be able to see the launcher’s GUI and it will start checking for missing requisites and then install the client and server.  Simply follow the instructions until the option to Launch Client becomes available. When you get to this point, you should be done installing the client and the server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Initial configuration&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Once the launcher is done installing the missing components, select &lt;strong&gt;Launch Client&lt;/strong&gt; to download the missing content (symbols and images). You will be greeted by a &lt;em&gt;Connect to server&lt;/em&gt; window but for now, we won’t connect to any XMage server, so hit &lt;em&gt;Cancel&lt;/em&gt; in order to access the tabs at the top of the client’s window.&lt;/p&gt;

    &lt;p&gt;First, select &lt;strong&gt;Symbols&lt;/strong&gt; and follow instructions to download such image files. When done, select &lt;strong&gt;Images&lt;/strong&gt;, then &lt;em&gt;Standard download&lt;/em&gt; and optionally, you might configure options different than default but I suggest to use defaults, and then hit &lt;em&gt;Start downloading&lt;/em&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;This will take multiple hours to finish&lt;/strong&gt;.  Just keep it running in the background and come back later to check on it.&lt;/p&gt;

    &lt;p&gt;When you are done downloading the missing content, you can optionally go to &lt;strong&gt;Preferences&lt;/strong&gt; and customize the XMage client to your liking.  However, if this is your first time, then try the defaults first and change preferences as you become more familiar with the interface.&lt;/p&gt;

    &lt;p&gt;Afterwards, close both the XMage client and then the XMage launcher and you are all done with the client configuration.&lt;/p&gt;

    &lt;p&gt;Now, it is possible to run either the client or the server or both without using the launcher but I strongly suggest to &lt;strong&gt;always use the XMage launcher&lt;/strong&gt; because it is the launcher that ensures you are running the latest XMage components. However, instead of opening a terminal to run the launcher every time you want to use XMage, you can create a &lt;strong&gt;custom launcher&lt;/strong&gt; for it, just like we have done with Forge. (Once again, in GNU/Linux, the specifics of creating a custom launcher depends a lot on the desktop environment and most of them have documented such procedure, so I won’t cover this here.)  Here is how my XMage custom launcher configuration looks like in Debian 11 XFCE:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-xfce-launcher.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-xfce-launcher.png&quot; alt=&quot;XMage - XFCE Launcher&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice--info&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Djava.net.preferIPv4Stack=true&lt;/code&gt; runtime arg is probably not necessary but since it is mentioned in the &lt;a href=&quot;https://github.com/magefree/mage#installation--running&quot;&gt;XMage documentation&lt;/a&gt;, I also added it here. It just tells Java to favor IPv4 over IPv6, probably because XMage has/had an issue with the latter.  However, I’ve never notice any problems without setting it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;client-and-server-usage&quot;&gt;Client and Server usage&lt;/h3&gt;
&lt;p&gt;For most users, the steps covered so far are enough to start playing MtG using the XMage RE. For a &lt;strong&gt;single player match against the computer(s)&lt;/strong&gt;, you need to launch &lt;strong&gt;both server and client&lt;/strong&gt; from within the XMage launcher. This will prompt XMage to start a local server that your XMage client can connect to. To connect to your local server, select &lt;em&gt;LOCAL, AI&lt;/em&gt;, then enter your username (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgomesu&lt;/code&gt;) and then select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connect to server&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-local-ai.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-local-ai.png&quot; alt=&quot;XMage - Client - Local&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will let you create a &lt;strong&gt;New Match&lt;/strong&gt; and then configure the type of game you want to play, decks to use, and so on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-client-02.png&quot;&gt;&lt;img src=&quot;/assets/posts/2022-07-18-forge-xmage-mtg/xmage-client-02.png&quot; alt=&quot;XMage - GUI - Client - 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For &lt;em&gt;Constructed&lt;/em&gt; type of games, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mad&lt;/code&gt; computer type.&lt;/p&gt;

&lt;p&gt;However, if you want to play online with friends, then &lt;strong&gt;one of you will have to run an XMage server&lt;/strong&gt; that is reachable to the other players via a &lt;strong&gt;public IP and port number&lt;/strong&gt; (or for the tech savvy, via a domain name, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xmage.cgomesu.com&lt;/code&gt;). In such cases, I strongly recommend the person running the server to take a look at additional server configuration instructions that can be found in &lt;a href=&quot;https://github.com/magefree/mage/wiki#server-configuration&quot;&gt;XMage Wiki - Server configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;public servers&lt;/strong&gt; as well but I’ve never used them before. Take a look at the following resources for more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://xmage.today&quot;&gt;http://xmage.today&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xmage.today/servers/&quot;&gt;http://xmage.today/servers/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, it is also possible to play against a friend who is on the same local network as you, which works just like a &lt;strong&gt;LAN party&lt;/strong&gt;. The specifics are similar to the online play but instead of adding a remote address to the connection window, you specify the local IP address of the host running the XMage server (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.100&lt;/code&gt;) and port, if different than default (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17171&lt;/code&gt;). Once all the players have joined the server, you can then configure and create a match for your friends to join.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;contributing&quot;&gt;Contributing&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;donations:
    &lt;ul&gt;
      &lt;li&gt;forge: there’s no official donation channel(s) yet. (user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;austeregrim&lt;/code&gt; helps providing free access to a server for Forge’s content downloads and ppl can help support his service at http://download.austeregrim.net/ but he is not a project maintainer.)&lt;/li&gt;
      &lt;li&gt;xmage: http://xmage.today/#donate. currently, donations go to the lead maintainer, &lt;a href=&quot;https://github.com/JayDi85&quot;&gt;@JayDi85&lt;/a&gt;, who is also responsible for the public servers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reporting-issues&quot;&gt;Reporting issues&lt;/h2&gt;

&lt;h2 id=&quot;project-development&quot;&gt;Project development&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Intro to versioning (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Brief how-to for setting up a local project development dir (just enough for card scripting contributions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mtg" /><category term="magic" /><category term="foss" /><category term="open" /><category term="free" /><category term="java" /><category term="game" /><category term="forge" /><category term="xmage" /></entry><entry><title type="html">DIY series: ESP-01 Tasmota environmental sensor</title><link href="/blog/diy-tasmota-bme280/" rel="alternate" type="text/html" title="DIY series: ESP-01 Tasmota environmental sensor" /><published>2021-08-12T13:00:00-03:00</published><updated>2021-08-12T13:00:00-03:00</updated><id>/blog/diy-tasmota-bme280</id><content type="html" xml:base="/blog/diy-tasmota-bme280/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;August 12th, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the first article of a &lt;strong&gt;Do It Yourself&lt;/strong&gt; (DIY) series in which I describe simple electronic projects that make use of an &lt;a href=&quot;https://www.espressif.com/en/products/socs/esp8266&quot;&gt;ESP8266&lt;/a&gt;/&lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32&quot;&gt;ESP32&lt;/a&gt; board running the &lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;Tasmota&lt;/a&gt; firmware to integrate various modules into a home automation system, such as &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt;.  In this first iteration of the series, I described how to wire and configure a &lt;a href=&quot;https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/&quot;&gt;&lt;strong&gt;BME280&lt;/strong&gt;&lt;/a&gt; to the tiny &lt;a href=&quot;http://www.ai-thinker.com/pro_view-60.html&quot;&gt;&lt;strong&gt;ESP-01&lt;/strong&gt;&lt;/a&gt; (or its successor, the &lt;a href=&quot;http://www.ai-thinker.com/pro_view-88.html&quot;&gt;ESP-01S&lt;/a&gt;) to create a cheap (less than US$6), low-power (less than 1W), and low-profile (less than 5cm long) environmental sensor that provides &lt;strong&gt;temperature&lt;/strong&gt;, &lt;strong&gt;humidity&lt;/strong&gt;, and &lt;strong&gt;relative pressure&lt;/strong&gt; measurements to home automation systems via &lt;a href=&quot;https://en.wikipedia.org/wiki/MQTT&quot;&gt;MQTT&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here is a preview of the ambient sensor alone and attached to different devices:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-01.jpg&quot; alt=&quot;ESP-BME280 sensor 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-02.jpg&quot; alt=&quot;ESP-BME280 sensor 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-bme280-sensor-03.jpg&quot; alt=&quot;ESP-BME280 sensor 03&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a great project for anyone who wants to get started on building their own Internet of Things (IoT) devices.  The article started with my motivation for this particular project.  Next, I talked about the hardware and software components, and finally, at the end, I covered the assembly of it all to create a functional unit.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Because this is such a low-profile project, I do not ever bother printing a case for it.  However, if you designed a case to house this particular project, &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt; and I will feature your case here.  But please &lt;a href=&quot;https://www.bosch-sensortec.com/media/boschsensortec/downloads/handling_soldering_mounting_instructions/bst-bme280-hs006.pdf&quot;&gt;observe the official mounting instructions for the BME280 sensor&lt;/a&gt; before printing your case because the heat generated by the ESP-01 and its USB adapter can affect the sensors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Over the years, I have started noticing that multiple devices spread across the household (e.g., smart TVs, sound systems, wireless routers, PC towers and laptops) had one or more &lt;strong&gt;USB ports&lt;/strong&gt; that could be used to power a few DIY electronic projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-01.jpg&quot; alt=&quot;Device with USB port 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/device-usb-port-02.jpg&quot; alt=&quot;Device with USB port 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the most common type of USB port available (&lt;a href=&quot;https://en.wikipedia.org/wiki/USB#USB_2.0&quot;&gt;USB 2.0&lt;/a&gt;) usually delivers a maximum of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500mA&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5V&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.5W&lt;/code&gt;), which constraints the type of projects that could reasonably use such ports as power supply. In addition, because interfacing via the USB connection might not always be possible, owing to proprietary and closed-source firmware, the DIY project should be able to transmit data wirelessly instead.&lt;/p&gt;

&lt;p&gt;Fortunately, the &lt;strong&gt;ESP-01 WiFi module&lt;/strong&gt; meets all such requirements. Specifically, it requires very little energy to operate (roughly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.3W&lt;/code&gt; on average, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1W&lt;/code&gt; peaks) and can be connected to USB 2.0 ports via USB adapters that have a built-in voltage regulator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-with-usb-adapter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-with-usb-adapter.jpg&quot; alt=&quot;ESP-01 with USB adapter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, because the unit will draw power from standard USB ports, it can be connected to most &lt;a href=&quot;https://duckduckgo.com/?q=usb+power+bank&amp;amp;ia=images&quot;&gt;power banks&lt;/a&gt; to create a mobile/remote ambient sensor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview-of-the-main-hardware-components&quot;&gt;Overview of the main hardware components&lt;/h1&gt;
&lt;h2 id=&quot;esp-01&quot;&gt;ESP-01&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;ESP-01&lt;/strong&gt; is a cheap and very small WiFi module developed by &lt;a href=&quot;http://en.ai-thinker.com/&quot;&gt;Ai-Thinker&lt;/a&gt; that is based on the ESP8266EX microcontroller unit (MCU) by &lt;a href=&quot;https://www.espressif.com/&quot;&gt;Espressif&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png&quot; alt=&quot;ESP-01 top&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bottom.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bottom.png&quot; alt=&quot;ESP-01 bottom&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-dimensions-pinout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-dimensions-pinout.jpg&quot; alt=&quot;ESP-01 dimensions and pinout&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-schematics.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-schematics.jpg&quot; alt=&quot;ESP-01 schematics&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of note, it &lt;strong&gt;exposes only four GPIO pins&lt;/strong&gt; to interface with other devices–namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URXD&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UTXD&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO0&lt;/code&gt;–and it is powered via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3v3 DC&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VCC&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GND&lt;/code&gt; pins. Each of the &lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bottom.png&quot;&gt;eight exposed pins&lt;/a&gt; has specific functions, as suggested by their name:&lt;/p&gt;

&lt;center&gt;
&lt;table&gt;
   &lt;thead&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Pin #&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Names&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Functions and notes&lt;/th&gt;
   &lt;/thead&gt;
   &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;Ground&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;IO2&lt;/td&gt;
      &lt;td&gt;GPIO 2, internal pull-up&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;IO0&lt;/td&gt;
      &lt;td&gt;GPIO 0 (zero), internal pull-up&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;URXD / IO3&lt;/td&gt;
      &lt;td&gt;UART0 - serial RX data, GPIO 3&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3v3 / VCC&lt;/td&gt;
      &lt;td&gt;3.3V power supply&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;RST / IO16&lt;/td&gt;
      &lt;td&gt;Reset pin, active low&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;EN / CH_PD&lt;/td&gt;
      &lt;td&gt;Chip enabled pin, active high&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;UTXD / IO1&lt;/td&gt;
      &lt;td&gt;UART0 - serial TX data, GPIO 1&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;In addition, there is no programmable ROM in the SoC, meaning that any software must be stored on the module’s SPI flash.  Regarding the latter, there are actually three popular versions of the ESP-01 WiFi module that have the same format but differ in flash memory size or other minor specs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;ESP-01 Blue&lt;/strong&gt;: The original version with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;512KB&lt;/code&gt; of flash memory;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ESP-01 Black&lt;/strong&gt;: The original version with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1MB&lt;/code&gt; of flash memory;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ESP-01S&lt;/strong&gt;: A revised version with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1MB&lt;/code&gt; of flash memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fortunately, visual inspection of the module can easily indicate which version it is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-01.jpg&quot; alt=&quot;ESP-01 comparison 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp01-version-comparison-02.jpg&quot; alt=&quot;ESP-01 comparison 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The external SPI flash can be changed for anything up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16MB&lt;/code&gt;.  However, this requires de/soldering very small components and such procedure won’t be covered in this guide (but see &lt;a href=&quot;https://www.youtube.com/watch?v=xyc1gCjguRU&quot;&gt;Andreas Spiess’ video #34&lt;/a&gt; for reference).  My recommendation is to simply look for the versions that have at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1MB&lt;/code&gt; of flash memory, which is just enough for the project described in this article.&lt;/p&gt;

&lt;p&gt;For more information, refer to the official documentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ai-thinker.com/_media/esp8266/docs/esp-01_product_specification_en.pdf&quot;&gt;ESP-01&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ai-thinker.com/_media/esp8266/docs/esp-01s_product_specification_en.pdf&quot;&gt;ESP-01S&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--info&quot;&gt;In fact, Ai-Thinker has developed &lt;a href=&quot;https://docs.ai-thinker.com/en/%E8%A7%84%E6%A0%BC%E4%B9%A6&quot;&gt;many other versions of the ESP-01 module&lt;/a&gt;, such as the &lt;a href=&quot;https://docs.ai-thinker.com/_media/esp8266/docs/esp-01e_product_specification_en.pdf&quot;&gt;ESP-01E&lt;/a&gt; and &lt;a href=&quot;https://docs.ai-thinker.com/_media/esp8266/docs/esp-01f_product_specification_en.pdf&quot;&gt;ESP-01F&lt;/a&gt;. However, such modules differ in major aspects in comparison to the modules covered here, like format and connectivity, and for such a reason, they won’t be covered in this article.  If interested, check their official e-commerce website at Alibaba.com (&lt;a href=&quot;https://ai-thinker.en.alibaba.com/&quot;&gt;https://ai-thinker.en.alibaba.com/&lt;/a&gt;) to learn how to acquire those less popular modules.&lt;/p&gt;

&lt;h2 id=&quot;bme280&quot;&gt;BME280&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;BME280&lt;/strong&gt; is a low-profile (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.5 x 2.5 x 0.93 mm³&lt;/code&gt;) and low-power (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.6 mA&lt;/code&gt; at roughly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.3V&lt;/code&gt;) environmental sensor developed by &lt;a href=&quot;https://www.bosch-sensortec.com&quot;&gt;Bosch Sensortec&lt;/a&gt;. Specifically, this unit comes with high accuracy sensors for &lt;strong&gt;temperature&lt;/strong&gt;, &lt;strong&gt;humidity&lt;/strong&gt;, and &lt;strong&gt;pressure&lt;/strong&gt;, all protected by a metal-lid.  Of note, it uses &lt;a href=&quot;https://en.wikipedia.org/wiki/I%C2%B2C&quot;&gt;I²C&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; interfaces for data communication and is powered by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3v3 DC&lt;/code&gt; (specifically, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.71V&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.6V&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-01.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-01.png&quot; alt=&quot;BME280 01 photo&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-02.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-02.png&quot; alt=&quot;BME280 02 dimensions&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bosch Sensortec has made an amazing job at &lt;a href=&quot;https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/#documents&quot;&gt;documenting all aspects about this sensor&lt;/a&gt;. For quick reference, here are the main docs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme280-ds002.pdf&quot;&gt;Datasheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bosch-sensortec.com/media/boschsensortec/downloads/handling_soldering_mounting_instructions/bst-bme280-hs006.pdf&quot;&gt;Handling, soldering and mounting instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;To make a single ESP-01 Tasmota environmental sensor, you will need the following items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=esp-01+wifi+module&quot;&gt;ESP-01 Black/ESP-01S&lt;/a&gt;: These modules are very cheap and useful for simple projects, so I recommend buying multiples at once.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-top.png&quot; alt=&quot;ESP-01 top&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=USB+to+ESP-01&quot;&gt;USB to ESP-01 adapter&lt;/a&gt;: Look for the ones that have &lt;strong&gt;exposed pins&lt;/strong&gt; (see figure below) and preferably, that make use of the Silicon Labs &lt;a href=&quot;https://www.silabs.com/documents/public/data-sheets/cp2104.pdf&quot;&gt;CP2104&lt;/a&gt; (or &lt;a href=&quot;https://www.silabs.com/documents/public/data-sheets/CP2102-9.pdf&quot;&gt;CP2102&lt;/a&gt;) chip. More often than not, however, the adapters will make use of a cheaper and less well-documented chip–namely, a &lt;a href=&quot;https://www.mpja.com/download/35227cpdata.pdf&quot;&gt;CH340&lt;/a&gt; variation–which might actually work just as well but I have never used them for this same project.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-01.jpg&quot; alt=&quot;USB to ESP-01 CP2104 adapter 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/usb-to-esp01-cp2104-adapter-02.jpg&quot; alt=&quot;USB to ESP-01 CP2104 adapter 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Notice how the exposed male pins are mapped onto the female pins in your own adapter. This is fundamental to figuring out how to put the module into &lt;em&gt;flash mode&lt;/em&gt; and later on, how to connect the ESP-01 module to the BME280 module.  The advantage of having exposed pins is that no soldering job is required to interface with the ESP-01 module. There are many other options for interfacing and powering an ESP-01 module via USB connections and some provide even cheaper solutions than the one shown here but be prepared to spend time soldering multiple components then.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=GY-BME280&quot;&gt;GY-BME280 module&lt;/a&gt;: You can always &lt;a href=&quot;https://www.alibaba.com/trade/search?SearchText=bme280&quot;&gt;buy just the BME280 sensor itself&lt;/a&gt; and wire it on your own but it’s &lt;em&gt;much&lt;/em&gt; easier to buy a module that contains it instead. The one I used is the one shown in the figures below. More likely than not, you will need to solder the headers to the board (see below). As before, these modules are very cheap, so I recommend to buy multiples.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-01.jpg&quot; alt=&quot;BME280 module 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-02.jpg&quot; alt=&quot;BME280 module 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;05x &lt;a href=&quot;https://www.amazon.com/s?k=female+dupont+wire&quot;&gt;Female-Female DuPont/jumper wires&lt;/a&gt;: You cannot go wrong by buying lots of these wires in all three connector combinations.  For this project, however, you will only need five f-f jumpers (or four, if you reuse one).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/female-dupont.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/female-dupont.jpg&quot; alt=&quot;f-f dupont wires&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional.&lt;/em&gt; &lt;a href=&quot;https://www.amazon.com/s?k=female+dupont+connector+kit&amp;amp;ref=nb_sb_noss&quot;&gt;Female DuPont connector kit&lt;/a&gt;: This is optional but does help securing your connections and make your project look better by housing exposed male pins. I recommend buying a kit with various sizes but for this project, we will only need the following connectors:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;01x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2x4&lt;/code&gt; female connector for the ESP-01 USB adapter&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-2x4.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-2x4.jpg&quot; alt=&quot;dupont connector 2x4&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;01x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1x4&lt;/code&gt; female connector for the BME280 module&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-1x4.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/dupont-connector-1x4.jpg&quot; alt=&quot;dupont connector 1x4&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; need crimping tools for this. Check the following video for this and other tricks when working with DuPont wires:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/eI3fxTH6f6I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/s?k=soldering+kit&quot;&gt;Basic soldering kit&lt;/a&gt;: This is only required for soldering the headers to the BME280 module. You &lt;strong&gt;do not&lt;/strong&gt; need anything fancy for this at all. If you have a multimeter, always test your connections afterwards.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/soldering-kit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/soldering-kit.jpg&quot; alt=&quot;soldering kit&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;estimated-cost&quot;&gt;Estimated cost&lt;/h2&gt;
&lt;p&gt;Estimated cost of the basic hardware components:&lt;/p&gt;

&lt;center&gt;
&lt;table&gt;
   &lt;thead&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Hardware&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;Quantity&lt;/th&gt;
      &lt;th style=&quot;text-align: center;&quot;&gt;USD$*&lt;/th&gt;
   &lt;/thead&gt;
   &lt;tr&gt;
      &lt;td&gt;ESP-01 WiFi module&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;USB to ESP-01 adapter (CP2104)&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;2.5&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;GY-BME280 module&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;F-F DuPont 20CM long&lt;/td&gt;
      &lt;td&gt;05&lt;/td&gt;
      &lt;td&gt;0.05&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;b&gt;TOTAL&lt;/b&gt;&lt;/td&gt;
      &lt;td&gt;&lt;b&gt;-&lt;/b&gt;&lt;/td&gt;
      &lt;td&gt;&lt;b&gt;5.55&lt;/b&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;p class=&quot;notice--info&quot;&gt;* Based on &lt;a href=&quot;https://www.aliexpress.com&quot;&gt;AliExpress.com&lt;/a&gt; offers from Chinese stores &lt;strong&gt;without&lt;/strong&gt; including shipping + tax&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;In this tutorial, we will make use of the following applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;Tasmota&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-sensors.bin&lt;/code&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;Alternative firmware for ESP8266 and ESP32 based devices with easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have never heard of Tasmota before, check Robbert’s (&lt;a href=&quot;https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ&quot;&gt;The Hook Up&lt;/a&gt;) introduction video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/08_GBROKQH0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/espressif/esptool&quot;&gt;Esptool&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;A Python-based, open source, platform independent, utility to communicate with the ROM bootloader in Espressif ESP8266 &amp;amp; ESP32 series chips.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Optional.&lt;/em&gt; &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Optional.&lt;/em&gt; &lt;a href=&quot;https://mosquitto.org/&quot;&gt;Eclipse Mosquitto MQTT broker&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Eclipse Mosquitto is an open source message broker that implements the MQTT protocol versions 5.0, 3.1.1 and 3.1. Mosquitto is lightweight and is suitable for use on all devices from low power single board computers to full servers.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;assembly&quot;&gt;Assembly&lt;/h1&gt;
&lt;p&gt;As in the previous tutorials, this article assumes you are running a &lt;strong&gt;Linux&lt;/strong&gt; distribution (e.g., Debian, Ubuntu, Arch, etc.) and your current user (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${USER}&lt;/code&gt;) is in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sudo&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; group&lt;/a&gt;. Part of the instructions may or may not be compatible with Android, macOS, Windows, or any other Operating System (OS). If you run into issues, please refer to the official documentation of the software mentioned in the &lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;#mqtt&quot;&gt;Docker and MQTT broker implementation&lt;/a&gt; are both optional because Tasmota offers multiple ways to interact with the device without every using the MQTT messaging protocol. In addition, most MQTT brokers offer alternative installation methods to the containerized method described here.  That said, I strongly recommend making use of MQTT if you use home automation systems (e.g., &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt;, &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;) or have multiple Tasmota devices.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-required-packages-and-fixing-user-permission&quot;&gt;Installing the required packages and fixing user permission&lt;/h2&gt;
&lt;p&gt;Before we can flash the Tasmota firmware onto the ESP-01, we will need to install a few packages and configure the permissions of the current Linux user to allow using the USB adapter.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a terminal and install the required packages:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install wget python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install esptool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find out if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; can be found in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whereis esptool.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, when required to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt;, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py OPTIONS&lt;/code&gt;, run as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 -m esptool OPTIONS&lt;/code&gt;. If you choose to do this, skip the next step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; was not found, it means your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.local/bin&lt;/code&gt; is not in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.  Add it as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.bashrc&quot; &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your ESP-01 to the USB adapter:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter.jpg&quot; alt=&quot;ESP-01 to USB adapter&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg&quot; alt=&quot;ESP-01 in default mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;Please ignore the tape over the ESP-01 module. Its use is not necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the adapter to a USB port on your computer and check the new device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /dev/ttyUSB*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USER&lt;/code&gt; to the same group as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/ttyUSB*&lt;/code&gt; (it’s usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dialout&lt;/code&gt; but if different, change in the command below) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tty&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -aG dialout,tty ${USER}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log off and back on.  (If you continue to run into permission issues, try rebooting instead.  You can check your user’s permissions with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id ${USER}&lt;/code&gt;.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;flashing-the-tasmota-firmware&quot;&gt;Flashing the Tasmota firmware&lt;/h2&gt;
&lt;p&gt;We are now ready to flash the Tasmota firmware.  For reference, the official information is available at &lt;a href=&quot;https://tasmota.github.io/docs/&quot;&gt;https://tasmota.github.io/docs/&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt; and create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota8266&lt;/code&gt; directory:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo mkdir tasmota8266
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change ownership of the new directory to the current user instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown ${USER}:${USER} tasmota8266/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-sensors.bin&lt;/code&gt; binary via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; to the newly created directory:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -P tasmota8266/ https://ota.tasmota.com/tasmota/release/tasmota-sensors.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, you can manually download the latest and previous binaries from the &lt;a href=&quot;https://github.com/arendst/Tasmota/releases&quot;&gt;Tasmota Github repo&lt;/a&gt;. The URL above points to the latest version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-sensors&lt;/code&gt; binary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Disconnect your ESP-01 adapter from your computer. Take note of the USB adapter pinout to put your ESP-01 into &lt;strong&gt;flash mode&lt;/strong&gt; by grounding the pin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO0&lt;/code&gt; using a female-to-female DuPont wire, as follows:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter-pinout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-USB-adapter-pinout.jpg&quot; alt=&quot;ESP-01 USB adapter pinout&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Notice that the pinout is flipped vertically when looking the pins from the bottom vs. the top.  For us, it is the top-view pinout that matters because that is where we will connect the DuPont wires.  The pinout for your own adapter &lt;strong&gt;might not&lt;/strong&gt; be the same, so make sure to double check before moving on. Once you have a good grasp of the pinout, go ahead put the ESP-01 into flash mode.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-flash-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-flash-mode.jpg&quot; alt=&quot;ESP-01 in flash mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reconnect your ESP-01 adapter to your computer.  Now find the USB port your device is using in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt; and set it to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Attention.&lt;/strong&gt; While convenient, the following command assumes there is a single USB to serial adapter connected to your computer.  If this is not the case, manually set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; to whichever port your ESP-01 USB adapter is currently using. You can find the port via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls /dev/ttyUSB*&lt;/code&gt; and testing one by one until you find the one used by the ESP-01 adapter. Alternatively, simply disconnect all other USB to serial adapters for this procedure and continue.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ESP_PORT=$(ls /dev/ttyUSB*)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Please notice that this only works if you continue to use the &lt;strong&gt;same shell&lt;/strong&gt; in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; was defined.  If you log off or even close the current terminal, you will have to redefine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; to keep using it.&lt;/p&gt;

    &lt;p&gt;You can check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; was correctly defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing it, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $ESP_PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should output something like&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Before flashing the Tasmota firmware, check the SPI flash to make sure it has at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1MB&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --port $ESP_PORT flash_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should show that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Detected flash size&lt;/code&gt; is at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1MB&lt;/code&gt;, as in the following example:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py v3.0
Serial port /dev/ttyUSB0
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 2c:f4:32:2d:eb:19
Uploading stub...
Running stub...
Stub running...
Manufacturer: 5e
Device: 4014
Detected flash size: 1MB
Hard resetting via RTS pin...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If everything looks good, erase whatever is currently stored on the SPI flash of the ESP-01 module:&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Attention.&lt;/strong&gt; The following procedure will &lt;strong&gt;wipe all the data&lt;/strong&gt; on the SPI flash of your ESP-01 module. If you have used such a module before and want to backup the image, then first run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py --port $ESP_PORT read_flash 0x00000 0x100000 /opt/tasmota8266/backup_esp01_$(date +%d-%m-%y).bin&lt;/code&gt;.  The backup will be in the newly created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota8266&lt;/code&gt; directory with the current date for future reference. Please notice that this procedure may take a few minutes to complete.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --port $ESP_PORT erase_flash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should output &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chip erase completed successfully&lt;/code&gt;, as in the following example:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py v3.0
Serial port /dev/ttyUSB0
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 2c:f4:32:2d:eb:19
Uploading stub...
Running stub...
Stub running...
Erasing flash (this may take a while)...
Chip erase completed successfully in 2.6s
Hard resetting via RTS pin...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now it is time to flash the Tasmota firmware:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --port $ESP_PORT write_flash -fs 1MB -fm dout 0x0 /opt/tasmota8266/tasmota-sensors.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Wait&lt;/strong&gt; until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; is completely done before moving on. Flashing a firmware can take a few minutes to complete but in this case, it usually does not take more than 30 seconds.  If you experience issues while flashing, try a different baud rate (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt;) than the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;115200&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b 921600&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b 74880&lt;/code&gt;. The &lt;a href=&quot;https://tasmota.github.io/docs/FAQ/#flashing&quot;&gt;Tasmota FAQ&lt;/a&gt; can help with this and other issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When done, disconnect the adapter from your computer and put it back into &lt;strong&gt;default mode&lt;/strong&gt; by removing the jumper grounding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO0&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg&quot; alt=&quot;ESP-01 in default mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reconnect your ESP-01 adapter and scan the nearby WiFi networks.  If correctly flashed, you should be able to see a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota_*&lt;/code&gt; WiFi network created by your ESP-01 WiFi module; if this is not the case, then double check all steps, use a different wire to ground &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO0&lt;/code&gt;, and try again.  (If the problem persists, it might be hardware-related.  Try a different adapter or ESP-01 or both.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you reached this part, it means your ESP-01 is already running Tasmota (Hurrah!).  In the next section, we will learn how to configure the Tasmota firmware over-the-air.&lt;/p&gt;

&lt;h2 id=&quot;basic-tasmota-configuration&quot;&gt;Basic Tasmota configuration&lt;/h2&gt;
&lt;p&gt;In this section, we will learn how to connect the ESP-01 to a local wireless network, set a default &lt;a href=&quot;https://tasmota.github.io/docs/Templates/&quot;&gt;Template&lt;/a&gt; for the device, fix its time, and configure its MQTT client.&lt;/p&gt;

&lt;h3 id=&quot;initial-wifi-configuration&quot;&gt;Initial WiFi configuration&lt;/h3&gt;
&lt;p&gt;After a fresh installation (or &lt;a href=&quot;https://tasmota.github.io/docs/Device-Recovery/#fast-power-cycle-device-recovery&quot;&gt;power cycling your device seven times in a short period&lt;/a&gt;), the Tasmota firmware automatically creates a wireless access point (WAP) that other devices can connect to.  The WAP is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota_*&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; will be a combination of the device’s MAC address and random numbers.  To configure the WiFi in your new Tasmota device, do as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the ESP-01 is powered on in &lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-default-mode.jpg&quot;&gt;default mode&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a wifi-capable device (e.g., laptop) and connect to the WAP named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota_*&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The ESP-01 will give your device an IP address, which you can check via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;. Usually, the device’s IP address is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.4.0/24&lt;/code&gt; pool, which means the Tasmota web UI is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://192.168.4.1:80&lt;/code&gt;; Otherwise, the web UI will be at the first address in whichever pool your device connected to after joining the WAP created by the Tasmota firmware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser of your choice (e.g., Mozilla Firefox) and navigate to the Tasmota web UI. You should be prompted to change the WiFi settings to allow your ESP-01 to connect to your local WiFi network.  Change the settings, save it, and wait for the ESP-01 to reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the &lt;strong&gt;DHCP server&lt;/strong&gt; of your local network and find the IP address assigned to your ESP-01.  At this point, it’s a good idea to assign a static address to it as well.  (If you set a static address, then reboot the ESP-01 before moving on.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the Tasmota web UI on your local network to set the additional configurations described in the next section.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;esp-01-template&quot;&gt;ESP-01 Template&lt;/h3&gt;
&lt;p&gt;Tasmota templates are device-specific definitions of how their GPIO pins are assigned and therefore, proper configuration of the template is key if you plan on using the device’s GPIO pins. As you will notice, the default template in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-sensors.bin&lt;/code&gt; binary is for the &lt;a href=&quot;https://sonoff.tech/product/diy-smart-switch/basicr2/&quot;&gt;Sonoff Basic&lt;/a&gt; device, which won’t work for us. The actual template for the ESP-01 can be found at &lt;a href=&quot;https://templates.blakadder.com/ESP01.html&quot;&gt;https://templates.blakadder.com/ESP01.html&lt;/a&gt;.  To change the current Sonoff template to the proper ESP-01 template, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the &lt;strong&gt;ESP-01 template&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ESP01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From the Tasmota web UI, go to &lt;strong&gt;Configuration &amp;gt; Configure Other&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the template under &lt;strong&gt;Other parameters &amp;gt; Template&lt;/strong&gt;.  Then, check the &lt;strong&gt;Activate&lt;/strong&gt; option under the template. Save the settings and wait for the reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The device should now be named &lt;strong&gt;ESP01&lt;/strong&gt; (or whatever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAME&lt;/code&gt; was in the template). If everything looks good, go to the next section.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;timezone&quot;&gt;Timezone&lt;/h3&gt;
&lt;p&gt;If you installed a pre-compilled firmware, there is a chance your device is using the incorrect timezone.  To check the current timezone, go to &lt;strong&gt;Console&lt;/strong&gt; and type:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the timezone does not match yours, you can enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone&lt;/code&gt; command with a value equal to your region’s &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png&quot;&gt;standardized time zone&lt;/a&gt;.  For America/Sao_Paulo, for example, that would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-3&lt;/code&gt;, which can be set in your Tasmota device as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone -3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if you enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; in the console, it should correctly display your current local time.&lt;/p&gt;

&lt;h3 id=&quot;mqtt&quot;&gt;MQTT&lt;/h3&gt;
&lt;p&gt;It is possible to interact with a Tasmota device in multiple ways (e.g., HTTP requests, web UI console, serial) but &lt;strong&gt;MQTT&lt;/strong&gt; offers a reliable and widely supported messaging protocol for managing this and many other devices using a single server/broker. If you are new to MQTT, the &lt;a href=&quot;https://www.hivemq.com&quot;&gt;HiveMQ&lt;/a&gt; wrote a series of articles about the MQTT basics, its main features and other related resources that I invite everyone to read:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hivemq.com/mqtt-essentials/&quot;&gt;https://www.hivemq.com/mqtt-essentials/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many options when it comes to &lt;a href=&quot;https://mqtt.org/software/&quot;&gt;MQTT software&lt;/a&gt;. Here, I will show how to install and configure the &lt;a href=&quot;https://mosquitto.org/&quot;&gt;Eclipse Mosquitto MQTT broker&lt;/a&gt; on a Docker container.  The MQTT broker will be configured to use client authentication (username and password) on the default listener port (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1883&lt;/code&gt;) and persist its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; directories.&lt;/p&gt;

&lt;h4 id=&quot;mqtt-broker-configuration&quot;&gt;MQTT broker configuration&lt;/h4&gt;
&lt;p&gt;If you already have a running MQTT broker instance, skip to the next section to &lt;a href=&quot;#tasmota-mqtt-client-configuration&quot;&gt;configure the Tasmota MQTT client&lt;/a&gt;; Otherwise, to &lt;strong&gt;install and configure the Mosquitto MQTT broker in a Docker container&lt;/strong&gt;, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;Docker Engine&lt;/a&gt; on your OS. Here’s a quick reference to two popular Linux distributions:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/debian/&quot;&gt;Install on Debian&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/ubuntu/&quot;&gt;Install on Ubuntu&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p class=&quot;notice&quot;&gt;&lt;em&gt;Optional&lt;/em&gt;. Afterwards, install &lt;a href=&quot;https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/&quot;&gt;Portainer - Community Edition&lt;/a&gt; to manage your Docker containers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a local directory in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt; of your host machine to store permanently the contents of the Mosquitto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; container directories:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo mkdir mosquitto mosquitto/config mosquitto/data mosquitto/log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd.txt&lt;/code&gt; passwords file in the newly created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; dir:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo touch /opt/mosquitto/config/pwd.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create and edit a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquitto.conf&lt;/code&gt; configuration file for the MQTT broker in the same dir:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo -e /opt/mosquitto/config/mosquitto.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and paste the following, which disables anonymous access, enables user credentials by pointing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password_file&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd.txt&lt;/code&gt; file, and sets a custom location for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquito.db&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquito.log&lt;/code&gt; files:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;per_listener_settings true
allow_anonymous false

listener 1883

persistence true
persistence_location /mosquitto/data
log_dest file /mosquitto/log/mosquitto.log
password_file /mosquitto/config/pwd.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we are ready to install the MQTT broker container. Pull the official &lt;a href=&quot;https://hub.docker.com/_/eclipse-mosquitto/&quot;&gt;Eclipse Mosquitto broker Docker container&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull eclipse-mosquitto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Then, run it in detached mode (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;) with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquitto&lt;/code&gt; and the option to always restart unless stopped (other options are to map ports and volumes between host and container, per the structure of the local directories and files we created):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d \
  --name mosquitto \
  --restart=unless-stopped \
  -p 1883:1883 \
  -v /opt/mosquitto/config:/mosquitto/config \
  -v /opt/mosquitto/data:/mosquitto/data \
  -v /opt/mosquitto/log:/mosquitto/log \
  eclipse-mosquitto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;If you run into permission issues while running Docker with your current user, make sure to add your user (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${USER}&lt;/code&gt;) to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; group (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo usermod -aG docker ${USER}&lt;/code&gt;). Then, log out and back in to try again. Alternatively, append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; command. You can find this and other post-installation steps in the official &lt;a href=&quot;https://docs.docker.com/engine/install/linux-postinstall/&quot;&gt;Post-installation steps for Linux&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Before moving on, make sure the container is running:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And the log files are not showing any error messages:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs mosquitto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the container is running without any issues, then let’s  start a shell inside the container to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd.txt&lt;/code&gt; password file using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquitto_passwd&lt;/code&gt; utility:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it mosquitto /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And now we will create (a) a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota&lt;/code&gt; user with password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password123&lt;/code&gt; and (b) a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hass&lt;/code&gt; user with password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123password&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosquitto_passwd -b /mosquitto/config/pwd.txt tasmota &quot;password123&quot;
mosquitto_passwd -b /mosquitto/config/pwd.txt hass &quot;123password&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;Of course, feel free to use whichever username and password you feel appropriate for your use-case.  Keep in mind that unless you configure your broker and client to use encryption, these credentials are communicated in plain text over the network, which is fine if only running it locally.&lt;/p&gt;

    &lt;p&gt;When done, exit the shell inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquitto&lt;/code&gt; container:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mosquitto&lt;/code&gt; container to enable the new user credentials:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker restart mosquitto   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And we are done with the MQTT broker installation and configuration!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For information about additional options, such as setting up access control to restrict user access to specific topics, check the official &lt;a href=&quot;https://mosquitto.org/documentation/&quot;&gt;Mosquitto documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;tasmota-mqtt-client-configuration&quot;&gt;Tasmota MQTT client configuration&lt;/h4&gt;
&lt;p&gt;With an up and running MQTT broker, you can configure the Tasmota MQTT client as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From the Tasmota web UI, go to &lt;strong&gt;Configuration &amp;gt; Configure Other&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the &lt;strong&gt;MQTT enable&lt;/strong&gt; box is checked; otherwise, check and save it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now go to &lt;strong&gt;Configuration &amp;gt; Configure MQTT&lt;/strong&gt; and configure your Tasmota device to use your MQTT broker. The specifics of these settings will depend on how your MQTT broker was configured. If you followed the instructions in the previous section, then your Tasmota MQTT client settings should look similar to the following (but change the host &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.30&lt;/code&gt; address to the one running your MQTT broker):&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-mqtt-configuration.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-mqtt-configuration.jpg&quot; alt=&quot;ESP-01 MQTT configuration&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hit save when done and wait for the device to reboot. If successfully configured, the Console in the web UI should show something like the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... MQT: Attempting connection...
... MQT: Connected
... MQT: tele/tasmota_2DEB19/LWT = Online (retained)
... MQT: tele/tasmota_2DEB19/INFO1 = {&quot;Info1&quot;:{&quot;Module&quot;:&quot;ESP01&quot;,&quot;Version&quot;:&quot;9.5.0(sensors)&quot;,&quot;FallbackTopic&quot;:&quot;cmnd/DVES_2DEB19_fb/&quot;,&quot;GroupTopic&quot;:&quot;cmnd/tasmotas/&quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And if you followed the instructions in the previous section, you can also check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/mosquitto/log/mosquitto.log&lt;/code&gt; file, which should show something like the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...: New connection from 192.168.10.103:57321 on port 1883.
...: New client connected from 192.168.10.103:57321 as DVES_2DEB19 (p2, c1, k30, u'tasmota').
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more information about the MQTT configuration at the official &lt;a href=&quot;https://tasmota.github.io/docs/MQTT/&quot;&gt;Tasmota MQTT documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wiring-the-gy-bme280-sensor-module&quot;&gt;Wiring the GY-BME280 sensor module&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-01.jpg&quot;&gt;GY-BME280&lt;/a&gt; module usually comes with four male pin headers that we will connect do the ESP-01 USB adapter using four female-to-female jumper wires. To make use of such module, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use your soldering kit to solder the headers to the board.  If you have a multimeter, remember to test your connections afterwards.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/bme280-module-03.jpg&quot; alt=&quot;BME-280 module 03&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab four female-to-female DuPont wires and connect them to your GY-BME280 module and ESP-01 USB adapter according to the following wiring schematics:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-wiring.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-wiring.jpg&quot; alt=&quot;ESP-01 BME280 wiring&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;In this schematics, we will be using pins &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TXD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RXD&lt;/code&gt; to interface with the GY-BME280 module. You could, of course, try one or two of the other GPIO pins–namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO2&lt;/code&gt;.  However, because the state (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;low&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high&lt;/code&gt;) of the latter pins at boot can put the board into specific modes of operation (e.g., when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO0&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high&lt;/code&gt; at boot, the ESP-01 enters &lt;em&gt;flash mode&lt;/em&gt;) and we will only use the USB port for power, I find it safer to use the serial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TXD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RXD&lt;/code&gt; pins to interface with (I2C) devices when using the ESP-01.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;(Optional.)&lt;/em&gt; If you bought &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1x4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2x4&lt;/code&gt; female connectors, replace the single connectors by the new ones. (If you are uncertain how to do that, check Adreas Spiess’ video on &lt;a href=&quot;https://youtu.be/eI3fxTH6f6I?t=195&quot;&gt;tricks for working with DuPont wires, at the 3:15 mark&lt;/a&gt;.) At the very least, use a tape to secure the connectors that are next to each other. This makes it harder for them to disconnect by accident.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the GY-BME280 module is wired to the ESP-01 USB adapter, connect your adapter to a USB power supply and wait for it to connect to your network. (Of course, make sure it is within reach of a WAP.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we will configure the device’s Template to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RXD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TXD&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCL&lt;/code&gt; (serial clock line) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDA&lt;/code&gt; (serial data line), respectively. So, navigate to your device’s web UI and go to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Template&lt;/strong&gt;. Then, at &lt;strong&gt;GPIO3&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RXD&lt;/code&gt;), set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I2C SCL&lt;/code&gt;; and at &lt;strong&gt;GPIO1&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TXD&lt;/code&gt;), set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I2C SDA&lt;/code&gt;. At the end, your Template should look like the following one:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-01.jpg&quot; alt=&quot;ESP-01 BME280 configuration 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt; and wait for the device to reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If properly configured, your device’s main web UI should now show four metrics from the BME280 sensor, namely temperature, humidity, dew point, and pressure, as in the following example:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/esp-01-bme280-configuration-02.jpg&quot; alt=&quot;ESP-01 BME280 configuration 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is it! Enjoy your new IoT environmental sensor. If you need assistance setting up the integration with Home Assistant, take a look at the next section (there’s also a reference for other home automation systems). Otherwise, skip to the &lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt; for the final remarks about this project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;home-assistant-integration&quot;&gt;Home Assistant integration&lt;/h1&gt;
&lt;p&gt;The easiest way to integrate Tasmota devices to Home Assistant is via the official &lt;a href=&quot;https://www.home-assistant.io/integrations/tasmota/&quot;&gt;Tasmota integration&lt;/a&gt;. To make use of such integration, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the Home Assistant web UI, then navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Integrations&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add integration&lt;/strong&gt;.  This will open a new window with a search box.  Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mqtt&lt;/code&gt; and select the integration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure the &lt;a href=&quot;https://www.home-assistant.io/integrations/mqtt/&quot;&gt;MQTT integration&lt;/a&gt; to make use of your MQTT broker. If you followed the &lt;a href=&quot;#mqtt-broker-configuration&quot;&gt;MQTT broker configuration&lt;/a&gt; guide, then use the username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hass&lt;/code&gt; with password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123password&lt;/code&gt; to authenticate your Home Assistant in the MQTT broker. If configured correctly, you should see the MQTT integration listed in the Integrations tab of your Home Assistant Configuration window.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, navigate once again to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Integrations&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add integration&lt;/strong&gt; and search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota&lt;/code&gt; and select the integration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Leave the discovery prefix to the default topic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota/discovery&lt;/code&gt;) and hit &lt;strong&gt;submit&lt;/strong&gt; to enable to Tasmota integration. If configured correctly, you should see your ESP01 listed in the next window and optionally, you can select an Area that it belongs to.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-01.jpg&quot; alt=&quot;HASS Tasmota integration 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That is it! Home Assistant should now be able to automatically detect and create entities for all your BME280 environmental metrics from the current device as well as any new ones.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-02.jpg&quot; alt=&quot;HASS Tasmota integration 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-07-18-diy-tasmota-bme280/hass-tasmota-integration-03.jpg&quot; alt=&quot;HASS Tasmota integration 03&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice--danger&quot;&gt;Of note, the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetOption19&lt;/code&gt; (MQTT discovery) in Tasmota devices is currently &lt;a href=&quot;https://tasmota.github.io/docs/Home-Assistant/&quot;&gt;&lt;strong&gt;deprecated&lt;/strong&gt;&lt;/a&gt;. For this reason, it is disabled by default in the latest firmware (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setoption19 0&lt;/code&gt;) and therefore, I won’t mention its use here.&lt;/p&gt;

&lt;p&gt;For this and other options to integrate your Tasmota device to Home Assistant or other home automation systems, check the &lt;a href=&quot;https://tasmota.github.io/docs/Integrations/&quot;&gt;Integrations in the Tasmota documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this article, we learned how to integrate the small and cheap &lt;strong&gt;ESP-01 WiFi module&lt;/strong&gt; with the reliable &lt;strong&gt;BME280 sensor&lt;/strong&gt; to create a USB powered and low-profile &lt;strong&gt;Tasmota environmental sensor&lt;/strong&gt;.  Its BME280 sensor can be used to provide accurate measures of temperature, humidity, and pressure in different parts of the household, which can all be monitored via a home automation system of choice, such as Home Assistant.&lt;/p&gt;

&lt;p&gt;The project requires very little soldering and can be assembled in a matter of minutes and for these reasons, it’s a very good project for anyone who wants to get started on making their own IoT devices.  As usual, check the &lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt; for updates and if you ever get stuck on something or just want to share a few ideas and opinions, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="diy-series" /><category term="tasmota" /><category term="sensor" /><category term="hass" /><category term="iot" /><category term="automation" /><category term="temperature" /><category term="esp-01" /><category term="bme280" /></entry><entry><title type="html">Towards a smarter Home Assistant: Getting started on the analytical tools</title><link href="/blog/smarter-hass/" rel="alternate" type="text/html" title="Towards a smarter Home Assistant: Getting started on the analytical tools" /><published>2021-06-22T15:45:00-03:00</published><updated>2021-06-22T15:45:00-03:00</updated><id>/blog/smarter-hass</id><content type="html" xml:base="/blog/smarter-hass/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;August 14th, 2021&lt;/strong&gt;, Update #2: &lt;a href=&quot;https://github.com/home-assistant/core/pull/52189&quot;&gt;My pull request&lt;/a&gt; to add &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantile&quot;&gt;quantiles&lt;/a&gt; to the attributes of the Statistics integration was approved and now we have access to an additional (and more informative) distribution metric. The &lt;a href=&quot;#statistics-1&quot;&gt;Statistics&lt;/a&gt; section was updated to reflect such change.&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;August 14th, 2021&lt;/strong&gt;, Update #1: &lt;a href=&quot;https://www.home-assistant.io/blog/2021/08/04/release-20218/&quot;&gt;Release 2021.8.0&lt;/a&gt; has introduced a new feature for sensors called &lt;a href=&quot;https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics&quot;&gt;&lt;strong&gt;long-term statistics&lt;/strong&gt;&lt;/a&gt;. A new sub-section called &lt;a href=&quot;#long-term-statistics&quot;&gt;Long-term statistics&lt;/a&gt; was added to the &lt;a href=&quot;#hass-database&quot;&gt;HASS database&lt;/a&gt; section that describes its relation to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; table and how to implement it.  The same release also introduced the &lt;a href=&quot;https://www.home-assistant.io/lovelace/statistics-graph/&quot;&gt;Statistics Graph Card&lt;/a&gt;, which provide a nice way of visualizing long-term statistics.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;June 22nd, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt; (HASS) is a free and open-source software (FOSS) that provides a feature-rich environment for managing, controlling, and automating smart home devices, such as light bulbs, blinders, and LED strips.  In addition, it provides a highly customizable system for collecting and organizing a multitude of data (e.g., on/off device states, local temperature, GPS tracking, exchange rates), as provided by &lt;strong&gt;more than a thousand &lt;a href=&quot;https://www.home-assistant.io/integrations&quot;&gt;integrations&lt;/a&gt;&lt;/strong&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_of_things&quot;&gt;Internet of things&lt;/a&gt; (IoT) devices (e.g., &lt;a href=&quot;https://sonoff.tech/&quot;&gt;Sonoff&lt;/a&gt;, &lt;a href=&quot;https://wyze.com/&quot;&gt;Wyze&lt;/a&gt;, &lt;a href=&quot;https://www.z-wave.com/&quot;&gt;Z-Wave&lt;/a&gt;), local sensors (e.g., micro-controllers or single-board computers connected to sensor modules), and cloud-based services (e.g., weather and financial web APIs).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-demo.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-demo.jpg&quot; alt=&quot;HASS demo frontend&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More often than not, people use HASS to view or modify the &lt;strong&gt;current state and value&lt;/strong&gt; of integrated devices and sensors via manual triggers (e.g., pressing a button to turn off the AC) or automations (e.g., if the temperature is lower than 14°C, then turn on the heat).  However, the &lt;a href=&quot;https://www.home-assistant.io/integrations#utility&quot;&gt;HASS utility integrations&lt;/a&gt; offer users the possibility to go beyond with the help of built-in mathematical and statistical tools.  More specifically, such &lt;strong&gt;analytical tools&lt;/strong&gt; allow users to summarize past states and measurements to answer questions such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many times has the front door been opened over the last 24hrs and for how long?&lt;/li&gt;
  &lt;li&gt;How much energy (kWh) has my uninterrupted power supply used over the last month?&lt;/li&gt;
  &lt;li&gt;What was the average temperature in the living-room in the last 24hrs?  How does that compare to 48hrs before?&lt;/li&gt;
  &lt;li&gt;What is the average level of volatile organic compounds (VOC) measured by the &lt;a href=&quot;https://www.bosch-sensortec.com/products/environmental-sensors/gas-sensors/bme680/&quot;&gt;BME680 sensor&lt;/a&gt; in my bedroom in the last thirty minutes?  How much does it change over the day?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, according to the HASS website, the &lt;a href=&quot;https://www.home-assistant.io/integrations/statistics/&quot;&gt;Statistics&lt;/a&gt; and related utilities are currently used by less than 5% of the HASS userbase.  I feel there is much to be explored and gained from the application of &lt;strong&gt;dynamic statistical inferences&lt;/strong&gt; in home automation systems.  To mention a few reasons, sensors are susceptible to measurement error and many user-defined events (e.g., Carlos is at home) are multidimensional and frequently determined by more factors than integrated within a home automation system (e.g., my cellphone connected to my home’s private network is not a sufficient condition to tell that I’m at home but it does inform about the likelihood that I am at home).  This creates uncertainty about the current and future states of things but fortunately, this uncertainty can be quantified and taken into account by various statistical tools that have long been developed.&lt;/p&gt;

&lt;p&gt;Furthermore, the fact that HASS integrations are written in the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python programming language&lt;/a&gt; makes HASS a prime candidate for exploring the use of statistical inference in home automation systems because many mathematical and statistical packages are already available in Python and are widely used and well-maintained (e.g., &lt;a href=&quot;https://pypi.org/project/numpy/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/scipy/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scipy&lt;/code&gt;&lt;/a&gt;). Therefore, porting new and more sophisticated analytical tools to HASS should be fairly straightforward.  (More on this in the &lt;a href=&quot;#development&quot;&gt;Development&lt;/a&gt; section).&lt;/p&gt;

&lt;p&gt;At the very least, the current analytical tools can be used to improve the quality of the information in your HASS dashboard.  For example, instead of simply displaying the current temperature, the use of analytical tools allow us to set dynamic color thresholds based on the mean and deviations from it (± one standard deviation, then min-max) over the last 24hrs:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif&quot; alt=&quot;HASS graph dynamic temperature 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there’s much more that can be done and accomplished moving forward.  If you find these ideas interesting and want to get started on their implementation in your own personal HASS, then read on.  As in my previous guides and tutorials, I tried to unpack and digest as much of the content as possible, the goal being to make it accessible to experts as well as novices.  Check the &lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt; for updates and if you ever get stuck on something or just want to share a few ideas and opinions, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Get familiar with the following:
    &lt;ul&gt;
      &lt;li&gt;The HASS SQLite database (DB);&lt;/li&gt;
      &lt;li&gt;YAML syntax;&lt;/li&gt;
      &lt;li&gt;Templating.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Learn the specifics about how data are sampled and stored in the HASS DB and how they affect analysis, owing to inconsistent data points and misrepresentation of data over time;&lt;/li&gt;
  &lt;li&gt;Familiarize yourself with the use of three utility integrations:
    &lt;ul&gt;
      &lt;li&gt;History Stats;&lt;/li&gt;
      &lt;li&gt;Statistics;&lt;/li&gt;
      &lt;li&gt;Trend.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Make use of analytical data to improve your current HASS dashboard using the following cards:
    &lt;ul&gt;
      &lt;li&gt;Mini graph card;&lt;/li&gt;
      &lt;li&gt;Lovelace card templater.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;From this point forward, the article was divided into two main parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;(&lt;em&gt;Optional.&lt;/em&gt;) &lt;a href=&quot;#prerequisites&quot;&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/a&gt;: A brief overview of the HASS core installation, configuration files, and database. At the end of this section, there is a few statistics resources for users who want to refresh their stats knowledge.  Advanced users might want to skip this section altogether.  However, at the very least, I suggest to glance over each topic to make sure we are all on the same page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#implementation&quot;&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/a&gt;: This is the main part of the article. I started describing in detail the issues pertaining to how data are sampled and stored in the HASS DB. Afterwards, I reviewed three of the current Utility integrations that I find most useful and finally, at the end, I mentioned two JavaScript modules that are useful in visualizing analytical metrics within the HASS dashboard.  (If you came here just to learn how to build a dynamic threshold graph card, feel free to head straight to the section called &lt;a href=&quot;#visualizing-analytical-data&quot;&gt;Visualizing analytical data&lt;/a&gt;.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;The implementation of analytical tools in HASS has the following basic requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;a href=&quot;#hass-core&quot;&gt;HASS &lt;strong&gt;core&lt;/strong&gt;&lt;/a&gt; instance;&lt;/li&gt;
  &lt;li&gt;Understanding of &lt;a href=&quot;#hass-configuration-files&quot;&gt;the &lt;strong&gt;configuration&lt;/strong&gt; files and the &lt;strong&gt;YAML&lt;/strong&gt; syntax&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Understanding the &lt;a href=&quot;#hass-database&quot;&gt;HASS &lt;strong&gt;database&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;And of course, &lt;a href=&quot;#statistics&quot;&gt;basic &lt;strong&gt;statistics&lt;/strong&gt;&lt;/a&gt; knowledge.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those four topics are described separately next.&lt;/p&gt;

&lt;h2 id=&quot;hass-core&quot;&gt;HASS core&lt;/h2&gt;
&lt;p&gt;Structurally, HASS can be divided into three main layers: (a) core; (b) supervisor; and (c) operating system (OS).  The folks at the HASS wiki were kind enough to put together a plethora of &lt;a href=&quot;https://www.home-assistant.io/installation/&quot;&gt;installation methods&lt;/a&gt; for all sorts of OSes and environments (bare-metal vs. virtual).  For this guide, however, only the most basic layer of the HASS system is needed, namely the &lt;strong&gt;HASS core&lt;/strong&gt;, which is available in &lt;em&gt;any&lt;/em&gt; installation method.&lt;/p&gt;

&lt;p&gt;Instead of using an existing HASS instance, I &lt;strong&gt;strongly&lt;/strong&gt; recommend to &lt;strong&gt;create a containerized (Docker) HASS instance&lt;/strong&gt; for testing purposes.  This will be much safer than playing with an existing HASS instance and its database.&lt;/p&gt;

&lt;p&gt;To create a HASS Docker container, follow the instructions in the &lt;strong&gt;official documentation&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Install &lt;strong&gt;Docker Engine - Community Edition&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Optional&lt;/em&gt;.) &lt;a href=&quot;https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/&quot;&gt;Install &lt;strong&gt;Portainer - Community Edition&lt;/strong&gt;&lt;/a&gt; to manage your Docker containers;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/installation/linux#install-home-assistant-container&quot;&gt;Install &lt;strong&gt;HASS Docker container&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of note, after deploying the HASS container, use a host’s text editor (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluma&lt;/code&gt;) to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file and related configuration files.  Whenever you create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; file, make sure that the HASS user will have permission to read it at the very least, or you will run into issues.  Finally, in the HASS webUI, your HASS user must be able to access the &lt;a href=&quot;https://www.home-assistant.io/docs/tools/dev-tools/&quot;&gt;&lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; Services&lt;/a&gt; tab to check the state of each entity and their attributes.  The default admin user should have access to such a resource.&lt;/p&gt;

&lt;h2 id=&quot;hass-configuration-files&quot;&gt;HASS configuration files&lt;/h2&gt;
&lt;p&gt;The configuration files in HASS use a human-readable data serialization language called &lt;a href=&quot;https://yaml.org/&quot;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt; (YAML Ain’t Markup Language).  In this guide, we will use YAML to edit and create configuration files for HASS that will customize database settings and new entities to collect data and help with their visualization.&lt;/p&gt;

&lt;p&gt;If you are new to YAML, take a few minutes right now to familiarize yourself with it.  The HASS wiki has a straight to the point explanation that I invite everyone to read:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/configuration/yaml/&quot;&gt;https://www.home-assistant.io/docs/configuration/yaml/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To highlight a few important points about the configuration files and the YAML syntax:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Indentation and spacing in general are &lt;strong&gt;very&lt;/strong&gt; important in YAML. Use only the spacebar and maintain consistency across all configuration files. If at all possible, use an editor that shows whitespaces when editing any YAML files;&lt;/li&gt;
  &lt;li&gt;UPPER and lower cases matter;&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; to add comments;&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; (double quotation marks) for escaping special characters in sequences (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hey! What's up?&quot;&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;''&lt;/code&gt; (single quotation marks) when escaping is not necessary (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Nothing much.'&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!include&lt;/code&gt; for splitting up your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;. For instance, instead of adding all your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor:&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensor:&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file itself, create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensors.yaml&lt;/code&gt; files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/&lt;/code&gt; directory and then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!include&lt;/code&gt; to add them automatically to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensors&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensors.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;binary_sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary_sensors.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!secret&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.yaml&lt;/code&gt; for managing passwords.  (See more in the HASS wiki called &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/secrets/&quot;&gt;Storing secrets&lt;/a&gt;.)  This is particularly useful if you plan on sharing your configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, after making any changes to any YAML file (and saving them), it is necessary to &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/#reloading-changes&quot;&gt;&lt;strong&gt;reload&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file&lt;/a&gt;.  If your installation method does not allow for selective reloading, then go ahead and reload the entire HASS.  However, &lt;em&gt;before reloading any configuration file&lt;/em&gt;, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hass --script check_config&lt;/code&gt; script to make sure your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file is okay, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From within the HASS webUI, navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Server Controls&lt;/strong&gt; &amp;gt; Configuration validation.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-validation.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-validation.jpg&quot; alt=&quot;HASS config validation&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-reload.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-config-reload.jpg&quot; alt=&quot;HASS config reload&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, if running the HASS Docker container, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec homeassistant python -m homeassistant --script check_config --config /config&lt;/code&gt; to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_config&lt;/code&gt; script from your host machine.  (This assumes that your HASS container is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homeassistant&lt;/code&gt;. If this is not the case, change it accordingly.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Always keep an eye on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home-assistant.log&lt;/code&gt; file for errors.  This will greatly help you troubleshooting most issues on your own (e.g., incorrect references or operations in templates).&lt;/p&gt;

&lt;h2 id=&quot;hass-database&quot;&gt;HASS database&lt;/h2&gt;
&lt;p&gt;HASS uses a relational database (DB) management system (RDBMS) based on the &lt;strong&gt;SQL engine&lt;/strong&gt; and by default, it creates a &lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;&lt;strong&gt;SQLite DB&lt;/strong&gt;&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/home-assistant_v2.db&lt;/code&gt; to track events and parameters over time.  If you want to learn more about and dive into the HASS DB, including how to create your own SQL backend, take a look at the two following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/backend/database/&quot;&gt;https://www.home-assistant.io/docs/backend/database/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/recorder/&quot;&gt;https://www.home-assistant.io/integrations/recorder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, most users won’t need to learn RDBMSes and SQL to take advantage of analytical tools in HASS because the default SQLite DB is usually enough.  However, there are a few aspects about the &lt;strong&gt;default settings&lt;/strong&gt; that can affect the way the data are analyzed.  Those aspects are described in more detail next.&lt;/p&gt;

&lt;h3 id=&quot;default-database&quot;&gt;Default database&lt;/h3&gt;
&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file, the &lt;strong&gt;default SQLite DB&lt;/strong&gt; is created along with many of the other default settings by the following configuration variable:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To change the default DB settings, it is necessary to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; configuration variable to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Customized DB settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;recorder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The documentation of the specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; variables can be found at the HASS wiki:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/recorder/&quot;&gt;https://www.home-assistant.io/integrations/recorder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In brief, by default, the HASS DB &lt;strong&gt;keeps historical data up to 10 days&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purge_keep_days: 10&lt;/code&gt;), running an automatic purge of the database every night to prevent the DB from increasing in size indefinitely (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto_purge: true&lt;/code&gt;).  Therefore, &lt;em&gt;if you want to keep data from one or more entities for longer than 10 days&lt;/em&gt;, then you must edit the DB default settings.  Personally, I prefer to keep data for &lt;em&gt;two weeks&lt;/em&gt; instead (14 days), so I usually change my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; configuration to the following in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Customized DB settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;recorder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;purge_keep_days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exclude&lt;/code&gt; filter parameters are particularly useful whenever working with non-default settings, as they help you specify which entities should be tracked.  &lt;a href=&quot;https://www.home-assistant.io/integrations/recorder/#common-filtering-examples&quot;&gt;Check the HASS wiki Configure Filter for examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, as mentioned before, the default DB is stored in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/&lt;/code&gt; directory and also by default, &lt;strong&gt;changes are committed to the DB every 1 sec&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit_interval: 1&lt;/code&gt;). This matters because if you are collecting data over a time window lower than 1 sec, then you might want to change the commit interval to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (zero, or as soon as possible) instead. At this point, it is also important to consider where the DB is being physically stored (SD card, eMMC, HDD, or SSD), owing to &lt;strong&gt;disk I/O&lt;/strong&gt; and &lt;strong&gt;wear and tear&lt;/strong&gt; considerations.  (More advanced aspects come into play if HASS is not the only application committing to the DB but I trust that if this is your case, then you probably know how to customize the HASS DB accordingly.)&lt;/p&gt;

&lt;p&gt;For advanced users who want to browse and manually add/edit entries from the default (SQLite) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home-assistant_v2.db&lt;/code&gt;, it is possible to use the &lt;a href=&quot;https://sqlitebrowser.org/&quot;&gt;SQLite Database Browser&lt;/a&gt;.  Just keep in mind that the default HASS DB might have permissions (ownership and group membership) that are incompatible with your current host user and therefore, you might be unable even to read the DB without first editing the permissions–in Linux, appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlitebrowser&lt;/code&gt; should give you access no matter what though.&lt;/p&gt;

&lt;h3 id=&quot;resetting-entity-data-in-the-db&quot;&gt;Resetting entity data in the DB&lt;/h3&gt;
&lt;p&gt;In addition to the SQL browser method of editing the HASS DB, HASS allow users to run a &lt;a href=&quot;https://www.home-assistant.io/docs/scripts/service-calls/&quot;&gt;service call&lt;/a&gt; from within the webUI to manually run a &lt;strong&gt;purge task&lt;/strong&gt;. This is particularly useful to run once you are done making changes to a newly created template entity and want to clean any previous (and possibly erroneous) records from the DB.  To remove all the data from a list of entities, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; Services;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Go to YAML mode&lt;/strong&gt; and paste the following:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;recorder.purge_entities&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.my_template_entity_01&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.my_template_entity_02&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.my_template_entity*&lt;/code&gt; are the target template entities you want to purge;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;Call Service&lt;/strong&gt; to purge their data from the DB. The new data will be collected as soon as an update is triggered (see the &lt;a href=&quot;#sampling&quot;&gt;Sampling&lt;/a&gt; section).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, there are other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder&lt;/code&gt; services available in the Developer Tools &amp;gt; Services tab. Feel free to explore them.&lt;/p&gt;

&lt;h3 id=&quot;long-term-statistics&quot;&gt;Long-term statistics&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/blog/2021/08/04/release-20218/&quot;&gt;Release 2021.8.0&lt;/a&gt; has introduced a new feature for sensors called &lt;a href=&quot;https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics&quot;&gt;&lt;strong&gt;long-term statistics&lt;/strong&gt;&lt;/a&gt;. In brief, sensor data (e.g., the state value and the sensor attributes) are stored on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; table of the HASS DB.  Now, however, sensors that &lt;strong&gt;opt-in&lt;/strong&gt; for long-term statistics have three summary statistics (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt;) stored on a new table of the HASS DB, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; data are unaffected by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder&lt;/code&gt; configuration in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file and therefore, it allows users to keep summary statistics for longer than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder&lt;/code&gt; configuration allows to keep data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;The summary statistics are stored on an &lt;strong&gt;hourly&lt;/strong&gt; basis. That is, if a sensor has stored five data points between 2PM and 3PM, then for each summary statistic, there will be a single data point for the 2-3PM time window that summarize the five data points in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; table.  Therefore, making use of such a feature only makes sense if your sensor stores more than a single data point per hour.&lt;/p&gt;

&lt;p&gt;Currently, there are two types of long-term statistics that are stored on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; table of the HASS DB, all of which &lt;strong&gt;must include&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state_class: measurement&lt;/code&gt; property and thus must refer to &lt;strong&gt;present time&lt;/strong&gt; measurement (e.g., current temperature, current humidity):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Metered&lt;/strong&gt; entities: Apply to any sensor that has cumulative values &lt;em&gt;until a reset point&lt;/em&gt;, such as energy consumption meters. All such sensors &lt;strong&gt;must include&lt;/strong&gt; the &lt;a href=&quot;https://developers.home-assistant.io/docs/core/entity/sensor/#properties&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_reset&lt;/code&gt;&lt;/a&gt; property, which specifies a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datetime&lt;/code&gt; in which the values reset.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt; entities: Apply to any non-cumulative sensor that belongs to a supported &lt;a href=&quot;https://developers.home-assistant.io/docs/core/entity/sensor/#available-device-classes&quot;&gt;device class&lt;/a&gt;.  Naturally, all such sensors &lt;strong&gt;must include&lt;/strong&gt; the &lt;a href=&quot;https://developers.home-assistant.io/docs/core/entity/sensor/#properties&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device_class&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many integrations are currently configured to store summary statistics on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; table of the HASS DB, so you might not need to manually configure anything at all.  However, support for long-term statistics is still quite limited. As far as I can tell, the only other feature that makes use of the data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; table is the new &lt;a href=&quot;https://www.home-assistant.io/lovelace/statistics-graph/&quot;&gt;Statistics Card Graph&lt;/a&gt;, which is mentioned later on in the &lt;a href=&quot;#visualizing-analytical-data&quot;&gt;Visualizing analytical data&lt;/a&gt; section.&lt;/p&gt;

&lt;h2 id=&quot;statistics&quot;&gt;Statistics&lt;/h2&gt;
&lt;p&gt;You don’t need to be a mathematician who specialized in statistics to make use of it.  In this guide, we will only make reference to very introductory statistical knowledge, such as measures of central tendency (e.g., mean, median), variability (e.g., variance, standard deviation) and simple (univariate) linear regression (e.g., gradient/slope).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/humor-stats.png&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/humor-stats.png&quot; alt=&quot;Humor about stats&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal in this guide is to present a starting point for more advanced usage of analytical tools in home automation systems.  The possibilities are endless for knowledgeable users (e.g., application of Bayesian methods, dynamic mixed-effects modeling) and how far you will go along these paths is up to you.&lt;/p&gt;

&lt;p&gt;If you want to refresh your stats knowledge or dig deeper into it, save some time and take a look at the following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reading material:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Statistics-11th-Robert-S-Witte/dp/1119386055&quot;&gt;Robert Witte &amp;amp; John Witte’s textbook called &lt;strong&gt;Statistics&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/All-Statistics-Statistical-Inference-Springer-ebook-dp-B00HWUVSJS/dp/B00HWUVSJS/&quot;&gt;Larry Wasserman’s textbook called &lt;strong&gt;All of Statistics&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basic stats refresher:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/xxpc-HPKN28&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;The main functionalities in HASS are extended by the configuration of new &lt;strong&gt;integrations&lt;/strong&gt;.  According to the &lt;a href=&quot;https://www.home-assistant.io/docs/glossary/&quot;&gt;HASS Glossary&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/&quot;&gt;Integrations&lt;/a&gt; provide the core logic for the functionality in Home Assistant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, the analytical tools covered in this guide are implemented by one or more of the &lt;strong&gt;1800&lt;/strong&gt; integrations that are currently supported by a community of home automation enthusiasts.  More specifically, most of the analytical tools are grouped under &lt;a href=&quot;https://www.home-assistant.io/integrations/#utility&quot;&gt;Utility&lt;/a&gt; integrations and in this guide, I will only cover the following three:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#statistics-1&quot;&gt;Statistics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trend&quot;&gt;Trend&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The current set of analytical integrations is fairly limited in what it can do.  For the most part, the tools can be used to create summary statistics of the past states and measurements of integrated devices and sensors.  Inference-wise, a lot can be done via &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/&quot;&gt;templates&lt;/a&gt; but moving forward, there is a need for more advanced analytical integrations.  For this reason, at the end of this guide, I added a section about &lt;a href=&quot;#development&quot;&gt;Development&lt;/a&gt; for anyone interested in helping out.  First, however, we need to talk about &lt;a href=&quot;#data&quot;&gt;Data&lt;/a&gt; and &lt;a href=&quot;#sampling&quot;&gt;Sampling&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;data&quot;&gt;Data&lt;/h2&gt;
&lt;p&gt;Before delving into any analytical integration, there are at least three things that we need to do. First, we need to think about the nature of the data.  For example, consider the default &lt;a href=&quot;https://www.home-assistant.io/integrations/sun/&quot;&gt;Sun&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt;) entity in HASS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-sun.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-sun.jpg&quot; alt=&quot;Sun entity&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; &lt;em&gt;state&lt;/em&gt; is a &lt;strong&gt;discrete&lt;/strong&gt; variable (it’s either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;above_horizon&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;below_horizon&lt;/code&gt;), its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; &lt;em&gt;attribute&lt;/em&gt; is actually &lt;strong&gt;continuous&lt;/strong&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;35.84&lt;/code&gt;° between the sun and the horizon) and therefore, it doesn’t make sense to use the same tools to analyze both of them.  Nonetheless, discrete variables can be transformed into continuous ones (e.g., the sun was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;above_horizon&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;34.1&lt;/code&gt;% of the day), and similarly, continuous variables can be discretised (e.g., the elevation is either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;negative&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;positive&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero&lt;/code&gt;) in order to better answer our questions of interest.&lt;/p&gt;

&lt;p&gt;Second, we need to check whether HASS is keeping track of the data we need. There are multiple ways of doing that but by far, the easiest method is to navigate to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States and then make sure that the entities whose states and attributes we would like to keep track of are being listed there.  (Alternatively, you can open the HASS DB with a SQL browser and look for the entity in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; Table.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-states.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-states.jpg&quot; alt=&quot;HASS developer tools states&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Third, we need to check how the data are being represented in the DB.  As in the previous example, some variables might be an attribute of an existing entity in the HASS DB.  If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder:&lt;/code&gt; settings for such entity are fine for the type of analysis you want to automate (e.g., purge every 10 days), then you are all set.  However, notice that &lt;em&gt;attributes&lt;/em&gt; cannot be displayed the same way as the &lt;em&gt;states&lt;/em&gt; of an entity in the HASS webUI.  In addition, you might want to &lt;strong&gt;pre-process&lt;/strong&gt; the attributes (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round(2)&lt;/code&gt;) or perform transformations before running the analysis.&lt;/p&gt;

&lt;p&gt;For all such reasons, I always create &lt;strong&gt;new entities&lt;/strong&gt; for the variables that will be analyzed. This is accomplished with the &lt;a href=&quot;https://www.home-assistant.io/integrations/template/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template&lt;/code&gt; integration&lt;/a&gt;.  Per the HASS wiki:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The template integration allows creating entities which derive their values from other data. This is done by specifying templates for properties of an entity, like the name or the state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/#building-templates&quot;&gt;Building templates&lt;/a&gt; is fairly easy once you get the hang of the syntax.  In short, templates follow the &lt;a href=&quot;https://palletsprojects.com/p/jinja&quot;&gt;&lt;strong&gt;Jinja2&lt;/strong&gt; templating engine&lt;/a&gt; and are mainly used to perform mathematical operations (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;) and logic tests (if __ , then __ ) but can also do loops (for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states.sensor&lt;/code&gt;, __ ), for example.  As a result, templates give users a scripting tool to go beyond the HASS built-in functionalities.  To test and preview a customized template, use the &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; Template tab:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-template.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-developer-tools-template.jpg&quot; alt=&quot;HASS developer tools template&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an example, let’s create an entity to store and round to zero the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute.  First, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt;, &lt;strong&gt;append&lt;/strong&gt; (add to the bottom) a reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Templates&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;templates.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, use a text editor to create an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; file and create a sensor template for the sun elevation, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensor templates&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;°&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('sun.sun', 'elevation') | float | round(0) }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state:&lt;/code&gt;, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state_attr()&lt;/code&gt; to retrieve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; entity. Then, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; to force the output to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic&quot;&gt;floating point number&lt;/a&gt;, which ensures that the output is interpreted as a number, and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round(0)&lt;/code&gt; on the numeric output to round the decimals to zero cases.  The result should be an &lt;a href=&quot;https://en.wikipedia.org/wiki/Integer&quot;&gt;integer&lt;/a&gt; of the Sun elevation.  (Alternatively, we could simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; to convert the output to an integer, of course.)&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;I find the use of the folded style (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;) very helpful in keeping the templates organized. Refer to the &lt;a href=&quot;https://yaml.org/spec/1.2/spec.html&quot;&gt;YAML - Scalars&lt;/a&gt; documentation for more information.&lt;/p&gt;

&lt;p&gt;Check your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file for errors (Configuration &amp;gt; Server Controls &amp;gt; Configuration validation), and finally, &lt;strong&gt;restart your HASS&lt;/strong&gt;.  Afterwards, navigate to Developers Tools &amp;gt; States and if everything is correct, you should see a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation&lt;/code&gt; entity:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-template-sun-elevation.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-entity-template-sun-elevation.jpg&quot; alt=&quot;HASS template sun elevation&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the values of this newly created entity will update as soon as the Sun &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute changes. However, it is also possible to configure different &lt;strong&gt;triggers&lt;/strong&gt; for &lt;strong&gt;template entities&lt;/strong&gt;.  This is particularly relevant for the next topic, namely data sampling.&lt;/p&gt;

&lt;h2 id=&quot;sampling&quot;&gt;Sampling&lt;/h2&gt;
&lt;p&gt;Devices, sensors, and services measure and transmit data with a certain frequency, which I refer by the term &lt;strong&gt;measurement resolution&lt;/strong&gt;.  Such a resolution might be determined by a time-based rule (e.g., every 1 sec) or an event (HTTP request) or a combination of both.  Regardless of the nature of the trigger, the &lt;em&gt;higher&lt;/em&gt; the measurement resolution, the more frequent the observations are.  For example, an &lt;a href=&quot;https://www.espressif.com/en/products/devkits&quot;&gt;ESP32 Development board&lt;/a&gt; connected to a &lt;a href=&quot;https://www.bosch-sensortec.com/products/environmental-sensors/humidity-sensors-bme280/&quot;&gt;BME280 environmental sensor&lt;/a&gt; might send a temperature measurement every 5 minutes to a MQTT broker.  Therefore, for all intended purposes, the measurement resolution of such a temperature sensor is at best 5 minutes.  Now, if a second ESP32 measures and send data &lt;em&gt;every 1 minute&lt;/em&gt; instead, then the measurement resolution of the latter ESP32 is higher than the former (i.e., we can expect it to send temperature data more frequently).&lt;/p&gt;

&lt;p&gt;As mentioned before, in HASS, &lt;strong&gt;template entities&lt;/strong&gt; follow state-based updates by default–that is, they update as soon as the data of any of the referenced entities change.  Let’s say that over a 20-min window, none of the referenced data changed.  This means that the template entity also didn’t change and more importantly, in the DB, there will be a &lt;em&gt;single data point&lt;/em&gt; over the 20-min window.  However, let’s say that over the same 20-min window, one of the referenced data changed twice. This means that the template entity now changed twice and more importantly, in the DB, there will be &lt;em&gt;three data points&lt;/em&gt; over the 20-min window.  This a very efficient way of storing data but you can probably see how this might affect the usage of analytical tools, owing to an inconsistent number of data points over equal time-frames as well as the under-representation of data over time.&lt;/p&gt;

&lt;p&gt;Fortunately, just like we specify triggers for automations, HASS offers the possibility to specify &lt;a href=&quot;https://www.home-assistant.io/integrations/template/#trigger-based-template-sensors&quot;&gt;triggers for template entities&lt;/a&gt;.  There’s a large variety of triggers that can be used here (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mqtt&lt;/code&gt;) but for &lt;strong&gt;longitudinal analysis&lt;/strong&gt;, the most useful one is the &lt;a href=&quot;https://www.home-assistant.io/docs/automation/trigger#time-pattern-trigger&quot;&gt;&lt;strong&gt;time pattern&lt;/strong&gt; trigger&lt;/a&gt;, which is aptly called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_pattern&lt;/code&gt;.  Time pattern triggers can be specified for hours (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hours:&lt;/code&gt;), minutes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minutes:&lt;/code&gt;), and seconds (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seconds:&lt;/code&gt;), and for each one, it’s possible to prefix the value with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; to match whenever the current value is divisible by the specified value (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hours: &quot;/2&quot;&lt;/code&gt; will match every 2 hours) or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; to match any value (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minutes: &quot;*&quot;&lt;/code&gt; to match every minute).&lt;/p&gt;

&lt;p&gt;To create a time pattern trigger for one or more template entity sensor, simply add a list of time-based &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor:&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensor:&lt;/code&gt; under a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger:&lt;/code&gt; configuration in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; configuration file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Time pattern trigger&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;time_pattern&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Update every 5 minutes&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/5&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Sensor templates&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;time-based&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;°&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('sun.sun', 'elevation') | float | round(0) }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ as_timestamp(now()) }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of note, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timestamp:&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes:&lt;/code&gt; forces HASS to create a new entry on the DB (update) whenever the template is triggered.  This keeps the number of data points constant over time and each one of them will have a timestamp as attribute.  (In the DB, you will also see that if the state remained unchanged, it maintains the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_changed&lt;/code&gt; date and updates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_updated&lt;/code&gt; variable.)&lt;/p&gt;

&lt;p&gt;Also, notice that it does not make sense to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_pattern&lt;/code&gt; trigger rule that has higher resolution than the device’s &lt;em&gt;measurement&lt;/em&gt; resolution because then, there’s no chance for a new value to occur and the DB would just repeat the last transmitted measurement.  Ideally, the time pattern should &lt;strong&gt;match the measurement resolution&lt;/strong&gt; but to save space, you might want to set a lower time pattern resolution (as in 1:2, or 1:4, and so on).&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Beware that depending on how triggers are configured and how many template entities are created, the HASS DB might end up using &lt;strong&gt;a lot of space&lt;/strong&gt; and computations are bound to use &lt;strong&gt;ever more CPU (and possibly RAM) resources&lt;/strong&gt;, owing to the number of entries in the DB.  Be sure to monitor such resources after configuring your HASS instance; Otherwise, your HASS instance might experience serious problems.&lt;/p&gt;

&lt;p&gt;Finally, there is the topic of statistical sampling (representativeness) when it comes to making generalizations from a couple of samples (e.g., environmental sensors in my bedroom and kitchen) to a population (temperature and humidity in my entire house).  In this guide, however, we will not delve too far into statistical inferences, owing to limitations of the current set of analytical tools.  Nonetheless, extended &lt;strong&gt;service outages&lt;/strong&gt;, for example, might comprise summary statistics.  For proper representation, it is fundamental that your HASS has been running and collecting data for as long as the monitored time period of any statistic.  To put it in simple, a sensor that monitors weekly activity, for example, won’t make sense until your HASS instance has been running and collecting data over at least one week.&lt;/p&gt;

&lt;h2 id=&quot;utilities&quot;&gt;Utilities&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.home-assistant.io/integrations/#utility&quot;&gt;&lt;strong&gt;Utility integrations&lt;/strong&gt;&lt;/a&gt; offer users tools to parse and analyze data from recorded entities.  There are more than 30 different such integrations and they sometimes have overlapping functionalities.  For example, the gradient (ratio of change) over the last two data points can be computed by both the &lt;a href=&quot;https://www.home-assistant.io/integrations/trend/&quot;&gt;Trend&lt;/a&gt; integration and the &lt;a href=&quot;https://www.home-assistant.io/integrations/derivative/&quot;&gt;Derivative&lt;/a&gt;.  In what follows, I covered only three of the utility integrations that I find most comprehensive and useful, namely:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#statistics-1&quot;&gt;Statistics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trend&quot;&gt;Trend&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trend is covered last because out of the set, it’s the only one that actually makes use of inferential tools via the Python package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;. The others provide counting, other mathematical resources, and ways of summarize historical data.  For each utility, I provided a brief description, usage examples to follow along, and reference to the documentation and source code.&lt;/p&gt;

&lt;h3 id=&quot;history-stats&quot;&gt;History Stats&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.home-assistant.io/integrations/history_stats/&quot;&gt;History Stats&lt;/a&gt; integration provides useful statistics for discrete variables over a user-specified time-range.  More specifically, this integration can do one of three things depending on the chosen type of sensor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type: time&lt;/code&gt;: calculate the &lt;em&gt;amount of hours&lt;/em&gt; that an entity has spent on a given state;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type: ratio&lt;/code&gt;: calculate the &lt;em&gt;percentage of time&lt;/em&gt; that an entity has spent on a given state;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type: count&lt;/code&gt;: count how many times an entity has changed to a given state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The use of this integration requires specification of &lt;strong&gt;at least two&lt;/strong&gt; of the following time period variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start:&lt;/code&gt;: It indicates when the time period starts.  Use &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/#time&quot;&gt;time templating&lt;/a&gt; to specify the time;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end:&lt;/code&gt;: It indicates when the time period ends.  Use &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/#time&quot;&gt;time templating&lt;/a&gt; to specify the time;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duration:&lt;/code&gt;: It indicates how long the time period lasts.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start:&lt;/code&gt; is specified, then how long forwards;  if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end:&lt;/code&gt; is specified, then how long backwards.  The syntax can be either the traditional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HH:MM:SS&lt;/code&gt; format or as follows:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usage-examples&quot;&gt;Usage examples&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;history_stats&lt;/code&gt; are defined as a platform (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- platform: history_stats&lt;/code&gt;) under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor:&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file.  To keep things organized, go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; and append a reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensors&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensors.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then using a text editor, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt; file where we will configure the following three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;history_stats&lt;/code&gt; sensors to consume the data from the default &lt;a href=&quot;https://www.home-assistant.io/integrations/weather/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt;&lt;/a&gt; entity:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sunny yesterday hours&lt;/code&gt;: Number of hours that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; entity remained in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sunny&lt;/code&gt; state &lt;em&gt;yesterday&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudy today ratio&lt;/code&gt;: Percentage of time that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; entity remained in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudy&lt;/code&gt; state &lt;em&gt;today&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rainy week count&lt;/code&gt;: Number of times that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; entity changed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rainy&lt;/code&gt; state over the &lt;em&gt;last seven days&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice&quot;&gt;The &lt;a href=&quot;https://www.home-assistant.io/integrations/met/&quot;&gt;Meteorologisk institutt (Met.no)&lt;/a&gt; is the current default meteorological information service used by HASS. This integration’s measurement resolution is 1 hour (via cloud polling) and it follows state-based updates (a new entry in the DB is only created if any of the values has changed).&lt;/p&gt;

&lt;p&gt;To create those three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;history_stats&lt;/code&gt; sensor entities, append the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# History Stats&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;history_stats&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sunny&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hours&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weather.home&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sunny&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;time&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# end today at 00:00:00&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;{{ now().replace(hour=0, minute=0, second=0) }}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# start 24h before the end time&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;history_stats&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cloudy&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ratio&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weather.home&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cloudy&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ratio&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# start today at 00:00:00&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;{{ now().replace(hour=0, minute=0, second=0) }}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# end right now&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;{{ now() }}&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;history_stats&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rainy&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;count&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weather.home&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rainy&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;count&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# end right now&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;{{ now() }}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# start 7 days before the end time&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;strong&gt;check your configuration file&lt;/strong&gt; and if everything looks good, &lt;strong&gt;restart HASS&lt;/strong&gt;.  Afterwards, check your &lt;strong&gt;log&lt;/strong&gt; file for related errors and if it all looks good, then head to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States and you should now see the three new entities we just created:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-historystats.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-historystats.jpg&quot; alt=&quot;HASS utility history stats&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example above, it’s been cloudy for 2.6% of the time today, we had roughly 10 hours of sunny weather yesterday, and the weather changed to rainy 5 times over the week.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;Because I have not been running HASS and collecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; data over this week in a reliable way, &lt;strong&gt;the reported metrics can be quite misleading&lt;/strong&gt;, as noted in the &lt;a href=&quot;#sampling&quot;&gt;Sampling&lt;/a&gt; section.  For a proper representation of the statistics over the configured time-range, make sure to keep your HASS instance running (and in this case, check that the cloud polling has been working without extended service outages) for at least as long as the configured time-range.&lt;/p&gt;

&lt;h4 id=&quot;additional-references&quot;&gt;Additional references&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;History Stats &lt;strong&gt;documentation&lt;/strong&gt;: &lt;a href=&quot;https://www.home-assistant.io/integrations/history_stats/&quot;&gt;https://www.home-assistant.io/integrations/history_stats/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;History Stats &lt;strong&gt;source&lt;/strong&gt;: &lt;a href=&quot;https://github.com/home-assistant/core/tree/dev/homeassistant/components/history_stats&quot;&gt;https://github.com/home-assistant/core/tree/dev/homeassistant/components/history_stats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#utilities&quot; class=&quot;btn btn--info btn--small&quot;&gt;Utilities&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;statistics-1&quot;&gt;Statistics&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.home-assistant.io/integrations/statistics/&quot;&gt;Statistics&lt;/a&gt; integration is by far the most useful integration for describing the past values from other entities.  In brief, it consumes the data from another entity and returns the traditional descriptive measures of central tendency (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;median&lt;/code&gt;) and variability (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quantiles&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variance&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard_deviation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_value&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_value&lt;/code&gt;), as well as a few other descriptive measures.&lt;/p&gt;

&lt;p&gt;Similarly to the &lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt; integration, the Statistics integration has &lt;strong&gt;two time period variables&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size&lt;/code&gt;: The maximum number of data points to be used within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; interval in &lt;strong&gt;descending order&lt;/strong&gt; (oldest to newest). By default, it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt;: The maximum age of the oldest data point. This variable is equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duration:&lt;/code&gt; in the &lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt; when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end: {{ now() }}&lt;/code&gt; and similarly, its time syntax can be defined in the traditional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HH:MM:SS&lt;/code&gt; format or the following:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;That is, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; specifies an interval relative to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;now()&lt;/code&gt; in which the Statistics integration will collect a maximum number of data points equal to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt;) in &lt;strong&gt;descending&lt;/strong&gt; order. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; is not specified, then it spans until the last value in the HASS DB for the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entity_id&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate how the specification of time works in this integration, let’s suppose we create a template sensor that triggers every &lt;strong&gt;5 min&lt;/strong&gt; and &lt;strong&gt;forces an update&lt;/strong&gt; (DB entry), such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation_time_based&lt;/code&gt; from the &lt;a href=&quot;#sampling&quot;&gt;Sampling&lt;/a&gt; section, and we leave it running for exactly 7 days from now.  Therefore, the HASS DB collects 12 data points &lt;em&gt;per hour&lt;/em&gt; for this template sensor, 288 data points &lt;em&gt;per day&lt;/em&gt;, and 2016 data points &lt;em&gt;per week&lt;/em&gt;.  Now, because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size&lt;/code&gt; works in &lt;strong&gt;descending order&lt;/strong&gt;, by default, it will compute statistics for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt; oldest data points, which will range from exactly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7 days old&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6 days, 22 hours, and 20 minutes old&lt;/code&gt; (or simply from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oldest&lt;/code&gt; until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100 minutes&lt;/code&gt; afterwards).  However, if we also specified the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; to 3 days ago, as follows:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then the time-range would instead span from exactly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 days old&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 days, 22 hours, 20 minutes old&lt;/code&gt;.  Finally, because there will be 288 data points per day, if we set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size: 288&lt;/code&gt; in the last example, then the time-range would instead span from exactly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 days old&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 days old&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While proper configuration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; allow for the specification of a variety of different time-ranges, it does require clear understanding of the entity’s &lt;strong&gt;measurement resolution&lt;/strong&gt; and how it is updated in the DB because otherwise, the computed statistics are bound to misrepresent the desired time-ranges.  I feel the &lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt; integration is more flexible and precise in its definition of the time-range by using the more intuitive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start:&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end:&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duration:&lt;/code&gt; time variables.  For example, the &lt;a href=&quot;https://www.home-assistant.io/docs/configuration/templating/#time&quot;&gt;time templating&lt;/a&gt; used in the History Stats integration allows for the specification of any hour of any day (e.g., start yesterday at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00:00:00&lt;/code&gt; and end today at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00:00:00&lt;/code&gt;), whereas such level of precision is not possible with the Statistics integration alone.&lt;/p&gt;

&lt;h4 id=&quot;usage-examples-1&quot;&gt;Usage examples&lt;/h4&gt;
&lt;p&gt;As before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; are defined as a platform (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- platform: statistics&lt;/code&gt;) under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor:&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file.  In this example, we will configure two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; sensors to consume the data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation_time_based&lt;/code&gt; entity:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun elevation one hour ago&lt;/code&gt;: Descriptive measures for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation_time_based&lt;/code&gt; over the last one &lt;em&gt;hour&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun elevation one day ago&lt;/code&gt;: Descriptive measures for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation_time_based&lt;/code&gt; over the last one &lt;em&gt;day&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create those two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; sensor entities, append the following to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Statistics&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;statistics&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ago&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_sun_elevation_time_based&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# measurement resolution is 5/min&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sampling_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;statistics&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ago&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_sun_elevation_time_based&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# measurement resolution is 5/min&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sampling_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;288&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;strong&gt;check your configuration file&lt;/strong&gt; and if everything looks good, &lt;strong&gt;restart HASS&lt;/strong&gt;. Afterwards, check your log file for related errors and if it all looks good, then head to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States and you should now see the two new entities we just created:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-01.jpg&quot; alt=&quot;HASS utility statistics 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.sun_elevation_one_day_ago&lt;/code&gt;, the number of actual data points (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count: 101&lt;/code&gt;) is lower than expected for this time-range (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size: 288&lt;/code&gt;).  This happened because my HASS instance has not been collecting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt; attribute  data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; entity in a reliable fashion over the last day.  However, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.sun_elevation_one_hour_ago&lt;/code&gt;, the number of actual data points (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count: 12&lt;/code&gt;) is indeed equal to the expected (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size: 12&lt;/code&gt;).  (Also, inspection of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_age&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; is very useful in making sure that the time-rage is the expected one.)&lt;/p&gt;

&lt;p&gt;In addition, any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; sensor entity shows the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean&lt;/code&gt; as both &lt;strong&gt;state&lt;/strong&gt; and &lt;strong&gt;attribute&lt;/strong&gt;.  Other descriptive statistics for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; sensor entity are shown only as &lt;strong&gt;attribute&lt;/strong&gt;.  In the example, the Sun has increased in elevation from 34° to 36° over the last hour (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_value: 34&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_value: 36&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change: 2&lt;/code&gt;), with an average of 35.2° above the horizon (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean: 35.17&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now, weather data are much less predictable and subject to multiple sources of variability over time than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.sun&lt;/code&gt; metrics.  As mentioned before, however, many of the default weather metrics (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;temperature&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;humidity&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pressure&lt;/code&gt;) are provided as attributes of a state-based, cloud polling entity–namely, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; entity that by default uses data from the &lt;a href=&quot;https://www.home-assistant.io/integrations/met/&quot;&gt;Met.no&lt;/a&gt; integration.  This poses multiple challenges to the analysis of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; data over time but just as before, we can fix it by creating &lt;a href=&quot;https://www.home-assistant.io/integrations/template/&quot;&gt;time-pattern, template sensors&lt;/a&gt; for each relevant attribute.  To do so, append the following to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;time_pattern&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Update every 1 hour&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/1&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Hourly sensor templates&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;time-based&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('weather.home', 'temperature') | float | round(1) }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ as_timestamp(now()) }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;humidity&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;time-based&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('weather.home', 'humidity') | int }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ as_timestamp(now()) }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pressure&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;time-based&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hPa&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ state_attr('weather.home', 'pressure') | float | round(1) }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ as_timestamp(now()) }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_pattern&lt;/code&gt; trigger is every 1 hour because the measurement resolution for the Met.no integration is 1 hour.  Obviously, if this is different for your weather integration, then set it to a different trigger value to match the measurement resolution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check your config&lt;/strong&gt; and &lt;strong&gt;restart your HASS&lt;/strong&gt;.  Now &lt;strong&gt;wait&lt;/strong&gt; for it to collect enough data points to allow meaningful analysis (at least 2 hours).&lt;/p&gt;

&lt;p&gt;Afterwards, we will create the following three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; sensors for the new entities which will provide descriptive metrics for each of them over a time period of &lt;em&gt;one day&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather temperature one day ago&lt;/code&gt;: Descriptive measures for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_weather_temperature_time_based&lt;/code&gt; over the last one &lt;em&gt;day&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather humidity one day ago&lt;/code&gt;: Descriptive measures for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_weather_humidity_time_based&lt;/code&gt; over the last one &lt;em&gt;day&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather pressure one day ago&lt;/code&gt;: Descriptive measures for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_weather_pressure_time_based&lt;/code&gt; over the last one &lt;em&gt;day&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create those three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; sensor entities, append the following to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;statistics&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ago&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_time_based&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# measurement resolution is 1/hour&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sampling_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;statistics&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;humidity&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ago&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_humidity_time_based&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# measurement resolution is 1/hour&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sampling_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;statistics&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pressure&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ago&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_pressure_time_based&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# measurement resolution is 1/hour&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sampling_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again, check your configuration file and then restart your HASS. Check your log file and &lt;strong&gt;wait&lt;/strong&gt; at least one hour.  Remember that such sensors will only update when the monitored entities also update, which in our case is every 1 hour.  Afterwards, head to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States and you should now see the three new entities we just created:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-statistics-02.jpg&quot; alt=&quot;HASS utility statistics 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This examples shows that over the last 24h, the temperature ranged from 9.7°C to 13.8°C, with a mean of 11.3°C and standard deviation of ±1.2°C.&lt;/p&gt;

&lt;h4 id=&quot;additional-references-1&quot;&gt;Additional references&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Statistics &lt;strong&gt;documentation&lt;/strong&gt;: &lt;a href=&quot;https://www.home-assistant.io/integrations/statistics/&quot;&gt;https://www.home-assistant.io/integrations/statistics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Statistics &lt;strong&gt;source&lt;/strong&gt;: &lt;a href=&quot;https://github.com/home-assistant/core/blob/dev/homeassistant/components/statistics/&quot;&gt;https://github.com/home-assistant/core/blob/dev/homeassistant/components/statistics/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Statistics noteworthy &lt;strong&gt;dependencies&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; core pkg: &lt;a href=&quot;https://docs.python.org/3/library/statistics.html&quot;&gt;https://docs.python.org/3/library/statistics.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#utilities&quot; class=&quot;btn btn--info btn--small&quot;&gt;Utilities&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;trend&quot;&gt;Trend&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.home-assistant.io/integrations/trend/&quot;&gt;Trend&lt;/a&gt; integration is the only one that depends on an external Python package, namely the &lt;a href=&quot;https://numpy.org&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;&lt;/a&gt; package, and it does exactly what you’d expect from its name: it provides a trend coefficient for the data set spanning a user-specified time period.  More specifically, this integration fits a &lt;strong&gt;linear&lt;/strong&gt; function to the data points of an entity–via NumPy’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.polyfit()&lt;/code&gt; method–and outputs the &lt;strong&gt;slope&lt;/strong&gt; of the function, which is called by &lt;em&gt;gradient&lt;/em&gt;.  As such, it is a very useful integration for any scenario in which we need to know whether the data are &lt;em&gt;increasing&lt;/em&gt; or &lt;em&gt;decreasing&lt;/em&gt; over time.&lt;/p&gt;

&lt;p&gt;The specification of time in this integration is very similar to the &lt;a href=&quot;#statistics-01&quot;&gt;Statistics&lt;/a&gt; integration, except that (a) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sampling_size&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_samples&lt;/code&gt;, (b) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_age&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_duration&lt;/code&gt;, and (c) the latter is specified in &lt;em&gt;seconds&lt;/em&gt; instead of using a duration syntax.  Specifically, the time period is specified by the following two time variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_samples&lt;/code&gt;: The maximum number of data points. By default, it uses the last two data points (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_samples: 2&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_duration&lt;/code&gt;: The duration (in seconds) of the oldest data point.  By default, it is unconstrained (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_duration: 0&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usage-examples-2&quot;&gt;Usage examples&lt;/h4&gt;
&lt;p&gt;Contrary to the previous two utilities, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend&lt;/code&gt; sensor is defined as a platform (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- platform: trend&lt;/code&gt;) under &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensor:&lt;/code&gt;&lt;/strong&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file.  For this reason, first, let’s include a reference to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensors.yaml&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Binary sensors&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;binary_sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary_sensors.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then using a text editor, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensors.yaml&lt;/code&gt; file where we will configure the following four &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend&lt;/code&gt; binary sensors to consume the data from the temperature, humidity, and pressure time-based template sensors, as well as the Sun elevation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend weather temperature six hours&lt;/code&gt;: Gradient of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_weather_temperature_time_based&lt;/code&gt; template sensor over the &lt;em&gt;last six hours&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend weather humidity six hours&lt;/code&gt;: Gradient of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_weather_humidity_time_based&lt;/code&gt; template sensor over the &lt;em&gt;last six hours&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend weather pressure twelve hours&lt;/code&gt;: Gradient of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_weather_pressure_time_based&lt;/code&gt; template sensor over the &lt;em&gt;last twelve hours&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend sun elevation twenty minutes&lt;/code&gt;: Gradient of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_sun_elevation_time_based&lt;/code&gt; template sensor over the &lt;em&gt;last twenty minutes&lt;/em&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trend&lt;/code&gt; entities, append the following to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary_sensors.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Trend&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sensors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;trend_weather_temperature_six_hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_time_based&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# resolution is 1/h&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;max_samples&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 6 hours in seconds&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sample_duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21600&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;trend_weather_humidity_six_hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_humidity_time_based&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# resolution is 1/h&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;max_samples&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 6 hours in seconds&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sample_duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21600&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;trend_weather_pressure_twelve_hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_pressure_time_based&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# resolution is 1/h&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;max_samples&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 12 hours in seconds&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sample_duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43200&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;trend_sun_elevation_twenty_minutes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_sun_elevation_time_based&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# resolution is 1 every 5 minutes&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;max_samples&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 20 minutes in seconds&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sample_duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Check your configuration file&lt;/strong&gt; and if everything looks good, &lt;strong&gt;restart HASS&lt;/strong&gt;. Afterwards, check your log file for related errors and if it all looks good, then head to &lt;strong&gt;Developer Tools&lt;/strong&gt; &amp;gt; States and you should now see the new trend entities we just created:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-01.jpg&quot; alt=&quot;HASS utility trend 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-02.jpg&quot; alt=&quot;HASS utility trend 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two noteworthy observations need to be made at this point.  First, notice that this integration does not analyze the data from previously stored entity data but actually stores its own data.  Therefore, it’s necessary to keep it running to collect data from all monitored entities before drawing any meaningful conclusions from it.  Second, the slope of the linear function that was fit over the data points (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradient&lt;/code&gt;) is reported as an &lt;strong&gt;attribute&lt;/strong&gt; and because it uses &lt;em&gt;seconds&lt;/em&gt; as time unit, the coefficient refers to the ratio of change &lt;em&gt;per second&lt;/em&gt;.  Therefore, to make it easier working with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradient&lt;/code&gt;, I usually create a slave entity to output the gradient as its state instead. This is accomplished with &lt;strong&gt;template sensors&lt;/strong&gt;.  More specifically, let’s append the following &lt;em&gt;Trend helper entities&lt;/em&gt; under our default (state-based) &lt;strong&gt;Sensor Templates&lt;/strong&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# Trend helper entities&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trend&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;twenty&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;minutes&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;°/h&quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# if statement makes sure the gradient is valid&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# change the scale from sec to hour&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('binary_sensor.trend_sun_elevation_twenty_minutes', 'gradient') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ (state_attr('binary_sensor.trend_sun_elevation_twenty_minutes', 'gradient') * 3600) | round(1) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trend&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;six&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hours&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C/h&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('binary_sensor.trend_weather_temperature_six_hours', 'gradient') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ (state_attr('binary_sensor.trend_weather_temperature_six_hours', 'gradient') * 3600) | round(2) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trend&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;humidity&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;six&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hours&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%/h&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('binary_sensor.trend_weather_humidity_six_hours', 'gradient') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ (state_attr('binary_sensor.trend_weather_humidity_six_hours', 'gradient') * 3600) | round(2) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;trend&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pressure&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;twelve&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hours&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hPa/h&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('binary_sensor.trend_weather_pressure_twelve_hours', 'gradient') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ (state_attr('binary_sensor.trend_weather_pressure_twelve_hours', 'gradient') * 3600) | round(0) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement is used to validate (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is number&lt;/code&gt;) the appropriate variables in the unit conversion and rounding operations.  Otherwise, the template sensor might attempt to perform a mathematical operation on something other than a number, such as when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradient&lt;/code&gt; attribute is not yet defined, which would result in an error.&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;reload your configuration&lt;/strong&gt; and afterwards, HASS will create new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.template_trend_*&lt;/code&gt; entities that should contain the converted gradient as their state.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-utility-trend-03.jpg&quot; alt=&quot;HASS utility trend 03&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;additional-references-2&quot;&gt;Additional references&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Trend &lt;strong&gt;documentation&lt;/strong&gt;: &lt;a href=&quot;https://www.home-assistant.io/integrations/trend/&quot;&gt;https://www.home-assistant.io/integrations/trend/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Trend &lt;strong&gt;source code&lt;/strong&gt;: &lt;a href=&quot;https://github.com/home-assistant/core/blob/dev/homeassistant/components/trend/&quot;&gt;https://github.com/home-assistant/core/blob/dev/homeassistant/components/trend/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Trend noteworthy &lt;strong&gt;dependencies&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt; pkg: &lt;a href=&quot;https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html&quot;&gt;https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#utilities&quot; class=&quot;btn btn--info btn--small&quot;&gt;Utilities&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;visualizing-analytical-data&quot;&gt;Visualizing analytical data&lt;/h2&gt;
&lt;p&gt;There are many different ways of using and visualizing the analytical data reported with the utilities described in this guide.  Using the default configuration, for example, one might be inclined to display the mean or gradient using a &lt;a href=&quot;https://www.home-assistant.io/lovelace/history-graph/&quot;&gt;History Graph Card&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Of note, if one or more of your sensors make use of the &lt;a href=&quot;#long-term-statistics&quot;&gt;long-term statistics&lt;/a&gt; feature, then the new &lt;a href=&quot;https://www.home-assistant.io/lovelace/statistics-graph/&quot;&gt;Statistics Graph Card&lt;/a&gt; is the only way of visualizing their long-term summary data. The remaining part of this section describes visualization resources for sensor data stored on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;states&lt;/code&gt; table of the HASS DB, instead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statistics&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;In this section, however, we will learn about two dashboard resources that I think are better alternatives to the History Graph Card, namely the &lt;a href=&quot;https://github.com/kalkih/mini-graph-card&quot;&gt;Mini Graph Card&lt;/a&gt; and the &lt;a href=&quot;https://github.com/gadgetchnnel/lovelace-card-templater&quot;&gt;Lovelace Card Templater&lt;/a&gt;. More specifically, we will use the Mini Graph Card within the Lovelace Card Templater to build the following Dashboard card previewed in the &lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-01.gif&quot; alt=&quot;HASS graph dynamic temperature 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s how it has changed a few hours later:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-02.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-02.gif&quot; alt=&quot;HASS graph dynamic temperature 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This card displays &lt;strong&gt;six temperature&lt;/strong&gt; (Met.no) &lt;strong&gt;metrics&lt;/strong&gt; over a 24h time-range:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The main (colored) line shows the &lt;strong&gt;current temperature&lt;/strong&gt;, in which the colors are selected by the following ever changing (dynamic) thresholds:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;very high&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;high&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;low&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;very low&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;max&lt;/em&gt; to (&lt;em&gt;mean&lt;/em&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;em&gt;stdev&lt;/em&gt;)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;(&lt;em&gt;mean&lt;/em&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;em&gt;stdev&lt;/em&gt;) to &lt;em&gt;mean&lt;/em&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;mean&lt;/em&gt; to (&lt;em&gt;mean&lt;/em&gt; &lt;strong&gt;-&lt;/strong&gt; &lt;em&gt;stdev&lt;/em&gt;)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;(&lt;em&gt;mean&lt;/em&gt; &lt;strong&gt;-&lt;/strong&gt; &lt;em&gt;stdev&lt;/em&gt;) to &lt;em&gt;min&lt;/em&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;And the corresponding colors were selected from the following &lt;a href=&quot;https://coolors.co&quot;&gt;palette&lt;/a&gt; (hex color code shown above the color label):&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/color-palette.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/color-palette.jpg&quot; alt=&quot;Color palette&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The highest valued shaded area in the background corresponds to the &lt;strong&gt;max temperature&lt;/strong&gt; over the last 24hrs;&lt;/li&gt;
  &lt;li&gt;The second highest shaded area corresponds to &lt;strong&gt;plus one standard deviation&lt;/strong&gt; from the mean temperature over the last 24hrs;&lt;/li&gt;
  &lt;li&gt;The middle shaded area corresponds to the &lt;strong&gt;mean temperature&lt;/strong&gt; over the last 24hrs;&lt;/li&gt;
  &lt;li&gt;The second lowest value shaded area corresponds to &lt;strong&gt;minus one standard deviation&lt;/strong&gt; from the mean temperature over the last 24hrs;&lt;/li&gt;
  &lt;li&gt;And finally, the lowest shaded area corresponds to the &lt;strong&gt;min temperature&lt;/strong&gt; over the last 24hrs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The graph therefore provides a visually appealing way of assessing the current temperature relative to its 24hrs distribution, which is much more convenient than inspecting a table of values over time. Next, I will describe how to create the graph step-by-step.&lt;/p&gt;

&lt;h3 id=&quot;how-to-temperature-with-dynamic-color-thresholds&quot;&gt;How-to: Temperature with dynamic color thresholds&lt;/h3&gt;
&lt;p&gt;First, make sure you have an entity for each of the six metrics described before.  All such metrics can be obtained from the &lt;strong&gt;&lt;a href=&quot;#statistics-01&quot;&gt;Statistics&lt;/a&gt; integration&lt;/strong&gt;, which will consume the data from a temperature sensor (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt; via Met.no) and by using custom &lt;strong&gt;template sensors&lt;/strong&gt;.  More specifically, make sure your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.yaml&lt;/code&gt; file has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!include&lt;/code&gt; for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensors&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensors.yaml&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Templates&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;templates.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then using a text editor, add the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_pattern&lt;/code&gt; triggered entity that extracts and stores the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;temperature&lt;/code&gt; attribute from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weather.home&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Time pattern trigger&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;time_pattern&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Update every 1 hour&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/1&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Hourly sensor templates&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('weather.home', 'temperature') is number %}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ state_attr('weather.home', 'temperature') }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Force an update with a timestamp change to ensure proper representation of state values over time&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ as_timestamp(now()) }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensors.yaml&lt;/code&gt; file, append the following to create a Statistics sensor for the temperature over the last 24hrs:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Statistics&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;statistics&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entity_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# measurement resolution is 1/hour&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sampling_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now go back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates.yaml&lt;/code&gt; and add a few helper entities to extract the attributes from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.weather_temperature_one_day&lt;/code&gt; Statistics sensor, as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sensor Templates&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Statistics helper entities&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stdev&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('sensor.weather_temperature_one_day', 'mean') is number and state_attr('sensor.weather_temperature_one_day', 'standard_deviation') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ (state_attr('sensor.weather_temperature_one_day', 'mean') + state_attr('sensor.weather_temperature_one_day', 'standard_deviation')) | round(1) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stdev&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('sensor.weather_temperature_one_day', 'mean') is number and state_attr('sensor.weather_temperature_one_day', 'standard_deviation') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ (state_attr('sensor.weather_temperature_one_day', 'mean') - state_attr('sensor.weather_temperature_one_day', 'standard_deviation')) | round(1) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;max&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('sensor.weather_temperature_one_day', 'max_value') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ state_attr('sensor.weather_temperature_one_day', 'max_value') | round(1) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;min&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit_of_measurement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% if state_attr('sensor.weather_temperature_one_day', 'min_value') is number %}&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;{{ state_attr('sensor.weather_temperature_one_day', 'min_value') | round(1) }}&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{% endif %}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice&quot;&gt;As before, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements ensure the variables are valid (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is number&lt;/code&gt;) before performing mathematical operations with them.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;check your configuration&lt;/strong&gt; and &lt;strong&gt;restart your HASS&lt;/strong&gt;.  Now &lt;strong&gt;wait at least one day&lt;/strong&gt; because your new entities need to collect data before showing anything meaningful.  But in the meantime, go ahead and install the two JavaScripts to your dashboard:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kalkih/mini-graph-card#install&quot;&gt;Install Mini Card Graph&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gadgetchnnel/lovelace-card-templater#installation&quot;&gt;Install Lovelace Card Templater&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I prefer to install such resources manually, instead of using the Community Store.  To do so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Download&lt;/strong&gt; their respective &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; scripts to your HASS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/www/&lt;/code&gt; directory;&lt;/li&gt;
  &lt;li&gt;Navigate to Configuration &amp;gt; Lovelace Dashboards &amp;gt; &lt;strong&gt;Resources&lt;/strong&gt; and select &lt;strong&gt;add resource&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;Add new resource&lt;/strong&gt; window, set the URL to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/local/MODULE_NAME.js&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MODULE_NAME&lt;/code&gt; will be the name of the JavaScript module (e.g., for the Mini Graph Card, that would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/local/mini-graph-card-bundle.js&lt;/code&gt;). HASS should automatically detect that the Resource Type is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript Module&lt;/code&gt; but if doesn’t, then select it;&lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;update&lt;/strong&gt; and repeat the operation to add as many resources as necessary;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restart your HASS&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If an entire day has already passed, then you should be able to configure a proper graph card using the JavaScript modules you added to the HASS dashboard, as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to Overview &amp;gt; Edit Dashboard and select &lt;strong&gt;add card&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Choose a &lt;strong&gt;Manual card&lt;/strong&gt; and in the card configuration, paste the following:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;custom:card-templater&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;custom:mini-graph-card&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Temperature - Met.no&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hours_to_show&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;align_state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;right&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;align_icon&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;left&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;align_header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;left&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;font_size_header&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;font_size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;decimals&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;line_width&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_fill&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state_adaptive_color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;°C&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_max&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_points&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;white&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_mean_plus_stdev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_points&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;white&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.weather_temperature_one_day&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_points&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;white&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_mean_minus_stdev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_points&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;white&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_min&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show_points&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;white&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;color_thresholds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value_template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;states(&quot;sensor.template_weather_temperature_one_day_min&quot;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#0799BA'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value_template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;states(&quot;sensor.template_weather_temperature_one_day_mean_minus_stdev&quot;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#30BFBF'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value_template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;states(&quot;sensor.weather_temperature_one_day&quot;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#ECD711'&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value_template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;states(&quot;sensor.template_weather_temperature_one_day_mean_plus_stdev&quot;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#F17D28'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name_adaptive_color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;icon_adaptive_color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.weather_temperature_one_day&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_mean_plus_stdev&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_mean_minus_stdev&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_max&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sensor.template_weather_temperature_one_day_min&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is it!  You should now be able to see a graph similar to the following one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/hass-graph-dynamic-temperature-03.jpg&quot; alt=&quot;HASS graph dynamic temperature 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the values are not showing up correctly, check Developer Tools &amp;gt; States to make sure the entities are there and the states are displaying the correct values.  If you want to reset the entity data, go to Developer Tools &amp;gt; Services, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recorder.purge_entities&lt;/code&gt;, select the entities you want to reset in Targets (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor.weather_temperature_one_day&lt;/code&gt;), and press &lt;strong&gt;call service&lt;/strong&gt; to purge their data.&lt;/p&gt;

&lt;p&gt;Of course, many other options are available using the &lt;strong&gt;Mini Graph Card&lt;/strong&gt; and the &lt;strong&gt;Lovelace Card Templater&lt;/strong&gt; in combination with the other card options (e.g., &lt;a href=&quot;https://www.home-assistant.io/lovelace/entities/&quot;&gt;Entities Card&lt;/a&gt;, &lt;a href=&quot;https://www.home-assistant.io/lovelace/gauge/&quot;&gt;Gauge Card&lt;/a&gt;).  Feel free to explore them (and let me know about it, too).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;development&quot;&gt;Development&lt;/h1&gt;
&lt;p&gt;In this guide, we’ve seen how the current set of analytical tools can greatly improve the way we &lt;strong&gt;describe&lt;/strong&gt; past and current states.  (&lt;em&gt;The following was changed on August 14th, 2021, in connection with the addition of quantiles to the Statistics integration.&lt;/em&gt;)  However, the lack of a flexible and standardized specification of the &lt;em&gt;time variables&lt;/em&gt; make the current analytical tools very narrow in scope.  Compare, for example, how the &lt;a href=&quot;#history-stats&quot;&gt;History Stats&lt;/a&gt; and the &lt;a href=&quot;#statistics-1&quot;&gt;Statistics&lt;/a&gt; integration deal with the specification of a time period.&lt;/p&gt;

&lt;p&gt;In addition, statistics is not just about summarizing the past; it is also a tool for making &lt;strong&gt;data-driven inferences&lt;/strong&gt; about the future.  This is a topic that I find largely unexplored in home automation systems and would allow for the creation of what I call &lt;strong&gt;inferential automations&lt;/strong&gt;.  Inferential automations determine actions based on abnormal states and measurements, for example, or reliable tendencies over a user-specified period of time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if the water level is &lt;em&gt;significantly lower than yesterday&lt;/em&gt;, then __ .&lt;/li&gt;
  &lt;li&gt;if the number of detected cars on my camera is &lt;em&gt;significantly higher than thirty minutes ago&lt;/em&gt;, then __ .&lt;/li&gt;
  &lt;li&gt;if the temperature started &lt;em&gt;decreasing significantly over the last five minutes&lt;/em&gt;, then __ .&lt;/li&gt;
  &lt;li&gt;if the VOC started &lt;em&gt;increasing significantly over the last fifteen minutes&lt;/em&gt;, then __ .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-06-04-smarter-hass/voc-plot-linear-fit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-06-04-smarter-hass/voc-plot-linear-fit.jpg&quot; alt=&quot;VOC plot linear fit&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly, none of the integrations currently enables the use of inferential automations.  The closest we have to such a thing is via the use of the &lt;a href=&quot;#trend&quot;&gt;Trend&lt;/a&gt; integration but even then, we lack the output of fit metrics for proper inference, such as the residuals of the least-square fit.&lt;/p&gt;

&lt;p&gt;Of course, there’s a lot that can be done via templating but moving forward, there’s a need for advanced analytical integrations if we want to create inferential automations.  As I pointed out before, HASS integrations are written in the Python programming language, which means we can take advantage of the various analytical packages that are already available in Python, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;Pandas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://numpy.org/&quot;&gt;NumPy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For anyone who might want to help out, the folks at the HASS wiki were very kind to write a super detailed guide about developing new integrations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.home-assistant.io/docs/development_index/&quot;&gt;Development Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/contact&quot;&gt;Reach out&lt;/a&gt; if you are thinking about development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This marks the end of this guide.  My intention was to highlight a few of the currently available &lt;a href=&quot;https://www.home-assistant.io/integrations/#utility&quot;&gt;Utility integrations&lt;/a&gt; because they are rarely used but are fairly easy to implement and incredibly useful.  There are a few gotchas to how data are sampled and stored in HASS, as well as how a few of the reviewed integrations work, which I hope were made verbatim in this guide and will help you decide what is best for your own use-case.&lt;/p&gt;

&lt;p&gt;Moving forward, there is a clear trajectory for implementing what I called &lt;strong&gt;inferential automations&lt;/strong&gt;.  This begins with improving existing &lt;a href=&quot;https://www.home-assistant.io/integrations/#utility&quot;&gt;Utility integrations&lt;/a&gt; and ends with porting advanced analytical Python packages to the HASS environment.  The culmination of this path is the largely unexplored concept of automating the future using data-driven inferences in home automation systems.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="hass" /><category term="iot" /><category term="automation" /><category term="math" /><category term="stats" /><category term="inference" /></entry><entry><title type="html">How to make a chimarrão Gaúcho</title><link href="/blog/chimarrao-gaucho/" rel="alternate" type="text/html" title="How to make a chimarrão Gaúcho" /><published>2021-03-09T12:30:00-03:00</published><updated>2021-03-09T12:30:00-03:00</updated><id>/blog/chimarrao-gaucho</id><content type="html" xml:base="/blog/chimarrao-gaucho/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;September 3rd, 2021&lt;/strong&gt;: Added information about buying linen/reusable teabags as a filter solution to the &lt;a href=&quot;#items&quot;&gt;Items&lt;/a&gt; section.  Also included a note about cleaning the &lt;em&gt;bomba&lt;/em&gt; every so often.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Mar 9th, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this guide, I will provide all the essential information on how to make the same &lt;strong&gt;&lt;em&gt;chimarrão Gaúcho&lt;/em&gt;&lt;/strong&gt;–pronounced &lt;a href=&quot;https://en.wikipedia.org/wiki/Help:IPA/Portuguese&quot;&gt;ʃimɐˈʁɐ̃w̃ ɡaˈuʃu&lt;/a&gt; in Portuguese or roughly, &lt;em&gt;shemaHaoom gaOOshoo&lt;/em&gt;–that I drink almost on a daily basis.  I feel my previous posts have focused too much on tech-related content, so this should provide a nice change of pace.  If you enjoy hot tea and would like to learn and try a different one, then read on.  The required ingredients and utensils can be found worldwide (or easily imported) and the preparation takes less than 5 min.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao.jpg&quot; alt=&quot;Chimarrão&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not a historian and do not claim to have a deep understanding of the &lt;em&gt;Gaúcho&lt;/em&gt; culture and history.  To be very honest, I do not share the opinion that such knowledge is required to appreciate a &lt;em&gt;chimarrão&lt;/em&gt; at all.  In fact, some of the drinking customs/etiquette are arguably unhygienic (e.g., sharing the same drink with multiple individuals) or petty (e.g., the way one holds the container or positions the straw inside the container) and you definitely do not need to abide to any such customs if all that you want is to enjoy the drink.  Therefore, I won’t delve too much into history, culture, and etiquette but will provide external sources in the appropriate sections.&lt;/p&gt;

&lt;p&gt;However, if you want to have a taste of the culture and get in the mood for a &lt;em&gt;mate&lt;/em&gt;, here is a song by the Brazilian &lt;em&gt;payador&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Jaime_Caetano_Braun&quot;&gt;Jayme Guilherme Caetano Braun&lt;/a&gt;, called &lt;strong&gt;&lt;em&gt;Mateando&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/ewfIVyRJDFk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;(If you liked it, you might want to listen to the album &lt;a href=&quot;https://www.youtube.com/watch?v=52X4H6KZ5Qc&quot;&gt;&lt;em&gt;Payador&lt;/em&gt;&lt;/a&gt; while you read the remaining part of this guide.) As usual, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt; if you have suggestions on how to improve this guide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This guide was organized as follows.  First, I presented the definition of &lt;em&gt;chimarrão&lt;/em&gt; and more specifially, the &lt;em&gt;Gaúcho&lt;/em&gt; style of preparing a &lt;em&gt;chimarrão&lt;/em&gt;.  Next, I covered the ingredients and utensils that are necessary to prepare the traditional &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;, as well as alternatives more commonly found worldwide.  Then, at the end, there is a step-by-step procedure describing how I make my chimarrão that anyone can follow along.  If you are already familiar with &lt;em&gt;chimarrão&lt;/em&gt; and just want to check the method I use to prepare mine, then skip to the last part of this guide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;definition&quot;&gt;Definition&lt;/h1&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mate_(drink)&quot;&gt;Wikipedia entry for &lt;em&gt;Mate&lt;/em&gt;&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mate or maté, also known as chimarrão or cimarrón, is a traditional South American caffeine-rich infused drink. It is made by soaking dried leaves of the holly species &lt;a href=&quot;https://en.wikipedia.org/wiki/Yerba_mate&quot;&gt;Ilex paraguariensis&lt;/a&gt; in hot water and is served with a metal straw in a container typically made from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Calabash_gourd&quot;&gt;calabash gourd&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this guide, the Brazilian Portuguese term &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; refers to the infused drink commonly prepared in the Southern states of Brazil, typically in the state of &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rio_Grande_do_Sul&quot;&gt;Rio Grande do Sul&lt;/a&gt;&lt;/em&gt;.  Its main ingredient is the &lt;strong&gt;yerba mate&lt;/strong&gt;, which is the &lt;em&gt;dried, toasted, and shredded&lt;/em&gt; leaf of the &lt;em&gt;Ilex paraguariensis&lt;/em&gt;.  As opposed to the yerba mate often used in &lt;a href=&quot;https://en.wikipedia.org/wiki/Argentina&quot;&gt;Argentina&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Uruguay&quot;&gt;Uruguay&lt;/a&gt;, and other regions in South America, the yerba mate used to make a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is packed just a few days after processing to prevent oxidation, which gives it a characteristic &lt;strong&gt;bright green color&lt;/strong&gt; from the higher concentration of &lt;a href=&quot;https://en.wikipedia.org/wiki/Chlorophyll&quot;&gt;chlorophyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-mate-types.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-mate-types.jpg&quot; alt=&quot;Chimarrão&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flavor-wise, the yerba mate used to make the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is &lt;strong&gt;less bitter&lt;/strong&gt; and &lt;strong&gt;less toasted&lt;/strong&gt; than its aged counterparts.  This makes it well-suited for people who have never tried yerba mate before, for example, or for anyone who finds the other yerba mates too strong.  This is the main ingredient of the &lt;em&gt;chimarrão&lt;/em&gt; and as such, it cannot be replaced; otherwise, you would be making a different infused drink.&lt;/p&gt;

&lt;p&gt;The yerba mate is a well-known source of &lt;strong&gt;caffeine&lt;/strong&gt; and vitamins B and C, and has slightly higher concentration of antioxidants than &lt;a href=&quot;https://en.wikipedia.org/wiki/Green_tea&quot;&gt;green tea&lt;/a&gt;.  As far as I am aware, it is not prohibited by any food and drugs agency and therefore, it can be found and commercialized worldwide.  That said, if you drink it outdoors in a country where it is not popular, you are bound to draw a little bit of attention but in my case, it’s been more of a conversation piece than a trouble maker.  Psychologically, the effects are very much similar to drinking coffee or black tea, and as such, the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is best when consumed early in the morning and during cold days.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;This drink &lt;strong&gt;will not&lt;/strong&gt; get you high.  At most, some people report upset stomach and acid reflux.  Of course, stop consuming &lt;em&gt;chimarrão&lt;/em&gt; if you experience such symptoms and it might be a good idea to see a physician because those symptoms might be related to an undiagnosed and treatable medical condition.  The risks associated with the consumption this drink are the same as any common tea.&lt;/p&gt;

&lt;p&gt;Another noteworthy difference between the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; and other yerba mate drinks is the container used, called &lt;strong&gt;&lt;em&gt;cuia&lt;/em&gt;&lt;/strong&gt; in Portuguese.  More specifically, the &lt;em&gt;cuia&lt;/em&gt; used in a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; is made of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Calabash&quot;&gt;calabash&lt;/a&gt; (&lt;em&gt;Lagenaria siceraria&lt;/em&gt;) gourd that has thicker walls than the more traditional mate gourds and a larger neck as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd.jpg&quot; alt=&quot;Calabash gourd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd-dry.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/calabash-gourd-dry.jpg&quot; alt=&quot;Dry calabash gourd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-cuia.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-cuia.jpg&quot; alt=&quot;Cuia de chimarrão&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, there is the metal/wooden straw used to drink, called &lt;strong&gt;&lt;em&gt;bomba&lt;/em&gt;&lt;/strong&gt; in Portuguese.  The &lt;em&gt;bomba&lt;/em&gt; is not a utensil exclusively used in the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt; and therefore, it is more easily found worldwide than the &lt;em&gt;cuia&lt;/em&gt; and the yerba mate for &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;, for example.  It comes in various sizes, shapes, and with none or multiple decorations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-bomba.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-bomba.jpg&quot; alt=&quot;Cuia de chimarrão&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;history-myths-and-folklore&quot;&gt;History, Myths, and Folklore&lt;/h1&gt;
&lt;p&gt;There are many stories about the &lt;strong&gt;origins of the mate&lt;/strong&gt; that predate the &lt;em&gt;Gaúcho&lt;/em&gt; culture and the Portuguese and Spanish colonization.  The &lt;a href=&quot;https://en.wikipedia.org/wiki/Tupi_people&quot;&gt;&lt;em&gt;Tupi&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Guaran%C3%AD_people&quot;&gt;&lt;em&gt;Guarani&lt;/em&gt;&lt;/a&gt; tribes (indigenous peoples of South America), for example, tell several tales about how the moon, the sun, and tribe warriors where involved in gifting the &lt;em&gt;mate&lt;/em&gt; to humanity.  If you want to learn more about the history and myths, take a look at the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Native Leaf’s article on the &lt;a href=&quot;https://www.nativeleaf.co.uk/the-history-of-yerba-mate/&quot;&gt;&lt;strong&gt;History of Yerba Mate&lt;/strong&gt;&lt;/a&gt;: A short article about the early and modern history of the yerba mate, including its use in the Middle East, which I was not aware of.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;earthstOriez’s article about &lt;a href=&quot;https://www.earthstoriez.com/legend-mate/&quot;&gt;&lt;strong&gt;the origins of mate&lt;/strong&gt;&lt;/a&gt;: Contains multiple tales from indigenous peoples about the origins of the yerba mate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ClicRBS’ article on &lt;a href=&quot;/assets/pdf/clicrbs-lenda-da-erva-mate.pdf&quot;&gt;&lt;strong&gt;the legend of the yerba mate&lt;/strong&gt;&lt;/a&gt;: This article focuses on the &lt;em&gt;Guarani&lt;/em&gt; tales about the origins of the mate and how it became part of the &lt;em&gt;Gaúcho&lt;/em&gt; culture.  Unfortunately, it is in Portuguese.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ingredients-and-utensils&quot;&gt;Ingredients and Utensils&lt;/h1&gt;

&lt;h2 id=&quot;where-to-buy&quot;&gt;Where to buy&lt;/h2&gt;
&lt;p&gt;If you happen to be in Southern Brazil, then you will likely find everything you need in any large retail grocery store chain (e.g., Zaffari, Carrefour, Walmart, Bourbon) or specialized stores in any major cities.  However, I figure that most of you are nowhere near this part of the world.  Fortunately, big online &lt;strong&gt;marketplaces&lt;/strong&gt; are available worldwide and come handy in these cases but you will need to be willing to pay a little more for the convenience of buying imported goods online.  So, let me tell you about a few alternatives I have used in the past:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/&quot;&gt;Amazon&lt;/a&gt;: The largest marketplace out there.  In the US, you can find everything you will need to make a &lt;em&gt;chimarrão&lt;/em&gt; right here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mercadolibre.com/&quot;&gt;Mercado Libre&lt;/a&gt;: One of the largest marketplace in South and Cental America.  Chances are you can find everything here as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.walmart.com&quot;&gt;Walmart&lt;/a&gt;: A possible alternative to Amazon for people in Europe.  You can find everything at Walmart as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aliexpress.com&quot;&gt;AliExpress&lt;/a&gt;: An alternative to Amazon for people in Asia and Oceania.  However, you will only find utensils at AliExpress.  Check your local marketplaces for yerba mate.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there are many other options out there.  Dig around &lt;strong&gt;the marketplaces available in your country&lt;/strong&gt; before trying the global-scale ones because the former probably has better prices than the latter.&lt;/p&gt;

&lt;p&gt;Lastly, if your city has a large public market or stores that specialized in selling organic products, teas, herbs, etc., &lt;strong&gt;do not be afraid to ask them&lt;/strong&gt; about yerba mate and related utensils.  Even if they do not have any of them, most will go above and beyond to find out where to buy in your city.&lt;/p&gt;

&lt;p&gt;In the next section, I will talk about all the traditional items and a few alternatives for those not willing to buy the real deal just yet.&lt;/p&gt;

&lt;h2 id=&quot;items&quot;&gt;Items&lt;/h2&gt;
&lt;p&gt;To make a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;, you will need the following ingredients and utensils:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Yerba mate for &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;&lt;/strong&gt;: As mentioned before, this is the &lt;strong&gt;main ingredient&lt;/strong&gt; and it is not replaceable.  The quality of your &lt;em&gt;chimarrão&lt;/em&gt; is highly dependent on the quality of the &lt;em&gt;mate&lt;/em&gt; used to prepare it.  Some people like to mix it with herbs and teas to create a more complex flavor (see below) but that is definitely optional.  (I drink mine plain but it is fairly common to add chamomile and lemon grass, for example.)&lt;/p&gt;

    &lt;p&gt;When buying online, make sure there is a photo of the product showing that the yerba mate has a &lt;strong&gt;bright green&lt;/strong&gt; color and that the yerba &lt;strong&gt;does not contain sugar&lt;/strong&gt; (&lt;em&gt;sem açúcar&lt;/em&gt; in Portuguese).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-yerba-mate.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-yerba-mate.jpg&quot; alt=&quot;Yerba Mate for Chimarrao&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Use the following keywords to help selecting the right type of yerba mate: “&lt;strong&gt;yerba mate for chimarrao&lt;/strong&gt;”, “&lt;strong&gt;brazilian yerba mate&lt;/strong&gt;”, or language-specific variations of those.&lt;/p&gt;

    &lt;p&gt;These items have a &lt;strong&gt;long shelf life&lt;/strong&gt;, so if you start enjoying the drink, buy lots of yerba mate (between 3kg and 6kg, or roughly 105-215 ounces) and store them at home.  &lt;strong&gt;Vacuum sealed&lt;/strong&gt; packages (&lt;em&gt;embalada a vácuo&lt;/em&gt; in Portuguese) are the best ones for long-term storage.&lt;/p&gt;

    &lt;p&gt;The following are three of my favorite brands that I have seen being sold abroad:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.ximango.com.br/&quot;&gt;&lt;strong&gt;Ximango&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-ximango.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-ximango.jpg&quot; alt=&quot;Yerba Ximango&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://www.madrugada.com.br/&quot;&gt;&lt;strong&gt;Madrugada&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-madrugada.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-madrugada.jpg&quot; alt=&quot;Yerba Madrugada&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.baraoervamate.com.br/en/&quot;&gt;&lt;strong&gt;Barão de Cotegipe&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-barao.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/yerba-barao.jpg&quot; alt=&quot;Yerba Barao&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;I suggest you to buy a brand name because in Brazil, those companies must comply with health regulations in order to distribute their product.  There are other details about the selection of yerba mates for &lt;em&gt;chimarrão&lt;/em&gt; but they are non-essential for most people.  They include leaf-to-stem ratios, maturation, and various processing techniques, for example.  (If planning on consuming for long periods, it might be worth looking into the processing methods and making sure it &lt;strong&gt;does not&lt;/strong&gt; involve smoke from burning wood, as the latter can produce carcinogenic compounds.)&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;It goes without saying that yerba mate sold in &lt;em&gt;tea bags&lt;/em&gt; are &lt;strong&gt;no good&lt;/strong&gt; here.  The taste of &lt;em&gt;chimarrão&lt;/em&gt; is actually &lt;strong&gt;very&lt;/strong&gt; different from the tea.  In fact, I drink &lt;em&gt;chimarrão&lt;/em&gt; every day but I do not like the yerba mate tea at all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;strong&gt;&lt;em&gt;Cuia&lt;/em&gt;&lt;/strong&gt;: The traditional &lt;em&gt;cuia&lt;/em&gt; made of a galash gourd (&lt;em&gt;porongo&lt;/em&gt; in Portuguese) can be bought online or via specialized stores.  A single one can be used and re-used multiple times, even for years if well maintained.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-traditional.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-traditional.jpg&quot; alt=&quot;Traditional Cuia&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;After acquiring a &lt;strong&gt;brand-new&lt;/strong&gt; &lt;em&gt;cuia&lt;/em&gt;, it is &lt;strong&gt;required to curate&lt;/strong&gt; it before use. The &lt;a href=&quot;https://yerbamatero.com/&quot;&gt;Yerb Matero&lt;/a&gt; has a fairly good guide on &lt;a href=&quot;https://yerbamatero.com/blogs/guides/taking-care-of-your-yerba-mate-kit&quot;&gt;curating, cleaning, and mainting the &lt;em&gt;cuia&lt;/em&gt;&lt;/a&gt;; or check this &lt;a href=&quot;https://www.youtube.com/watch?v=8l7li3PVYL4&quot;&gt;Youtube video that illustrates the entire process&lt;/a&gt;.  In brief, go over the following steps to curate a brand-new &lt;em&gt;cuia&lt;/em&gt; made of a galash gourd:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Wash the inside of the &lt;em&gt;cuia&lt;/em&gt; with &lt;strong&gt;boiling&lt;/strong&gt; water (be careful!). Remove all the water before moving on;&lt;/li&gt;
      &lt;li&gt;Fill 1/3 of the &lt;em&gt;cuia&lt;/em&gt; with yerba mate, fill the remaining with &lt;strong&gt;warm&lt;/strong&gt; water, and using a spoon, gently mix it. Then, &lt;strong&gt;let it sit for 24h&lt;/strong&gt; with the mate inside.  If you notice that the water level has dropped (the galash gourd should absorb a little bit), add more warm water to try to keep the &lt;em&gt;cuia&lt;/em&gt; always full;&lt;/li&gt;
      &lt;li&gt;After 24h, remove the contents of the &lt;em&gt;cuia&lt;/em&gt; with the help of a spoon and &lt;strong&gt;repeat steps #1 and #2&lt;/strong&gt; at least once;&lt;/li&gt;
      &lt;li&gt;Rinse it well (&lt;strong&gt;only use running water&lt;/strong&gt;; &lt;strong&gt;never&lt;/strong&gt; use cleaning products) and &lt;strong&gt;let it dry&lt;/strong&gt;.  If your &lt;em&gt;cuia&lt;/em&gt; does not have leather, let it dry in the sun;&lt;/li&gt;
      &lt;li&gt;(Optional.) For better results, repeat steps #1 and #2 and after rinsing, add a little bit of yerba mate to &lt;strong&gt;coat the internal surface of the &lt;em&gt;cuia&lt;/em&gt;&lt;/strong&gt; and let it dry this way for 12h.&lt;/li&gt;
      &lt;li&gt;When you are done, you should notice that inside the &lt;em&gt;cuia&lt;/em&gt;, there is now a slightly green color from the yerba mate and a few greener spots.  If you find &lt;strong&gt;any mold&lt;/strong&gt;, don’t worry.  Just curate it again and you are ready to go.  The more you use the &lt;em&gt;cuia&lt;/em&gt;, the more evenly curated it becomes.  After a few weeks of use, it should be much darker in the inside.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Contrary to the yerba mate for &lt;em&gt;chimarrão&lt;/em&gt;, the traditional &lt;em&gt;cuia&lt;/em&gt; is actually replaceable.  In fact, you can use pretty much any container that you would normally use with hot beverages.  The preparation method described in this guide should work even with flat, non-porous surfaces, like a standard coffee mug.  A coffee mug won’t look as good as the &lt;em&gt;cuia&lt;/em&gt; but it should work.  I have even managed to make a &lt;em&gt;chimarrão&lt;/em&gt; using a 5cm-long coffee mug:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-experimental.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-experimental.jpg&quot; alt=&quot;Experimental Cuia&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;More common variations include &lt;em&gt;cuias&lt;/em&gt; made of wood (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/Ocotea_porosa&quot;&gt;&lt;em&gt;Imbuia&lt;/em&gt;&lt;/a&gt;), ceramic, or glass.  Of course, you don’t need to curate any such types of &lt;em&gt;cuia&lt;/em&gt; (but make sure to rinse very well before using it for the first time).  They are more expensive, though.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-imbuia.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/cuia-imbuia.jpg&quot; alt=&quot;Cuia made of Wood&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;strong&gt;&lt;em&gt;Bomba&lt;/em&gt;&lt;/strong&gt;: The traditional &lt;em&gt;bomba&lt;/em&gt; is a metal (stainless steel) straw that has a filter at its bottom.  It is re-usable and if well-maintained, can last several years.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-tradicional.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-tradicional.jpg&quot; alt=&quot;Bomba Tradicional&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;As mentioned before, a traditional &lt;em&gt;bomba&lt;/em&gt; comes in many shapes and sizes.  The size of it depends on the size of the &lt;em&gt;cuia&lt;/em&gt;.  More specifically, the &lt;em&gt;bomba&lt;/em&gt; should be roughly &lt;strong&gt;twice the size&lt;/strong&gt; of the &lt;em&gt;cuia&lt;/em&gt;–or at the very least, taller than the &lt;em&gt;cuia&lt;/em&gt;.  The decorations are a personal choice.  You &lt;strong&gt;do not&lt;/strong&gt; need a &lt;em&gt;bomba&lt;/em&gt; with a spoon-like filter head to drink a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;.  Any &lt;em&gt;bomba&lt;/em&gt; that fits your &lt;em&gt;cuia&lt;/em&gt; will do just fine.  Personally, I am a fan of the ones that have a &lt;strong&gt;removable filter head&lt;/strong&gt; because they are easier to maintain than the non-removable ones.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-removable-filter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-removable-filter.jpg&quot; alt=&quot;Bomba Removable Filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The traditional &lt;em&gt;bomba&lt;/em&gt; is replaceable though. If you cannot find one in your country, you might want to try looking for &lt;strong&gt;wooden straws&lt;/strong&gt;, usually made of bamboo.  I have never used them before but if they do not have a filter, you &lt;strong&gt;have to add an external filter&lt;/strong&gt; to it (see below).  The latter type of straw is not always reusable though (depends on the type of wood), so I strongly recommend to stick to metal straws for long-term use.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-wooden.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-wooden.jpg&quot; alt=&quot;Wooden Bomba&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;Regardless of the &lt;em&gt;bomba&lt;/em&gt; used, make sure to clean inside of it every once in a while.  It can get pretty dirty in there and if your &lt;em&gt;bomba&lt;/em&gt; does not allow you to properly clean it, then that is a good reason to use a different one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=portable+insulated+beverage+dispenser&quot;&gt;&lt;strong&gt;Portable and insulated beverage dispenser&lt;/strong&gt;&lt;/a&gt;: Anything that can hold at least 1l (52oz) of hot water will do.  Make sure there is enough space to serve your &lt;em&gt;cuia&lt;/em&gt;–prefer the ones with a dispenser at the top, instead of bottom, for example.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/hot-water-dispenser.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/hot-water-dispenser.jpg&quot; alt=&quot;Insulated Beverage Dispenser&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1l-3l of &lt;strong&gt;hot water&lt;/strong&gt;: As in most traditional infused drinks, we will need hot water.  &lt;strong&gt;Do not&lt;/strong&gt; use boiling water–it will ruin the yerba mate and it is unhealthy for you.  The water needs to be hot, as in a black tea or hot coffee.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;01x &lt;strong&gt;Dinner spoon&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/spoon.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/spoon.jpg&quot; alt=&quot;Spoon&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional.) External filters for the &lt;em&gt;bomba&lt;/em&gt;: If you dislike when an occasional mate leaf passes the &lt;em&gt;bomba&lt;/em&gt; filter, or your &lt;em&gt;chimarrão&lt;/em&gt; clogs too often, you might want to try an external filter for your &lt;em&gt;bomba&lt;/em&gt;.  In the US, UK, and other English-speaking territories, they are usually referred to as &lt;strong&gt;linen/reusable teabags&lt;/strong&gt; and they can be found in &lt;a href=&quot;https://www.walmart.com/search/?query=reusable%20Tea%20Bags&amp;amp;cat_id=976759&quot;&gt;most market places out there&lt;/a&gt;.  If you cannot find them, buy a tea brand that makes use of them, then remove the tea from one of them and use the bag.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-filter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/bomba-filter.jpg&quot; alt=&quot;External Filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;These filters are reusable (usually between 2-3 weeks) and are tied around the filter head of your &lt;em&gt;bomba&lt;/em&gt;.  This is &lt;strong&gt;required if using straws without a built-in filter&lt;/strong&gt;, such as common wooden straws.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional.) Herbs/teas: If you ever get bored with the taste of plain &lt;em&gt;chimarrão&lt;/em&gt;, you might want to make its flavor a little bit more complex by adding tea to the water or mixing herbs with your yerba mate.  Here are a few herbs/teas that are often mixed with &lt;em&gt;chimarrão&lt;/em&gt;:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Organge (or any other citrus) peel&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/orange-peel.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/orange-peel.jpg&quot; alt=&quot;Orange peel&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chamomile&quot;&gt;Chamomile (&lt;em&gt;Matriacaria chamomilia&lt;/em&gt;, &lt;em&gt;Chamaemelum nobile&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chamomile.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chamomile.jpg&quot; alt=&quot;Chamomile&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cymbopogon_citratus&quot;&gt;Lemon grass (&lt;em&gt;Cymbopogon citratus&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/lemon-grass.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/lemon-grass.jpg&quot; alt=&quot;Lemon grass&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Anise&quot;&gt;Anise (&lt;em&gt;Pimpinella anisum&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/anise.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/anise.jpg&quot; alt=&quot;Anise bush&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Illicium_verum&quot;&gt;Star anise (&lt;em&gt;Illicium verum&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/star-anise.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/star-anise.jpg&quot; alt=&quot;Dried star anise&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p class=&quot;notice notice--danger&quot;&gt;Many herbs can cause &lt;strong&gt;allergic reactions&lt;/strong&gt; or have &lt;strong&gt;adverse interactions&lt;/strong&gt; with other herbal products and prescription drugs.  Before trying anything unusual, make sure to check it is safe for you to use.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;making-the-chimarrão-gaúcho&quot;&gt;Making the &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Once you have acquired all the ingredients and utensils, it is time to make your first &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;.  There are many different ways of making a &lt;em&gt;chimarrão&lt;/em&gt;.  The following is the fastest, the most fool-proof and efficient way of making a &lt;em&gt;chimarrão&lt;/em&gt; that I am aware of and the technique that I have been using over the last ten years.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-000.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-000.jpg&quot; alt=&quot;How-to 000&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This is a hot beverage, so start by &lt;strong&gt;warming up between 1l (35oz) and 3l (105z) of water&lt;/strong&gt;, depending on how much liquid you can store on your insulated beverage dispenser.  If you want to boil the water first, then let it cool down until it is hot but not burning hot when it finally reaches your body.  &lt;strong&gt;Store at a temperature between 55°C (131°F) and 70°C (158°F)&lt;/strong&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;You might want to compensate for room temperature as well.  If it is a really cold day, you might want to store the water at a higher temperature than you would in a hot, sunny day, because your &lt;em&gt;chimarrão&lt;/em&gt; will lose heat much faster when exposed to low temperatures.  Similarly, different types of &lt;em&gt;cuia&lt;/em&gt; will be more or less prone to lose heat over time, and wind also plays a role in decreasing the temperature when consuming &lt;em&gt;chimarrão&lt;/em&gt; outdoors.  As you can see, there are multiple factors to take into account if you want to keep your &lt;em&gt;chimarrão&lt;/em&gt; warm. However, &lt;strong&gt;never&lt;/strong&gt; drink or pour boiling water in your &lt;em&gt;chimarrão&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill your insulated beverage dispenser with the hot water.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab your &lt;strong&gt;curated&lt;/strong&gt; &lt;em&gt;cuia&lt;/em&gt;, yerba mate for &lt;em&gt;chimarrão&lt;/em&gt;, and a kitchen spoon.  If you have not cureated your &lt;em&gt;cuia&lt;/em&gt; yet, review the procedure described in the &lt;a href=&quot;#items&quot;&gt;items&lt;/a&gt; section; Otherwise, go the next step.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-001.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-001.jpg&quot; alt=&quot;How-to 001&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using a spoon, fill 1/10 of the &lt;em&gt;cuia&lt;/em&gt; with yerba mate.  This will create a thin layer of yerba mate at the bottom of your &lt;em&gt;chimarrão&lt;/em&gt; that will help giving it its characteristic taste.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-002.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-002.jpg&quot; alt=&quot;How-to 002&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill between 5/10 and 6/10 of the cuia with warm water.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-003.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-003.jpg&quot; alt=&quot;How-to 003&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-004.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-004.jpg&quot; alt=&quot;How-to 004&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab your &lt;em&gt;bomba&lt;/em&gt;.  (If you want to add an external filter to it, this is the time.) Then, using your &lt;strong&gt;thumb&lt;/strong&gt;, cover its mouthpiece &lt;strong&gt;to prevent the air from escaping the bomba&lt;/strong&gt; and thus, prevent the water from getting inside the bomba while you insert and position it into the &lt;em&gt;cuia&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-01.jpg&quot; alt=&quot;How to hold the bomba 001&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-02.jpg&quot; alt=&quot;How to hold the bomba 002&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-hold-bomba-03.jpg&quot; alt=&quot;How to hold the bomba 003&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, &lt;strong&gt;while still holding the mouthpiece with your thumb&lt;/strong&gt;, insert the &lt;em&gt;bomba&lt;/em&gt; into the &lt;em&gt;cuia&lt;/em&gt; until its filter head reaches the opposite side of the bottom of the &lt;em&gt;cuia&lt;/em&gt;.  Then, lay the &lt;em&gt;bomba&lt;/em&gt; diagonally on the inner wall of the &lt;em&gt;cuia&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-005.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-005.jpg&quot; alt=&quot;How-to 005&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using a spoon, start adding yerba mate on top of the water until the inside of the &lt;em&gt;cuia&lt;/em&gt; is completely covered with yerba mate.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-006.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-006.jpg&quot; alt=&quot;How-to 006&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the bottom side of the spoon, gently distribute the yerba mate over the entire top of the &lt;em&gt;cuia&lt;/em&gt;.  Do so until there is a flat surface of yerba mate.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-007.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-007.jpg&quot; alt=&quot;How-to 007&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point, you can do all sorts of things to create an entrance to refill your &lt;em&gt;chimarrão&lt;/em&gt; with water.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-decorated.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/chimarrao-decorated.jpg&quot; alt=&quot;Decorated Chimarrao&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;If you are not feeling adventurous, then do the following:  In the side opposite to where your &lt;em&gt;bomba&lt;/em&gt; is, use the spoon to push the yerba mate &lt;em&gt;towards&lt;/em&gt; the side where the &lt;em&gt;bomba&lt;/em&gt; is.  The goal is to dig the surface until you find the water laying underneath.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-008.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-008.jpg&quot; alt=&quot;How-to 008&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-009.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-009.jpg&quot; alt=&quot;How-to 009&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you have found the water, fill the entrance with more warm water.  The yerba mate directly in contact with the water will start absorbing it.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-010.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-010.jpg&quot; alt=&quot;How-to 006&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the spoon, mold the entrance and gently increase the bottom part of the layer by pushing it a little further towards the direction where your &lt;em&gt;bomba&lt;/em&gt; is.  This will create a cleaner entrance to refill your &lt;em&gt;chimarrão&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-011.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-011.jpg&quot; alt=&quot;How-to 011&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-012.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-012.jpg&quot; alt=&quot;How-to 012&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That is it!  Now, enjoy your drink.  The first batch is much stronger than the next ones.  Some people find it too strong and discard the first one (suck and spit until it is empty; then, refill and drink the next one).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-013.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-02-25-chimarrao-gaucho/howto-013.jpg&quot; alt=&quot;How-to 013&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the &lt;em&gt;chimarrão&lt;/em&gt; is empty, you will start sucking air from the &lt;em&gt;bomba&lt;/em&gt;, which should make a sound because the filter head is not completely submerged into water anymore.  Whenever you hear it, you should refill the &lt;em&gt;chimarrão&lt;/em&gt; to prevent it from getting cold–this is particularly important during the winter or when drinking outdoors–and help preserving its taste a little longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not&lt;/strong&gt; move your &lt;em&gt;bomba&lt;/em&gt; around. In fact, never hold/touch the &lt;em&gt;bomba&lt;/em&gt; once you are done making the &lt;em&gt;chimarrão&lt;/em&gt;.  This will very likely clog your &lt;em&gt;chimarrão&lt;/em&gt; even further and completely ruin it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not&lt;/strong&gt; blow air through your &lt;em&gt;bomba&lt;/em&gt;.  If it gets clogged, try using an &lt;strong&gt;external filter&lt;/strong&gt;, or a different type of yerba mate, or a &lt;em&gt;bomba&lt;/em&gt; with a different filter head, or any combination of those.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes my guide on how to make a &lt;em&gt;chimarrão Gaúcho&lt;/em&gt;.  If you find it interesting, give it a try yourself!  The ingredients and utensils are fairly easy to find nowadays and the &lt;em&gt;chimarrão&lt;/em&gt; is a fantastic way of keeping yourself hydrated, especially for those of us who spend a lot of time in front of a computer screen.  It is also a conversation piece for socializing and in my opinion, one of the best drinks for cold days.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="culture" /><category term="food" /><category term="beverage" /><category term="brazil" /></entry><entry><title type="html">Flashing Tasmota firmware onto Sonoff devices over-the-air: “How-to” using just a terminal and web-browser</title><link href="/blog/ota-tasmota-sonoff/" rel="alternate" type="text/html" title="Flashing Tasmota firmware onto Sonoff devices over-the-air: “How-to” using just a terminal and web-browser" /><published>2021-02-01T10:20:00-03:00</published><updated>2021-02-01T10:20:00-03:00</updated><id>/blog/ota-tasmota-sonoff</id><content type="html" xml:base="/blog/ota-tasmota-sonoff/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;September 25th, 2021, Update #2&lt;/strong&gt;: Changed the instructions in the &lt;a href=&quot;#webserver-configuration&quot;&gt;Webserver Configuration&lt;/a&gt; section from BusyBox HTTPD to the more reliable Apache2 alternative.  This is motivated by unreliable results when using BusyBox.&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;September 25th, 2021, Update #1&lt;/strong&gt;: Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; commands to escape double quotation marks (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;) in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; (HTTP POST data) argument.  I also made other minor changes to improve command execution (e.g., setting up environmental variables for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_HOST&lt;/code&gt;), fix typos, and improve readability.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;February 1st, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://sonoff.tech/&quot;&gt;Sonoff&lt;/a&gt;&lt;/strong&gt; devices are very popular home-automation devices developed by a Chinese company called &lt;a href=&quot;https://www.itead.cc&quot;&gt;ITEAD&lt;/a&gt;. By default, they are controlled by a closed-source application developed by ITEAD–called &lt;a href=&quot;https://www.itead.cc/wiki/EWeLink_Introduction&quot;&gt;EWeLink&lt;/a&gt;–that can be installed onto iOS and Android cellphones, for example, making use of cloud services.  However, this makes it hard to integrate with existing home-automation servers, such as &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt; and &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;, or to simply control the devices locally–that is, without access to the Internet.&lt;/p&gt;

&lt;p&gt;Fortunately, there are alternatives that require flashing a different firmware onto Sonoff devices. The &lt;strong&gt;&lt;a href=&quot;https://github.com/arendst/tasmota/&quot;&gt;Tasmota&lt;/a&gt; firmware&lt;/strong&gt;, for example, is a well-known alternative that provides easy integration with existing home-automation servers and let users control devices via multiple methods, such as webUI, HTTP requests, and MQTT, all of which can be accessed either locally or remotely or both.  On top of that, it is &lt;strong&gt;free and open-source&lt;/strong&gt;.  Traditionally, flashing a Tasmota firmware onto a Sonoff device involves finding a &lt;strong&gt;serial connection&lt;/strong&gt;, soldering a few cables/pins, and connecting the device to a &lt;strong&gt;serial-to-USB&lt;/strong&gt; adapter.  However, more often than not, this takes time, knowledge about electronics, and soldering very small components.&lt;/p&gt;

&lt;p&gt;ITEAD is aware that many users do not user their app or even their firmware for Sonoff devices.  Instead of forcing the use of their own software, recently, they have taken the much smarter path of &lt;em&gt;making it easier&lt;/em&gt; for users to control Sonoff devices independently of their software via the release of a &lt;strong&gt;&lt;a href=&quot;https://github.com/itead/Sonoff_Devices_DIY_Tools&quot;&gt;DIY mode&lt;/a&gt;&lt;/strong&gt; in the latest firmware versions.  In DIY mode, it is possible to use the device’s &lt;strong&gt;RESTful API&lt;/strong&gt; to monitor and control a variety of attributes, such as toggle a relay ON/OFF, checking the wireless signal quality, and more importantly for any Tasmota enthusiast, &lt;strong&gt;flashing custom firmware over-the-air (OTA)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will describe how to flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; binary onto &lt;strong&gt;Sonoff Mini&lt;/strong&gt; relays and any other &lt;strong&gt;Sonoff device that can operate in DIY mode&lt;/strong&gt;.  This will be done OTA (wirelessly) using only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; to send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests and then either the BusyBox HTTP Daemon (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busybox httpd&lt;/code&gt;) or a common webserver application (e.g., Apache, Nginx) to create a simple webserver to serve the Tasmota binary to the local network. There is no need to install and run any other application, executable, or whatever.  Software-wise, we just need a terminal and web-browser.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;.The procedure described in this tutorial is &lt;strong&gt;one-way&lt;/strong&gt;.  That is, once flashed the Tasmota firmware, it is &lt;strong&gt;not possible to go back&lt;/strong&gt; to the original ITEAD firmware.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;. From this part and on, the tutorial describes procedures that involve working with &lt;strong&gt;mains power&lt;/strong&gt;.  If you have not taken the necessary time to learn how to work with it safely, &lt;strong&gt;stop right now&lt;/strong&gt; and ask for someone knowledgeable to assist and teach you.  &lt;strong&gt;Do not take this warning lightly&lt;/strong&gt;.  Mains power can kill you or set your house on fire or both (or worse).  &lt;strong&gt;Be safe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;
&lt;p&gt;Only follow this tutorial if your Sonoff device satisfies all of the following criteria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-basicr3-wifi-diy-smart-switch.html&quot;&gt;Sonoff Basic R3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-rfr3.html&quot;&gt;Sonoff RF R3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-mini.html&quot;&gt;Sonoff Mini&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ITEAD firmware&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.5&lt;/code&gt; or higher&lt;/p&gt;

        &lt;p class=&quot;notice--info&quot;&gt;If running version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.3&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.4&lt;/code&gt;, you can try the &lt;a href=&quot;https://github.com/itead/Sonoff_Devices_DIY_Tools/blob/master/SONOFF%20DIY%20MODE%20Protocol%20Doc%20v1.4.md#diy-mode-description&quot;&gt;protocol v&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.4&lt;/code&gt; documentation&lt;/a&gt; instead. The procedure does not require soldering but you need to open the device to connect the OTA jumper manually.  The interaction with the RESTful API is the same as described here, so come back to follow the procedure for flashing Tasmota OTA with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;.&lt;/p&gt;

        &lt;p class=&quot;notice--info&quot;&gt;Alternatively, if running an outdated version, install the EWeLink app, create a bogus acount, update the firmware to latest, uninstall the app, come back and follow this guide.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, it’s possible that this tutorial is partially or completely applicable to other Sonoff devices that can operate in &lt;strong&gt;DIY mode&lt;/strong&gt;.  The ones listed here are the ones that &lt;a href=&quot;https://github.com/itead/Sonoff_Devices_DIY_Tools&quot;&gt;ITEAD listed as supported&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;additional-hardware-requirements&quot;&gt;Additional hardware requirements&lt;/h2&gt;
&lt;p&gt;You &lt;strong&gt;won’t need&lt;/strong&gt; to do any soldering and won’t even need to open the device.  However, we will need to &lt;strong&gt;power the device using mains (110-220v AC) power&lt;/strong&gt;.  For the &lt;strong&gt;Sonoff Mini&lt;/strong&gt;, for example, you need to wire it as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-mini-wiring.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-mini-wiring.jpg&quot; alt=&quot;Sonoff Mini Wiring&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that color conventions, outlet format, etc., are not always the same accross countries.  Check (and double check) the ones in your country and property &lt;strong&gt;before wiring the Sonoff device to mains&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For other Sonoff devices, check their manual.  At this point, you just need to provide power to the device itself–there is no need to connect it to whatever the relay is going to control, for example, or any switches.&lt;/p&gt;

&lt;p&gt;Therefore, the only additional hardware requirements are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stripped mains power cable&lt;/strong&gt; with live (&lt;strong&gt;L&lt;/strong&gt;) and neutral (&lt;strong&gt;N&lt;/strong&gt;) wires;&lt;/li&gt;
  &lt;li&gt;A wifi capable &lt;strong&gt;laptop or PC&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-software-requirements&quot;&gt;Additional software requirements&lt;/h2&gt;
&lt;p&gt;I wrote this tutorial for &lt;strong&gt;GNU/Linux&lt;/strong&gt; users.  That is, unless otherwise specified, the instructions assume that you are running a Linux distribution on your PC/laptop that will be used to interact with (and serve files to) the Sonoff device.  If running iOS, you might be able to adapt the procedure more easily than if you were running Windows or other OS.&lt;/p&gt;

&lt;p&gt;Therefore, the only additional software requirement is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GNU/Linux distro&lt;/strong&gt; installed on the host machine, preferrably &lt;strong&gt;apt&lt;/strong&gt;-based distros, such as Debian or Ubuntu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;
&lt;p&gt;This section describes how to flash the Tasmota firmware onto a Sonoff device OTA.  In brief, the procedure consists of (a) putting the Sonoff device in DIY mode, (b) configuring it to access your existing wireless network, (c) using a set of GNU/Linux utilities to interact with the device’s RESTful API, (d) creating a simple webserver to serve the Tasmota firmware locally, and finally, (e) flashing the Tasmota firmware OTA.  Each of those steps is explained in more detail next.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-sonoff-device&quot;&gt;Preparing the Sonoff device&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Turn ON&lt;/strong&gt; your Sonoff device by connecting it to the mains power;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enable the &lt;strong&gt;DIY mode&lt;/strong&gt; by pressing its button for at &lt;strong&gt;least 5 seconds&lt;/strong&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Once the DIY mode is enabled, the device will create a wireless access point (WAP) with the following credentials:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSID: ITEAD-X
Password: 12345678
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Using your laptop/PC, find the SSID and enter the credentials to &lt;strong&gt;join the ITEAD WAP&lt;/strong&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The Sonoff device will assign an IP to your laptop/PC in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.7.0/24&lt;/code&gt; network, which you can check with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;.  If it does, then &lt;strong&gt;open a web-browser and type the following IP&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.10.7.1:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If your laptop/PC was assigned to a different IP pool than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.7.0/24&lt;/code&gt;, then simply try the first address of whichever pool it was assigned to (e.g., if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.1.0/24&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.1.1&lt;/code&gt;);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the inscructions on the screen to &lt;strong&gt;let the Sonoff device join your local network&lt;/strong&gt; via an existing WAP. &lt;strong&gt;Save and let it reboot&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;In the meantime, tell your laptop/PC to &lt;strong&gt;join the same local network&lt;/strong&gt; you configured in the Sonoff device webUI;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Go to your DHCP server&lt;/strong&gt; and find out which IP address it assigned to the Sonoff device on the local network.  &lt;strong&gt;Open a terminal&lt;/strong&gt; and assign the IP address to the environmental variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt;. For example, if your Sonoff device was assigned IPv4 address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.150&lt;/code&gt;, then enter the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IP_SONOFF='192.168.10.150'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and check that it was corretly assigned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing the environmental variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$IP_SONOFF&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $IP_SONOFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;Please notice that this only works if you continue to use the &lt;strong&gt;same shell&lt;/strong&gt; in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt; was defined.  If you log off or even close the current terminal, you will have to redefine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt; to keep using it.&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, simply change every instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$IP_SONOFF&lt;/code&gt; in the commands below for the actual IP assigned to your Sonoff device.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interacting-with-the-restful-api&quot;&gt;Interacting with the RESTful API&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we will start using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; to send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests and pipe the output to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; output.  Later on, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; to download the Tasmota binary from its latest release.  To make sure all utlities are installed on your distro and you are running their latest version, run the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install curl jq wget -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;If not using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distro, simply adapt the code to use your package manager instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s check that the Sonoff device’s API is working and &lt;strong&gt;get information&lt;/strong&gt; about it, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{\&quot;data\&quot;:{}}&quot; $IP_SONOFF:8081/zeroconf/info | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should output something like this:&lt;/p&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;seq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;switch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulseWidth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;otaUnlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fwVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;deviceid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ID_DEVICE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BSSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signalStrength&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;Please notice that this and the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; commands may take a few seconds to finish executing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Of note, check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otaUnlock&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, which means that currently, it is not possible to flash a custom firmware OTA.  To enable it, we need to &lt;strong&gt;set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otaUnlock&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/strong&gt;, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{\&quot;data\&quot;:{}}&quot; $IP_SONOFF:8081/zeroconf/ota_unlock | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and we can now verify that OTA is unlocked by getting the device’s info once again, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{\&quot;data\&quot;:{}}&quot; $IP_SONOFF:8081/zeroconf/info | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should indicate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otaUnlock&lt;/code&gt; is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;seq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;switch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pulseWidth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;otaUnlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fwVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;deviceid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ID_DEVICE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BSSID_WAP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signalStrength&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-48&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you are not seeing this, review your steps until now.  You can still reset the device powering it OFF and back ON, and the device should come back in DIY mode once again (test with the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; command, for example).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Download the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; binary&lt;/strong&gt; from the Tasmota Github repository to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota&lt;/code&gt; directory, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /home/${USER}/Downloads/tasmota
wget -P /home/${USER}/Downloads/tasmota $(curl -s https://api.github.com/repos/arendst/Tasmota/releases/latest | grep '\&quot;browser_download_url.*tasmota-lite.bin\&quot;' | cut -d '&quot;' -f 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This should write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; file onto your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota/&lt;/code&gt; directory. If it does not, please &lt;a href=&quot;/contact&quot;&gt;let me know about it&lt;/a&gt; and in the meantime, try downloading the file manually from the &lt;a href=&quot;https://github.com/arendst/Tasmota/releases&quot;&gt;Tasmota Github repo&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; SHA256 signature and save it to file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite-sha256.txt&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sha256sum &quot;/home/${USER}/Downloads/tasmota/tasmota-lite.bin&quot; &amp;gt; &quot;/home/${USER}/Downloads/tasmota/tasmota-lite-sha256.txt&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This signature is used to check the firmware integrity after the Sonoff device is done downloading it from a webserver. This is done to prevent the device from flashing a corrupted firmware, for example, because a corrupted file will likely yield a different SHA256 signature.&lt;/p&gt;

    &lt;p&gt;To make it easier later on, let’s create an environmental variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BIN_SHA256&lt;/code&gt; that contains the signature, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; BIN_SHA256=$(cat &quot;/home/${USER}/Downloads/tasmota/tasmota-lite-sha256.txt&quot; | cut -d ' ' -f 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and make sure it’s correctly set up by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing it:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; echo $BIN_SHA256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;webserver-configuration&quot;&gt;Webserver configuration&lt;/h2&gt;
&lt;p&gt;The webserver has a few peculiar requirements (e.g., needs to accept the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ranges&lt;/code&gt; header, run in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;) that does not allow us to point to Tasmota’s OTA website, Github releases, or any other official source of the Tasmota firmware binary. Fortunately, we can run a webserver on the local network that satisfies all requirements by the ITEAD firmware and in my experience, the easiest way to do that is to either use the &lt;strong&gt;BusyBox HTTP Daemon&lt;/strong&gt; or run an &lt;strong&gt;Apache&lt;/strong&gt; webserver–or lighttp or Nginx, for instance, but &lt;strong&gt;do not&lt;/strong&gt; try Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.server&lt;/code&gt; or PHP because they do not accept partial content.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Updated in September 25th, 2021.&lt;/em&gt;) When I first published this tutorial, I included instructions for BusyBox.  Since then, however, I have had mixed results with it and  switched to using Apache instead.  More specifically, to create a minimal webserver using Apache to serve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; firmware file to the Sonoff device, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, make sure you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache2&lt;/code&gt; &lt;strong&gt;installed&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt update &amp;amp;&amp;amp; sudo apt install apache2 -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;If not using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distro, simply adapt the code to use your package manager instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By default, Apache should automatically create, enable, and start a default webserver at your device’s port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;. To make sure this is the case, check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl&lt;/code&gt; for the status of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache2&lt;/code&gt; service:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should show the following if the service is running without issues:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;● apache2.service - The Apache HTTP Server
Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)
Active: active (running) since Sat 2021-09-25 12:00:10 -03; 3h 23min ago
  Docs: https://httpd.apache.org/docs/2.4/
 Main PID: 9393 (apache2)
 Tasks: 55 (limit: 4915)
Memory: 22.1M
CGroup: /system.slice/apache2.service
        ├─9393 /usr/sbin/apache2 -k start
        ├─9394 /usr/sbin/apache2 -k start
        └─9395 /usr/sbin/apache2 -k start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;You can also type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo service apache2 status&lt;/code&gt; to check for the status of the apache2 service.&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;If the service is not running, try starting it manually via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl start apache2&lt;/code&gt;. If you run into issues, it is possible that there is another service already using the default port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;.  Stop the other service and start &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache2&lt;/code&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;If you are running a &lt;strong&gt;firewall&lt;/strong&gt; on your laptop/PC, make sure to allow incoming TCP/UDP to port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; as well.  Otherwise, other devices on your local network won’t be able to access the webserver.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the webserver is running without issues, then copy the contents of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/${USER}/Downloads/tasmota/&lt;/code&gt; directory to the root of the Apache webserver, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /home/${USER}/Downloads/tasmota/* /var/www/html/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the local &lt;strong&gt;IP address of your laptop/PC&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.100&lt;/code&gt;).  The address should be reachable by the Sonoff device (e.g., it is on the same subnet).  Then, assign its IP address to the environmental variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$IP_HOST&lt;/code&gt;, just like we did with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt;, as follows (use your host’s actual IP address instead of the one in this example, of course):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IP_HOST='192.168.10.100'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and check that it was corretly assigned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing it:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $IP_HOST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, simply change every instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$IP_HOST&lt;/code&gt; in the commands below for the actual IP assigned to your host device.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional.&lt;/em&gt; Using another wifi capable device, test that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite-bin&lt;/code&gt; file is &lt;strong&gt;available to the local network&lt;/strong&gt; by typing the output of the following command on a web-browser:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;http://$IP_HOST/tasmota-lite.bin&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If correctly configured, the device should be able to download the binary.  Otherwise, review your steps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. By default, Apache creates log files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/log/apache2/&lt;/code&gt; dir that keep track of various messages that are relevant for managing the webserver. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access.log&lt;/code&gt; file is particularly useful for keeping track of HTTP requests to the webserver, which allow us to tell when the Sonoff device starts and stops requesting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; file. To monitor such a file, open &lt;em&gt;another&lt;/em&gt; terminal and then enter the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo tail -f /var/log/apache2/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Minimize this terminal and come back to check it after sending the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; command to flash the firmware over the air.  This will tell you whether the Sonoff device was correctly configured and is trying to download the firmware file from your local Apache webserver.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice--info&quot;&gt;If you would like to use another common webserver, such as Lighttpd or Nginx, install any one of them using your system’s package manager and then &lt;em&gt;copy the files in your user’s&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Downloads/tasmota&lt;/code&gt; &lt;em&gt;dir to the webserver’s root&lt;/em&gt;, which by default is usually on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; but might change depending on the application used and Linux distribution.&lt;/p&gt;

&lt;h2 id=&quot;flashing-the-tasmota-firmware&quot;&gt;Flashing the Tasmota firmware&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; binary onto the Sonoff device via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;. (If you did not create environmental variables for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_HOST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BIN_SHA256&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_SONOFF&lt;/code&gt;, make sure to change them in the command below &lt;strong&gt;before running it&lt;/strong&gt;.  Double check everything to make sure there are no errors–for example, you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt; the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; command before executing it by wrapping it around double quotation marks (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;) to make sure your shell environment is making the appropriate substitutions.)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H &quot;Content-Type: application/json&quot; -d &quot;{\&quot;data\&quot;:{\&quot;downloadUrl\&quot;:\&quot;http://$IP_HOST/tasmota-lite.bin\&quot;,\&quot;sha256sum\&quot;:\&quot;$BIN_SHA256\&quot;}}&quot; $IP_SONOFF:8081/zeroconf/ota_flash | jq '.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You should get an HTTP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; response (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;200&lt;/code&gt;) fairly quickly.  If you do not, the following codes indicate that there was an &lt;strong&gt;error&lt;/strong&gt; and you should review your steps until now:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;403&lt;/strong&gt;: The operation failed and the OTA function was not unlocked.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;408&lt;/strong&gt;: The operation failed and the pre-download firmware timed out.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;413&lt;/strong&gt;: The operation failed and the request body size is too large.  Make sure the tasmota firmware is the right size for your device.  You should try the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; before anything else.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;424&lt;/strong&gt;: The operation failed and the firmware could not be downloaded. Check that your webserver and firmware file are both reachable by other devices on the same local network; check for typos in the URL.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;471&lt;/strong&gt;: The operation failed and the firmware integrity check failed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional.&lt;/em&gt; Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; connection is closed, monitor Apache’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access.log&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests coming from the Sonoff device, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo tail -f /var/log/apache2/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should show messages similar to the following if your Sonoff device has successfully managed to reach and request the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-lite.bin&lt;/code&gt; from the Apache webserver:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
192.168.10.150 - - [25/Sep/2021:12:51:30 -0300] &quot;GET /tasmota-lite.bin?deviceid=10011b78f7&amp;amp;ts=5748438&amp;amp;sign=e177370169c2051e73f82c2cd3874da6d333e46ef597da91dc543cc573586b04 HTTP/1.1&quot; 206 4399 &quot;-&quot; &quot;itead-device&quot;
192.168.10.150 - - [25/Sep/2021:12:51:30 -0300] &quot;GET /tasmota-lite.bin?deviceid=10011b78f7&amp;amp;ts=1576460931&amp;amp;sign=c2029fdd9d52ed2272c085ba79ffd5a88f11e94c8385f41bb68630de3c7b39b5 HTTP/1.1&quot; 206 4399 &quot;-&quot; &quot;itead-device&quot;
192.168.10.150 - - [25/Sep/2021:12:51:30 -0300] &quot;GET /tasmota-lite.bin?deviceid=10011b78f7&amp;amp;ts=1267998018&amp;amp;sign=3489ad84677930d5f8a1b398582afe8e702b2e77e57eee189254571d6968e619 HTTP/1.1&quot; 206 4399 &quot;-&quot; &quot;itead-device&quot;
192.168.10.150 - - [25/Sep/2021:12:51:30 -0300] &quot;GET /tasmota-lite.bin?deviceid=10011b78f7&amp;amp;ts=1287998487&amp;amp;sign=10bba3c35c1ba79c49282cddb38dddfb75fc633810a4eec9f7612b76e0ddcbb2 HTTP/1.1&quot; 206 4399 &quot;-&quot; &quot;itead-device&quot;
192.168.10.150 - - [25/Sep/2021:12:51:30 -0300] &quot;GET /tasmota-lite.bin?deviceid=10011b78f7&amp;amp;ts=1883570151&amp;amp;sign=459b191580a1d9a2312dee51350592c5255d2cda9b0b96f26b9357dff0ab102f HTTP/1.1&quot; 206 4399 &quot;-&quot; &quot;itead-device&quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and once the webserver stops receiving &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests, you know that it will then start flashing the firmware onto the device’s memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wait&lt;/strong&gt; for at least 2 minutes. When done, the Tasmota firmware should create a public wireless access point (WAP) with SSID called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota_*&lt;/code&gt;.  Use a wifi-capable device and connect to the WAP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once connected, Tasmota will give your device an IP address, which you can check via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;. Usually, the device’s IP address is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.4.0/24&lt;/code&gt; pool, which means the Tasmota webUI is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://192.168.4.1:80&lt;/code&gt;.  (Otherwise, the webUI will be at the first address in whichever pool your device connected to after joining the WAP created by the Tasmota firmware.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web browser of your choice and navigate to the Tasmota webUI. You should be prompted to change the wifi settings to allow your Tasmota to connect to your local wifi network.  Change the settings, save it, and wait for the Tasmota to reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After reboot, &lt;strong&gt;reconnect to your local network&lt;/strong&gt;, open a web browser, and try reaching the Tasmota webUI at the output of the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;http://$IP_SONOFF:80&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If corretcly installed, you will be greeted by the following Tasmota webUI:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-webui.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-30-ota-tasmota-sonoff/sonoff-webui.jpg&quot; alt=&quot;Sonoff webUI&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;and then, see the next section for the basic settings; Otherwise, review your steps and try reflashing the firmware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If everything looks fine with your new Tasmota device, go ahead and stop and disable the local Apache webserver:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl stop apache2 &amp;amp;&amp;amp; sudo systemctl disable apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota*&lt;/code&gt; files from the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/&lt;/code&gt; directory:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /var/www/html/tasmota*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;basic-tasmota-configuration&quot;&gt;Basic Tasmota configuration&lt;/h1&gt;
&lt;p&gt;Before wiring your device to anything else, you should first &lt;strong&gt;configure&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; it.  Configuration-wise, there is a lot of possibilities with a Tasmota firmware.  If you’ve never used Tasmota before, check Robbert’s (&lt;a href=&quot;https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ&quot;&gt;The Hook Up&lt;/a&gt;) introduction video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/08_GBROKQH0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;At the very least, you should &lt;strong&gt;update the firmware Template&lt;/strong&gt; to use the one appropriate for your device.  Templates are device-specific definitions of how their GPIO pins are assigned.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Copy the template&lt;/strong&gt; for your Sonoff device:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-basicr3-wifi-diy-smart-switch.html&quot;&gt;Sonoff Basic R3&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sonoff Basic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-rfr3.html&quot;&gt;Sonoff RF R3&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sonoff RF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.itead.cc/sonoff-mini.html&quot;&gt;Sonoff Mini&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sonoff Mini&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open a web-browser&lt;/strong&gt; and navigate to the Tasmota webUI.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the webUI, go to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure other&lt;/strong&gt; and then &lt;strong&gt;paste the tempalte&lt;/strong&gt; into the &lt;em&gt;Template field&lt;/em&gt;, check the &lt;em&gt;Activate&lt;/em&gt; box and hit &lt;strong&gt;Save&lt;/strong&gt;.  The device will then reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the device is back up, check that its name is now the same as in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAME&lt;/code&gt; property value.  For the Sonoff mini template, for example, it should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sonoff Mini&lt;/code&gt;.  You can further configure your template at &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Template&lt;/strong&gt; to assign new components, if at all possible.  (The Mini does have an exposed GPIO available that was previously used by the ITEAD firmware for flashing mode, which is not going to be used anymore.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fixing-the-timezone&quot;&gt;Fixing the timezone&lt;/h2&gt;
&lt;p&gt;If you installed a pre-compilled firmware, there’s a chance your device is using the incorrect timezone.  To check the current timezone, go to the webUI main page and then &lt;strong&gt;Console&lt;/strong&gt;. Now, type the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if that is incorrect, to change it, enter the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone&lt;/code&gt; command with a value equal to your region’s &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png&quot;&gt;standardized time zone&lt;/a&gt; timezone.  For America/Sao_Paulo, for example, that would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-3&lt;/code&gt;, which can be set in your Tasmota device as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone -3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final remarks&lt;/h1&gt;
&lt;p&gt;Tasmota is a &lt;strong&gt;featureful firmware&lt;/strong&gt; and it is worth taking a look at the &lt;strong&gt;&lt;a href=&quot;https://tasmota.github.io/docs/&quot;&gt;official documentation&lt;/a&gt;&lt;/strong&gt; to learn about the possibilities.  If you run into issues, go to their &lt;a href=&quot;https://github.com/arendst/tasmota/&quot;&gt;Github repository&lt;/a&gt;, search their open and closed issues, and if you do not find an answer to your problem, open a new one.&lt;/p&gt;

&lt;p&gt;Come back to this website every once in a while to check for changes in the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt;.  I try to keep all my guides up-to-date as much as possible because I actually use them myself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="iot" /><category term="tasmota" /><category term="sonoff" /><category term="wireless" /><category term="automation" /><category term="firmware" /></entry><entry><title type="html">TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink</title><link href="/blog/Tvhlink/" rel="alternate" type="text/html" title="TVHlink: Livestreams as IPTV channels with TVHeadend and Streamlink" /><published>2021-01-21T12:20:00-03:00</published><updated>2021-01-21T12:20:00-03:00</updated><id>/blog/Tvhlink</id><content type="html" xml:base="/blog/Tvhlink/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--success&quot;&gt;&lt;strong&gt;Mar 15th, 2022&lt;/strong&gt;: It’s been a while since I last updated this article but all the information here is still up-to-date. Streamlink is on version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.2.0&lt;/code&gt; at the time of writing but everything works just as before and as outlined in this guide. You can track changes to my curated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists and related utility scripts on my &lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 16th, 2021&lt;/strong&gt;, Update #2: Added information about Twitch streams to the &lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt; section.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 16th, 2021&lt;/strong&gt;, Update #1: Updated all Youtube URLs to include the suffix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/live&lt;/code&gt;, owing to &lt;a href=&quot;https://github.com/streamlink/streamlink/pull/3797&quot;&gt;changes to the Youtube plugin for Streamlink&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Jan 21st, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In my previous post titled &lt;a href=&quot;/blog/Youtube-as-IPTV-with-TVH/&quot;&gt;Youtube live as IPTV channels for TVHeadend&lt;/a&gt;, I mentioned a method for capturing a Youtube livestream and feeding it into a &lt;strong&gt;&lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;TVHeadend&lt;/a&gt;&lt;/strong&gt; (TVH) server via a Python utility called &lt;strong&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;Streamlink&lt;/a&gt;&lt;/strong&gt;.  In this tutorial, I will present an easier and more reliable method of doing that for Youtube as well as &lt;a href=&quot;https://streamlink.github.io/plugin_matrix.html&quot;&gt;&lt;em&gt;any&lt;/em&gt; other supported sources&lt;/a&gt;.  I called this integration &lt;strong&gt;TVHlink&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The simplified TVHlink integration is largely due to the release of a new version of the Streamlink utility (&lt;strong&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink/releases/tag/2.0.0&quot;&gt;Streamlink v2.0.0&lt;/a&gt;&lt;/strong&gt;) that includes many bug fixes and more flexible plugins for Youtube, Twitch, and other livestream sources.  For Youtube, for example, it’s now possible to simply point to a channel URL and the parser will automatically try to grab its livestream, instead of using the old method of pointing to the exact livestream URL, which often changes from time to time.  This is basically what I was doing with my &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;youtube4tvh&lt;/a&gt; utility but now that the improved content parser has been implemented into Streamlink, we don’t need youtube4tvh anymore because the livestream URL is found upon each TVH client request, rather than previously stored into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.m3u&lt;/code&gt; playlist.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;. All the software used here is &lt;strong&gt;free and open-source&lt;/strong&gt; and &lt;strong&gt;all livestream sources are publicly available&lt;/strong&gt; and are provided by the copyright owners themselves via either plataforms such as &lt;a href=&quot;https://www.youtube.com/&quot;&gt;Youtube&lt;/a&gt;, &lt;a href=&quot;https://www.twitch.tv/&quot;&gt;Twitch&lt;/a&gt;, &lt;a href=&quot;https://www.dailymotion.com/&quot;&gt;Dailymotion&lt;/a&gt;, etc., or their official channels (e.g., &lt;a href=&quot;https://www.cbsnews.com/&quot;&gt;CBS News&lt;/a&gt;,  &lt;a href=&quot;https://www.dw.com/&quot;&gt;DW&lt;/a&gt;, &lt;a href=&quot;https://www.reuters.com/&quot;&gt;Reuters&lt;/a&gt;) for anyone to use. If you enjoy the content, &lt;strong&gt;please consider supporting the developers, streamers, and providers&lt;/strong&gt; who make this possible.&lt;/p&gt;

&lt;h2 id=&quot;client-demo&quot;&gt;Client demo&lt;/h2&gt;
&lt;p&gt;Here is a preview of how the TVHlink integration looks like for mulitple TVH clients.  This is a &lt;em&gt;non-exhaustive&lt;/em&gt; list because there are &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Clients&quot;&gt;other TVH compatible clients&lt;/a&gt;.  For more information about TVH client configuration, refer to the &lt;a href=&quot;#tvh-clients&quot;&gt;TVH clients&lt;/a&gt; section in this tutorial.&lt;/p&gt;

&lt;p&gt;For reference, all client demos were tested with a modest connection of D:&lt;strong&gt;10Mbps&lt;/strong&gt; / U:&lt;strong&gt;150Kbps&lt;/strong&gt;, which shows that the TVHlink integration works fairly well even if you have limited connectivity.  However, if your connection is better than that, you can &lt;strong&gt;expect much better performance than demonstrated&lt;/strong&gt; in the videos, and fine-tuning the source quality via stream profiles will greatly improve performance as well (the demos used 720p for all streams).  Performance is also very much client-dependent.  The &lt;strong&gt;TVH client addon for Kodi&lt;/strong&gt; has been the one that provided me the best experience so far.  It uses the HTSP protocol, which was designed for streaming, and allows the use of predictive tuning, which pre-loads channels before you access them, making the transition between channels next to each other much smoother than via webUI or VLC, as you can see in the demos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#tvh-kodi-pvr-addon&quot;&gt;Kodi&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/uZw3M3by2tI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#tvh-clients&quot;&gt;Web-browser (TVH webUI)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/EjJCRwiHXwY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#vlc-and-other-m3u-players&quot;&gt;VLC player&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/RBvuZXWxDMU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This tutorial is organized into six main sections.  The first two sections introduce a few reasons two implement the TVH link integration (&lt;a href=&quot;#motivation&quot;&gt;motivation&lt;/a&gt;) and a general picture of how it works (&lt;a href=&quot;#client-server-flow&quot;&gt;client-server flow&lt;/a&gt;).  The third section, called &lt;a href=&quot;#hardware&quot;&gt;hardware&lt;/a&gt;, contains a brief discussion about the hardware requirements to run a TVH server and my personal recommendation for new and experienced home users looking for hardware to buy.&lt;/p&gt;

&lt;p&gt;The last three sections contain the actual how-to guide for the &lt;a href=&quot;#software&quot;&gt;software&lt;/a&gt; components, such as the installation of a TVH server and Streamlink on a GNU/Linux host or Docker container, as well as their basic configuration.  Afterwards, the &lt;a href=&quot;#tvhlink&quot;&gt;TVHlink&lt;/a&gt; integration was described in detail, showing how to build customized IPTV networks of livestream channels.  The &lt;a href=&quot;#tvh-clients&quot;&gt;TVH clients&lt;/a&gt; were discussed at the end of the tutorial, with a focus on my two favorite ones–namely, the Kodi PVR addon and VLC/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; players.&lt;/p&gt;

&lt;p&gt;If you have already read my previous post called &lt;a href=&quot;/blog/Youtube-as-IPTV-with-TVH/&quot;&gt;Youtube live as IPTV channels for TVHeadend&lt;/a&gt;, you might want to skip straight to the &lt;a href=&quot;#software&quot;&gt;software&lt;/a&gt; discussion and &lt;a href=&quot;#tvhlink&quot;&gt;TVHlink integration&lt;/a&gt;.  Note that the installation sections are much more detailed than before and the TVHlink integration was greatly simplified because now, we do not need to generate and update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists outside of the TVH server environment.  That said, the current TVHlink tutorial is self-contained and does not require anyone to have read my previous post in order to implement the TVHlink integration.&lt;/p&gt;

&lt;p&gt;If you are new to all of this, don’t panic!  Grab a towel, save some time, and read through. Then, give it a try on your own first and if you run into an “unsolvable” issue, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.  I am glad to help out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There are multiple reasons to watch livestreams as if they were IPTV channels via a centralized server such as TVH.  To mention a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is &lt;strong&gt;free and all programs are open-source&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;There is at least one &lt;strong&gt;24/7 livestream&lt;/strong&gt; that you enjoy. For example, the following Youtube channels:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;News&lt;/strong&gt;: ABC News, Sky News, DW, France 24&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: NASA TV, Space Videos&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Nature&lt;/strong&gt;: Cornell Bird Cams, Monterey Bay Aquarium, Explore Nature&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Other&lt;/strong&gt;: earthTV, I Love You Venice, Railway&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Radio&lt;/strong&gt;:  BGM channel, Cafe del Mar, Stay See&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;More options to access content from multiple networks using a single client;&lt;/li&gt;
  &lt;li&gt;Keep your streaming services as centralized as possible.  That is, instead of multiple applications, you can manage everything from a single server;&lt;/li&gt;
  &lt;li&gt;Record livestreams with the push of a button on any client or via a schedule;&lt;/li&gt;
  &lt;li&gt;Take advantage of fast and reliable content delivery networks (e.g., Akamai, Youtube CDN).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;client-server-flow&quot;&gt;Client-server flow&lt;/h1&gt;
&lt;p&gt;The client-server flow underlying the TVHlink integration is illustrated next.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/client-server-flow.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/client-server-flow.jpg&quot; alt=&quot;Client-server-flow&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is, the TVH server stores one or more IPTV networks as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists that contain one or more (livestreaming) channels as a track.  When a TVH client (any IPTV/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; player) connects to the TVH server, the server executes a Streamlink command, which will in turn try to find the livestream data.  If successful, streamlink will output the data into the TVH server, which will then send back to the client that requested the livestream.  Otherwise, the request will either return an error or timeout.&lt;/p&gt;

&lt;p&gt;A TVH server is not capable of multicasting any livestream.  This requires a third software component to the client-server flow, such as &lt;a href=&quot;https://www.videolan.org/vlc/&quot;&gt;VLC&lt;/a&gt;.  This topic is beyond the scope of the current tutorial but if interested, check the following guide: &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/VLC_Multicasting#VLC-Multicasting-for-IPTV-into-TVHeadend&quot;&gt;VLC Multicasting for IPTV into TVHeadend&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;The hardware requirement to run a TVH server depends largely on its usage.  It runs on a huge variety of devices, from a tiny ARM-based single-board computer (SBC) to a powerful AMD/Intel x86-64 machine.  (Users have even managed to run TVH on a &lt;a href=&quot;https://tvheadend.org/boards/4/topics/16579&quot;&gt;travel router&lt;/a&gt; with 8MB of flash storage, 64MB of RAM, and a 600 MHz MIPS CPU.)  However, if you want to use TV tuners in addition to the TVHlink integration, I strongly suggest you to use a x86-64 machine with at least one PCIe interface instead of a SBC.  This will give you more options to choose from than relying exclusively on USB tuners.&lt;/p&gt;

&lt;p&gt;Most of the resource requirements to run TVH come from transcoding and networking.  For example, while a &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspbery Pi 3B&lt;/a&gt; (RPi) will be more than enough to run a TVH server and use the TVHlink integration with default settings, CPU-wise, the RPi will strugle if you enable transcoding via different streaming profiles and feed it to multiple clients.  Fortunately, you can avoid transcoding altogether by configuring Streamlink to grab and feed lower resolution streams &lt;strong&gt;directly from the source&lt;/strong&gt;, or even better, create &lt;strong&gt;_HD&lt;/strong&gt; and &lt;strong&gt;_SD&lt;/strong&gt; channels for the same livestream source and let the client choose what works best for them (e.g., in the pipe command to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt;, use the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--default-stream 1080p,720p,best&lt;/code&gt; for HD channels, and the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--default-stream 480p,360p,worst&lt;/code&gt; for SD).&lt;/p&gt;

&lt;p&gt;Networking-wise, a 100Mbit ethernet port can get easily saturated if serving high-resolution streams to more than one client at once.  Wireless connections are okay for clients but your TVH server should not rely on them because too many things can interfere with wireless communication.  An alternative is to use the wireless interface for management (i.e., to access the webUI) and reserve one or more ethernet ports for streaming.  My suggestion is that at the very least, reserve a &lt;strong&gt;1Gbit ethernet port&lt;/strong&gt; for TVH.&lt;/p&gt;

&lt;p&gt;The RAM requirement is pretty low if not transcoding or recording to RAM.  In general, plan on dedicating &lt;strong&gt;at least 1GB of RAM&lt;/strong&gt; to the TVH server.  Similarly, the TVH server &lt;strong&gt;uses less than 100MB of storage space&lt;/strong&gt;.  However, TVH let’s you record videos from any of your sources and depending on the recording profile, this can use a lot of space.&lt;/p&gt;

&lt;p&gt;The hardware requirements for Streamlink are negligible.&lt;/p&gt;

&lt;h2 id=&quot;device-recomendations&quot;&gt;Device recomendations&lt;/h2&gt;
&lt;p&gt;If you are new to all of this and are looking for cheap and efficient hardware to get started, take a look at the &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-4-model-b/&quot;&gt;Raspberry Pi 4B&lt;/a&gt; and the &lt;a href=&quot;https://www.hardkernel.com/shop/odroid-c2/&quot;&gt;Odroid C2&lt;/a&gt; or its latest iteration, the &lt;a href=&quot;https://www.hardkernel.com/shop/odroid-c4/&quot;&gt;Odroid C4&lt;/a&gt;, for example.  They are solid, low-power devices that you can buy for less than US$ 50 and that meet the requirements to run a TVH server and more.  They can even be used as an &lt;strong&gt;all-in-one&lt;/strong&gt; box–that is, TVH server and client at the same time.  All such boards are well-known and sold world-wide via AliExpress, Amazon, and the like.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/rpi4b-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/rpi4b-board.jpg&quot; alt=&quot;RPi 4B&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc2-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc2-board.jpg&quot; alt=&quot;Odroid C2&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc4-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/odroidc4-board.jpg&quot; alt=&quot;Odroid C4&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, if you are an experienced user, consider using &lt;strong&gt;virtualization&lt;/strong&gt; with your existing hardware.  This will save you money and provide an easy to manage plataform for TVH and other services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;As the name suggests, there are two main software components to the TVHlink integration, namely &lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;TVH&lt;/a&gt; and &lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;Streamlink&lt;/a&gt;. The minor components are all their dependencies (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;) but their installation packages will take care of them in most cases.  As mentioned before, both projects are free and open-source, so anyone can download, install, use, and help developing and maintaining the projects.  (You don’t need to be a programmer to help out.  Check if they need assistance with translations, for example, and check how to report bugs via the Github repositories whenever you find one.)  &lt;strong&gt;Please consider supporting both projects&lt;/strong&gt; if you find them useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TVH Donations&lt;/strong&gt;: &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/donate&quot;&gt;https://tvheadend.org/projects/tvheadend/wiki/donate&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Streamlink Donations&lt;/strong&gt;: &lt;a href=&quot;https://streamlink.github.io/donate.html&quot;&gt;https://streamlink.github.io/donate.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this section of the tutorial, I will go over the installation process of the related software, their basic usage, concepts, and configuration.  Unless otherwise specified, I will assume the host is a &lt;strong&gt;GNU/Linux OS&lt;/strong&gt; and more specifically, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distribution, such as &lt;strong&gt;Debian&lt;/strong&gt; or &lt;strong&gt;Ubuntu&lt;/strong&gt;.  If this is not the case, simply adapt the commands to use your OS pkg manager instead.  In any case, a reference to the official documentation is always provided, which includes instructions for other distros as well.  However, make sure that by the end of the installation, you are running &lt;strong&gt;the latest version&lt;/strong&gt; of both programs.  Otherwise, you will run into issues with the TVHlink integration.&lt;/p&gt;

&lt;h2 id=&quot;tvheadned&quot;&gt;TVHeadned&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Tvheadend is a TV streaming server for Linux supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, IPTV,SAT&amp;gt;IP and other formats through the unix pipe as input sources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal of this section is to cover the &lt;strong&gt;installation&lt;/strong&gt; and &lt;strong&gt;basic configuration&lt;/strong&gt; of a TVH server in order to use the TVHlink integration.  Therefore, tuners, drivers, and electronic program guide (EPG) data usage won’t be covered here, even though they are all supported by a TVH server.  Fortunately, the configuration of such aspects and the TVHlink integration are &lt;strong&gt;not&lt;/strong&gt; mutually exclusive–that is, you can configure your tuners and EPG data however you like after implementing the TVHlink integration. Similarly, if you use IPTV services, you can also run them in parallel to the TVHlink integration.&lt;/p&gt;

&lt;h3 id=&quot;concepts&quot;&gt;Concepts&lt;/h3&gt;
&lt;p&gt;In addition to the &lt;a href=&quot;#client-server-flow&quot;&gt;client-server flow&lt;/a&gt; illustrated before, there are four key concepts related to how TVH organizes its content–namely, the notions of &lt;strong&gt;networks&lt;/strong&gt;, &lt;strong&gt;muxes&lt;/strong&gt;, &lt;strong&gt;services&lt;/strong&gt;, and &lt;strong&gt;channels&lt;/strong&gt;.  In brief, a network is composed of one or more muxes, which define services that are mapped onto channels.&lt;/p&gt;

&lt;p&gt;In the TVHlink and IPTV context, a &lt;em&gt;network&lt;/em&gt; defines a meaningful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist (e.g., a livestreaming platform, like Youtube or Twitch) or the name of the IPTV service provider.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist contain &lt;em&gt;tracks&lt;/em&gt;, which are translated into &lt;em&gt;muxes&lt;/em&gt; in TVH lingo.  A mux carries and defines properties of each track, such as its name, icon, EPG source, provider, and so on.  Once a mux is verified to contain valid streaming data, it creates a corresponding &lt;em&gt;service&lt;/em&gt;, and services are then mapped onto specific &lt;em&gt;channels&lt;/em&gt; that will be accessible to a TVH client.&lt;/p&gt;

&lt;p&gt;The mapping of services onto channels is usually manual.  However, in this guide, we use &lt;em&gt;bouquets&lt;/em&gt; to automatically map services to channels and generate their tags.  In the TVHlink/IPTV context, bouquets are just meaningful channel groupings with customized settings.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Here is a list of various installation procedures.  Read the notes before following the official installation procedure.  Whatever method you choose, &lt;em&gt;after the installation&lt;/em&gt;, check that your TVH server is either version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3&lt;/code&gt; or higher.  Otherwise, review your installation or choose a different method because you are using an outdated version and compatibility is uncertain.&lt;/p&gt;

&lt;h4 id=&quot;host-installation&quot;&gt;Host installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/AptRepositories&quot;&gt;Install on host Linux machine via APT&lt;/a&gt;: Suitable for Debian and Debian-based distros (e.g., Raspberry Pi OS, Ubuntu).  This is the recommended procedure for compatible devices because it allows you to keep your TVH updated via APT along with the other installed packages on your OS.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;In the &lt;strong&gt;apt source&lt;/strong&gt; for tvheadend (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/tvheadend.list&lt;/code&gt;), use the &lt;strong&gt;&lt;a href=&quot;https://apt.tvheadend.org/unstable/&quot;&gt;Unstable&lt;/a&gt;&lt;/strong&gt; repository instead of the Stable one. The latter is too outdated.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;Before&lt;/strong&gt; running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install tvheadend&lt;/code&gt;, check the repo’s package version with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt policy tvheadend&lt;/code&gt;.  The package version must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3*&lt;/code&gt; or higher.  If it’s not, double check your installation procedure or use a different installation method (see below).&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;Specific package versions can be installed via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install tvheadend=&amp;lt;version&amp;gt;&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is an exact match to a repo’s valid version (version table avaliable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt policy tvheadend&lt;/code&gt;). This is useful if the candidate version (i.e., what would be installed by defeault) is not the latest one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/RpmRepository&quot;&gt;Install on host Linux machine via RPM&lt;/a&gt;: Suitable for Fedora and CentOS.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config-manager&lt;/code&gt; command, add either the &lt;strong&gt;&lt;a href=&quot;https://dl.bintray.com/tvheadend/fedora/:bintray-tvheadend-fedora-unstable.repo&quot;&gt;Fedora Unstable&lt;/a&gt;&lt;/strong&gt; (if FedoraOS) or the &lt;strong&gt;&lt;a href=&quot;https://dl.bintray.com/tvheadend/centos/bintray-tvheadend-centos-unstable.repo&quot;&gt;CentOS Unstable&lt;/a&gt;&lt;/strong&gt; (if CentOS) repository instead of the other ones.  The other repos contain outdated releases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Building&quot;&gt;Install on host Linux machine from the Github source&lt;/a&gt;: &lt;em&gt;Alternative&lt;/em&gt; to using the APT/RPM repositories.  It takes some time to build from the source because dependencies and conflits have to be fixed manually and it’s much harder to keep TVH updated this way.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;Always build from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of the Github repo.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-installation&quot;&gt;Docker installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.linuxserver.io/images/docker-tvheadend&quot;&gt;Install as a Docker Container with the LinuxServer image&lt;/a&gt;: &lt;em&gt;Alternative&lt;/em&gt; to anyone who is not running a Linux host, for example, or already have other Dockerized services up and running.  The image is provided by an unofficial but well-known source–namely, &lt;a href=&quot;https://www.linuxserver.io/&quot;&gt;LinuxServer&lt;/a&gt;.  The TVHlink integration is &lt;strong&gt;non-trivial&lt;/strong&gt; because the container does not include Streamlink by default.  However, I’ve covered this in the section about &lt;a href=&quot;#docker-installation-1&quot;&gt;running Streamlink in a TVH Docker container&lt;/a&gt;.  In short, it uses &lt;a href=&quot;https://blog.linuxserver.io/2019/09/14/customizing-our-containers/#custom-scripts&quot;&gt;custom script execution&lt;/a&gt; to install and update Streamlink in the container.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt; image tag for your architecture. This is the default, so you should not need to change anything to pull the right image.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and navigate to the &lt;strong&gt;TVH webUI&lt;/strong&gt;. If the web-browser is running on the same host as TVH, then the webUI will be at &lt;strong&gt;&lt;a href=&quot;http://127.0.0.1:9981&quot;&gt;http://127.0.0.1:9981&lt;/a&gt;&lt;/strong&gt;; Otherwise, it will be at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://HOST_IP:9981&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HOST_IP&lt;/code&gt; is the IP address of the machine hosting the TVH server.&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;It goes without saying that the machine hosting the TVH server should have a &lt;strong&gt;fixed IP address&lt;/strong&gt; at the local network because all the clients will be pointing to it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you provided admin credentials during the installation, you will be prompted to enter the credentials now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;TVH will start &lt;strong&gt;the wizard&lt;/strong&gt; the first time you access the webUI but go ahead and skip it altogether:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Cancel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Notice that there are several tabs in the webUI but many options will not show up if the &lt;strong&gt;View level&lt;/strong&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic&lt;/code&gt;. Change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expert&lt;/code&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; General &amp;gt; Base &amp;gt; Web Interface Settings &amp;gt; Default view level
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config01.jpg&quot; alt=&quot;TVH config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Optional.&lt;/em&gt; In the same tab as before, change the &lt;strong&gt;Authentication type&lt;/strong&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Both plain and digest&lt;/code&gt; to make the TVH server compatible with more clients than before.  (VLC, for example, is unable to authenticate if type is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest&lt;/code&gt;.)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; General &amp;gt; Base &amp;gt; HTTP Server Settings &amp;gt; Authentication type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config02.jpg&quot; alt=&quot;TVH config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;Note on exposing TVH to WAN&lt;/strong&gt;. This configuration allows clients to send all their credentials &lt;em&gt;in plain text&lt;/em&gt;.  This is &lt;em&gt;not a problem&lt;/em&gt; if your TVH server is only used locally.  However, &lt;em&gt;this is a problem&lt;/em&gt; if your TVH server is reachable outside your private network because the credentials will be accessible to anyone able to intercept the packets between client and server–you should always assume that this is the case when sending packets over the WAN.  If you want to use your TVH server remotely, my suggestion is to either use (a) vpn or (b) wireguard or (c) ssh tunnel (key-based auth) or (d) a reverse proxy with SSL termination (TLS) and independent and hardened credentials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Clients can access TVH using the same credentials as you (admin access). However, as a general rule of thumb, that is not a good practice. Also, if you have multiple clients, it is nice to know what each one is trying to access on your TVH server.  To create a single &lt;strong&gt;user&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; with password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; and permission to only access streaming, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Users &amp;gt; Access Entries &amp;gt; Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then in the &lt;strong&gt;Add Access Entry&lt;/strong&gt; window:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Username: client
# Streaming: Basic,Advanced,HTSP
# Comment: default streaming client user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config03.jpg&quot; alt=&quot;TVH config 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Now create a &lt;strong&gt;password&lt;/strong&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; user:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Users &amp;gt; Passwords &amp;gt; Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then in the &lt;strong&gt;Add Password&lt;/strong&gt; window:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Username: client
# Password: client
# Comment: default streaming client password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config04.jpg&quot; alt=&quot;TVH config 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;If you want to &lt;strong&gt;add more users&lt;/strong&gt;, just repeat this step as many times as necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional.&lt;/em&gt; By default, TVH will attempt to grab EPG data from any channel added to it at start-up.  In the TVHlink context, however, EPG data either don’t make sense or there is no simple way of grabbing them.&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;Because some of the 24/7 news channels actually follow the same EPG as their Cable/Satellite broadcast, it is possible to use EPG tools like &lt;a href=&quot;http://webgrabplus.com/&quot;&gt;WebGrab+Plus&lt;/a&gt; to configure TVH to use them.  However, this is way beyond the scope of this tutorial.&lt;/p&gt;

    &lt;p&gt;Therefore, you can safely &lt;strong&gt;disable automatic EPG grabbing at start-up&lt;/strong&gt;, as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; EPG Grabber
# Uncheck all 'grab at start-up' options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config05.jpg&quot; alt=&quot;TVH config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;In addition, because you won’t be using any tuner for the TVHlink integration, you can also &lt;strong&gt;disable all EPG Grabber Modules&lt;/strong&gt;, as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; EPG Grabber Modules
# For each enabled module (green icon), make sure enabled is unchecked (red icon)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-config06.jpg&quot; alt=&quot;TVH config 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it. There are &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Documentation&quot;&gt;many other things you can do configuration-wise&lt;/a&gt; but the ones covered are sufficient for the TVHlink integration.  Other things you might want to take a look at are the &lt;strong&gt;&lt;a href=&quot;https://docs.tvheadend.org/webui/config_dvr/&quot;&gt;recording&lt;/a&gt;&lt;/strong&gt; settings and &lt;strong&gt;&lt;a href=&quot;https://docs.tvheadend.org/webui/config_streamprofile/&quot;&gt;stream profiles&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;streamlink&quot;&gt;Streamlink&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Streamlink is a command-line utility which pipes video streams from various services into a video player, such as VLC. The main purpose of Streamlink is to avoid resource-heavy and unoptimized websites, while still allowing the user to enjoy various streamed content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an awesome Python utility and if you have never used it before, make sure to check their &lt;strong&gt;&lt;a href=&quot;https://streamlink.github.io/&quot;&gt;documentation&lt;/a&gt;&lt;/strong&gt;.  In the TVHlink context, it is used to pipe data from a livestream channel to a TVH server, as &lt;a href=&quot;#client-server-flow&quot;&gt;illustrated in the client-server flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Streamlink has plugins for most of the major streaming platforms (Youtube, Twitch, Dailymotion, etc.) as well as a few specific websites (CBS News, NBC News, Reuters, etc.).  For an exhaustive list of the available plugins, check their &lt;a href=&quot;https://streamlink.github.io/plugin_matrix.html#plugins&quot;&gt;plugin matrix&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;The official docs contain detailed instructions about &lt;a href=&quot;https://streamlink.github.io/install.html&quot;&gt;how to install Streamlink on a variety of platforms&lt;/a&gt;.  However, a few of the package repositories contain &lt;strong&gt;outdated versions&lt;/strong&gt; of the Streamlink utility.  If you choose to install via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pacman&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnf&lt;/code&gt;, and other common Linux distro package manager, make sure to install Streamlink version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.0&lt;/code&gt; or higher.  In my experience, keeping Streamlink up-to-date is more important than the TVH server because the former is more prone to changes than the latter, owning to required fixes/updates to content parsers.&lt;/p&gt;

&lt;p&gt;Once installed, you can find the version by running&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which should be at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.0&lt;/code&gt; or higher, as mentioned before.  You can find the latest version number and a summary of the changes on their &lt;strong&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink/releases&quot;&gt;Releases page&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;host-installation-1&quot;&gt;Host installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://streamlink.github.io/install.html#linux-and-bsd&quot;&gt;Install on host Linux or BSD machine via the system’s package manager&lt;/a&gt;: At the time this tutorial was originally published, this was compatible with Arch, Debian, Fedora, Gentoo, NetBSD, NixOS, OpenBSD, Solus, Ubuntu, and Void.  This is the recommended procedure for compatible devices because it allows you to keep your Streamlink updated along with other packages installed on your OS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://streamlink.github.io/install.html#pypi-package-and-source-code&quot;&gt;Install via Python’s package manager, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;&lt;/a&gt;: &lt;em&gt;Alternative&lt;/em&gt; to other installation methods when Streamlink is not available in the system’s package manager or the version is outdated. This offers the highest cross-plataform compatibility–that is, as long as you can install Python, you can install Streamlink this way.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;Starting Streamlink version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.*&lt;/code&gt;, the utility is only compatible with &lt;strong&gt;Python 3&lt;/strong&gt; (and I strongly recommend to use Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.7&lt;/code&gt; or higher).  Therefore, first, install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; and its package manager, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt;.  Then, install Streamlink via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt; to make sure it is installed as a Python 3 package instead of Python 2.&lt;/p&gt;

    &lt;p&gt;On Linux distributions, Python’s package manager will install user-related packages on the user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.local/bin&lt;/code&gt; directory, which by default, is not part of the user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.  This means that if you try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; after a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3 install --user streamlink&lt;/code&gt; install, for example, your shell might not find the executable.  To fix this, you need to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.local/bin&lt;/code&gt; to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export &quot;PATH=$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.profile&quot; &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then logoff and back on to apply the changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-installation-1&quot;&gt;Docker installation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/cgomesu/tvhlink/blob/master/tools/docker/streamlink_for_tvh_container.sh&quot;&gt;Install on the LinuxServer TVH docker container&lt;/a&gt;: &lt;strong&gt;Required for containerized TVH server installations&lt;/strong&gt; because by deafult, the LinuxServer TVH container does not include Streamlink.  I created a repo called &lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink&lt;/a&gt;&lt;/strong&gt; where I wrote a script to handle the automatic installation and update of the Streamlink utility via LinuxServer’s &lt;a href=&quot;https://blog.linuxserver.io/2019/09/14/customizing-our-containers/#custom-scripts&quot;&gt;custom script execution feature&lt;/a&gt;.  To use it, do the following:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;Install git&lt;/strong&gt; on the docker &lt;em&gt;host machine&lt;/em&gt; (&lt;em&gt;not&lt;/em&gt; the container):
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt update &amp;amp;&amp;amp; sudo apt install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Clone the tvhlink repo&lt;/strong&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt;:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd /opt &amp;amp;&amp;amp; sudo git clone https://github.com/cgomesu/tvhlink.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Go to your TVH container’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; directory (edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;TVH_CONTAINER&amp;gt;&lt;/code&gt; below before running the command; this is the dir where the TVH’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; subdir is) and &lt;strong&gt;create a new dir&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-cont-init.d&lt;/code&gt;. Any scripts in this dir are automatically executed at the container’s start-up:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd &amp;lt;TVH_CONTAINER&amp;gt;/config &amp;amp;&amp;amp; sudo mkdir custom-cont-init.d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink_for_tvh_container.sh&lt;/code&gt; script from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tvhlink&lt;/code&gt; repo to the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-cont-init.d&lt;/code&gt; dir:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo cp /opt/tvhlink/tools/docker/streamlink_for_tvh_container.sh custom-cont-init.d/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Fix the dir and script ownership&lt;/strong&gt; to match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUID&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1010&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PGID&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100&lt;/code&gt;) of your TVH container (edit the values before running the command below; if uncertain, then type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id &amp;lt;TVH_USER&amp;gt;&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;TVH_USER&amp;gt;&lt;/code&gt; is the user running the TVH container):
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo chown -R 1010:100 custom-cont-init.d/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Restart your TVH container&lt;/strong&gt; and the script should automatically install and update Streamlink at every startup.  Check the logs for any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[TVHlink]&lt;/code&gt; messages.  If you don’t see any, just &lt;strong&gt;recreate the container&lt;/strong&gt; and wait until it’s done installing–it can take a few minutes.&lt;/p&gt;

        &lt;p class=&quot;notice notice--warning&quot;&gt;Because the script is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; dir, it should persist after a TVH container update and will automatically be triggered at start-up to reinstall the required packages and Streamlink.  If you notice it’s broken, check the &lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink repo&lt;/a&gt; for an update or open an issue to let me know about it.  The script also updates Streamlink after it has been installed, so it makes sure your container is always runnig the latest version of it.  However, the script only triggers at start-up, so it will only try to update Streamlink then.  Therefore, if there’s a &lt;a href=&quot;https://github.com/streamlink/streamlink/releases/&quot;&gt;new Streamlink release&lt;/a&gt; and you want to update it in the TVH container, simply restart the container and the script should take care of it.  (The script uses Python’s package manager, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;, so it will only install the latest version available there.)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;For other TVH docker images, either go to my &lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink repo&lt;/a&gt; and open an issue to request support or you will need to install Streamlink manually and then disable automatic container updates.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;standalone-usage&quot;&gt;Standalone usage&lt;/h3&gt;
&lt;p&gt;After installing Streamlink, you should be able to run it by itself with&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink [OPTIONS] &amp;lt;URL&amp;gt; [STREAM]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;URL&amp;gt;&lt;/code&gt; is a livestreaming channel (e.g., &lt;em&gt;Explore Live Nature Cams&lt;/em&gt; Youtube channel: &lt;a href=&quot;https://www.youtube.com/channel/UC-2KSeUU5SMCX6XLRD-AEvw/live&quot;&gt;https://www.youtube.com/channel/UC-2KSeUU5SMCX6XLRD-AEvw/live&lt;/a&gt;) or &lt;a href=&quot;https://streamlink.github.io/plugin_matrix.html&quot;&gt;a parsable website&lt;/a&gt; URL; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[STREAM]&lt;/code&gt; is a streaming quality profile (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;worst&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;720p&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;360p&lt;/code&gt;)–if you omit the latter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; will show a list of all available profiles for the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;URL&amp;gt;&lt;/code&gt;.  You can find a complete list of additional options (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[OPTIONS]&lt;/code&gt;) with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; usage argument, as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;streamlink --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Streamlink is compatible with multiple popular video players, such as &lt;a href=&quot;https://videolan.org/&quot;&gt;VLC&lt;/a&gt; and &lt;a href=&quot;https://mpv.io/&quot;&gt;MPV&lt;/a&gt;.  For a non-exhaustive compatibility list and their transport modes, check the &lt;a href=&quot;https://streamlink.github.io/players.html#player-compatibility&quot;&gt;official player compatibility table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvhlink&quot;&gt;TVHlink&lt;/h1&gt;
&lt;p&gt;Now that you have installed both TVH and Streamlink, the TVHlink integration is rather trivial.  In fact, the only difference between its implementation and the implementation of any IPTV is that in the configuration of each &lt;em&gt;mux&lt;/em&gt; in the TVH server, we will be using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command with our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; utility, instead of pointing it to an external &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MPEG-TS&lt;/code&gt; or similar file.&lt;/p&gt;

&lt;h2 id=&quot;single-livestream-channel&quot;&gt;Single livestream channel&lt;/h2&gt;
&lt;p&gt;To add a single livestream channel to your TVH server, first, you need to manually create an IPTV network and then add muxes to it.  We will configure the network to automatically create services for the muxes, instead of scanning them one by one, and then enable a bouquet to automatically map services to channels.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open your TVH webUI and go to the &lt;strong&gt;Networks&lt;/strong&gt; tab of your TV inputs settings:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; DVB Inputs &amp;gt; Networks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;new network&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In the &lt;strong&gt;Add Network&lt;/strong&gt; window, select the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Type: IPTV Network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config01.jpg&quot; alt=&quot;TVHlink config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Now, in the &lt;strong&gt;Add IPTV Network&lt;/strong&gt; window, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Network name: Youtube
# Create bouquet: Checked
# Provider name: Youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Skip startup scan: Checked
# Service ID: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config02.jpg&quot; alt=&quot;TVHlink config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;new mux&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;France 24 English&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; DVB Inputs &amp;gt; Muxes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and in &lt;strong&gt;Add Mux&lt;/strong&gt; window, select the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Network: Youtube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config03.jpg&quot; alt=&quot;TVHlink config 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Then, change the following settings:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Enable
# EPG scan: Disabled
# URL: pipe:///usr/bin/env streamlink --stdout --default-stream best --url https://www.youtube.com/user/france24english/live
# Mux name: Youtube - France 24 English
# Channel number: 1
# Service name: France 24 English
# Icon URL: https://yt3.ggpht.com/ytc/AAUvwnjQokqv8-b-XLH34XJulaY0W27AzlCmyeEY7TayMw=s176-c-k-c0x00ffffff-no-rj
# Channel tags: News
# Accept zero value for TSID: Checked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config04.jpg&quot; alt=&quot;TVHlink config 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command in &lt;em&gt;URL&lt;/em&gt;. In brief, it tells your TVH server to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; with the options:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stdout&lt;/code&gt;: Output the stream data to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, which will be read by your TVH server&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--default-stream&lt;/code&gt;: Stream quality, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best&lt;/code&gt; but could be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;720p&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;480p&lt;/code&gt;, or whatever is acceptable by the source (Youtube)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--url&lt;/code&gt;: France 24 English Youtube channel URL. Sometimes, this will be the channelID instead of an alias.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;It is possible to include additional options but these are both necessary and sufficient to get the TVHlink integration working.  Also, I tend to use the &lt;em&gt;Icon URL&lt;/em&gt; from the official Youtube channels because the address has proved to be quite reliable and the image format is perfect for what we are doing.  Lastly, &lt;em&gt;Channel tags&lt;/em&gt; are optional but it will help your clients finding what they want more efficiently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the &lt;strong&gt;Tvheadend log&lt;/strong&gt; window in the webUI (at the bottom) and check that the TVH is correctly requesting and reading data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink&lt;/code&gt;.  If it is, you should see something like this:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot; alt=&quot;TVH Kodi config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2021-01-21 10:31:51.171 bouquet: new bouquet 'Youtube'
2021-01-21 10:55:26.380 mpegts: Youtube - France 24 English in Youtube - tuning on IPTV #1
2021-01-21 10:55:26.381 subscription: 0001: &quot;scan&quot; subscribing to mux &quot;Youtube - France 24 English&quot;, weight: 5, adapter: &quot;IPTV #1&quot;, network: &quot;Youtube&quot;, service: &quot;Raw PID Subscription&quot;
2021-01-21 10:55:26.381 spawn: Executing &quot;/usr/bin/env&quot;
2021-01-21 10:55:27.575 spawn: [cli][info] Found matching plugin youtube for URL https://www.youtube.com/user/france24english/live
2021-01-21 10:55:30.524 spawn: [cli][info] Available streams: 144p (worst), 240p, 360p, 480p, 720p, 1080p (best)
2021-01-21 10:55:30.524 spawn: [cli][info] Opening stream: 1080p (hls)
2021-01-21 10:55:41.380 mpegts: Youtube - France 24 English in Youtube scan complete
2021-01-21 10:55:41.380 subscription: 0001: &quot;scan&quot; unsubscribing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;And in the &lt;em&gt;Scan result&lt;/em&gt; of the mux, you should now see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; status, which means we can configure the bouquet to automap the service to a channel that any TVH client will be able to watch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube&lt;/code&gt; &lt;strong&gt;bouquet&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Scroll down until you find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube&lt;/code&gt; and enable it:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config05.jpg&quot; alt=&quot;TVHlink config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;And in the &lt;strong&gt;Tvheadend log&lt;/strong&gt;, you should see a message confirming that the service was mapped:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2021-01-21 11:02:41.575 bouquet: Youtube/Youtube - France 24 English/{PMT:0}: mapped service from Youtube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which will then show up in the &lt;strong&gt;Channels&lt;/strong&gt; tab:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config06.jpg&quot; alt=&quot;TVHlink config 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To test your new channel using the webUI itself, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Electronic Program Guide &amp;gt; Watch TV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Select channel: 1 France 24 English
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The webUI playback is not very reliable because lots of things depend on the web-browser you are using and how it handles the video playback.  (In other words, even if you’re unable to see the video or hear the sound using the webUI, chances are the stream is working just fine when using a &lt;em&gt;proper video player&lt;/em&gt;.)  If you really want to test the connection at this point, then skip to the &lt;a href=&quot;#tvh-clients&quot;&gt;TVH clients&lt;/a&gt; section and use one of the methods described there.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;automatic-network-of-livestream-channels&quot;&gt;Automatic network of livestream channels&lt;/h2&gt;
&lt;p&gt;If you were paying attention to the IPTV network creation step described before, you might have noticed that there is an &lt;strong&gt;IPTV Automatic Network&lt;/strong&gt; option in the network &lt;em&gt;Type&lt;/em&gt;.  In this type of network, we &lt;strong&gt;import&lt;/strong&gt; an external &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; file to the TVH server and it reads its &lt;em&gt;tracks&lt;/em&gt; as &lt;em&gt;muxes&lt;/em&gt;, which means that we don’t need to create muxes one by one.  The drawback is that you need to know the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; syntax in order to build one yourself or find someone who has already done that for you and made the file available.  In this section, I will describe both alternatives.&lt;/p&gt;

&lt;h3 id=&quot;building-m3u-playlists&quot;&gt;Building m3u playlists&lt;/h3&gt;
&lt;p&gt;Anyone can create and edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists using any simple text editor, such as Pluma, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, Vim, and so on.  For example, open a text editor of your choice and copy and paste the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#EXTM3U
#EXTINF:-1 tvg-name=&quot;France 24 English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnjQokqv8-b-XLH34XJulaY0W27AzlCmyeEY7TayMw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,France 24 English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/france24english/live
#EXTINF:-1 tvg-name=&quot;France 24&quot; tvg-language=&quot;French&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngwSBIFO5UNdycjzkUjIRFEq0n5YWKTOgsfbgKdoQ=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,France 24
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/france24/live
#EXTINF:-1 tvg-name=&quot;DW English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;DE&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngnDcvUkm6jCn6TEENsvO8bdy60g-T4lCgUWOyemCs=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,DW English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/deutschewelleenglish/live
#EXTINF:-1 tvg-name=&quot;DW Deutsch&quot; tvg-language=&quot;German&quot; tvg-country=&quot;DE&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnhXY-iIvV4naxL4WWuS_JQKOqfjqwSgzMswGp4aJUc=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,DW Deutsch
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/deutschewelle/live
#EXTINF:-1 tvg-name=&quot;Euronews English&quot; tvg-language=&quot;English&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnja_dPZdy_el5IhBkj9BJUAd29fZzSs4-vaws_uPLw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews English
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/Euronews/live
#EXTINF:-1 tvg-name=&quot;Euronews Spanish&quot; tvg-language=&quot;Spanish&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwnh8LYxyL6VKfHAGYV0qCJ4hqaWDO5GympC7lRIViw=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews Spanish
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/euronewses/live
#EXTINF:-1 tvg-name=&quot;Euronews Portuguese&quot; tvg-language=&quot;Portuguese&quot; tvg-country=&quot;FR&quot; tvg-logo=&quot;https://yt3.ggpht.com/ytc/AAUvwngxE0l-vGHBafT-fP7WfCq_Xo7QfDLATRspf0agKA=s176-c-k-c0x00ffffff-no-rj-mo&quot; group-title=&quot;News&quot;,Euronews Portuguese
pipe:///usr/bin/env streamlink --stdout --default-stream 720p,best --url https://www.youtube.com/user/euronewspt/live
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, observe that&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first row always contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTM3U&lt;/code&gt; to identify this file as being an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The remaining rows contain two distinct rows, namely (a) one starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTINF:&lt;/code&gt; that defines properties of a mux, and (b) another immediately below it that contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command to request the stream data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regarding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTINF:&lt;/code&gt; row, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; next to it simply indicates that this &lt;em&gt;track&lt;/em&gt; has infinite length; the meaning of the other variables is quite intuitive. Of note, however, I’ve ommitted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tvg-id&lt;/code&gt; variable that is often found in such files because it has no useful meaning outside the context of EPG data.  If you choose to play around with EPG, then you might want to add one that matches the channel’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; in a given EPG data provider, for example.&lt;/p&gt;

&lt;p&gt;As long as you follow the structure in the example, you can add as many livestreaming channels as you want.  When you are done, you can import your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist to the TVH server as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist&lt;/strong&gt; with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube.m3u&lt;/code&gt; on a dir &lt;strong&gt;accessible to your TVH server&lt;/strong&gt;. In Dockerized installations, I suggest to create a subdir on the container’s appdata (next to its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/config&lt;/code&gt; dir, for example) and in the container’s settings, add a new volume bind pointing to the new dir you created. Make sure to fix permissions, so that the new dir and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; files match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PGID&lt;/code&gt; of the TVH server;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your TVH webUI and naviagate to the &lt;strong&gt;Networks&lt;/strong&gt; tab:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; DVB Inputs &amp;gt; Networks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;new network&lt;/strong&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube Auto&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In the &lt;strong&gt;Add Network&lt;/strong&gt; window, select the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Type: IPTV Automatic Network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now, in the &lt;strong&gt;Add IPTV Network&lt;/strong&gt; window, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
# Network name: Youtube Auto
# Create bouquet: Checked
# URL: file:///full/path/to/youtube.m3u
# Channel numbers from: 101
# Accept zero value for TSID: Checked
# Provider name: Youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Content character set: UTF-8
# Skip startup scan: Checked
# Service ID: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config07.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvhlink-config07.jpg&quot; alt=&quot;TVHlink config 07&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube Auto&lt;/code&gt; &lt;strong&gt;bouquet&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Scroll down until you find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Youtube Auto&lt;/code&gt; and enable it:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Enabled: Checked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should map all services to channels in the &lt;strong&gt;Channels&lt;/strong&gt; tab:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To test your new channels using the webUI itself, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Electronic Program Guide &amp;gt; Watch TV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it!  You have learned how to build and import a customized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist of livestreams to your TVH server.  If you think this is a lot of work, check the following section then.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;curated-m3u-playlists&quot;&gt;Curated m3u playlists&lt;/h3&gt;
&lt;p&gt;I create a Github repository called &lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/tvhlink&quot;&gt;tvhlink&lt;/a&gt;&lt;/strong&gt; that contains &lt;a href=&quot;https://github.com/cgomesu/tvhlink/tree/master/tools&quot;&gt;tools&lt;/a&gt; and &lt;a href=&quot;https://github.com/cgomesu/tvhlink/tree/master/m3u&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists&lt;/a&gt; I personally use for my TVHlink integration.  You are all welcome to use my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists and contribute to keep them up-to-date (&lt;a href=&quot;https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/&quot;&gt;fork, make changes, push commits, and submit a PR with a description of what and why&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To add one of my curated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlists to your TVH server, follow the same steps as in the previous section, with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You &lt;strong&gt;do not need to save any playlist locally&lt;/strong&gt;, unless you want to edit them before importing to the TVH server.  Instead, you can tell your TVH server to automatically &lt;strong&gt;fetch from the tvhlink repo&lt;/strong&gt;, as follows:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;In the &lt;strong&gt;Add IPTV Automatic Network&lt;/strong&gt; copy and paste the following on the &lt;em&gt;URL&lt;/em&gt; option to fetch my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube.m3u&lt;/code&gt; playlist:&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; https://raw.githubusercontent.com/cgomesu/tvhlink/master/m3u/youtube.m3u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;or alternatively, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;direct.m3u&lt;/code&gt; playlist:&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; https://raw.githubusercontent.com/cgomesu/tvhlink/master/m3u/direct.m3u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is it! Your TVH server will automatically check the &lt;strong&gt;tvhlink&lt;/strong&gt; repo every hour for changes and if detected, it will update all your channels accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-clients&quot;&gt;TVH clients&lt;/h1&gt;
&lt;p&gt;Now that there is a TVH server up and running with the TVHlink integration enabled, you should configure at least one TVH &lt;em&gt;client&lt;/em&gt; for testing purpose.  There are &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Clients&quot;&gt;multiple ways to watch the channels on your TVH server&lt;/a&gt;, including directly from the &lt;strong&gt;TVH webUI&lt;/strong&gt; itself:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Electronic Program Guide &amp;gt; Watch TV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-webui-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-webui-config01.jpg&quot; alt=&quot;TVH webUI config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The webUI player uses a very specific streaming profile though, and because it requires access to the webUI, it’s not possible to test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; user this way (because it doesn’t have permission to access the webUI).&lt;/p&gt;

&lt;p&gt;There are clients (apps) for &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;Android&lt;/strong&gt;, for example.  They can be clients developed &lt;em&gt;for&lt;/em&gt; a TVH server–such as Robert’s &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.tvheadend.tvhclient&quot;&gt;TVHClient&lt;/a&gt; for Android or Luis’ &lt;a href=&quot;https://apps.apple.com/us/app/tvhclient/id638900112&quot;&gt;TvhClient&lt;/a&gt; for iOS–or general use &lt;em&gt;IPTV players&lt;/em&gt;.  The latter works because the TVH server can provide a parsable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; file to such players–see the section about the &lt;a href=&quot;#vlc-player&quot;&gt;VLC player&lt;/a&gt; for an example of how to obtain such file.&lt;/p&gt;

&lt;p&gt;Here, however, I will show how to configure my two preferred clients.  Specifically, the &lt;strong&gt;&lt;a href=&quot;#tvh-kodi-pvr-addon&quot;&gt;Kodi PVR addon&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;#vlc-and-other-m3u-players&quot;&gt;VLC and other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; players&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tvh-kodi-pvr-addon&quot;&gt;TVH Kodi PVR addon&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://kodi.wiki/view/add-on:Tvheadend_HTSP_Client&quot;&gt;TVH HTSP client addon&lt;/a&gt; for the &lt;a href=&quot;https://kodi.tv/download&quot;&gt;&lt;strong&gt;Kodi Media Center&lt;/strong&gt;&lt;/a&gt; is &lt;em&gt;by far&lt;/em&gt; my favorite client.  It uses the proper protocol for streaming (HTSP) and has &lt;strong&gt;predictive tuning&lt;/strong&gt;, which makes the channel transitions very smooth because it loads neighboring channels in advance, threfore reducing the initial livestream request time (but this also greatly incrases bandwidth usage).&lt;/p&gt;

&lt;p&gt;You can install Kodi on pretty much any OS.  The &lt;a href=&quot;https://kodi.tv/&quot;&gt;official Kodi website&lt;/a&gt; provides a variety of installation packages to &lt;a href=&quot;https://kodi.tv/download&quot;&gt;download&lt;/a&gt; and you will find a &lt;em&gt;HOW-TO&lt;/em&gt; button for each one of them. Choose one of them and follow the installation instructions.  When you are done, come back to see &lt;strong&gt;how to install the &lt;a href=&quot;https://kodi.wiki/view/addon:Tvheadend_HTSP_Client&quot;&gt;TVH PVR addon&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To install the PVR addon, open Kodi and try to install via the &lt;strong&gt;official repo&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Addons &amp;gt; Install from repo &amp;gt; PVR clients
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config01.jpg&quot; alt=&quot;TVH Kodi config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If you find&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PVR clients&lt;/code&gt; option, then select it, then select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tvheadend HTSP Client&lt;/code&gt; and install it.  However, if you &lt;strong&gt;do not find&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PVR clients&lt;/code&gt; option, this means the PVR clients binary was not packaged with your Kodi version, which happens with a few &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;-based distributions.  The solution is to manually install the missing addon.  Close Kodi and open a terminal, then with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; user, type the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install kodi-pvr-hts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Restart Kodi and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PVR clients&lt;/code&gt; option should be available and will contain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tvheadend HTSP Client&lt;/code&gt; installed.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config02.jpg&quot; alt=&quot;TVH Kodi config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice notice--info&quot;&gt;Another option to install a missing addon is to download a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; of it from a public website and in the Kodi addons tab, choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install from zip&lt;/code&gt;.  However, do not go around installing addons from random websites.  &lt;strong&gt;Do your research first&lt;/strong&gt;.  Unofficial addons can contain all sorts of bad stuff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, to configure the PVR addon, do the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Addons &amp;gt; My addons &amp;gt; PVR clients &amp;gt; Tvheadend HTSP Client &amp;gt; Configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and in the &lt;strong&gt;Connection settings&lt;/strong&gt; tab, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# IP address: &amp;lt;IP of the machine hosting the TVH server&amp;gt;
# HTTP port: 9981
# HTSP port: 9982
# Username: client
# Password: client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config03.jpg&quot; alt=&quot;TVH Kodi config 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;and in the &lt;strong&gt;Streaming settings&lt;/strong&gt;, change the following:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Profile to use: htsp
# Use predictive tuning: Enabled
# Number of subscriptions: 3
# Unused subscription delay: 50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Press OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config04.jpg&quot; alt=&quot;TVH Kodi config 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Every time you change the client configuration, you will be required to &lt;strong&gt;restart Kodi&lt;/strong&gt; to see the changes.  So, restart your Kodi now. Once it comes back, all the channels will show up in
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# TV &amp;gt; Channels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go ahead and test a few of them.  If you want to debug the connection, open a web-browser and navigate to your TVH webUI.  At the bottom of the webUI, there’s a button to open the TVH log.  Press the buttom and see the log updates live.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config05.jpg&quot; alt=&quot;TVH Kodi config 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-kodi-config06.jpg&quot; alt=&quot;TVH Kodi config 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Lastly, &lt;strong&gt;additional Kodi PVR settings&lt;/strong&gt; can be changed in
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Settings &amp;gt; PVR &amp;amp; Live TV settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it!  Enjoy your TVHlink integration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;vlc-and-other-m3u-players&quot;&gt;VLC and other m3u players&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;VLC media player (previously the VideoLAN Client and commonly known as simply VLC) is a free and open-source, portable, cross-platform media player software, and streaming media server developed by the VideoLAN project. VLC is available for desktop operating systems, and mobile platforms, such as Android, iOS, iPadOS, Tizen, Windows 10 Mobile, and Windows Phone. VLC is also available on digital distribution platforms such as Apple’s App Store, Google Play, and Microsoft Store.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The VLC player is available to a variety of platforms and can be &lt;a href=&quot;https://www.videolan.org/vlc/#download&quot;&gt;downloaded from the official website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://github.com/BtbN/vlc-htsp-plugin&quot;&gt;unofficial TVH HTSP plugin for VLC&lt;/a&gt; but the repository has been archived and according to the author:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I am no longer working on this (..). Also, if you export an m3u playlist of your channels from tvh, and open it in VLC, you have the same set of features this plugin offers, just without all the weird bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fortunately, it is very easy to export your TVH channels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist and use it with the VLC player or any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; capable player:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and navigate to your TVH webUI;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/playlist&lt;/code&gt; to the TVH webUI address, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://TVH_HOST_IP:9981/playlist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config01.jpg&quot; alt=&quot;TVH VLC config 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This will request an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist from your TVH server called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channels&lt;/code&gt;.  It contains all currently configured channels from your server.  &lt;strong&gt;Save it&lt;/strong&gt; on a directory accessible to your VLC player or other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; player.&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;If you open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist with a text editor, you will see that below each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#EXTINF&lt;/code&gt;, there is a network address (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://...&lt;/code&gt;).  If the address does not contain the IP address of your TVH server host, go ahead and replace them.  Please do not do this manually; use the editor’s &lt;em&gt;find a replace&lt;/em&gt; tool instead.  For example, if your client is not running on the same host as the TVH server, then instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1&lt;/code&gt;, you would want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://TVH_IP&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TVH_IP&lt;/code&gt; is the IP address of the TVH server host in your local network.  When you’re done making the changes, just save the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your VLC player and open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channels&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m3u&lt;/code&gt; playlist as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Media &amp;gt; Open files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then, in the &lt;strong&gt;Select on or more files to open&lt;/strong&gt; window, select &lt;em&gt;All Files&lt;/em&gt; type, navigate to where you stored the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channels&lt;/code&gt; playlist and open it.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-17-Tvhlink/tvh-vlc-config02.jpg&quot; alt=&quot;TVH VLC config 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You should be prompted to authenticate yourself now.  Use your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; credentials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;That is it! Enjoy your TVHlink integration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;You have reached the end of this tutorial.  If you have not started configuring your TVH server, this is the perfect time to do so.  I have been using this integration for multiple months now and it has been absolutely great.  I strongly recommend it for any cord-cutters out there and in my opinion, it is a &lt;em&gt;must have&lt;/em&gt; if you already have a TVH server up and running.&lt;/p&gt;

&lt;p&gt;Streamlink v2.0 made the implementation of Youtube channels so much simpler than before and in my experience, Youtube provides the most reliable 24/7 livestream channels (mostly news, webcams, and music).  I am not a big fan of gaming streams in general, so I don’t ever watch Twitch streams, for example.  But as pointed out previously, Streamlink has plugins able to parse content from many sources other than Youtube and you are welcome to try them out.&lt;/p&gt;

&lt;p&gt;Of note, if you are trying to add a &lt;a href=&quot;https://www.twitch.tv/&quot;&gt;Twitch&lt;/a&gt; stream to your TVHlink integration, make sure to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--twitch-disable-ads&lt;/code&gt; flag in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipe://&lt;/code&gt; command, per &lt;a href=&quot;https://github.com/streamlink/streamlink/issues/3210&quot;&gt;recommendation from the Twitch plugin maintainers&lt;/a&gt;.  Otherwise, you will likely see a &lt;a href=&quot;https://user-images.githubusercontent.com/50534116/124325965-01e21500-db5c-11eb-8390-7c524b887737.png&quot;&gt;warning message&lt;/a&gt;.  It is also suggested to increase your TVH network timeout settings because the filtering of the initial ad &lt;a href=&quot;https://github.com/cgomesu/tvhlink/issues/2&quot;&gt;might be incorrectly interpreted as lack of signal&lt;/a&gt;, thus causing the stream’s termination.&lt;/p&gt;

&lt;p&gt;That is it for now.  If you enjoyed or have a few suggestions, &lt;a href=&quot;/contact&quot;&gt;let me know&lt;/a&gt;.  Every once in a while, come back and check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="tvhlink" /><category term="streamlink" /><category term="tvheadend" /><category term="github" /><category term="iptv" /><category term="kodi" /><category term="youtube" /><category term="streaming" /><category term="livestream" /></entry><entry><title type="html">Tasmota webcam server for the ESP32-cam</title><link href="/blog/Esp32cam-tasmota-webcam-server/" rel="alternate" type="text/html" title="Tasmota webcam server for the ESP32-cam" /><published>2021-01-15T09:00:00-03:00</published><updated>2021-01-15T09:00:00-03:00</updated><id>/blog/Esp32cam-tasmota-webcam-server</id><content type="html" xml:base="/blog/Esp32cam-tasmota-webcam-server/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Jul 6th, 2022&lt;/strong&gt;: Tasmota version 12.02 has been recently released and it introduces a few additional features relative to its previous iterations.  Most notably, the previous issue with the stable firmware version (see changelog from Feb 11th, 2022) has been fixed in the current stable.  In addition, a &lt;a href=&quot;https://github.com/arendst/Tasmota/pull/15531&quot;&gt;pull request&lt;/a&gt; by &lt;a href=&quot;https://github.com/philrich&quot;&gt;@philrich&lt;/a&gt; added support to several OV2640 features that were not contemplated in the previous firmware versions.  More specifically, version 12.02 includes commands for SpecialEffect, White Balance, Exposure Control, Gain Control, White/Black Pixel Correct, DCW, Gamma Correction, Lens Correction, Nightmode, and Reduced FPS mode.  These new commands were all added to the &lt;a href=&quot;#webcam-server-additional-configurations&quot;&gt;table of additional webcam commands&lt;/a&gt;.  Thanks to Eric for letting me know about these changes.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;May 5th, 2022&lt;/strong&gt;: I decided to add a new sub-section called &lt;a href=&quot;#backup&quot;&gt;Backup&lt;/a&gt; to remind everyone that Tasmota has a very useful configuration backup system that allows users to restore all settings in case something goes terribly wrong with the device.  It only takes a few clicks and will save you a lot of time, so don’t skip it!&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Feb 11th, 2022&lt;/strong&gt;: It seems that the version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; firmware that contains the bug fix I referred to on December 13th has not made its way to the latest &lt;em&gt;stable release&lt;/em&gt; yet and is actually only available in the &lt;strong&gt;&lt;em&gt;development release&lt;/em&gt;&lt;/strong&gt; binaries instead.  For this reason, I suggest to download and install the &lt;em&gt;development&lt;/em&gt; binary when following the instructions in the section &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt;.  Thanks to Hans for letting me know about this issue.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Dec 22nd, 2021&lt;/strong&gt;: Included more information about power supply to the &lt;a href=&quot;#standalone-wiring&quot;&gt;Standalone wiring&lt;/a&gt; section and appended one more relevant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetOption&lt;/code&gt; to the &lt;a href=&quot;#setoption-configurations&quot;&gt;SetOption configurations&lt;/a&gt; section, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S065&lt;/code&gt;, which controls the fast power cycle detection. I also wrote a note to the &lt;a href=&quot;#wiring-and-template-configuration&quot;&gt;Wiring and template configuration&lt;/a&gt; subsection of &lt;a href=&quot;#customizing-the-tasmota32-webcam-firmware&quot;&gt;Customizing the tasmota32-webcam firmware&lt;/a&gt; to mention that the referred GPIO pins are currently assigned to SPI-related components but can be safely freed up to be used with peripherals instead.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Dec 13th, 2021&lt;/strong&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.1.0.1&lt;/code&gt; seems to have fixed the issue mentioned before. Therefore, I’m also reverting the AITHINKER CAM template back to the original, in which GPIO4 is assigned the PWM component (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;416&lt;/code&gt;).&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Dec 10th, 2021&lt;/strong&gt;: I made changes to multiple sections to reflect that the use of an independent power supply is now required after flashing the firmware.  In addition, there is now a new section called &lt;a href=&quot;#serial-console&quot;&gt;Serial Console&lt;/a&gt; in which I described how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; to establish a wired connection with the board to monitor its state and help troubleshooting possible issues with it. I also added a few comments about mounting the board at the end of the &lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt; section. &lt;del&gt;Lastly, I should point out that there is an ongoing issue with the firmware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.x&lt;/code&gt; that causes the board to become unstable after initializing the camera, so you might want to stick to firmware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.5&lt;/code&gt; for a little longer.  Check the current status of this &lt;a href=&quot;https://github.com/arendst/Tasmota/issues/13882&quot;&gt;issue on Github&lt;/a&gt;&lt;/del&gt; (see next update).&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Dec 6th, 2021&lt;/strong&gt;: Included a new section called &lt;a href=&quot;#setoption-configurations&quot;&gt;SetOption configurations&lt;/a&gt; to add information about the boot loop defaults restoration control (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetOption36&lt;/code&gt;). This is useful to prevent your device from losing its configurations after power outages and other events that might cause a boot loop.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Dec 5th, 2021&lt;/strong&gt;: I made a tiny change to the default AITHINKER CAM template in the &lt;a href=&quot;#updating-the-template&quot;&gt;Updating the template&lt;/a&gt; section to &lt;em&gt;disable&lt;/em&gt; the PWM component on the GPIO4 (flash LED). More specifically, instead of assigning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;416&lt;/code&gt; (PWM) to IO4 (as in the &lt;a href=&quot;https://templates.blakadder.com/ai-thinker_ESP32-CAM.html&quot;&gt;official template for such board&lt;/a&gt;), the current template assigns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (User) to it. This change was motivated by multiple boards becoming unstable when such option was implemented (e.g., turning the flash LED on would cause one or consecutive reboots). (Of note, the same issue seems to occur with the relay component and any other component that attempts to control the flash LED. My advice is to not use it at all.) Disabling the flash LED and using 2.5A power supplies solved my random reboot and connectivity issues with the firmware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.0&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;September 3rd, 2021&lt;/strong&gt;: Included a new section called &lt;a href=&quot;#rtsp-server&quot;&gt;RTSP server&lt;/a&gt; that describes how to enable and access the video stream via the Real Time Streaming Protocol (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rtsp://&lt;/code&gt;).  Also made a few related changes to the table in &lt;a href=&quot;#webcam-server-additional-configurations&quot;&gt;Webcam server additional configurations&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;September 1st, 2021&lt;/strong&gt;, Update #3: Extended the information about the flash and red LEDs at the end of the &lt;a href=&quot;#webcam-server-additional-configurations&quot;&gt;Webcam server additional configurations&lt;/a&gt; section.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;September 1st, 2021&lt;/strong&gt;, Update #2: Updated the &lt;a href=&quot;#standalone-wiring&quot;&gt;Standalone wiring&lt;/a&gt; section to recommend a power supply able to deliver at least 1A instead of the 400mA previously suggested. At boot and when scanning for WiFi networks, the module can use more than 400mA, which might cause it to become unreliable if the power supply is unable to deliver more than that.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;September 1st, 2021&lt;/strong&gt;, Update #1: Fixed a few typos (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_HOME&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt;) and updated the AITHINKER CAM template in &lt;a href=&quot;#updating-the-template&quot;&gt;Updating the template&lt;/a&gt;.  Also, added minor notes to help troubleshooting issues when flashing the latest firmware.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;August 12th, 2021&lt;/strong&gt;, Update #3: Made minor changes to a few commands to improve readability.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;August 12th, 2021&lt;/strong&gt;, Update #2: Per a user suggestion (Tobias), the &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt; section has been updated. Specifically, the baud rate in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool-py&lt;/code&gt; utility (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt;) has been omitted to use the default value (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;115200&lt;/code&gt;), which seems to work fine with the ESP32-cam module and most adapters.  However, if you run into issues, try the previous value when flashing the Tasmota32-webcam binaries (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b 921600&lt;/code&gt;).&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;August 12th, 2021&lt;/strong&gt;, Update #1: There has been changes to the location of the binary files because they moved from the &lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;Tasmota&lt;/a&gt; repository to the new &lt;a href=&quot;https://github.com/arendst/Tasmota-firmware&quot;&gt;Tasmota-firmware&lt;/a&gt; repository, which currently has a single branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).  The location of the necessary binaries to flash the Tasmota32-webcam firmware via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; utility was changed accordingly in the &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt; section. (It seems that changes are still being made to the organization of such files, so if the URLs do not work, check the new repo directly.)&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;July 16th, 2021&lt;/strong&gt;: Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcResolution&lt;/code&gt; command in the &lt;a href=&quot;#webcam-server-additional-configurations&quot;&gt;Webcam server additional configurations&lt;/a&gt; section to reflect the latest support (firmware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.5.0&lt;/code&gt;) for higher resolutions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13&lt;/code&gt;).  Thanks to Eric for the heads up!&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;April 6th, 2021&lt;/strong&gt;, Update #2: Created a bonus content section at the end called &lt;a href=&quot;#bonus-content-firmware-customization&quot;&gt;&lt;strong&gt;Firmware customization&lt;/strong&gt;&lt;/a&gt;. The new section describes how to create a customized Tasmota firmware to use any supported I2C or other peripherals that are not available in the pre-compiled binary. The &lt;em&gt;BME280&lt;/em&gt; sensor–a cheap and very reliable ambient temperature, humidity, and pressure sensor–was used as an example but the same procedure applies for displays and other I2C sensors that you might wish to use with your ESP32-cam board. This provides a very easy way to turn a simple webcam server into a weather station, smoke detector, relay controller, and more.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;April 6th, 2021&lt;/strong&gt;, Update #1: Added a pinout diagram for the ESP32-cam AI-Thinker board to the &lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt; section.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Jan 26th, 2021&lt;/strong&gt;: Added an alternative source for the Tasmota32 binaries to the &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt; section.  I few individuals reported issues flashing the latest (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware&lt;/code&gt; branch) binaries, so I added a reference to the more stable (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release-firmware&lt;/code&gt; branch) binaries instead.  A list of currently active branches can be found in the official Github repo’s &lt;a href=&quot;https://github.com/arendst/Tasmota/branches/active&quot;&gt;active branches&lt;/a&gt; website.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Jan 16th, 2021&lt;/strong&gt;: Publication of the original article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The ESP32 is a cheap and low-power microcontroller developed by &lt;a href=&quot;https://www.espressif.com&quot;&gt;Espressif&lt;/a&gt;.  In addition to its low-cost, the ESP32 is known for its tiny and robust design, the versatility of its applications, and for having onboard Wi-Fi and Bluetooth.  It is sold world-wide (e.g., &lt;a href=&quot;https://www.amazon.com/s?k=esp32&quot;&gt;Amazon&lt;/a&gt;, &lt;a href=&quot;https://aliexpress.com/wholesale?SearchText=esp32&quot;&gt;Aliexpress&lt;/a&gt;, &lt;a href=&quot;https://lista.mercadolivre.com.br/esp32&quot;&gt;Mercado Livre&lt;/a&gt;) in a variety of boards (e.g., NodeMCU, TTGO, Lolin32).&lt;/p&gt;

&lt;p&gt;In this tutorial, I will talk about one type of ESP32 board that has an &lt;strong&gt;integrated camera module&lt;/strong&gt;, called the &lt;strong&gt;ESP32-cam&lt;/strong&gt;, which can be found for &lt;a href=&quot;https://www.amazon.com/s?k=esp32+cam&amp;amp;s=price-asc-rank&amp;amp;ref=sr_st_price-asc-rank&quot;&gt;less than US$10&lt;/a&gt;.  The goal is to build a cheap alternative to commercial wireless cameras using an open-source firmware that can be easily controlled via HTTP or MQTT and integrated to an existing camera surveillance server (e.g., &lt;a href=&quot;https://github.com/ccrisan/motioneye/&quot;&gt;MotionEye&lt;/a&gt;, &lt;a href=&quot;https://shinobi.video/&quot;&gt;Shinobi&lt;/a&gt;, &lt;a href=&quot;https://www.zoneminder.com/&quot;&gt;ZoneMinder&lt;/a&gt;, &lt;a href=&quot;https://www.ispyconnect.com/&quot;&gt;iSpy&lt;/a&gt;) or multi-purpose automation server (e.g., &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;HomeAssistant&lt;/a&gt;, &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;, &lt;a href=&quot;https://nodered.org/&quot;&gt;NodeRed&lt;/a&gt;) by capturing its live stream from a simple MJPEG URL.  All that can be accomplished with &lt;strong&gt;&lt;a href=&quot;https://tasmota.github.io/&quot;&gt;Tasmota&lt;/a&gt;&lt;/strong&gt; and its (beta) &lt;strong&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota-firmware/tree/main/release-firmware/tasmota32&quot;&gt;webcam server firmware for the ESP32-cam&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re new to &lt;strong&gt;ESP32&lt;/strong&gt; boards, check Bill’s (&lt;a href=&quot;https://www.youtube.com/channel/UCzml9bXoEM0itbcE96CB03w&quot;&gt;DroneBot Workshop&lt;/a&gt;) review video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/xPlN_Tk3VLQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;For a comparison of a few different &lt;strong&gt;ESP32-cam&lt;/strong&gt; boards, check &lt;a href=&quot;https://www.youtube.com/channel/UCu7_D0o48KbfhpEohoP7YSQ&quot;&gt;Andreas Spiess’&lt;/a&gt; video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/5IhhyJjjCxo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This tutorial was organized as follows.  First, I presented the motivation behind the use of Tasmota32 webcam server over one of the most common firmwares for the ESP32-cam, the Espressif CameraWebServer Arduino sketch.  This is followed by a list of the main hardware components involved into flashing a firmware onto the ESP32-cam.  Most of the tutorial focused on the installation and configuration of the Tasmota32 webcam server using a GNU/Linux OS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-tasmota&quot;&gt;Why Tasmota?&lt;/h1&gt;
&lt;p&gt;Tasmota was created and it is still maintanted by &lt;a href=&quot;https://github.com/arendst&quot;&gt;Theo Arends&lt;/a&gt;. It started as hacky alternative to the &lt;a href=&quot;https://sonoff.tech/&quot;&gt;Sonoff&lt;/a&gt; commercial firmware and moved onto an independent, &lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;free and open-source project&lt;/a&gt; that provides multiple firmwares for ESP8266-based devices.  The firmwares come with a simple webUI that let’s you control and configure the board main modules as well as integration with a MQTT server and more. Even though Tasmota &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/&quot;&gt;support for the ESP32 is still in beta development&lt;/a&gt;, my experience with it has been very positive.&lt;/p&gt;

&lt;p&gt;One of the main webcam firmwares for the &lt;strong&gt;ESP32-cam&lt;/strong&gt; is the one provided by Espressif themselves, the &lt;a href=&quot;https://github.com/espressif/arduino-esp32/tree/master/libraries/ESP32/examples/Camera/CameraWebServer&quot;&gt;CameraWebServer&lt;/a&gt; Arduino sketch.  This one has features that the Tasmota32 webcam firmware does not offer, such as face recognition and motion detection.  However, my experience with the &lt;strong&gt;video streaming&lt;/strong&gt; has been negative.  Specifically, the streaming runs smoothly when the video resolution is low (640x480) but it strugles quite a bit when running at medium to high resolutions–that is, the number of frames per second decreases noticeably.  I’ve also noticed that the board runs very hot when running the CameraWebServer Arduino sketch, even when the most CPU intensive tasks (motion detection and face reconition) are disabled.&lt;/p&gt;

&lt;p&gt;On the other hand, the &lt;strong&gt;&lt;a href=&quot;https://github.com/arendst/Tasmota-firmware/tree/main/release-firmware/tasmota32&quot;&gt;Tasmota32 webcam server&lt;/a&gt;&lt;/strong&gt; seems to perform much better in the areas the CameraWebServer Arduino sketch strugles with.  More specifically, the streaming is smoother and the board does not seem to get as hot.  I’ve not had a chance to investigate why this happens and to measure the actual difference in frames per second and temperature, so don’t take my opinion too seriously.  Also, I cannot tell if this happens for all ESP32-cam boards because I’ve only tested with the &lt;strong&gt;AI-Thinker&lt;/strong&gt; module.  Overall, however, my experience with the Tasmota32 firmware has been better than with the Espressif firmware in the area that I think is the most relevant one for a camera module, namely video streaming performance.  On top of that, the Tasmota firmware offers a multitude of methods to interact with the ESP32-cam remotely, while the Espressif sketch is very limited in that regard.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’ve never heard of Tasmota before, check Robbert’s (&lt;a href=&quot;https://www.youtube.com/channel/UC2gyzKcHbYfqoXA5xbyGXtQ&quot;&gt;The Hook Up&lt;/a&gt;) introduction video:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/08_GBROKQH0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;To make a single wireless camera based on the ESP32-cam board, you’ll need at least the following items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Board&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=esp32cam+ai-thinker&quot;&gt;ESP32-CAM, AI-Thinker board&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam.jpg&quot; alt=&quot;ESP32cam&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-pinout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-pinout.jpg&quot; alt=&quot;ESP32cam pinout&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;USB to TTL adapter&lt;/strong&gt;: Used to interface with the board when connected to a computer. It can only provide power to the board during the initial flashing stage.
    &lt;ul&gt;
      &lt;li&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=ftdi+ft232RL+usb+to+ttl&quot;&gt;FTDI FT232RL USB to TTL/serial module with 5v/3v3 voltage jumper&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/ftdi-usb-ttl.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/ftdi-usb-ttl.jpg&quot; alt=&quot;FTDI FT232RL&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cables&lt;/strong&gt;: Long and thin cables can add significant resistance, so at the very least, try to keep them short.
    &lt;ul&gt;
      &lt;li&gt;05x &lt;a href=&quot;https://www.amazon.com/s?k=female+dupont+wires&quot;&gt;Female-Female dupont/jumper wires&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/female-dupont.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/female-dupont.jpg&quot; alt=&quot;Female dupont wires&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;01x USB cable compatible with your USB to TTL adapter: Check the USB type and use a short cable to decrease resistance as much as possible because initially, we will be powering the ESP32-cam via your computer’s USB port.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-cable.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-cable.jpg&quot; alt=&quot;USB cable&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Power supply&lt;/strong&gt;: Once you are done flashing the Tasmota firmware, you will need to power the board independently because your computer’s USB port and your TTL adapter won’t be able to deliver enough current at a reliable 5V to run the board with the new firmware. (See the &lt;a href=&quot;#standalone-wiring&quot;&gt;Standalone wiring&lt;/a&gt; section for more information on how to properly power your ESP32-cam project.)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=5v+2A+usb+power+supply&quot;&gt;AC to 5V DC (2A) power supply&lt;/a&gt;: If you have an old 5V charger lying around (e.g., from an old cellphone or tablet), you might be able to use it as well but make sure it is able to deliver at least 1A. However, if you run into power-related issues, consider buying a new power supply able to deliver at least 2A instead.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/power-supply.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/power-supply.jpg&quot; alt=&quot;5V power supply&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=USB+to+DIP&quot;&gt;USB to DIP adapter&lt;/a&gt;: Make sure to buy at least one DIP adapter that is &lt;em&gt;compatible with your power supply&lt;/em&gt;.  (In our case, only the VCC and GND pins need to be soldered.) It doesn’t need to be a USB adapter if your power supply has a barrel connector, for example, in which case a simple &lt;a href=&quot;https://duckduckgo.com/?q=DC+2.1x5.5mm+adapter&amp;amp;iax=images&amp;amp;ia=images&quot;&gt;DC 2.1x5.5mm adapter&lt;/a&gt; will be enough.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-to-dip-adapter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/usb-to-dip-adapter.jpg&quot; alt=&quot;USB to DIP adapter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casing&lt;/strong&gt;: &lt;em&gt;Casing is not covered in this tutorial&lt;/em&gt;, owing to the plethora of alternatives.  If you wish to add a case to your ESP32-cam project, there are many &lt;a href=&quot;https://duckduckgo.com/?q=esp32-cam+case&quot;&gt;3D printed options to choose from&lt;/a&gt;. You can also use pretty much any small prototyping box, fake camera case, etc., as long as it is capable of housing the module.&lt;/p&gt;

    &lt;p&gt;However, notice that the module &lt;em&gt;does not have screw holes&lt;/em&gt; for securing it to a flat surface.  In such cases, my preferred alternative is to solder a few of the exposed pins to a &lt;a href=&quot;https://www.amazon.com/s?k=Mini+Solderable+Breadboard&quot;&gt;mini solderable breadboard&lt;/a&gt; and then secure the breadboard with metal/nylon screws to the casing. This gives the project a more clean and professional look than using hot glue, for instance. In addition, having a breadboard makes it easy to attach additional components to your project (e.g., &lt;a href=&quot;#wiring-and-template-configuration&quot;&gt;BME280 sensor&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;
&lt;p&gt;This guide assumes you’re running a &lt;strong&gt;Linux&lt;/strong&gt; distribution, and more specifically, an &lt;strong&gt;apt-based distro&lt;/strong&gt;, such as Debian or Ubuntu.  If you’re running a different distro, simply change the apt code to reflect your system’s package manager.  For non-Linux users, check &lt;a href=&quot;https://tasmota.github.io/docs/Getting-Started/&quot;&gt;Tasmota’s Getting Started&lt;/a&gt; but use the binaries mentioned here and come back for the post-flashing configuration of the webcam server.&lt;/p&gt;

&lt;h2 id=&quot;required-packages-and-user-permissions&quot;&gt;Required packages and user permissions&lt;/h2&gt;
&lt;p&gt;Before we can flash the Tasmota32 webcam server onto the ESP32-cam, we will need to install a few packages and configure the permissions of our Linux user.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a terminal and install the required packages:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install wget python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install esptool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find out if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; can be found in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whereis esptool.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, when required to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt;, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py OPTIONS&lt;/code&gt;, run as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 -m esptool OPTIONS&lt;/code&gt;. If you choose to do this, skip the next step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; was not found, it means your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.local/bin&lt;/code&gt; is not in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.  Add it as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&quot; | tee -a &quot;$HOME/.bashrc&quot; &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your ESP32-cam to the USB to TTL/serial adapter in flash mode:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg&quot; alt=&quot;ESP32cam flash mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;Attention.&lt;/strong&gt; Make sure your USB to TTL adapter has &lt;strong&gt;VCC in 5V mode&lt;/strong&gt; and in the ESP32, the VCC cable is connected to the 5V pin.  Double check the wiring before moving on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the adapter to a USB port on your computer and check the new device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /dev/ttyUSB*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USER&lt;/code&gt; to the same group as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/ttyUSB*&lt;/code&gt; (it’s usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dialout&lt;/code&gt; but if different, change in the command below) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tty&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -aG dialout,tty ${USER}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log off and back on.  (If you continue to run into permission issues, try rebooting instead.  You can check your user’s permissions with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id ${USER}&lt;/code&gt;.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/h2&gt;
&lt;p&gt;We are now ready to flash the Tasmota firmware.  For reference, the official information is available at &lt;a href=&quot;https://tasmota.github.io/docs/ESP32&quot;&gt;https://tasmota.github.io/docs/ESP32&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32&lt;/code&gt; dir in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo mkdir tasmota32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change ownership of the new directory to the current user instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown ${USER}:${USER} tasmota32/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; binary and the needed ESP32 Tasmota binaries from the official Github repo via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;.  (&lt;em&gt;The following was updated on August 12th, 2021.&lt;/em&gt;) The binaries are now available in a different repository than &lt;a href=&quot;https://github.com/arendst/Tasmota&quot;&gt;before&lt;/a&gt;, namely &lt;a href=&quot;https://github.com/arendst/Tasmota-firmware&quot;&gt;arendst/Tasmota-firmware&lt;/a&gt;, and currently, the new repository has a single branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;). There are two versions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-wecam.bin&lt;/code&gt;, one from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt; and another from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;development&lt;/code&gt; portions of the Tasmota32 project. My advice is to try the stable release first, then development if you have any issues, unless there is a note in &lt;a href=&quot;#changelog&quot;&gt;Changelog&lt;/a&gt; that says otherwise (e.g., the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Feb 11th, 2022&lt;/code&gt; note).&lt;/p&gt;

    &lt;p&gt;To download the &lt;strong&gt;stable release&lt;/strong&gt; binaries, use the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -P /opt/tasmota32/ \
  https://ota.tasmota.com/tasmota32/release/tasmota32-webcam.bin \
  https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/boot_app0.bin \
  https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/bootloader_dout_40m.bin \
  https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/partitions.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, to download the &lt;strong&gt;development&lt;/strong&gt; binaries, use the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -P /opt/tasmota32/ \
  https://ota.tasmota.com/tasmota32/tasmota32-webcam.bin \
  https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/boot_app0.bin \
  https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/bootloader_dout_40m.bin \
  https://github.com/arendst/Tasmota-firmware/raw/main/static/esp32/partitions.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure your ESP32-cam is connected to your computer in &lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-flash-mode.jpg&quot;&gt;flash mode&lt;/a&gt; (GPIO0-GND jumper).  Now find the USB port your device is using in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt; and set it to the environmental variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Attention.&lt;/strong&gt; While convenient, the following command assumes there is a single USB to serial adapter connected to your computer.  If this is not the case, manually set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; to whichever port your USB adapter is currently using. You can find the port via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls /dev/ttyUSB*&lt;/code&gt; and testing one by one until you find the one used by the adapter. Alternatively, simply disconnect all other USB to serial adapters for this procedure and continue.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ESP_PORT=$(ls /dev/ttyUSB*)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Please notice that this only works if you continue to use the &lt;strong&gt;same shell&lt;/strong&gt; in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; was defined.  If you log off or even close the current terminal, you will have to redefine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; to keep using it.&lt;/p&gt;

    &lt;p&gt;You can check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt; was correctly defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing it, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $ESP_PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;which should output something like this:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Erase the current firmware (or whatever data) from your ESP32-cam.&lt;/p&gt;

    &lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Attention.&lt;/strong&gt; The following procedure will &lt;strong&gt;wipe all the data&lt;/strong&gt; on the ESP32-cam.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --port $ESP_PORT erase_flash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Wait&lt;/strong&gt; until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; is done. Then, press the &lt;strong&gt;reset button on the ESP32-cam&lt;/strong&gt;.  Now, check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ESP_PORT&lt;/code&gt; is available again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; webcam server binary and the required Tasmota binaries to the ESP32-cam.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esptool.py --chip esp32 \
  --port $ESP_PORT \
  --before default_reset \
  --after hard_reset \
  write_flash -z \
  --flash_mode dout \
  --flash_freq 40m \
  --flash_size detect \
  0x1000 /opt/tasmota32/bootloader_dout_40m.bin \
  0x8000 /opt/tasmota32/partitions.bin \
  0xe000 /opt/tasmota32/boot_app0.bin \
  0x10000 /opt/tasmota32/tasmota32-webcam.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Wait&lt;/strong&gt; until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; is completely done before moving on. Flashing a firmware can take a few minutes to complete.  If you experience issues while flashing, try a different baud rate (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt;) than the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;115200&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b 921600&lt;/code&gt;. The &lt;a href=&quot;https://tasmota.github.io/docs/FAQ/#flashing&quot;&gt;Tasmota FAQ&lt;/a&gt; can help with this and other issues.&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; hangs at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connecting...&lt;/code&gt;, then press the &lt;strong&gt;Restart&lt;/strong&gt; button (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RST&lt;/code&gt;) on your ESP-cam module.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wait until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esptool.py&lt;/code&gt; is done&lt;/strong&gt;. Then, &lt;strong&gt;disconnect your USB to TTL adapter&lt;/strong&gt; from your computer and &lt;strong&gt;remove the flash mode (GPIO0-GND) jumper&lt;/strong&gt; from the ESP32-cam.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-nonflash-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-nonflash-mode.jpg&quot; alt=&quot;ESP32cam nonflash mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to power your new Tasmota ESP32-cam device using an independent power supply. In the following sections, we will see how to monitor the device via the TTL adapter, which is optional, and then how to power the device and configure it, which are both required.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;serial-console&quot;&gt;Serial Console&lt;/h1&gt;
&lt;p class=&quot;notice--info&quot;&gt;This section is optional but strongly recommended to facilitate troubleshooting power issues, incorrect component specification, random reboots, and so on. Feel free to skip to &lt;a href=&quot;#standalone-wiring&quot;&gt;Standalone Wiring&lt;/a&gt; if you do not feel like setting up a serial connection to monitor your board while you configure it.&lt;/p&gt;

&lt;p&gt;Setting up a serial connection to your Tasmota ESP32-cam device allows you to monitor its state via a wired connection to your computer.  This is useful to troubleshoot issues that occur before you can access the device’s web interface (e.g., unable to connect to its access point, boot loops) and during the initial configuration steps because there won’t be any physical markers of the device’s state to rely on.&lt;/p&gt;

&lt;p&gt;To create a serial console for your device, you’ll need a (a) USB to TTL adapter and a (b) terminal emulator. If you followed this guide, you should already have a USB to TTL adapter, which should now be connected to the ESP32-cam board as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-serial-monitor.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-serial-monitor.jpg&quot; alt=&quot;ESP32cam serial monitor&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To establish a serial monitor, we will use a GNU application called &lt;a href=&quot;https://www.gnu.org/software/screen/manual/screen.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt;&lt;/a&gt;. First, open a terminal and check whether it is installed on your computer or not:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;which&lt;/code&gt; is unable to find the application, then install it via your systems package manager.  For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;-based distros:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, &lt;strong&gt;connect your USB to TTL adapter to your computer&lt;/strong&gt; and &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;just like before&lt;/a&gt;, find the USB port your adapter is using in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls /dev/ttyUSB*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if different than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $ESP_PORT&lt;/code&gt;, set it to the environmental variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP_PORT&lt;/code&gt;; else, continue.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; has &lt;a href=&quot;https://www.gnu.org/software/screen/manual/screen.html#Invoking-Screen&quot;&gt;many options&lt;/a&gt; but in this case, we just need to enter the following to establish a connection and log the output (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-L&lt;/code&gt;) to a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screenlog.0&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;screen -L $ESP_PORT 115200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To &lt;a href=&quot;https://www.gnu.org/software/screen/manual/screen.html#Quit&quot;&gt;quit&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt;, press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + a&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;, which will prompt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; to ask if you want to quit (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;).&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Of note, the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-&lt;/code&gt; referred to in the manual stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; plus another letter.  You can see a list of default commands via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-a ?&lt;/code&gt; when running screen.&lt;/p&gt;

&lt;p&gt;That is it! You are now all set to start configuring your device or troubleshooting any issues with it. Once you power your Tasmota ESP32-cam device, it should start outputting messages to your computer via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;standalone-wiring&quot;&gt;Standalone wiring&lt;/h1&gt;
&lt;p&gt;If you bought a USB to DIP adapter, you can now power your ESP32-cam independently, as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-standalone-mode.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-standalone-mode.jpg&quot; alt=&quot;ESP32cam standalone mode&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use a &lt;strong&gt;5V&lt;/strong&gt; power supply that is able to deliver at least &lt;strong&gt;1A&lt;/strong&gt;, such as an old cellphone charger. However, if you start running into power-related issues (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Brownout detector was triggered&lt;/code&gt;), replace your power supply for one able to deliver &lt;em&gt;at least&lt;/em&gt; &lt;strong&gt;2A&lt;/strong&gt; instead and check that your cable is rated for such current.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;During boot and when searching for wireless access points, the board requires far more power than when idling.  Because a few power supplies were not designed to handle such sudden changes in energy consumption, voltage drops and insufficient current to the board might happen, which cause the device to become unstable and trigger a reboot.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brownout&lt;/code&gt; issues persist after changing your power supply, my recommendation is to make use of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Buck_converter&quot;&gt;buck converter&lt;/a&gt; in between your power supply and the ESP32-cam board.  The addition of a buck converter gives you more flexibility in choosing a power supply, the ability to adjust the output voltage to better fit your project, additional output current, short-circuit protection, and built-in voltage smoothing/filtering.  For reference, I have used various converters based on the cheap &lt;a href=&quot;https://duckduckgo.com/?q=LM2596&quot;&gt;LM2596&lt;/a&gt; in ESP32-cam projects with great success.  You can easily &lt;a href=&quot;https://www.amazon.com/s?k=buck+converter+LM2596&quot;&gt;buy one of such converters for less than US$2&lt;/a&gt; and if you do not have a multimeter, some even come with an LED display to show the input and output voltage.  However, depending on your needs, there are other (slightly more expensive but slightly better, too) buck converters out there that you can use as well.  In any case, make sure to regulate your converters before attaching to your board; else, it might permanently damage your board and components.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/buck-converter.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/buck-converter.jpg&quot; alt=&quot;buck converter&quot; class=&quot;PostImage PostImage--small&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do not want to buy or don’t have space to add a buck converter to your project, another possible solution to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brownout&lt;/code&gt; issues include &lt;a href=&quot;https://duckduckgo.com/?q=esp32-cam+electrolytic+capacitor&quot;&gt;the addition of an electrolytic capacitor across the 5V and GND pins&lt;/a&gt;, which should be placed close to the ESP32-cam pins.  Notice that this is exactly what is done in buck converters for the purpose of handling voltage instability, and quite often, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;220uF&lt;/code&gt; electrolytic capacitor is used for such a purpose, so you might want to use one as well (any cap rated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10V&lt;/code&gt; or higher should be fine). However, the inability to easily regulate the output voltage might prove to be an issue still.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/220uf-35v-cap.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/220uf-35v-cap.jpg&quot; alt=&quot;220uF 35v cap&quot; class=&quot;PostImage PostImage--small&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, if power supply instability is inherent to your project (e.g., battery or solar-power based), then take a look at the &lt;a href=&quot;#setoption-configurations&quot;&gt;SetOption configurations&lt;/a&gt; section. By default, the Tasmota firmware implements multiple power related configurations that can revert one or all changes you have made to rules, templates, components, etc. (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO36&lt;/code&gt;), or even reset the device completely (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO65&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For more information about powering this and other electronics projects, you might want to take a look at the following videos made by &lt;a href=&quot;https://www.youtube.com/channel/UCzml9bXoEM0itbcE96CB03w&quot;&gt;DroneBot Workshop&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/channel/UCu7_D0o48KbfhpEohoP7YSQ&quot;&gt;Andreas Spiess&lt;/a&gt;:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/IT19dg73nKU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/DLQ1E5pDcBU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;
&lt;p&gt;By default, a fresh install of the Tasmota firmware will create a wireless access point for your ESP32-cam.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;If you cannot find the Tasmota wireless access point, it is possible that the USB adapter is unable to provide enough power to operate the WiFi features in a reliable way.  In this case, check the &lt;a href=&quot;#standalone-wiring&quot;&gt;Standalone wiring&lt;/a&gt; section.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use a wifi-capable device (e.g., laptop) and connect to it. The ESP32-cam will give your device an IP address, which you can check via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;. Usually, the device’s IP address is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.4.0/24&lt;/code&gt; pool, which means the ESP32-cam webUI is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.4.1:80&lt;/code&gt;; Otherwise, the webUI will be at the first addr in whichever pool your device connected to after joining the wireless access point created by the Tasmota firmware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser of your choice and navigate to the ESP32-cam webUI. You should be prompted to change the wifi settings to allow your ESP32-cam to connect to your local wifi network.  Change the settings, save it, and wait for the ESP32-cam to reboot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the &lt;strong&gt;DHCP server&lt;/strong&gt; of your local network and find the IP address assigned to your ESP32-cam.  At this point, it’s a good idea to assign a static address to it as well.  (If you set a static address, then reboot the ESP32-cam before moving on.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the ESP32-cam webUI on your local network and start the configuration process (see below).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;updating-the-template&quot;&gt;Updating the template&lt;/h2&gt;
&lt;p&gt;Tasmota templates are device-specific definitions of how their GPIO pins are assigned. As mentioned before, there are multiple ESP32-cam boards out there with different definitions.  In my case, I’m using the &lt;strong&gt;AI-Thinker cam&lt;/strong&gt; module and therefore, I should configure the Tasmota32 webcam server to use the &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/#aithinker-cam&quot;&gt;AITHINKER CAM template&lt;/a&gt; instead of the default one.  (If your ESP32-cam is different, then check &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/&quot;&gt;https://tasmota.github.io/docs/ESP32/&lt;/a&gt; for the appropriate template and use that one instead of the AITHINKER CAM.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the &lt;strong&gt;AITHINKER CAM template&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AITHINKER CAM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GPIO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4992&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;672&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5088&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;736&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;704&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5089&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5184&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5056&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;576&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5092&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5093&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;FLAG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From the ESP32-cam webUI, go to &lt;strong&gt;Configuration &amp;gt; Configure &amp;gt; Configure other&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the template under &lt;strong&gt;Other parameters &amp;gt; Template&lt;/strong&gt;; &lt;strong&gt;Check Activate&lt;/strong&gt;; Save it and wait for the reboot.&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;If you lose connection to the ESP-cam afterwards, it is very likely that the AITHINKER CAM template has changed since the last time this article was updated.  In this case, put the ESP-cam in &lt;strong&gt;flash mode&lt;/strong&gt; and flash the Tasmota32-webcam firmware once again.  Then, when updating the &lt;strong&gt;Template&lt;/strong&gt;, use the one from &lt;a href=&quot;https://tasmota.github.io/docs/ESP32/#aithinker-cam&quot;&gt;https://tasmota.github.io/docs/ESP32/#aithinker-cam&lt;/a&gt; instead of the one mentioned before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The device should now be named ‘AITHINKER CAM’ (or whaterver NAME was in the template).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The MJPEG stream should be accessible at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/stream&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/cam.mjpeg&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A single snapshot can be obtained at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:80/snapshot.jpg&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;auto-enabling-the-webcam-server-at-boot&quot;&gt;Auto-enabling the webcam server at boot&lt;/h2&gt;
&lt;p&gt;If your board is like mine, the stream does not initialize on its own at boot–it requires a request to get webUI to initialize the stream.  This will happen whenever you try to visit the device’s webUI.  However, if you want to automatically initialize the webserver and video stream at boot, we can do so using Tasmota’s &lt;strong&gt;&lt;a href=&quot;https://tasmota.github.io/docs/Rules/&quot;&gt;rules&lt;/a&gt;&lt;/strong&gt;.  More specifically, we will add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rule1&lt;/code&gt; that tells the ESP32-cam to start the stream once Tasmota is fully initialized (i.e., after wifi and MQTT are connected, if configured).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the following rule:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rule1 ON System#Boot DO WcInit ENDON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the ESP32-cam webUI and then &lt;strong&gt;Console&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the rule in the &lt;strong&gt;enter command&lt;/strong&gt; box and press enter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rule1&lt;/code&gt;, enter the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rule1 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart the ESP32-cam with the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Restart 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it comes back on, check the console if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RULE 1&lt;/code&gt; was executed.  It should show something similar to the following if the rule is working as expected:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... RUL: SYSTEM#BOOT performs &quot;WcInit&quot;
... SRC: Rule
... CMD: Group 0, Index 1, Command &quot;WCINIT&quot;, Data &quot;&quot;
... CAM: Stream init
... CAM: User template
... CAM: PSRAM found
... CAM: Initialized
... RSL: stat/tasmota_***/RESULT = {&quot;WCInit&quot;:&quot;Done&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The MJPEG stream should now be accessible at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/stream&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/cam.mjpeg&lt;/code&gt; without ever accessing the webUI’s main page.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the way, &lt;strong&gt;rules&lt;/strong&gt; are a great way to program your Tasmota device indepedently of any automation server. Make sure to read about &lt;a href=&quot;https://tasmota.github.io/docs/Rules/&quot;&gt;how to add or modify rules&lt;/a&gt; and &lt;a href=&quot;https://tasmota.github.io/docs/Commands/#rules&quot;&gt;the list of available rule commands&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rtsp-server&quot;&gt;RTSP server&lt;/h2&gt;
&lt;p&gt;As of release &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.5.0&lt;/code&gt;, it is possible to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Real_Time_Streaming_Protocol&quot;&gt;Real Time Streaming Protocol (RTSP)&lt;/a&gt; to access the video streaming from the ESP32-cam module running the Tasmota32-webcam firmware.  (Thanks to &lt;a href=&quot;https://github.com/gemu2015&quot;&gt;@gemu2015&lt;/a&gt; for the initial implementation and &lt;a href=&quot;https://github.com/arendst/Tasmota/pull/9575&quot;&gt;pull request&lt;/a&gt;.)  To do so, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to the ESP32-cam webUI and then go to the &lt;strong&gt;Console&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enable the RTSP server&lt;/strong&gt; by entering the following command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WcRtsp 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, the video stream should be accessible via RTSP using the following address:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rtsp://DEVICE_IP:8554/mjpeg/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Remember to change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEVICE_IP&lt;/code&gt; for the IP address of your ESP32-cam.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Currently, the RTSP server only needs to be enabled once.  So, contrary to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcInit&lt;/code&gt;, we won’t need to write a new rule to re-enable it at boot.  Of note, the RTSP server is independent of the HTTP one.  In addition, I’ve only tested it with VLC and &lt;a href=&quot;https://github.com/arendst/Tasmota/issues/9293#issuecomment-720108532&quot;&gt;there are reports of compatibility issues with other players&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;webcam-server-additional-configurations&quot;&gt;Webcam server additional configurations&lt;/h2&gt;
&lt;p&gt;A full list of commands for ESP32 devices can be found at &lt;a href=&quot;https://tasmota.github.io/docs/Commands/#esp32&quot;&gt;the official docs page&lt;/a&gt;.  However, several commands that are specific to the Tasmota32 webcam server binary are often not documented there.  For this reason, I’ve decided to post below all the additional commands (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wc&lt;/code&gt;) that I’m aware of.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wc&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Displays all the current webcam settings&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcStats&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Show webcam related statistics&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcInit&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Initializes the HTTP webcam server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcStream&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Controls the video streaming&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: stop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcRtsp&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RTSP server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: disable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: enable (forces a restart)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcColorbar&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Show Colorbar&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcFeature&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Set extended Feature&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: off&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: Reduced FPS mode, which reduces framerate and also increases exposure time to improve low light performance.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;: Nightmode, which further increases exposure time and lowers the framerate depending on available light.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WCFlip&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Flips the image vertically&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WCMirror&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Flips the image horizontally&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcResolution&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image resolution&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 96x96&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 160x120&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 176x144&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 240x176&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 240x240&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 320x240&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 400x256&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 480x320&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 640x480&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 800x600&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 1024x768&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 1280x720&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 1280x1024&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRAMESIZE 1600x1200&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcBrightness&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image brightness&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcContrast&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image contrast&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcSaturation&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Image saturation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcSpecialEffect&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Set Special Picture Effect&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: off&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: inverted&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;: black and white&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;: red&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;: green&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;: blue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;: yellow&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAWB&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto White Balance&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcWBMode&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;White Balance Mode&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: auto, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: manual&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAWBGain&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto White Balance Gain&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAEC&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto exposure control (Sensor)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAECDSP&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto exposure control (DSP)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAECValue&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto exposure control value&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, …, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1024&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAECLevel&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto exposure control level&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, …, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAGC&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto gain control&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcAGCGain&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto gain control gain&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, …, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcGainCeiling&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Gain ceiling&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, …, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcGammaCorrect&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto Gamma Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcLensCorrect&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Auto Lens Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcWPC&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;White Pixel Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcDCW&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Downscale&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WcBPC&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Black Pixel Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;: no, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;: yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example, to set the stream resolution to 800x600, go to the &lt;strong&gt;Console&lt;/strong&gt; and enter the following command :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WcResolution 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, it’s possible to send commands via HTTP.  The previous example via web-browser: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP/cm?cmnd=WcResolution%209&lt;/code&gt;.  If using a terminal, you can send via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://DEVICE_IP/cm?cmnd=WcResolution%209
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should reply with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; parsable by utilities such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;strong&gt;flash LED&lt;/strong&gt; is controlled by &lt;strong&gt;GPIO4&lt;/strong&gt; and the &lt;strong&gt;red LED&lt;/strong&gt; is controlled by &lt;strong&gt;GPIO33&lt;/strong&gt;. Their state can be changed programmatically as well.&lt;/p&gt;

&lt;h2 id=&quot;fixing-the-timezone&quot;&gt;Fixing the timezone&lt;/h2&gt;
&lt;p&gt;If you installed a pre-compiled firmware, there’s a chance your device is using the incorrect timezone.  To check the current timezone, go to &lt;strong&gt;Console&lt;/strong&gt; and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and to change it, enter the command with a value equal to your region’s &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/88/World_Time_Zones_Map.png&quot;&gt;standardized time zone&lt;/a&gt;.  For America/Sao_Paulo, for example, that would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-3&lt;/code&gt;, which can be set in your Tasmota device as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timezone -3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setoption-configurations&quot;&gt;SetOption configurations&lt;/h2&gt;
&lt;p&gt;Tasmota has a command called &lt;a href=&quot;https://tasmota.github.io/docs/Commands/#setoptions&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetOption&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/a&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO&amp;lt;x&amp;gt;&lt;/code&gt;) that allows users to change various default firmware behaviors, such as whether to preserve power state after a restart (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO0&lt;/code&gt;), which temperature scale to use (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO8&lt;/code&gt;), and so on.  One such options, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetOption36&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO36&lt;/code&gt;), is responsible for the &lt;strong&gt;boot loop defaults restoration control&lt;/strong&gt;.  A boot loop is defined as a restart within less than 10s before restoring settings (according to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOT_LOOP_TIME&lt;/code&gt; default value), and by default, the Tasmota firmware will start applying the following changes as soon as it detects &lt;em&gt;a single boot loop&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO36 1&lt;/code&gt; is the default):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1st restart: disable ESP8285 generic GPIOs interfering with flash SPI;&lt;/li&gt;
  &lt;li&gt;2nd restart: disable rules causing boot loop;&lt;/li&gt;
  &lt;li&gt;3rd restart: disable all rules (and autoexec.bat);&lt;/li&gt;
  &lt;li&gt;4th restart: reset user defined GPIOs to disable any attached peripherals;&lt;/li&gt;
  &lt;li&gt;5th restart: reset module to Sonoff Basic (1).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, such option can be disabled entirely (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO36 0&lt;/code&gt;) or customized (e.g., start boot loop control after 5 boot loops: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO36 5&lt;/code&gt;). This matters because if for any reason your device detects a boot loop (e.g., bad power supply during boot), it will start reverting many of the customizations you’ve configured before (e.g., rules and template), which might cause loss of connectivity and other related issues. Personally, I like to disable boot loop control altogether once I have thoroughly tested the current configuration, which can be done by entering the following on the device’s console window:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SetOption36 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetOption65&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO65&lt;/code&gt;) controls the device recovery process (i.e., reset all configurations to the firmware defaults and upon the first boot, create an access point for over-the-air WiFi configuration) via &lt;a href=&quot;https://tasmota.github.io/docs/Device-Recovery/#fast-power-cycle-device-recovery&quot;&gt;fast power cycle detection&lt;/a&gt;.  This is enabled by default but to disable it, navigate to the console and enter the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SetOption65 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;backup&quot;&gt;Backup&lt;/h2&gt;
&lt;p&gt;Once you are done configuring your Tasmota device, make sure to download a backup of its settings and store the backup file on multiple locations (see the &lt;a href=&quot;https://www.youtube.com/watch?v=rFO6NyLIP7M&quot;&gt;3-2-1 backup strategy&lt;/a&gt;).  To do so, simply navigate to &lt;strong&gt;Configuration&lt;/strong&gt; and select &lt;strong&gt;Backup Configuration&lt;/strong&gt; to download a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dmp&lt;/code&gt; file containing all settings for the selected Tasmota device.  If for any reason your device loses its settings (e.g., power cycling, firmware re-flashing), instead of configuring it all over again, you can now easily restore all settings via the &lt;em&gt;Restore Configuration&lt;/em&gt; option, which is even available when the device is in &lt;a href=&quot;#configuration&quot;&gt;AP mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h1&gt;
&lt;p&gt;You can now capture the live stream of your ESP32-cam at either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/stream&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:81/cam.mjpeg&lt;/code&gt;, and a single snapshot at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://DEVICE_IP:80/snapshot.jpg&lt;/code&gt;.  Such URLs can be easily fed into most camera surveillance servers, such as &lt;a href=&quot;https://github.com/ccrisan/motioneye/&quot;&gt;MotionEye&lt;/a&gt;, &lt;a href=&quot;https://shinobi.video/&quot;&gt;Shinobi&lt;/a&gt;, &lt;a href=&quot;https://www.zoneminder.com/&quot;&gt;ZoneMinder&lt;/a&gt;, or &lt;a href=&quot;https://www.ispyconnect.com/&quot;&gt;iSpy&lt;/a&gt;.  As mentioned before, the Tasmota32 webcam server can be configure to connect to a &lt;strong&gt;&lt;a href=&quot;https://mqtt.org/&quot;&gt;MQTT server&lt;/a&gt;&lt;/strong&gt; (see &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure MQTT&lt;/strong&gt;) and then integrated with most home automation servers, such as &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;HomeAssistant&lt;/a&gt;, &lt;a href=&quot;https://www.openhab.org/&quot;&gt;OpenHAB&lt;/a&gt;, or one based on &lt;a href=&quot;https://nodered.org/&quot;&gt;NodeRed&lt;/a&gt;’s flow programming.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-firmware-customization&quot;&gt;Bonus content: Firmware customization&lt;/h1&gt;
&lt;p&gt;Even though many of the GPIO pins in the ESP32-cam board are used for the built-in camera module, the board certainly has more than enough pins to interface with additional peripherals.  In other words, while you can use your ESP32-cam as a simple webcam server, it is possible–and as we will see, very easy–to turn it into something more than that, such as a weather station, smoke detector, relay controller, and so on, owning to the multitude of peripherals that are currently supported by the Tasmota firmware.  For an up-to-date list, see the &lt;a href=&quot;https://tasmota.github.io/docs/Supported-Peripherals/#supported-peripherals&quot;&gt;&lt;strong&gt;official Supported Peripherals table&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, due to space limitations, support for some peripherals are not included in pre-compilled binaries.  In the official docs, for example, it says that support for the &lt;a href=&quot;https://tasmota.github.io/docs/BME280/&quot;&gt;&lt;strong&gt;BME280 sensor module&lt;/strong&gt;&lt;/a&gt; is only available in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota-sensors.bin&lt;/code&gt; pre-compiled binary.  Fortunately, it is now very easy to customize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; to support the BME280 and any other supported peripherals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/bme280.jpg&quot; alt=&quot;BME280&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following sections, I described how to customize the Tasmota32 firmware to support a BME280 sensor module.  This was accomplished with &lt;a href=&quot;https://www.docker.com/&quot;&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt; and the container &lt;a href=&quot;https://github.com/benzino77/tasmocompiler&quot;&gt;&lt;strong&gt;TasmoCompiler&lt;/strong&gt;&lt;/a&gt;.  At the end, I showed how to update the firmware over-the-air and how to configure the template to interface with peripherals connected to GPIO pins.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;There are &lt;a href=&quot;https://tasmota.github.io/docs/Compile-your-build/&quot;&gt;many different ways of customizing a Tasmota firmware&lt;/a&gt;.  TasmoCompiler is just one of them that does not use an IDE and has a user-friendly GUI.&lt;/p&gt;

&lt;h2 id=&quot;installing-docker-and-running-tasmocompiler&quot;&gt;Installing Docker and running TasmoCompiler&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is a ver well-known, documented, and used virtualization platform. To install Docker, follow the official documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;&lt;strong&gt;Get Docker&lt;/strong&gt; and &lt;strong&gt;install it&lt;/strong&gt; on your OS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have Docker up and running, it is time to pull and run the &lt;strong&gt;TasmoCompiler&lt;/strong&gt; container. TasmoCompiler was developed by user &lt;a href=&quot;https://github.com/benzino77&quot;&gt;benzino77&lt;/a&gt; to do only one thing, namely compile a Tasmota firmware with customized settings via a simple (web) GUI.  To run it in a Docker container, &lt;strong&gt;open a terminal&lt;/strong&gt; and pull the image, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull benzino77/tasmocompiler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-pull.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-pull.jpg&quot; alt=&quot;tasmocompiler pull&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;If you run into permission issues, either append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to any docker command or create and add your current user to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; group, as follows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo groupadd docker &amp;amp;&amp;amp; sudo usermod -aG docker $USER&lt;/code&gt;. Other post-install configurations for Linux users can be found at the official docs: &lt;a href=&quot;https://docs.docker.com/engine/install/linux-postinstall/&quot;&gt;Optional post-install steps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; container, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run \
  --rm \
  --name tasmocompiler \
  -p 3000:3000 \
  -e DEBUG=server,git,compile \
  benzino77/tasmocompiler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-run.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-run.jpg&quot; alt=&quot;tasmocompiler run&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;Of course, if you use &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt; or other application for managing your docker containers, you can also pull and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; via the application instead of a terminal.  In this case, translate the commands to your application.  This also applies to users who are not running Docker on Linux.&lt;/p&gt;

&lt;p&gt;This will create a container named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; that has a web GUI exposed on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt; of the local machine.  To access it, go to the following address using any web-browser:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:3000&quot;&gt;&lt;strong&gt;http://localhost:3000&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;customizing-the-tasmota32-webcam-firmware&quot;&gt;Customizing the tasmota32-webcam firmware&lt;/h2&gt;
&lt;p&gt;Now that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmocompiler&lt;/code&gt; container is running, we can compile a new customized Tasmota firmware for the ESP32-cam in just a few simple steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open any web-browser and navigate to &lt;a href=&quot;http://localhost:3000&quot;&gt;&lt;strong&gt;http://localhost:3000&lt;/strong&gt;&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;Tasmota source code&lt;/strong&gt;, select &lt;em&gt;Refresh Source&lt;/em&gt; (this can take a few minutes, depending on your connection) and afterwards, &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step01.jpg&quot; alt=&quot;tasmocompiler step 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;WiFi configuration&lt;/strong&gt;, add your wifi credentials and hit &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step02.jpg&quot; alt=&quot;tasmocompiler step 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;Select Features&lt;/strong&gt;, select &lt;strong&gt;ESP32 webcam&lt;/strong&gt; as your board.  For this example, we are adding the &lt;strong&gt;BME280 sensor module&lt;/strong&gt; and therefore, in feature, we add the &lt;em&gt;Temp/Hum sensors&lt;/em&gt; feature to support the BME280 sensor. If you are attaching another device, check the appropriate feature to support it here (e.g., check &lt;em&gt;Displays (I2C/SPI)&lt;/em&gt; to support an OLED display module).  When done, hit &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step03.jpg&quot; alt=&quot;tasmocompiler step 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is not necessary to edit any parameter in &lt;strong&gt;Custom Parameters&lt;/strong&gt;, so hit &lt;em&gt;Next&lt;/em&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, in &lt;strong&gt;Select Version and Compile&lt;/strong&gt;, choose a Tasmota version (&lt;em&gt;development&lt;/em&gt; is usually fine but if you run into issues later on, try the latest stable) and base language for the interface.  Then, select &lt;strong&gt;Compile&lt;/strong&gt; and wait until it is done (this can take a few minutes);&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step05.jpg&quot; alt=&quot;tasmocompiler step 05&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step06.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step06.jpg&quot; alt=&quot;tasmocompiler step 06&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it is done compiling, check that the firmware was successfully compiled and if all looks good, &lt;strong&gt;download the firmware&lt;/strong&gt; (and optionally, any of the other files);&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step07.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/tasmocompiler-step07.jpg&quot; alt=&quot;tasmocompiler step 07&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you run into issues, check the &lt;a href=&quot;https://github.com/benzino77/tasmocompiler/issues&quot;&gt;issues tab&lt;/a&gt; of the TasmoCompiler repository for open and closed issues similar to the one you are experiencing. If you do not find anything similar, open a new issue there to warn the developer know about it.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-firmware&quot;&gt;Updating the firmware&lt;/h2&gt;
&lt;p&gt;If you have already flashed a pre-compiled Tasmota binary onto the ESP32-cam, then it is possible to update the firmware over-the-air (OTA).  To update the firmware OTA, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and go to the IP address of your Tasmota ESP32-cam;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then navigate to &lt;strong&gt;Firmware Upgrade&lt;/strong&gt; &amp;gt; &lt;strong&gt;Upgrade by file upload&lt;/strong&gt; &amp;gt; Browse and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware.bin&lt;/code&gt; file you compiled with TasmoCompiler.  Afterwards, select &lt;strong&gt;Start Upgrade&lt;/strong&gt; and wait until it is done;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The device will reboot automatically and once it is back on, it should connect to the wireless network configured with TasmoCompiler.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you have not flashed any pre-compiled Tasmota binary, simply switch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasmota32-webcam.bin&lt;/code&gt; file mentioned in &lt;a href=&quot;#flashing-tasmota32-webcam-server&quot;&gt;Flashing Tasmota32 webcam server&lt;/a&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firmware.bin&lt;/code&gt; file you compiled with TasmoCompiler.&lt;/p&gt;

&lt;h2 id=&quot;wiring-and-template-configuration&quot;&gt;Wiring and template configuration&lt;/h2&gt;
&lt;p&gt;Suppose we have a &lt;strong&gt;BME280 sensor module&lt;/strong&gt; wired to an ESP32-cam (AI-Thinker) board as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-wiring-bme280.jpg&quot; alt=&quot;Wiring BME280&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Note that to use the VCC output pin as a 3.3V output pin, you need to make sure the board has a &lt;strong&gt;resistor connecting the two 3v3 pads&lt;/strong&gt; and nothing connecting the two 5V pads. This was indicated by the red arrow in the image above. From my experience, a resistor connecting the 3v3 pads is the default for all ESP32-cam AI-Thinker boards, meaning that it should output 3.3V by default and if you want to change it to 5V, you need to desolder the resistor between the 3v3 pads and solder it between the 5V pads.  However, make sure to double check this before wiring any peripheral that will use the VCC out pin from the board.&lt;/p&gt;

&lt;p&gt;Then, now that the board is running a customized firmware that should support the BME280 sensor module, all that we need to do is to configure its template to inform the program about (a) which GPIO pins the peripheral is using and (b) how the pins should be configured.&lt;/p&gt;

&lt;p&gt;To configure the ESP32-cam template, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a web-browser and go to the IP address of your Tasmota ESP32-cam;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the instructions in &lt;a href=&quot;#updating-the-template&quot;&gt;&lt;strong&gt;Updating the template&lt;/strong&gt;&lt;/a&gt; if you have not done that before. Afterwards, navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Other&lt;/strong&gt; &amp;gt; &lt;strong&gt;Other parameters&lt;/strong&gt; &amp;gt; &lt;strong&gt;Template&lt;/strong&gt; and make sure the &lt;strong&gt;Activate&lt;/strong&gt; is checked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to &lt;strong&gt;Configuration&lt;/strong&gt; &amp;gt; &lt;strong&gt;Configure Template&lt;/strong&gt;.  The name of the template should be the same one you specified in the previous step.  Remember that according to the wiring of the BME280 board, &lt;strong&gt;SDA&lt;/strong&gt; and &lt;strong&gt;SCL&lt;/strong&gt; are connected to pins &lt;strong&gt;GPIO14&lt;/strong&gt; and &lt;strong&gt;GPIO15&lt;/strong&gt;, respectively.  Therefore, &lt;strong&gt;find the GPIO14 pin&lt;/strong&gt; and instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I2C SDA&lt;/code&gt;; and similarly, &lt;strong&gt;find the GPIO15 pin&lt;/strong&gt; and instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I2C SCL&lt;/code&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;Currently, the default template for the ESP32-cam assigns SPI related components to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO14&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO15&lt;/code&gt;, as well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDCard CS&lt;/code&gt; component to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO13&lt;/code&gt;. If you are not using the micro-SD card, you can free-up all such pins by assigning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; component to them and then use them according to the needs of your peripherals. Be sure to test them thoroughly before sending the device to production because I’ve had a few issues with other pins that are supposedly safe to use–namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO12&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO16&lt;/code&gt; both causing boot loops.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-template-bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-template-bme280.jpg&quot; alt=&quot;BME280 template&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hit &lt;em&gt;Save&lt;/em&gt; and wait for the device to reboot. Once it comes back on, the firmware should automatically detect and configure the I2C device and on the &lt;strong&gt;Main Page&lt;/strong&gt;, there should be some of the metrics associated with the device.  Because we are connecting the board to a BME280 sensor module, the Main page will show measures for the ambient temperature, humidity, dew point, and pressure.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-bme280.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2021-01-15-Esp32cam-tasmota-webcam-server/esp32cam-bme280.jpg&quot; alt=&quot;ESP32-cam BME280&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Of course, different peripherals will show different metrics, buttons, sliders, etc., on the main page. As before, the camera stream should be available on the main page and via port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;81&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/stream&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cam.mjpeg&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes the tutorial on how to install and configure the Tasmota32 webcam server onto the ESP32-cam.  As usual, if you spot an error or want to share an idea, feel free to &lt;a href=&quot;/contact&quot;&gt;get in touch with me&lt;/a&gt;.  I try to keep my articles updated as much as possible to reflect my current understanding about the topic.  All such updates are noted in the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="iot" /><category term="esp32" /><category term="tasmota" /><category term="mqtt" /><category term="cam" /><category term="webcam" /><category term="surveillance" /><category term="wifi" /><category term="wireless" /><category term="network" /></entry><entry><title type="html">Repurposing external HDD enclosures into button boxes for the Raspberry Pi</title><link href="/blog/Rpi-button-box-ehdd-enclosure/" rel="alternate" type="text/html" title="Repurposing external HDD enclosures into button boxes for the Raspberry Pi" /><published>2020-12-18T12:08:00-03:00</published><updated>2020-12-18T12:08:00-03:00</updated><id>/blog/Rpi-button-box-ehdd-enclosure</id><content type="html" xml:base="/blog/Rpi-button-box-ehdd-enclosure/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Dec 18th, 2020&lt;/strong&gt;: Publication of the original guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hard disk drives (HDDs) are often sold in an external enclosure with easy-to-use interfaces as a detachable, semi-mobile data storage solution. Every so often, however, their price goes below the market price for an equivalent internal HDD and when that happens, many of us will buy them only to remove the HDD from its external enclosure and use it as a regular HDD in our PCs and servers–a practice called &lt;strong&gt;shucking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/amazon-seagate-4tb-ehdd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/amazon-seagate-4tb-ehdd.jpg&quot; alt=&quot;Amazon ad Seagate expansion 4tb&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what do you do with the external enclosure afterwards? Do you throw it away?  Well, you could do that but here I’ll show that such enclosures can be repurposed into nice looking &lt;strong&gt;button boxes&lt;/strong&gt; for most single board computers (SBCs).  More specifically, I’ll transform an old, shucked &lt;a href=&quot;https://www.newegg.com/seagate-expansion-4tb/p/N82E16822178354&quot;&gt;&lt;strong&gt;Seagate Expansion 4TB USB3.0 HDD&lt;/strong&gt; (STBV4000100)&lt;/a&gt; into a button box for the &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;&lt;strong&gt;Raspberry Pi&lt;/strong&gt; (RPi)&lt;/a&gt;. Here’s a preview of how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons.jpg&quot; alt=&quot;RPi and buttons&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot; alt=&quot;RPi and buttons - Closed 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed-2.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed-2.jpg&quot; alt=&quot;RPi and buttons - Closed 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first section of this tutorial, I described a few general points to consider when &lt;a href=&quot;#assessment&quot;&gt;planning your button box&lt;/a&gt;, such as whether the SBC fits, if it already has holes, and so on.  Then, I go into the specifics of my own case, such as the &lt;a href=&quot;#hardware&quot;&gt;hardware components&lt;/a&gt; of it (e.g., buttons, switches), the &lt;a href=&quot;#software&quot;&gt;software&lt;/a&gt; used (Pi OS and a Python button box controller), and finally, the &lt;a href=&quot;#assembly&quot;&gt;assembly&lt;/a&gt; of hardware and software into a functional button box.  If that sounds good, let’s get started.&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;. I do not recommend to use an external HDD enclosure as a button box to control &lt;strong&gt;mains power&lt;/strong&gt;.  None of those enclosures was designed to have 110-220V AC running inside of it and things might melt and catch fire, and of course, you don’t want someone to get electrocuted because of a loose mains cable.  Even though some of the buttons and switches might be rated 110-220V AC at 10A, for instance, to be safe, stick to &lt;strong&gt;low voltage DC&lt;/strong&gt; inside the button box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;assessment&quot;&gt;Assessment&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Does the enclosure have a &lt;strong&gt;flat surface&lt;/strong&gt; to attach the buttons?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the SBC &lt;strong&gt;fit&lt;/strong&gt; inside of the enclosure?&lt;/p&gt;

    &lt;p&gt;Height-wise, make sure there’s a little bit of room for the jumper cables that will be connected to the GPIO pins–&lt;em&gt;at least&lt;/em&gt; 5cm (roughly 2 inches) of space above the GPIO pins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the buttons fit inside the enclosure?&lt;/p&gt;

    &lt;p&gt;Some buttons have fairly long terminals that could hit the bottom of the enclosure once the lid is closed.  You also need to take into consideration that jumper cables will be soldered to the button’s terminal and might need additional room.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the SBC will go inside of the enclosure, does it have holes to &lt;strong&gt;remove hot air from inside&lt;/strong&gt;?&lt;/p&gt;

    &lt;p&gt;Depending on the SBC and usage, you might need to plan a small fan to remove the hot air generated by the board. However, this is likely not necessary for external HDD enclosures because heat will also harm HDDs and manufacturers will design their external cases with that in mind.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you repurpose some of the &lt;strong&gt;existing holes&lt;/strong&gt;?&lt;/p&gt;

    &lt;p&gt;It’s much easier to use existing holes than making new ones and they usually look better because the case was designed with them in mind, as opposed to the new ones.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is it &lt;strong&gt;safe to drill&lt;/strong&gt; holes in the enclosure?&lt;/p&gt;

    &lt;p&gt;Some materials can crack/break easily and a few can be harmful to you if you do not take the necessary precautions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;SBC:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspberry Pi 3B&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/rpi-model-3b.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/rpi-model-3b.jpg&quot; alt=&quot;RPi model 3B&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External HDD enclosure:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.newegg.com/seagate-expansion-4tb/p/N82E16822178354&quot;&gt;Seagate Expansion 4TB USB3.0 HDD (STBV4000100)&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/seagate-external-enclosure.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/seagate-external-enclosure.jpg&quot; alt=&quot;Seagate HDD enclosure&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/s?k=push+button&quot;&gt;Push buttons&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;02x Red push button&lt;/li&gt;
      &lt;li&gt;02x Black push button&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;02x Green push button&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/push-button.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/push-button.jpg&quot; alt=&quot;Push Button&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/s?k=toggle+switch&quot;&gt;Toggle switches&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;03x OFF/on toggle switch&lt;/li&gt;
      &lt;li&gt;02x Red safety cover for the toggle switch&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;01x “ON/OFF” label for the toggle switch&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/toggle-switch.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/toggle-switch.jpg&quot; alt=&quot;Toggle Switch&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;(https://www.amazon.com/s?k=active+buzzer)&quot;&gt;Buzzer&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;01x Active buzzer&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/buzzer.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/buzzer.jpg&quot; alt=&quot;Buzzer&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Cover:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/s?k=carbon+fiber+vinyl+wrap&quot;&gt;Textured vynil/PVC film&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;The size depends on the surface area you want to cover with it.  My suggestion is to use a &lt;strong&gt;thin&lt;/strong&gt; film instead of a thick layer because it is flexible and therefore, easy to attach to the enclosure.  By the way, these things are actually super useful to have around if you are into DIY projets.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/textured-vynil-film.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/textured-vynil-film.jpg&quot; alt=&quot;Vynil Film&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cables and related materials:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;18x &lt;a href=&quot;https://www.amazon.com/s?k=dupont+wires&quot;&gt;Female-X Dupont/jumper wires&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;The female side connects to GPIO pins and the other side can be whatever because is soldered to terminals or otherwise attached to them.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/jumper-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/jumper-cables.jpg&quot; alt=&quot;Jumper Cables&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;06x &lt;a href=&quot;https://www.amazon.com/s?k=heat+shrink+tube&quot;&gt;Heat shrink tube&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;Cut them in half to protect both terminals of each push button&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/heat-shrink-tube.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/heat-shrink-tube.jpg&quot; alt=&quot;Heat Shrink Tube&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;01x &lt;a href=&quot;https://www.amazon.com/s?k=electrical+tape&quot;&gt;Electrical tape&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/electrical-tape.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/electrical-tape.jpg&quot; alt=&quot;Electrical Tape&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other tools
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/s?k=soldering+kit&quot;&gt;Basic soldering kit&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/soldering-kit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/soldering-kit.jpg&quot; alt=&quot;Soldering Kit&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Any low power drill or even a manual &lt;a href=&quot;https://www.amazon.com/s?k=hand+drill&quot;&gt;hand drill&lt;/a&gt;: An electric drill will save you a lot of time.  For better results, use a step drill bit after making the center hole.&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/step-drill-bit.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/step-drill-bit.jpg&quot; alt=&quot;Step Drill Bit&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Operating System (OS):
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/&quot;&gt;Raspberry Pi OS Lite&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raspbian GNU/Linux 10 (buster)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lite edition&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Kernel: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.4&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Release date: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;December 2nd 2020&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Button box controller:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/cgomesu/rpi-button-box&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt;&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;A custom-made controller written in Python&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controller requirements:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.python.org&quot;&gt;Python&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.7.3&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt;&lt;/a&gt;: An interface to GPIO devices&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argparse&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/logging.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/signal.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess&lt;/code&gt;&lt;/a&gt;: Standard, built-in libraries&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optional:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/logrotate&quot;&gt;Logrotate&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.14.0&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Manage the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.log&lt;/code&gt; log files generated by the controller&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rpi-button-box-controller&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; controller&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Core program for a Raspberry Pi button box controller that uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; Python library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wrote this program with the current project in mind–that is, a 40-pins Raspberry Pi with six push buttons and three switches, one of them being a power on/off for the box–but hopefully, my comments and documentation will be enough to allow adapting the program to multiple types of button boxes.  In this section, I’ll explain the program’s main logic and its functionalities.  The installation procedure and usage examples are described in &lt;a href=&quot;#assembly&quot;&gt;assembly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; library is at the core of the button box controller.  The library makes it very easy to enable GPIO devices with just a few lines of code because it leaves much of the device configuration and cleanup procedures to the background.  All that we need to do is create objects for the GPIO devices of the appropriate class, which in our case is the &lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/api_input.html#button&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt;&lt;/a&gt; class and &lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/api_output.html#buzzer&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buzzer&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; controller’s main logic is explained next.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/opt/rpi-button-box/button-box.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%(asctime)s.%(msecs)03d %(levelname)s %(module)s : %(message)s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;datefmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%Y-%m-%d %H:%M:%S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Started the button box controller'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;The program starts by configuring and initializing the logging of controller-related events, such as whether button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G1&lt;/code&gt; was pressed, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO&lt;/code&gt; pins are being used, and so on. Then, it asks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_buttons&lt;/code&gt; for a list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buttons&lt;/code&gt; to be used by the controller, as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Loading buttons...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green #1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g1_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'black #1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b1_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'red #1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r1_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green #2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g2_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'g2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'black #2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b2_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdpressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'red #2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r2_pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'power'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s1_held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s1_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'middle S2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s2_held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s2_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdreleased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'right S3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s3_held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s3_released'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Buttons loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Notice that it starts by creating &lt;em&gt;new&lt;/em&gt; attributes for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; class, which are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd*&lt;/code&gt;. I found this to be useful when working with multiple buttons because it allows me to define events on a &lt;em&gt;per button basis&lt;/em&gt;.  For example, one might want to set different triggers for &lt;strong&gt;switches&lt;/strong&gt; and &lt;strong&gt;push buttons&lt;/strong&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; attribute will help differentiate those.  Similarly, one might want to execute a different command for a button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt; than a button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt;.  It goes without saying that if your box does not follow the same layout as mine, you have to edit this part of the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Going back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Trying to find a power switch...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'power'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Power switch found at {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Waiting for the power button ({}) to be turned ON...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Power switch was turned ON by user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hold_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# wait for the power button to enter is_held state
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In my original design for the button box, I had a toggle, on/off &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt; that I wanted to use to &lt;strong&gt;enable&lt;/strong&gt; and &lt;strong&gt;disable&lt;/strong&gt; the button box controller.  The code above handles the activation of the button box depending on the state of a button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;push_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'switch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;switches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_held&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_released&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_held&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_released&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Configured the switch button ({0}) at {1}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_released&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_released&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Configured the push button ({0}) at {1}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here, the program learns what triggers each button.  As mentioend before, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; attr is used to set different triggers for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; buttons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Of note, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_*&lt;/code&gt; properties will pass the device that activated it to a function that takes a single parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btn&lt;/code&gt;), and because there are multiple new attributes for each button object, it is possible to use a single function to control all buttons by reading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btn&lt;/code&gt; attributes.  For example, take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event_held&lt;/code&gt;, in which we have code for invoking an external command/script using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btn.cmdheld&lt;/code&gt; attribute:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;event_held&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The button labeled &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; at {1} was held'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Detected a HELD event by {0} : {1} button : {2}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Started running the following command: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Popen'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Finished invoking the script at &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Finished waiting for the following command: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdheld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Going back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'buzzer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'buzzer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Configured a buzzer at {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buzzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;This configures the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buzzer&lt;/code&gt; object to be activated whenever a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; button is pressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The button box is now turned ON. To close it, release the power button or press Ctrl+C.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The button box is ON and waiting for user input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Received a signal to stop.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOZeroError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GPIOZero error: {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;And finally, at the end of our main logic, the program is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pause&lt;/code&gt;d to wait for a user input to trigger an event (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_pressed&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_held&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when_released&lt;/code&gt;). This is a better alternative to using an infinite loop (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while True&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a little bit more to the code than that but this covers the most important aspects of it. &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box&quot;&gt;Check the repo for updates&lt;/a&gt;, &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box/discussions&quot;&gt;start a discussion&lt;/a&gt; if you had an idea, or &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box/issues&quot;&gt;open an issue&lt;/a&gt; if you’re having trouble with the program.&lt;/p&gt;

&lt;h1 id=&quot;assembly&quot;&gt;Assembly&lt;/h1&gt;

&lt;h2 id=&quot;installing-the-software&quot;&gt;Installing the software&lt;/h2&gt;

&lt;h3 id=&quot;raspberry-pi-os&quot;&gt;Raspberry Pi OS&lt;/h3&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&quot;&gt;the official instructions to install the Raspberry Pi OS&lt;/a&gt;. If you don’t feel like it, here’s a brief summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the image file from the official repository.&lt;/li&gt;
  &lt;li&gt;Verify checksum.  On Linux distros, run the following, changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img.zip&lt;/code&gt; for the filename of the downloaded OS zipped image:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sha256sum img.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Flash onto a microSD card with &lt;a href=&quot;https://www.balena.io/etcher/&quot;&gt;balenaEtcher&lt;/a&gt; or similar application.&lt;/li&gt;
  &lt;li&gt;For headless access, add an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; file to the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boot&lt;/code&gt; drive.&lt;/li&gt;
  &lt;li&gt;Insert the microSD card into the RPi and boot it up.&lt;/li&gt;
  &lt;li&gt;Find the RPi IP and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh pi@IP&lt;/code&gt; and the default passwd is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raspberry&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Config the RPi with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo raspi-config&lt;/code&gt; (locale, time, wireless, etc.) then &lt;strong&gt;reboot it&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Reconnect to the RPi and update the package list &amp;amp;&amp;amp; upgrade all eligible pkgs, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot the device once again and you’re done!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;python3-rpi-button-box-and-installing-the-requirements&quot;&gt;Python3, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt;, and installing the requirements&lt;/h3&gt;
&lt;p&gt;The button box controller was developed for the Lite version of the &lt;a href=&quot;https://www.raspberrypi.org/software/&quot;&gt;Raspberry Pi OS&lt;/a&gt; but it should work with other similar systems for single board computers (e.g., &lt;a href=&quot;https://www.armbian.com/&quot;&gt;Armbian&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The following instructions assume you’re logged in with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pi&lt;/code&gt; user with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; permission. (This is not a requirement but if different, make sure to change file permissions accordingly.  This applies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; service file and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logrotate/button-box&lt;/code&gt; config as well.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; to install required programs
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install git python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Clone the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; repo in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo git clone https://github.com/cgomesu/rpi-button-box.git
sudo chown -R pi rpi-button-box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Python libraries from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install -r /opt/rpi-button-box/requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;If you get a warning that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.local/bin&lt;/code&gt; is not in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, then add it to your existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; as follows:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=/home/pi/.local/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;and then append it to your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;export PATH=/home/pi/.local/bin:$PATH&quot; | tee -a /home/pi/.bashrc &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.py&lt;/code&gt; and read its usage
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/rpi-button-box
./button-box.py -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If you wish to skip to a more detailed description of the button box controller, go to &lt;a href=&quot;#using-the-button-box-controller&quot;&gt;Using the button box controller&lt;/a&gt; section in this tutorial.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;configure-logrotate&quot;&gt;Configure logrotate&lt;/h3&gt;
&lt;p&gt;(Optional.) The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; controller generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.log&lt;/code&gt; file upon execution where it stores a couple of controller-related messages, such as initialization configs and button presses, releases, and so on.  Over time, this file will grow forever unless you manually rotate it.  Obviously, you don’t need to do that.  The easiest way to rotate log files in a GNU/Linux system is to configure &lt;a href=&quot;#&quot;&gt;logrotate&lt;/a&gt; to manage your log files.  I’ve already written such a config file for the button box controller (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logrotate.d/button-box&lt;/code&gt;).  To enable it, just copy the config to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/logrotate.d/&lt;/code&gt; directory, as follows&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /opt/rpi-button-box/logrotate.d/button-box /etc/logrotate.d/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want, you can edit the rotation settings in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box&lt;/code&gt;.  The default should be good enough though.&lt;/p&gt;

&lt;h2 id=&quot;building-the-button-box&quot;&gt;Building the button box&lt;/h2&gt;
&lt;p class=&quot;notice notice--danger&quot;&gt;&lt;strong&gt;ATTENTION.&lt;/strong&gt;  If you have never used a drill before, take a few minutes to learn about best practices first.  When drilling holes into the case, make sure to secure the case very well before you begin.  When soldering cables to terminals, use a fan to move the fumes away from you and anyone else.  Wash your hands very well afterwards.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;REMINDER.&lt;/strong&gt;  Inside the button box, stick to &lt;strong&gt;low voltage DC&lt;/strong&gt;.  External HDD enclosures were not made to house mains power and unless you have taken the time to learn how to handle it, do not tinker with it.&lt;/p&gt;

&lt;p&gt;After the &lt;a href=&quot;#assessment&quot;&gt;assessment&lt;/a&gt;, it’s DIY time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start by drawing the location of each button on the box.  Use a ruler and pencil.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-drawing.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-drawing.jpg&quot; alt=&quot;Drawing&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Then, drill the holes and check that the buttons fit them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cut the vynil film and attach it to the surface of your button box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the holes by gently pressing the surface of the vynil film.  Then, get a scissors or other cutting tool and either cut a circle where the hole is or cut an X where the hole is and fold the vynil film inwards.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the buttons to the enclosure.  It should look like this now:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-buttons.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-buttons.jpg&quot; alt=&quot;Buttons&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Flip the case and it’s time to solder the jumper cables to each button terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tricks for working with dupont cables:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/eI3fxTH6f6I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Because the buttons use a common ground, you &lt;em&gt;could&lt;/em&gt; solder them together (terminal to terminal or splicing). However, if you want to reuse the buttons for another project in the future, or simply replace one of them, this will make it much harder to do that.  I wanted to make each button detachable without any desoldering, so I used the following idea for a custom-made header:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/OC3aAuhU3og&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If your heat shrinking tubes are pretty long, cut them.  Also, remember to insert the tubes into the cable before soldering.  (For a hobbyist like me, it’s very easy to forget that. Ugh!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If at all possible, use different colors for ground (black, grey) and live/vcc (any thing else).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After it’s all done, it should look like this:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering.jpg&quot; alt=&quot;Soldered Cables&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering-2.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-soldering-2.jpg&quot; alt=&quot;Soldered Cables 2&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you have a &lt;a href=&quot;https://www.amazon.com/s?k=multimeter&quot;&gt;multimeter&lt;/a&gt;, &lt;strong&gt;test all your connections&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the dupont cables to the RPi GPIO pins according to the following wiring schema:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/button-box-wiring.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/button-box-wiring.jpg&quot; alt=&quot;Wiring&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;This uses the &lt;strong&gt;internal pull-up resistor&lt;/strong&gt; to simplify the wiring (&lt;a href=&quot;https://gpiozero.readthedocs.io/en/stable/_modules/gpiozero/input_devices.html&quot;&gt;enabled by default in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; class of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; Python library&lt;/a&gt;). Otherwise, check the wiring on my &lt;a href=&quot;https://github.com/cgomesu/rpi-buttons&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-buttons&lt;/code&gt;&lt;/a&gt; repo for an example of how to wire &lt;strong&gt;current-limiting&lt;/strong&gt; (1k ohms) resistors and &lt;strong&gt;pull-down&lt;/strong&gt; (10k ohms) resistors.  However, if you choose the latter alternative, you’ll have to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpiozero&lt;/code&gt; deafult settings for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Secure the cables as much as possible:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-secure.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-secure.jpg&quot; alt=&quot;Securing the Cables&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Before closing the box&lt;/strong&gt;, &lt;a href=&quot;#using-the-button-box-controller&quot;&gt;test your button box controller&lt;/a&gt;.  Remember that once closed, these cases are not meant to be (easily) opened.  If there’s anything that needs to be connected to the Raspberry Pi, this is the time to do so.  For example, I wanted to make extra GPIO pins available to an LCD and added power and ethernet cable extensions:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-extra-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/diy-extra-cables.jpg&quot; alt=&quot;Extra Cables&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Once you got everything working as intended&lt;/strong&gt;, close the box.  Try to leave the area where the cpu heatsink is as clear as possible.  Be gentle when closing the box and guide the cables where they should be while closing the box (use a pen or something).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-12-08-Rpi-button-box-ehdd-enclosure/preview-rpi-and-buttons-closed.jpg&quot; alt=&quot;RPi and buttons - Closed 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go play with it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-the-button-box-controller&quot;&gt;Using the button box controller&lt;/h2&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: button-box.py [-h] [--buzzer BUZZER] [--cmd {Popen,run}]
                     [--g1_pressed G1_PRESSED] [--g1_released G1_RELEASED]
                     [--s1_held S1_HELD] [--s1_released S1_RELEASED] [-i] [-d]

RPi button box controller. Repo: https://github.com/cgomesu/rpi-button-box

optional arguments:
  -h, --help            show this help message and exit
  --buzzer BUZZER       If installed, the buzzer's GPIO number.
  --cmd {Popen,run}     Popen: run external scripts in a NON-BLOCKING fashion.
                        run: run external scripts in a BLOCKING fashion.
                        Default=run
  --g1_pressed G1_PRESSED
                        /path/to/script to run when G1 is pressed. The
                        --btn_pressed arg is available to other PUSH buttons
                        as well.
  --g1_released G1_RELEASED
                        /path/to/script to run when G1 is released. The
                        --btn_released arg is available to other PUSH buttons
                        as well.
  --s1_held S1_HELD     /path/to/script to run when S1 is held. The
                        --btn_held arg is available to other SWITCHES as well.
  --s1_released S1_RELEASED
                        /path/to/script to run when S1 is released. The
                        --btn_released arg is available to other SWITCHES as
                        well.
  -i, --info            Show the board information.
  -d, --debug           Print additional messages to the terminal.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned, there are &lt;strong&gt;hidden arguments&lt;/strong&gt; for passing external scripts to be executed upon a button event, such as pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G2&lt;/code&gt;, or releasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3&lt;/code&gt;.  More specifically, in addition to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--g1_*&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s1_*&lt;/code&gt; args shown in the help output, the program accepts args for any of the other seven buttons, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;script for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pressed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;released&lt;/code&gt; events: the &lt;strong&gt;push buttons&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--g1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--b1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--r1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--g2_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--b2_*&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--r2_*&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;script for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;held&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;released&lt;/code&gt; events: the &lt;strong&gt;switches&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s1_*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s2_*&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--s3_*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The script generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.log&lt;/code&gt; log file to keep track of controller-related events.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Output info about the board
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the controller in debug mode (prints more messages to the terminal) and enable the buzzer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPIO4&lt;/code&gt;)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py -d --buzzer 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the controller with a buzzer and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/rpi-button-box/scripts/template.sh&lt;/code&gt; whenever the push button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R2&lt;/code&gt; is &lt;strong&gt;pressed&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py --buzzer 4 \
--r2_pressed '/opt/rpi-button-box/scripts/template.sh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Same as before, but don’t wait for the external script to finish running (&lt;strong&gt;non-blocking&lt;/strong&gt; command execution):
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py --buzzer 4 --cmd Popen \
--r2_pressed '/opt/rpi-button-box/scripts/template.sh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;run-the-controller-as-a-service&quot;&gt;Run the controller as a service&lt;/h3&gt;
&lt;p&gt;If you’re using options different than the default values, first edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd/button-box.service&lt;/code&gt; file to include those options into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecStart=&lt;/code&gt; command execution.  (Reminder: If you’ve installed Python3 libraries with a user different than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pi&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpi-button-box&lt;/code&gt; dir is owned by another user, you’ll have to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd/button-box.service&lt;/code&gt; file to reflect such changes. Otherwise, you will run into errors related to permission.) Then, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.py&lt;/code&gt; as a service, as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd/button-box.service&lt;/code&gt; file to your systemd directory
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /opt/rpi-button-box/systemd/button-box.service /lib/systemd/system/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable the service and start it
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable button-box.service
sudo systemctl start button-box.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Check the service status to make sure it’s running without issues
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status button-box.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bash-script-template&quot;&gt;Bash script template&lt;/h3&gt;
&lt;p&gt;I’ve included a template for bash scripts on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scripts/template.sh&lt;/code&gt; that anyone can use to create their customized set of commands to run upon a button event.  Just copy the template, rename it, edit it according to your needs, and when running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button-box.py&lt;/code&gt; controller, add the full path to the new script to one (or more) of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--btn_*&lt;/code&gt; arguments.  For example:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./button-box.py --buzzer 4 \
--g1_pressed '/opt/rpi-button-box/scripts/notification.sh' \
--b1_pressed '/opt/rpi-button-box/scripts/switch_cameras.sh' \
--r1_pressed '/opt/rpi-button-box/scripts/lights_toggle.sh' \
--g2_pressed '/opt/rpi-button-box/scripts/test_connectivity.sh' \
--b2_pressed '/opt/rpi-button-box/scripts/shutdown.sh' \
--r2_pressed '/opt/rpi-button-box/scripts/reboot.sh' \
--s2_held '/opt/rpi-button-box/scripts/alarm_on.sh' \
--s2_released '/opt/rpi-button-box/scripts/alarm_off.sh' \
--s3_held '/opt/rpi-button-box/scripts/emergency.sh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;alternatives-to-python&quot;&gt;Alternatives to Python&lt;/h2&gt;
&lt;p&gt;There are many other languages you can use to make your own button box controller. &lt;a href=&quot;https://nodered.org/&quot;&gt;&lt;strong&gt;Node-RED&lt;/strong&gt;&lt;/a&gt;, for example, is a nice alternative to users unfamiliarized with programming languages.  It uses flow-based programming and has built-in input nodes for the RPi GPIO pins, which makes programming a button box a matter of connecting a line between two nodes.  Also, it makes very easy to create a web dashboard for your button-box that you can access from anywhere.  Check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This conlcudes the tutorial on how to repurpose an old external HDD enclosure into a button box for the Raspberry Pi (or any other SBC).  Check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.  If you have any questions, feel free to &lt;a href=&quot;/contact/&quot;&gt;get in touch with me&lt;/a&gt;.  For anything related to the controller, please visit the &lt;a href=&quot;https://github.com/cgomesu/rpi-button-box&quot;&gt;rpi-button-box repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="DIY" /><category term="raspberrypi" /><category term="rpi" /><category term="hdd" /><category term="enclosure" /><category term="button" /><category term="box" /></entry><entry><title type="html">Mesh networking: A guide to using free and open-source software with common hardware</title><link href="/blog/Mesh-networking-openwrt-batman/" rel="alternate" type="text/html" title="Mesh networking: A guide to using free and open-source software with common hardware" /><published>2020-12-07T12:10:00-03:00</published><updated>2020-12-07T12:10:00-03:00</updated><id>/blog/Mesh-networking-openwrt-batman</id><content type="html" xml:base="/blog/Mesh-networking-openwrt-batman/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;May 4th, 2022&lt;/strong&gt;: Marc (&lt;a href=&quot;https://www.youtube.com/channel/UCG5Ph9Mm6UEQLJJ-kGIC2AQ&quot;&gt;OneMarcFifty&lt;/a&gt;) has published a video tutorial describing how to configure OpenWrt and batman-adv via &lt;strong&gt;LuCI&lt;/strong&gt;, which is only possible because he also wrote a package that gives luci support for the batman-adv protocol (&lt;a href=&quot;https://github.com/openwrt/luci/tree/master/protocols/luci-proto-batman-adv&quot;&gt;luci-proto-batman-adv&lt;/a&gt;).  I added a reference to Marc’s tutorial at the end of the &lt;a href=&quot;#other-similar-mesh-solutions&quot;&gt;Other similar mesh solutions&lt;/a&gt; section.&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;February 4th, 2022&lt;/strong&gt;: Updated the &lt;a href=&quot;#hardware-specific-configurations&quot;&gt;Hardware-specific configurations&lt;/a&gt; section to include info about an issue affecting the &lt;a href=&quot;https://openwrt.org/toh/gl.inet/gl-ar750&quot;&gt;GL-AR750&lt;/a&gt; and the &lt;a href=&quot;https://openwrt.org/toh/avm/avm_fritz_wlan_repeater_1750e&quot;&gt;AVM Fritz!WLAN Repeater 1750E&lt;/a&gt;.  Also, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; troubleshooting instructions were slightly modified to make them more general.  Thanks to JF and Erik for testing and letting me know about the affected devices and solutions.&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;January 1st, 2022&lt;/strong&gt;: Added a new section called &lt;a href=&quot;#advanced-features&quot;&gt;Advanced features&lt;/a&gt; to cover &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; features not previously described in the basic implementation section.  The first included feature was the use of &lt;a href=&quot;#multi-links&quot;&gt;multi-links&lt;/a&gt; to improve performance and reliability.  The subsection includes examples and a how-to for the implementation of multi-links.  In addition, I changed the Linksys reference in &lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt; to the more stable &lt;a href=&quot;https://openwrt.org/toh/linksys/ea8300&quot;&gt;Linksys EA8300&lt;/a&gt; as reference of a high-end device.  I’ve not personally used it but have read reports of good experience with it by the OpenWrt forum user &lt;a href=&quot;https://forum.openwrt.org/u/16F84&quot;&gt;16F48&lt;/a&gt;, for example.&lt;/p&gt;
&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;October 6th, 2021&lt;/strong&gt;: The guide was completely updated to make it consistent with the current stable release, namely &lt;strong&gt;OpenWrt 21.02&lt;/strong&gt;.  In brief, most of the changes had to do with the &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#new_network_configuration_syntax_and_boardjson_change&quot;&gt;&lt;strong&gt;new network syntax&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#increased_minimum_hardware_requirements8_mb_flash_64_mb_ram&quot;&gt;&lt;strong&gt;increased hardware requirements&lt;/strong&gt;&lt;/a&gt;.  More specifically, OpenWrt 21.02 drops the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt; and make a more clear distinction between layer 2 and layer 3 configurations in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file. In addition, the minimum requirements to run OpenWrt are now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8MB&lt;/code&gt; of flash memory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64MB&lt;/code&gt; of RAM.  The latter change prompted me to use a new TP-Link router for the examples, namely the TL-WDR4300, instead of the old WR1043ND (v1). This new router is still a low-end device, which makes very affordable and easy to find worldwide, but contrary to the WR1043ND, it is actually a &lt;em&gt;dual-band&lt;/em&gt; router.  This was an opportunity to illustrate wireless segmentation for mesh vs. non-mesh communication, which is something I think is almost required in most use cases, so &lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/segmentation.jpg&quot;&gt;the new guide makes use of it by default&lt;/a&gt;. I also took this opportunity to update many, many other things.  To mention two main ones: (a) at the end of the &lt;a href=&quot;#openwrt-installation-and-initial-configuration&quot;&gt;OpenWrt installation and initial configuration&lt;/a&gt; section, there’s now a description of how to build custom images that contain all the required mesh packages; and (b) the section &lt;a href=&quot;#bonus-content-moving-from-openwrt-19-to-21&quot;&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/a&gt; was update to help users who followed the earlier version of this guide to transition to the new release. This was a big one and took a few days to get it done.  Hope you find it useful!&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;September 16th, 2021&lt;/strong&gt;: Updated the information about OpenWrt 21 in the section &lt;a href=&quot;#bonus-content-moving-from-openwrt-19-to-21&quot;&gt;&lt;strong&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/strong&gt;&lt;/a&gt;.  In brief, DSA support is still very limited and OpenWrt has officially started rolling out version 21 with the &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0&quot;&gt;release of OpenWrt 21.02&lt;/a&gt;. I’m currently testing the new version and network configuration on a few devices and once I get everything running as well as it was in version 19, I will update the entire article to reflect the new (and current) configuration.  It is, of course, still possible to download and use &lt;a href=&quot;https://downloads.openwrt.org/releases/19.07.8/targets/&quot;&gt;the latest OpenWrt 19 images&lt;/a&gt;, which should be just fine for a long time still.  However, if you want to make use of OpenWrt 21, then read the aforementioned bonus section for guidance on the syntax changes and updated hardware requirements.&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;July 6th, 2021&lt;/strong&gt;: Added information about transitioning from OpenWrt 19 (current stable release) to OpenWrt 21 (next stable release) to a new section called &lt;a href=&quot;#bonus-content-moving-from-openwrt-19-to-21&quot;&gt;&lt;strong&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/strong&gt;&lt;/a&gt;.  In brief, the &lt;em&gt;next&lt;/em&gt; stable release includes changes to the network configuration syntax that are incompatible with this guide.  Once the release version 21 becomes the &lt;em&gt;current&lt;/em&gt; stable, however, I will update the main guide to reflect those changes.  In the meantime, I added a few references to the OpenWrt forum that should help anyone interested in using version 21 instead of 19.  Thanks to &lt;a href=&quot;https://forum.openwrt.org/u/SteveNewcomb&quot;&gt;Steve&lt;/a&gt; for testing and sharing his &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; configuration running on OpenWrt 21.&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Feb 17th, 2021&lt;/strong&gt;: Per a reader’s suggestion (Joshua), I added a &lt;a href=&quot;#vi-cheat-table&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; cheat table&lt;/a&gt; that has a summary of the main commands, and in the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/a&gt; section, I included additional instructions on how to copy and paste the configuration files from one mesh node to another using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;.  (Alternatively, it’s also possible to do so using Luci’s backup/restore option.)&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Jan 9th, 2021&lt;/strong&gt;, Update #2: Added instructions on how to automatically upgrade all installed packages with a single command.  This information is in &lt;a href=&quot;#updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Jan 9th, 2021&lt;/strong&gt;, Update #1: Added a new section about &lt;a href=&quot;#hardware-specific-configurations&quot;&gt;hardware-specific configurations&lt;/a&gt; that are sometimes required for enabling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode of operation.&lt;/p&gt;
&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Dec 7th, 2020&lt;/strong&gt;: Publication of the original guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this tutorial, we will learn how to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;&lt;strong&gt;mesh networks&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;IEEE 802.11s&lt;/strong&gt;&lt;/a&gt;) using &lt;a href=&quot;https://openwrt.org/&quot;&gt;&lt;strong&gt;OpenWrt&lt;/strong&gt;&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_link_layer&quot;&gt;layer-2&lt;/a&gt; implementation of the &lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;, called &lt;a href=&quot;https://www.kernel.org/doc/html/v4.15/networking/batman-adv.html&quot;&gt;&lt;strong&gt;batman-adv&lt;/strong&gt;&lt;/a&gt;.  All the software mentioned here is &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;open-source&lt;/strong&gt;, as opposed to commercial alternatives (&lt;a href=&quot;https://unifi-mesh.ui.com&quot;&gt;UniFi Mesh&lt;/a&gt; or &lt;a href=&quot;https://store.google.com/us/product/nest_wifi&quot;&gt;Google’s Nest Wifi&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is not meant to be an exhaustive presentation of any of the covered topics. If you have suggestions on how to improve this guide, feel free to &lt;a href=&quot;/contact/&quot;&gt;get in touch with me&lt;/a&gt;. I’m always eager to learn new things and share them. Also, I plan on updating this article every once in a while to best reflect my knowledge about the topics covered here and to add information provided by the readers. Check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-am-i-writing-this-guide&quot;&gt;Why am I writing this guide?&lt;/h1&gt;
&lt;p&gt;Even though the concept of mesh networking has been around for quite some time now, the documentation of its implementation is still scarce/nichey, proprietary, or outdated.  I don’t feel qualified to speculate on why this is so but I find it odd because many of the radio devices found in popular wireless routers actually support mesh networking–but the original firmware rarely supports it.&lt;/p&gt;

&lt;p&gt;My intention with this tutorial is to help closing the gap between concept and implementation of mesh networking using up-to-date software that anyone can download and install on cheap, commonly available hardware–primarily consumer wireless routers (from old to new, single- or multi-band) but the principles should be extendable to any cellphones, laptops, PCs or servers running &lt;strong&gt;Linux&lt;/strong&gt;.  The content is partially based on my own experience and builds upon the work of other, much more talented individuals who shared their knowledge on the Web.  More specifically, the content is notably influenced by the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brian Innes workshop about using Raspberry Pis to create a mesh network for sharing sensor data wirelessly (&lt;a href=&quot;https://github.com/binnes/WiFiMeshRaspberryPi&quot;&gt;Github repo&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Andreas Spiess &lt;a href=&quot;https://www.youtube.com/watch?v=TY6m6fS8bxU&quot;&gt;LoRa mesh project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maintaners of the &lt;a href=&quot;https://openwrt.org/docs/start&quot;&gt;OpenWRT documentation&lt;/a&gt; and the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;B.A.T.M.A.N. wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Multiple users from the OpenWrt forum who shared their opinions over the years. To name a few,  the users &lt;a href=&quot;https://forum.openwrt.org/u/jeff&quot;&gt;jeff&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/mcarni&quot;&gt;mcarni&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/oavaldezi&quot;&gt;oavaldezi&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/slh&quot;&gt;slh&lt;/a&gt;, and many others. Thanks for keeping the posts public.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Get familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; files in OpenWrt devices (namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireless&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;) to quickly and permanently configure mesh nodes.&lt;/li&gt;
  &lt;li&gt;Edit files directly from the terminal using the default text editor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Configure OpenWrt devices to play one of three possible roles in the network: (a) mesh node, (b) mesh + bridge node, or (c) mesh + gateway node.&lt;/li&gt;
  &lt;li&gt;Install and configure the Kernel module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on an OpenWrt device using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt; package manager.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to test, debug, and monitor connectivity within the mesh.&lt;/li&gt;
  &lt;li&gt;Use two radios to segment mesh (5Ghz) from non-mesh (2.4Ghz) wireless communication.&lt;/li&gt;
  &lt;li&gt;Add encryption to the mesh network with the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-wolfssl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use VLANs to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; networks within the mesh using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;From this point forward, the article is divided into four main parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/a&gt;: &lt;em&gt;Optional for advanced users.&lt;/em&gt; Brief introduction to just enough network concepts to allow the implementation of simple mesh networks. When appropriate, a link to the relevant OpenWrt documentation was also provided.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the hardware used in the examples and recommendations for those who are planning on buying new/used devices for their mesh project.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the software used in the examples.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt;: &lt;em&gt;Required&lt;/em&gt;. Step-by-step procedure to configure mesh nodes, bridges, and gateways.  It goes from flashing OpenWrt to configuring VLANs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;. You probably came here for this part.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/h1&gt;

&lt;h2 id=&quot;main-network-definitions&quot;&gt;Main network definitions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mesh &lt;a href=&quot;https://en.wikipedia.org/wiki/Node_(networking)&quot;&gt;node&lt;/a&gt;: Any network device that is connected to the mesh network and that helps routing data to (and from) mesh clients.  Here, however, if a mesh node acts as a bridge or gateway, it will always be referred by the latter role, even though by definition, mesh bridges and mesh gateways are also mesh nodes.&lt;br /&gt;
In addition, even though it’s possible to route mesh traffic via cable, in this tutorial, &lt;em&gt;all mesh nodes are also wireless devices&lt;/em&gt;, meaning that they have access to a radio with &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;mesh point&lt;/strong&gt; (802.11s)&lt;/a&gt; capabilities.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;Learn about the OpenWrt wireless config &lt;strong&gt;/etc/config/wireless&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridging_(networking)&quot;&gt;Bridge&lt;/a&gt;: A network device that joins any two or more network interfaces (e.g., LAN Ethernet and wireless) into a single network.  Here, when a device is referred to as a bridge, it means that in addition to being a mesh node, the only other thing it does is bridge interfaces.  But of course, a gateway &lt;em&gt;device&lt;/em&gt;, such as a router with a built-in modem, or a firewall appliance, may also work as a bridge for multiple interfaces. The distinction in the examples is just used to highlight its main role in the network.  Therefore, a mesh bridge in this tutorial is a mesh node that simply bridges the mesh network with a WiFi access point  for non-mesh clients, for example, or its LAN ports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gateway_(telecommunications)&quot;&gt;Gateway&lt;/a&gt;: A network device that translates traffic from one network (LAN) to another (WAN) and here, acts as both a &lt;strong&gt;firewall&lt;/strong&gt; and &lt;strong&gt;DHCP server&lt;/strong&gt;.  (If there’s more than one DHCP server in the same network, they assign IPs to different ranges, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.1-100&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.101-200&lt;/code&gt;, and so on.)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;Learn about the OpenWrt network config &lt;strong&gt;/etc/config/network&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt;: In brief, a system for translating domain names (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgomesu.com&lt;/code&gt;) into IP addresses (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.108.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.109.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.110.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.111.153&lt;/code&gt;). DNS filtering systems, such as &lt;a href=&quot;https://pi-hole.net/&quot;&gt;PiHole&lt;/a&gt;, work by catching such requests–usually sent through port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt;–and checking if the domain is blacklisted or not.  In this tutorial, we will always use an external DNS server, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.1.1.1&lt;/code&gt; (Cloudflare) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt; (Google), but if you have your own DNS resolver, feel free to use it instead when configuring your mesh network but then make sure the mesh network/VLAN has access to its address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&quot;&gt;DHCP&lt;/a&gt;: An IP management system that dynamically assigns layer-3 addresses for devices connected to a network. For instance, it might dynamically assign IPs between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.255&lt;/code&gt; (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) to any devices connected to LAN. Of note, because this is a network layer protocol, it uses IP addresses, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; uses MAC addresses because it works at the data link layer (and therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; actually doesn’t need DHCP and IPs to discover and manage mesh clients but we’re going to use them to make it more intuitive and easier to integrate mesh with non-mesh clients).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;Learn about the OpenWrt DNS and DHCP config &lt;strong&gt;/etc/config/dhcp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Firewall_(computing)&quot;&gt;Firewall&lt;/a&gt;: A network system that monitors and controls network traffic, such as specifying rules for incoming WAN traffic (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deny all&lt;/code&gt;), outgoing LAN traffic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept all&lt;/code&gt;), geoblocking and IP filtering systems, intrusion prevention/detection systems (&lt;a href=&quot;https://suricata-ids.org/&quot;&gt;Suricata&lt;/a&gt;), and so on.  &lt;a href=&quot;https://opnsense.org/&quot;&gt;OpenSense&lt;/a&gt; and &lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense&lt;/a&gt; are examples of dedicated firewall software. If a mesh node is acting as a mesh gateway, it’s imperative to configure the firewall or your mesh network will likely end up without access to external networks (e.g., WAN) and their services (e.g., DNS servers).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;Learn about the OpenWrt firewall config &lt;strong&gt;/etc/config/firewall&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_LAN&quot;&gt;VLAN&lt;/a&gt;: A &lt;em&gt;virtual&lt;/em&gt; LAN that is partitioned and isolated in a network at the layer-2 level.  They are often followed by an integer to differentiate each other (e.g., VLAN 1, VLAN 50) and used to better manage network clients that belong to different groups (e.g., administrators, IoT devices, security cameras, guests).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-topologies&quot;&gt;Network topologies&lt;/h2&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zbqrNg4C98U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;mesh-networks&quot;&gt;Mesh networks&lt;/h2&gt;

&lt;h3 id=&quot;what-are-mesh-networks&quot;&gt;What are mesh networks?&lt;/h3&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/tYLU755T6_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;where-can-i-learn-more-about-mesh-networking&quot;&gt;Where can I learn more about mesh networking?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Wikipedia articles about &lt;a href=&quot;https://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;mesh networking&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;wireless mesh networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scholar.google.com/scholar?q=mesh+networking&quot;&gt;Peer-reviewed papers or books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing-protocols&quot;&gt;Routing protocols&lt;/h3&gt;
&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network#Protocols&quot;&gt;dozens of algorithms&lt;/a&gt; for routing packets in a mesh network.  A few notable ones are the Optimized Link State Routing (OLSR) and the Hybrid Wireless Mesh Protocol (HWMP).&lt;/p&gt;

&lt;p&gt;In this tutorial, however, we will cover only one of them, called &lt;a href=&quot;https://en.wikipedia.org/wiki/B.A.T.M.A.N.&quot;&gt;&lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;B.A.T.M.A.N.&lt;/strong&gt;), because &lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/batman-adv.html&quot;&gt;it has long been incorporated into the Linux Kernel&lt;/a&gt; and is thus easily enabled on Linux devices.  It is also a &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;fairly well-documented&lt;/a&gt; algorithm that &lt;a href=&quot;https://www.open-mesh.org/projects/open-mesh/activity&quot;&gt;has been continuously improved&lt;/a&gt; over the years.  Another noteworthy feature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; is its lack of reliance on layer-3 protocols for managing mesh clients because it works at the layer-2 and its ability to create VLANs.  Think of it as if it were a big, smart, virtual switch, in which its VLANs are port-based segmentations.  If you want an interface to use a particular mesh VLAN, just “plug it” into the approriate port of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; switch (e.g., bridge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; to give the guest network access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN ID #2).&lt;/p&gt;

&lt;h4 id=&quot;batman-adv&quot;&gt;batman-adv&lt;/h4&gt;
&lt;p&gt;As mentioned before, B.A.T.M.A.N. has gone through multiple changes over the years, which means that there are actually &lt;em&gt;multiple versions of the algorithm&lt;/em&gt;. I’ve had a good experience with &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/BATMAN_IV&quot;&gt;&lt;strong&gt;B.A.T.M.A.N. IV&lt;/strong&gt;&lt;/a&gt; and therefore, the examples here make use of it.  However, you are free to try whatever version you want and even run them in parallel to each other, by assigning a different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface to each version of the algorithm (versions are chosen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option routing_algo&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file for each enabled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface).&lt;/p&gt;

&lt;p&gt;Config-wise, there’s very little to do because the default settings should work very well in most environments.  One exception is when you have multiple gateways in the network to provide high availability, for example, and you might want to let each mesh node know about them and their speeds to better route the mesh traffic.  This requires setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt;, for example.  Many other tweaks that are not covered here are &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Doc-overview#Protocol-Documentation&quot;&gt;described in their wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;batctl&quot;&gt;batctl&lt;/h4&gt;
&lt;p&gt;Another very cool feature of B.A.T.M.A.N. is the ability to test, debug, monitor, and set settings with the package &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;&lt;/a&gt;.  A few noteworthy options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ping mesh node/client with its MAC address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:00&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/tcpdump&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;&lt;/a&gt; for all mesh traffic in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Prints useful stats for all mesh traffic, such as sent and received bytes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Shows the neighboring mesh nodes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Displays the gateway servers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt;) in the mesh network
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl gwl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It goes without saying that if you want to dive deep into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, you should take a good look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes used in the various implementations had the following hardware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;: &lt;a href=&quot;https://www.tp-link.com/us/home-networking/wifi-router/tl-wdr4300/&quot;&gt;TP-Link TL-WDR4300&lt;/a&gt; v1.0 - v1.7
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;SoC&lt;/strong&gt;: Atheros AR9344&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;WLAN Hardware&lt;/strong&gt;: Dual-band (Atheros AR9344, Atheros AR9580)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;560 Mhz&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Flash memory&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8 MB&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;RAM&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128 MB&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-tl-wdr4300-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-tl-wdr4300-front.jpg&quot; alt=&quot;TL-WDR4300 front&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-tl-wdr4300-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-tl-wdr4300-back.jpg&quot; alt=&quot;TL-WDR4300 back&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a low-end, Atheros-based &lt;em&gt;dual-band&lt;/em&gt; router that satisfies the &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#increased_minimum_hardware_requirements8_mb_flash_64_mb_ram&quot;&gt;minimum hardware requirements imposed by OpenWrt 21&lt;/a&gt;–namely, at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8MB&lt;/code&gt; of flash memory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64MB&lt;/code&gt; of RAM.  However, the general ideas presented here should apply to &lt;strong&gt;any wireless device&lt;/strong&gt; that meets the following criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compatible with the latest OpenWRT version. Refer to their &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Hardware List&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has access to a radio that supports the &lt;strong&gt;mesh point&lt;/strong&gt; (&lt;strong&gt;802.11s&lt;/strong&gt;) mode of operation. If you already have OpenWrt installed on a wireless device, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt; and search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; under &lt;strong&gt;Supported interface modes&lt;/strong&gt;, or simply check if the following command outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* mesh point&lt;/code&gt; below the name of a detected radio (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy1&lt;/code&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list | grep -ix &quot;^wiphy.*\|^.*mesh point$&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If it does, then the associated radio can be configured as a mesh point.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you’re looking for devices to buy and experiment on, my suggestion is to look for high-end dual-band wireless routers to allow a better segmentation of the wireless networks.  If you can afford spending more for a mesh node, look for tri-band devices.  Netgear and Linksys have solid options that are compatible with OpenWrt. For example, the &lt;a href=&quot;https://openwrt.org/toh/linksys/ea8300&quot;&gt;Linksys EA8300&lt;/a&gt; tri-band wireless router would make for a good high-end mesh node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-ea8300.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-ea8300.jpg&quot; alt=&quot;Linksys EA8300&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For single-board computer (SBC) fans like me, you can run OpenWrt with most of them and then use a combination of on-board wireless and USB adapter to create a powerful mesh node. &lt;a href=&quot;https://shop.solid-run.com/product-category/embedded-computers/marvell-family/clearfog-base-pro/&quot;&gt;ClearFog boards&lt;/a&gt; with one or two mini PCIe wireless cards would make very good candidates for such a project, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot; alt=&quot;ClearFog Pro&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you can install OpenWrt on bare metal x86-64 machines (e.g., standard PC or server running Intel/AMD), which will give you lots of options to put together an impressive mesh device. However, if you just want your work/home laptops/PCs to &lt;em&gt;be part of the mesh&lt;/em&gt; (i.e., become a mesh node), there are better alternatives than installing OpenWrt as its OS.  For example, you can run OpenWrt with a &lt;a href=&quot;https://openwrt.org/docs/guide-user/virtualization/start&quot;&gt;virtual machine&lt;/a&gt; or as a &lt;a href=&quot;https://github.com/openwrt/docker&quot;&gt;docker container&lt;/a&gt;.  Naturally, it’s also possible to configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on Linux distributions other than OpenWrt, such as Arch, Debian, and Ubuntu.  See &lt;a href=&quot;#getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on any Linux device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned before, even if the existing/on-board radio of your SBC/laptop/PC/server does not support the mesh point mode of operation, you can always buy a compatible PCIe card or USB adapter to turn your device into a mesh node and then use the other radio for another purpose.  For example, many &lt;a href=&quot;https://www.alfa.com.tw/&quot;&gt;Alfa Network&lt;/a&gt; adapters can operate in mesh point mode, like the cheap AWUS036NH:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot; alt=&quot;Alfa AWUS036NH&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All that said, most home users will be just fine with a cheapo, used, old, and single-band router.  For a brand reference, TP-Link has good and affordable devices that can be used in a mesh networking project without issues.  If you’re new to this, start from here (small, simple) and think about efficiency over power.  You don’t need to drive a Lamborghini to get a snack at the grocery store. For additional resources, skip to the section called &lt;a href=&quot;#useful-hardware-resources&quot;&gt;Useful hardware resources&lt;/a&gt; down below.&lt;/p&gt;

&lt;h2 id=&quot;hardware-specific-configurations&quot;&gt;Hardware-specific configurations&lt;/h2&gt;
&lt;p&gt;Every once in a while, users run into hardware that is capable of operating in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode but the default OpenWrt firmware uses a module for the wireless adapter that is loaded with incompatible parameters.  Here is a list of a few of the known ones and their solution.&lt;/p&gt;

&lt;h3 id=&quot;ath9k-modules&quot;&gt;ath9k modules&lt;/h3&gt;
&lt;p&gt;If your device uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt; module, there’s a chance that you’ll need to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; parameter of the module to use the mesh &lt;em&gt;with encryption&lt;/em&gt;.  First, however, try without changing the default module parameters.  After rulling out possible typos in the network and wireless configuration files, try the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules.d/ath9k&lt;/code&gt; file and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt=1&lt;/code&gt; to it.  If there’s something in the file, use a whitespace to separate parameters.&lt;/li&gt;
  &lt;li&gt;Save the file, and &lt;strong&gt;reboot&lt;/strong&gt; your device.&lt;/li&gt;
  &lt;li&gt;Once the device comes back, check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is now enabled by typing
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /sys/module/ath9k/parameters/nohwcrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is enabled, the output will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;; otherwise, it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check your mesh configuration once again and add encryption to your wireless mesh stanza.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Known affected devices:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;brand&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;model&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;OpenWrt release&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;WR-1043-ND&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1.8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;19.07&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ath10k-modules&quot;&gt;ath10k modules&lt;/h3&gt;
&lt;p&gt;I’ve noticed that radio devices that use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; module and more specifically, the ones using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k-firmware-qca988x-ct&lt;/code&gt;, are not able to operate in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode by default.  If you check the syslog (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logread&lt;/code&gt;), you’ll notice that there will be a few messages stating that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath10k&lt;/code&gt; module must be loaded with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rawmode=1&lt;/code&gt; to allow mesh.  However, I’ve tried that before without much success.  Instead, my current recommendation to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; working with any of the &lt;strong&gt;QCA988x&lt;/strong&gt; hardware is the following (&lt;strong&gt;Internet connection required&lt;/strong&gt; to download packages via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt;):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Check which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath&lt;/code&gt; module is installed via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed | grep -i ath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should show at least one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath*-firmware-qca988*&lt;/code&gt; and another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-ath*&lt;/code&gt; packages installed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Try official &lt;strong&gt;alternatives&lt;/strong&gt; to them:
    &lt;ul&gt;
      &lt;li&gt;For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath*-firmware-qca988*&lt;/code&gt; alternatives, check the &lt;a href=&quot;https://openwrt.org/packages/index/firmware&quot;&gt;OpenWrt Firmware index&lt;/a&gt; for similar ones and favor the ones that match your hardware (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QCA9887&lt;/code&gt;) before trying the more generic ones (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QCA988x&lt;/code&gt;).&lt;/li&gt;
      &lt;li&gt;For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-ath*&lt;/code&gt; alternatives, check &lt;a href=&quot;https://openwrt.org/packages/index/kernel-modules&quot;&gt;OpenWrt Kernel Modules index&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Of note, if the installed modules are &lt;strong&gt;Candela Tech&lt;/strong&gt; (contain the suffix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-ct&lt;/code&gt;), then (a) remove the -ct packages and (b) install compatible non-ct ones.  For the &lt;em&gt;TP-Link Archer C7&lt;/em&gt;, for instance, you can replace the -ct module as follows:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
opkg remove ath10k-firmware-qca988x-ct kmod-ath10k-ct
opkg install ath10k-firmware-qca988x kmod-ath10k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot your device and then check the status of your mesh network afterwards. If that does not work, check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logread&lt;/code&gt; again and if possible, try another module until you find a good one.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Known affected devices:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;brand&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;model&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;version&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;OpenWrt release&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;AVM&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;FRITZ!WLAN Repeater 1750E&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;21.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;GL.iNet&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;GL-AR750&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;21.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Archer C7&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2.0, 4.0, 5.0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;19.07, 21.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;TP-Link&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Archer C7 US&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;19.07, 21.02&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;useful-hardware-resources&quot;&gt;Useful hardware resources&lt;/h2&gt;
&lt;p&gt;These are a few resources that I’ve used in the past that you might find useful when looking for mesh compatible devices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OpenWrt&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/toh/buyerguide&quot;&gt;Buyers’ Guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/toh/views/toh_extended_all&quot;&gt;Extended Table of Hardware&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Linux Wireless wiki&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;The wiki has a list of &lt;a href=&quot;https://wireless.wiki.kernel.org/en/users/drivers&quot;&gt;existing Linux wireless &lt;em&gt;drivers&lt;/em&gt;&lt;/a&gt; that mention whether it supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; or not.  To search for specific &lt;em&gt;devices&lt;/em&gt;, my recommendation is to (a) open the page of a driver that supports mesh (e.g., &lt;a href=&quot;https://wireless.wiki.kernel.org/en/users/drivers/ath10k&quot;&gt;ath10k&lt;/a&gt;), then (b) look for &lt;a href=&quot;https://wireless.wiki.kernel.org/en/users/drivers/ath10k#supported_devices&quot;&gt;supported devices&lt;/a&gt; under it, and finally, (c) go to OpenWrt’s &lt;a href=&quot;https://openwrt.org/toh/views/toh_extended_all&quot;&gt;Extended Table of Hardware&lt;/a&gt; and in &lt;strong&gt;WLAN Hardware&lt;/strong&gt;, enter a supported device found on the Linux Wireless wiki (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QCA9880&lt;/code&gt;). This will &lt;a href=&quot;https://openwrt.org/toh/views/toh_extended_all?dataflt%5BWLAN+Hardware*%7E%5D=QCA9880&quot;&gt;create a filter&lt;/a&gt; to show only devices that contain the given hardware and should provide you a starting point for further research.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes were running the following software:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot; alt=&quot;OpenWrt default SSH welcome&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Operating System&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Firmware&lt;/strong&gt;: OpenWrt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21.02.0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r16279-5cc0535800&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Linux kernel&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.4.143&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Packages mentioned in the tutorial&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/batctl-default&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-full&lt;/code&gt;&lt;/a&gt;: 2021.1-1&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/kmod-batman-adv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;&lt;/a&gt;: 5.4.143+2021.1-4&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/wpad-mesh-wolfssl&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-wolfssl&lt;/code&gt;&lt;/a&gt;: 2020-06-08-5a8b3662-35&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find out the version of all installed packages, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you prefer to filter the output, use grep.  For example, the following will show the version of all installed packages containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed | grep bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Huge differences in firmware, kernel, or package versions &lt;em&gt;might&lt;/em&gt; make the implementation of a mesh network a little bit different than the way it was explained here.  Of note, devices running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; &lt;strong&gt;version 2019.0-2 and older&lt;/strong&gt; are certainly incompatible with the instructions found in this tutorial, the reason being that the module was modified after then to better integrate with the &lt;a href=&quot;https://openwrt.org/docs/techref/netifd&quot;&gt;network interface daemon&lt;/a&gt;.  Fortunately, the implementation using old modules is just a simple as with the latest one. &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Batman-adv-openwrt-config#Batman-adv-20190-2-and-older&quot;&gt;Check what the B.A.T.M.A.N. wiki has to say about it&lt;/a&gt;.  However, it’s worth mentioning that with old batman modules, changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; will likely require a reboot instead of simply reloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/init.d/network&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I’ve noticed that when installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will install a minimal version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-tiny&lt;/code&gt;, that lacks some of the options mentioned here (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batnctl o&lt;/code&gt;).  However, if you install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; first and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will preserve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;, which has most of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; features.  In this tutorial, however, we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-full&lt;/code&gt; package that contains all features referred to in the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-wolfssl&lt;/code&gt; will conflict with the already installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic-wolfssl&lt;/code&gt; package (or any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic*&lt;/code&gt; package, for that matter).  This means &lt;strong&gt;you have to remove the latter before installing the former&lt;/strong&gt;.  To remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic-wolfssl&lt;/code&gt; or any other conflicting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package, simply type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vi-text-editor&quot;&gt;VI text editor&lt;/h2&gt;
&lt;p&gt;The default text editor in a standard OpenWrt image is &lt;a href=&quot;https://en.wikipedia.org/wiki/Vi&quot;&gt;&lt;strong&gt;vi&lt;/strong&gt;&lt;/a&gt;, which is an old, screen oriented editor that most modern users will find counterintuitive to use.  Fortunately, once you get the hang of it, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; becomes very easy to use and it becomes a very convenient way of editing config files.  Here’s all that you need to know about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in a terminal:&lt;/p&gt;

&lt;p&gt;You can open a file by adding the filename as an argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if the file does not exist, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will create one with that name.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will start in &lt;strong&gt;command mode&lt;/strong&gt;.  Such a mode let’s you navigate the file with the arrow keys and use the &lt;em&gt;delete button&lt;/em&gt; to delete characters.  (Also, in command mode, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; to delete entire lines, which is very useful if you need to delete lots of things quickly.)&lt;/p&gt;

&lt;p&gt;However, if you need to type characters and have more flexibility to edit the file, you need to tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; to enter &lt;strong&gt;insert mode&lt;/strong&gt;.  To enter insert mode, type (no need to hit return/enter afterwards)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the bottom of the screen, you will see that it now shows a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; to indicate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; is in insert mode.  You can now type freely and even paste multiple things at once in insert mode.&lt;/p&gt;

&lt;p&gt;When you’re done, press the button &lt;strong&gt;Esc&lt;/strong&gt; to go back into command mode.  Notice that at the bottom of the screen, now there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; was, which tells you you’re in command mode once again.&lt;/p&gt;

&lt;p&gt;In command mode, you can then &lt;strong&gt;write changes to the file&lt;/strong&gt; by typing (followed by return/enter)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ve saved the file. To quit, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can &lt;em&gt;write and quit&lt;/em&gt; by simply typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; has other commands as well but honestly, that’s pretty much all that you need to know about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in order to use in the examples covered here.  Give it a try!&lt;/p&gt;

&lt;h3 id=&quot;vi-cheat-table&quot;&gt;VI cheat table&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mode&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;key/command&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Enter &lt;em&gt;insert&lt;/em&gt; mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;insert&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Esc&lt;/code&gt; key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Return to &lt;em&gt;command&lt;/em&gt; mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; (or hold &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; key)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Erase entire row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Write to file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quit to terminal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quit without saving changes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; + Enter/Return&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Write to file and quit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;alternatives-to-vi&quot;&gt;Alternatives to VI&lt;/h3&gt;
&lt;p&gt;Now, if you still don’t like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, you can always transfer files from your laptop/PC to OpenWrt via sftp, for example, or utilities like &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_copy_protocol&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;In this section, we will see how to configure &lt;strong&gt;four mesh nodes&lt;/strong&gt; in &lt;strong&gt;three different network topologies&lt;/strong&gt;. More specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Bridge&lt;/strong&gt;: A mesh network in which one node plays the role of a mesh gateway and another, of a bridge, while the remaining are just mesh nodes.  This is a very typical scenario for a home or small office, for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bridge-Bridge&lt;/strong&gt;: Two nodes play the role of a bridge, therefore making the mesh network transparent to the external (non-mesh) networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Gateway&lt;/strong&gt;: Two nodes play the role of a gateway to provide high-availability to mesh clients/nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In all such cases, we will use the &lt;strong&gt;5Ghz&lt;/strong&gt; radio exclusively for &lt;em&gt;mesh&lt;/em&gt; wireless traffic, while the more widely compatible &lt;strong&gt;2.4Ghz&lt;/strong&gt; radio, as well as Ethernet connections, will be left available for &lt;em&gt;non-mesh&lt;/em&gt; wireless traffic:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/segmentation.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/segmentation.jpg&quot; alt=&quot;Segmentation&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Segmentation of mesh vs. non-mesh traffic &lt;strong&gt;is not a requirement&lt;/strong&gt; but an option that greatly improves performance. If your mesh devices do not support dual-band, simply assign the same radio for both mesh and non-mesh wireless interfaces.&lt;/p&gt;

&lt;p&gt;First, however, we will start with the aspects that are common to all topologies, such as planning the mesh network, and the installation and basic configuration of OpenWrt mesh nodes.  Then, we will move to the specifics of each of the aforementioned mesh network topologies.  Finally, we end the section with a slightly more complex scenario to illustrate how to create &lt;strong&gt;mesh VLANs&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; and a very brief introduction to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on other Linux distros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though the examples show static nodes, &lt;strong&gt;none of the mesh nodes need to be static&lt;/strong&gt;. The mesh network and its components can be partially or totally mobile. For example, if some of your nodes are mobile units (e.g., vehicles, drones, robots, cellphones, laptops), they can leave and join the mesh, recreate the mesh elsewhere, join a completely different mesh, and so on.  The routing algorithm (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;) will automatically (and  seamlessly) take care of changes to the network topology. (But of course, if there’s a single gateway and it does not reach any node, the network is bound to stop working as intended without proper configuration to handle such scenarios.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot; alt=&quot;Topology - Moving nodes&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;p&gt;Just like any other type of network, deploying a mesh network–especially over large areas, with dozens of nodes–requires a fair deal of planning; Otherwise, you are bound to experience, for instance, bottlenecks, uneven access point signal quality, and unstable WAN connectivity across the mesh.  Also, features like &lt;strong&gt;high availability&lt;/strong&gt; go well beyond the configuration and topology of a mesh network (e.g., power source, whre your WAN connections are coming from, and the hardware you are using all play important roles when it comes to high availability).  Mesh networks are very, very easy to scale but planning is key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eli the Computer Guy&lt;/em&gt; has an old video about mesh networks that goes into things like high availability and bottlenecks.  If that matters to you, take a look. The relevant content &lt;strong&gt;starts at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;03:30&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;ends at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17:30&lt;/code&gt;&lt;/strong&gt;, approximately.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/T7fJwAyALss&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;The examples in this tutorial are simple &lt;em&gt;by design&lt;/em&gt;–they were created to illustrate different scenarios in a way that makes it easy to understand what is going on. The idea is to use the examples as templates for more complex implementations.&lt;/p&gt;

&lt;h2 id=&quot;openwrt-installation-and-initial-configuration&quot;&gt;OpenWrt installation and initial configuration&lt;/h2&gt;
&lt;p&gt;Now that you have the hardware, the first thing to do is to install OpenWrt.  Flashing a default OpenWrt image onto a &lt;strong&gt;compatible device&lt;/strong&gt; is a very &lt;strong&gt;easy and safe procedure&lt;/strong&gt; because it’s been tested multiple times.  (For extra safety precautions, you might want to search the web for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;your-device&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openwrt&lt;/code&gt; to see if there’s any indexed forum post or comment regarding installation issues and bugs, for example.)&lt;/p&gt;

&lt;p&gt;If you’re &lt;strong&gt;new to all this&lt;/strong&gt;, the folks at OpenWrt were kind enough to provide a plethora of instructions on &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/start&quot;&gt;how to install and uninstall OpenWrt&lt;/a&gt; and even put together an &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/generic.flashing#installation_checklist&quot;&gt;&lt;strong&gt;installation checklist&lt;/strong&gt;&lt;/a&gt;.  At the very least, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look for your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Table of Hardware&lt;/strong&gt;&lt;/a&gt; and open its &lt;strong&gt;Device Page&lt;/strong&gt; (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wdr4300_v1&quot;&gt;TP-Link TL-WDR4300&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;Double check that the &lt;strong&gt;model and version&lt;/strong&gt; match your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;strong&gt;Supported Versions&lt;/strong&gt; table;&lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;Installation&lt;/strong&gt; table, you will find a column called &lt;em&gt;Firmware OpenWrt Install URL&lt;/em&gt; and another one called &lt;em&gt;Firmware OpenWrt Upgrade URL&lt;/em&gt;. If your device is &lt;strong&gt;still running the original firmware&lt;/strong&gt;, then download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Install&lt;/strong&gt; URL&lt;/em&gt; column; otherwise, download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Upgrade&lt;/strong&gt; URL&lt;/em&gt; column.  Both files should have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bin&lt;/code&gt; extension;&lt;/li&gt;
  &lt;li&gt;Regardless of the binary file downloaded, &lt;a href=&quot;https://openwrt.org/docs/guide-quick-start/verify_firmware_checksum&quot;&gt;&lt;strong&gt;verify its checksum&lt;/strong&gt;&lt;/a&gt; afterwards;&lt;/li&gt;
  &lt;li&gt;Disconnect your laptop/PC from any access point or switch, and connect your laptop/PC directly to the device’s Ethernet port.&lt;/li&gt;
  &lt;li&gt;Open your device’s web UI, go to its Settings and/or find the &lt;strong&gt;Firmware Upgrade&lt;/strong&gt; option. Then, select the downloaded OpenWrt binary, and let it do its thing. Once it’s done, the device will reboot with OpenWrt installed.&lt;/li&gt;
  &lt;li&gt;You should now be able to reach your new OpenWrt device at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; if connected to a LAN port. (Remember that all wireless interfaces are disabled by default, so you can only reach it via cable.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice--success&quot;&gt;If you followed these steps and successfully flashed the default OpenWrt firmware onto your device, then go ahead and skip to the &lt;a href=&quot;#initial-configuration&quot;&gt;Initial configuration&lt;/a&gt; section.  The remaining part of this section is meant for advanced users who want to customize their image files.&lt;/p&gt;

&lt;p&gt;If you’re an &lt;strong&gt;experienced user&lt;/strong&gt;, you can use &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/imagebuilder&quot;&gt;OpenWrt’s Image Builder&lt;/a&gt; to create a customized image that contains all the necessary packages and configuration files by default.  This can save you a lot of time by letting you skip either partially or completely the remaining configuration instructions, depending on the level of specification of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make image&lt;/code&gt; build command.&lt;/p&gt;

&lt;p&gt;To build a custom image file, first &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/imagebuilder#prerequisites&quot;&gt;install the dependencies&lt;/a&gt; for your Linux distribution.  Afterwards, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find the target for your device in the device’s OpenWrt page.  For instance, for the &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wdr4300_v1&quot;&gt;TP-Link TL-WDR4300 v1&lt;/a&gt;, the target is &lt;em&gt;ath79/generic&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Navigate to the root of the available targets for the latest version of the OpenWrt 21.02 release (e.g., &lt;a href=&quot;https://downloads.openwrt.org/releases/21.02.0/targets/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21.02.0&lt;/code&gt;&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;Navigate to the root of your device’s target (e.g., for the TL-WDR4300, that would be &lt;a href=&quot;https://downloads.openwrt.org/releases/21.02.0/targets/ath79/&quot;&gt;&lt;em&gt;ath79&lt;/em&gt;&lt;/a&gt; &amp;gt; &lt;a href=&quot;https://downloads.openwrt.org/releases/21.02.0/targets/ath79/generic/&quot;&gt;&lt;em&gt;generic&lt;/em&gt;&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;Go to the &lt;strong&gt;Supplementary Files&lt;/strong&gt; table at the bottom;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download the image builder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; file (e.g., &lt;a href=&quot;https://downloads.openwrt.org/releases/21.02.0/targets/ath79/generic/openwrt-imagebuilder-21.02.0-ath79-generic.Linux-x86_64.tar.xz&quot;&gt;openwrt-imagebuilder-21.02.0-ath79-generic.Linux-x86_64.tar.xz&lt;/a&gt;) and check its hash afterwards:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sha256sum openwrt-imagebuilder-*.tar.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 6354c0380a8cdb2c6a7f43449a7f6b3d04c4148478752a90f2af575ee182d2bb  openwrt-imagebuilder-21.02.0-ath79-generic.Linux-x86_64.tar.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If everything looks good, extract the image builder:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tar -xvf openwrt-imagebuilder-*.tar.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter the image builder directory to start using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; and then search for your device’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROFILE&lt;/code&gt; name (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tplink_tl-wdr4300-v1&lt;/code&gt;), as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd openwrt-imagebuilder-*
 make info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tplink_tl-wdr4300-v1:
   TP-Link TL-WDR4300 v1
   Packages: kmod-usb2 kmod-usb-ledtrig-usbport
   hasImageMetadata: 1
   SupportedDevices: tplink,tl-wdr4300-v1 tl-wdr4300
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;For long lists, you might want to filter the output via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;.  For example, to show only entries that contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wdr4300&lt;/code&gt;, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make info | grep -i wdr4300&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build customized images for your device’s profile. (See below for a table with a list of specific packages to add and to remove if you want to enable batman mesh support by default.)  For example, to build images for the &lt;strong&gt;TL-WDR4300 (v1)&lt;/strong&gt; &lt;em&gt;without&lt;/em&gt; pppoe and IPv6 support and &lt;em&gt;with&lt;/em&gt; a minimal LuCI and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; mesh support, run the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make image&lt;/code&gt; command:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; make image PROFILE=tplink_tl-wdr4300-v1 \
   PACKAGES=&quot;uhttpd uhttpd-mod-ubus libiwinfo-lua luci-base luci-app-firewall luci-mod-admin-full luci-theme-bootstrap \
   -ppp -ppp-mod-pppoe \
   -ip6tables -odhcp6c -kmod-ipv6 -kmod-ip6tables -odhcpd-ipv6only \
   -wpad-basic-wolfssl wpad-mesh-wolfssl \
   batctl-full kmod-batman-adv&quot; \
   CONFIG_IPV6=n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;Notice that the prefix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; is meant to inform that the package should be &lt;em&gt;removed&lt;/em&gt; from the default image of the chosen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROFILE&lt;/code&gt;. In addition, the inclusion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_IPV6=n&lt;/code&gt; is optional and only used here to completely disable the IPv6 configuration in the example.  Other &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/saving_space#modifying_build_configuration_variables&quot;&gt;build configuration variables&lt;/a&gt; are also optional and can be modified by adding them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make image&lt;/code&gt; command.  For more detailed information, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make help&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This will prompt your system to start downloading the required packages and then start building the firmware.  &lt;strong&gt;Be patient&lt;/strong&gt; because this operation can take several minutes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the builder is done &lt;strong&gt;without any errors&lt;/strong&gt;, navigate to the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/targets/&amp;lt;target&amp;gt;&lt;/code&gt; that contains the built image files, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;target&amp;gt;&lt;/code&gt; is the device’s target.  For the TL-WDR4300, for instance, the target is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath79/generic&lt;/code&gt;, which means the built files are at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/targets/ath79/generic&lt;/code&gt; and you can navigate to it from the image builder root directory as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd ./bin/targets/ath79/generic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice--info&quot;&gt;Of note, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.manifest&lt;/code&gt; file contains a list of installed packages, which is useful if you need to double check which packages a given image contains by default.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profiles.json&lt;/code&gt; file contains even more detailed information about the built image but it is in json format.  If you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; installed, however, you can parse it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat profiles.json | jq .&lt;/code&gt; to get a more readable version.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Personally, I like to copy all generated files to a location outside the image builder.  To create a new location for the built images in your user’s Downloads directory, do as follows (suggested structure is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openwrt-custom-images/&amp;lt;release&amp;gt;/&amp;lt;device&amp;gt;&lt;/code&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir ~/Downloads/openwrt-custom-images \
  ~/Downloads/openwrt-custom-images/21.02 \
  ~/Downloads/openwrt-custom-images/21.02/tl-wdr4300_v1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Then copy all generated files to the new directory outside the image builder:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp ./* ~/Downloads/openwrt-custom-images/21.02/tl-wdr4300_v1/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now you can safely go back to the root of the image builder directory and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make clean&lt;/code&gt; to delete all generated files.  This is good practice if building multiple images with different features.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;From this part forward, the procedure is the same as outlined before for the &lt;strong&gt;default installation&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lastly, to save additional firmware space and RAM, &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/saving_space&quot;&gt;follow the OpenWrt recommendation&lt;/a&gt; and at the end of the package list, add the following to enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; and include support for mesh encryption (e.g., use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sae&lt;/code&gt; to authenticate mesh nodes):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;action&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;package&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;remove mesh encryption conflict&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-wpad-basic-wolfssl&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;add mesh encryption&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-wolfssl&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;add the full batctl&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-full&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;add batman-adv&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;initial-configuration&quot;&gt;Initial configuration&lt;/h3&gt;
&lt;p&gt;As mentioned before, we &lt;strong&gt;will not use the web UI&lt;/strong&gt; in this tutorial, even if the OpenWrt image you’re using has LuCI installed by default.  Instead, we will access our device and configure it using only &lt;strong&gt;SSH&lt;/strong&gt;.  So, open a terminal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into your OpenWrt device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; is your OpenWrt device’s IP address (that’s usually the case after a fresh install but if it’s different, use the proper IP then). Because this is the first time using the system, you’ll need to set a password for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user.  You can do that by typing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and following the instructions.  At this point, it’s good practice to label this device (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node01&lt;/code&gt;) and take note of its &lt;strong&gt;MAC address&lt;/strong&gt;.  To find out the latter, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and keep a record of the device’s name and its MAC address–if there are multiple different addresses, take note of all of them and their interface.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;. &lt;a href=&quot;https://openwrt.org/docs/guide-user/security/dropbear.public-key.auth&quot;&gt;Configure key-based authentication&lt;/a&gt; and &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dropbear&quot;&gt;disable password login&lt;/a&gt;. Reboot and check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; access methods are correctly configured.)&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;From this point forward, we will start editing files using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.  If you’ve not read the &lt;a href=&quot;#vi-text-editor&quot;&gt;section about how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;&lt;/a&gt; yet, this is a good time to do so.&lt;/p&gt;

&lt;h3 id=&quot;default-config-for-the-hardware&quot;&gt;Default config for the hardware&lt;/h3&gt;
&lt;p&gt;Regardless of the hardware, &lt;strong&gt;before doing anything related to the mesh network&lt;/strong&gt;, always take your time and &lt;strong&gt;study the default configuration&lt;/strong&gt; found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt;.  For reference, I usually go over the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many Ethernet ports?&lt;/li&gt;
  &lt;li&gt;Are they labeled either LAN or WAN or there’s both?&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, how is the router handling multiple Ethernet ports? If there’s both LAN and WAN, how is the router separating LAN from WAN?&lt;/li&gt;
  &lt;li&gt;If there is both LAN and WAN, how is the firewall handling them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;? (Probably two zones, LAN and WAN, with LAN-&amp;gt;WAN accept all but WAN-&amp;gt;LAN deny all?)&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;, how is the device handling IP addresses?  (Is there a DHCP server for LAN?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, look at the wireless settings (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many radio devices and their names? (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Configuration-wise, what is the device using by default vs. what is it capable of? (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Is the radio enabled or disabled? (Keep/add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option disabled 1&lt;/code&gt; to disable it before configuration; to re-enable, simply comment this line out or set the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;Are there pre-configured wireless access points being broadcast?  If yes, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option network&lt;/code&gt; is it using by default? (Likely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; or whatever the LAN interface is being called in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, many wireless routers have LAN and WAN ports which are handled by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; configuration with VLANs enabled to separate LAN from WAN.  Take note of it;  understand what is going on in the config files;  play with them;  then, continue.  Also, take this opportunity to go over the &lt;strong&gt;Device Page&lt;/strong&gt; to check if there’s any warnings or special configuration notes.&lt;/p&gt;

&lt;p&gt;This understanding is instrumental to the way the device will be configured to play different roles in the mesh network and a good grasp of the device’s default settings will greatly reward you later on.&lt;/p&gt;

&lt;h3 id=&quot;updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/h3&gt;
&lt;p&gt;(&lt;em&gt;Only experienced users&lt;/em&gt;: If you used a default image, this is a good opportunity to remove unnecessary packages. See the OpenWrt FAQ for a reference of &lt;a href=&quot;https://openwrt.org/faq/which_packages_can_i_safely_remove_to_save_space&quot;&gt;safe to remove packages&lt;/a&gt;, for example. If this is your first time playing with mesh, leave any unmentioned pkg alone until you get everything working as intended.)&lt;/p&gt;

&lt;p&gt;In order to update and install packages, you need to give your device &lt;strong&gt;temporary access to the Internet&lt;/strong&gt;.  More often than not, if you have an existing network with access to the Internet on-site, then just connect the device to a router/switch via cable.  If that doesn’t work, go ahead and configure your device to act like a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt;&lt;/a&gt; first.  You can check that the device has access to the Internet by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt;ing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, it’s time to &lt;strong&gt;update the package list&lt;/strong&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. Upgrade all installed packages. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; to find which packages can be upgraded and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg upgrade PKG&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKG&lt;/code&gt; is the package name.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; run into memory issues, try commenting out a few lines in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/opkg/distfeeds.conf&lt;/code&gt; and try again. Alternatively, it’s possible to use the following command to automatically upgrade all packages at once, per the &lt;a href=&quot;https://openwrt.org/docs/guide-user/additional-software/opkg#examples&quot;&gt;opkg openwrt wiki examples&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-upgradable | cut -f 1 -d ' ' | xargs opkg upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Be careful with mass upgrades though&lt;/strong&gt;, especially if you’re running a device with limited memory.  You might end up even bricking your device.&lt;/p&gt;

&lt;p&gt;Now, let’s install the mesh-related packages and remove conflicting packages.  First, remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic-wolfssl&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic-wolfssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-full&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-wolfssl&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg install batctl-full kmod-batman-adv wpad-mesh-wolfssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;It is up to you whether to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-wolfssl&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;. For a detailed description of the main differences, take a look at the &lt;a href=&quot;https://www.wolfssl.com/docs/wolfssl-openssl/&quot;&gt;wolfSSL documentation&lt;/a&gt;.  In brief, wolfSSL was built for embedded systems–such as most consumer routers–and it is lighter and more frequently patched than OpenSSL. OpenSSL is much older and more general purpose.&lt;/p&gt;

&lt;p&gt;Make sure there are no error messages and if there are, troubleshoot them before proceeding.&lt;/p&gt;

&lt;p&gt;Remove the connection that gave your device temporary access to the Internet.  Then, &lt;strong&gt;reboot&lt;/strong&gt; (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and restart the SSH session with your laptop/PC still connected to the device via cable.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;Depending on your hardware, you might run into issues while trying to make one or multiple radios operate in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode, owing to loaded modules and their default parameter values.  Keep a close look at your device’s syslog file (run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logread&lt;/code&gt; to output it to the terminal) for kernel related errors.  In addition, take a look at the section &lt;a href=&quot;#hardware-specific-configurations&quot;&gt;Hardware-specific configurations&lt;/a&gt; for any comments related to the module used by your OpenWrt device.&lt;/p&gt;

&lt;h2 id=&quot;mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/h2&gt;
&lt;p&gt;It is time to configure the basics of our mesh network and nodes.  To do so, we will edit multiple files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; but first, let’s find out the capabilities of the detected radios in our wireless device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will output something like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Wiphy phy1
        wiphy index: 1
        max # scan SSIDs: 4
        max scan IEs length: 2261 bytes
        max # sched scan SSIDs: 0
        max # match sets: 0
        Retry short limit: 7
        Retry long limit: 4
        Coverage class: 0 (up to 0m)
        Device supports AP-side u-APSD.
        Device supports T-DLS.
        Available Antennas: TX 0x7 RX 0x7
        Configured Antennas: TX 0x7 RX 0x7
        Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * monitor
                 * mesh point
                 * P2P-client
                 * P2P-GO
                 * outside context of a BSS
        Band 2:
                Capabilities: 0x11ef
                        RX LDPC
                        HT20/HT40
                        SM Power Save disabled
                        RX HT20 SGI
                        RX HT40 SGI
                        TX STBC
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-23
                Frequencies:
                        * 5180 MHz [36] (17.0 dBm)
                        * 5200 MHz [40] (17.0 dBm)
                        * 5220 MHz [44] (17.0 dBm)
                        * 5240 MHz [48] (17.0 dBm)
                        * 5260 MHz [52] (21.0 dBm) (radar detection)
                        * 5280 MHz [56] (21.0 dBm) (radar detection)
                        * 5300 MHz [60] (21.0 dBm) (radar detection)
                        * 5320 MHz [64] (21.0 dBm) (radar detection)
                        * 5500 MHz [100] (21.0 dBm) (radar detection)
                        * 5520 MHz [104] (21.0 dBm) (radar detection)
                        * 5540 MHz [108] (21.0 dBm) (radar detection)
                        * 5560 MHz [112] (21.0 dBm) (radar detection)
                        * 5580 MHz [116] (21.0 dBm) (radar detection)
                        * 5600 MHz [120] (21.0 dBm) (radar detection)
                        * 5620 MHz [124] (21.0 dBm) (radar detection)
                        * 5640 MHz [128] (21.0 dBm) (radar detection)
                        * 5660 MHz [132] (21.0 dBm) (radar detection)
                        * 5680 MHz [136] (21.0 dBm) (radar detection)
                        * 5700 MHz [140] (21.0 dBm) (radar detection)
                        * 5745 MHz [149] (21.0 dBm)
                        * 5765 MHz [153] (21.0 dBm)
                        * 5785 MHz [157] (21.0 dBm)
                        * 5805 MHz [161] (21.0 dBm)
                        * 5825 MHz [165] (21.0 dBm)
        valid interface combinations:
                 * #{ managed } &amp;lt;= 2048, #{ AP, mesh point } &amp;lt;= 8, #{ P2P-client, P2P-GO } &amp;lt;= 1, #{ IBSS } &amp;lt;= 1,
                   total &amp;lt;= 2048, #channels &amp;lt;= 1, STA/AP BI must match, radar detect widths: { 20 MHz (no HT), 20 MHz, 40 MHz }

        HT Capability overrides:
                 * MCS: ff ff ff ff ff ff ff ff ff ff
                 * maximum A-MSDU length
                 * supported channel width
                 * short GI for 40 MHz
                 * max A-MPDU length exponent
                 * min MPDU start spacing
        max # scan plans: 1
        max scan plan interval: -1
        max scan plan iterations: 0
        Supported extended features:
                * [ RRM ]: RRM
                * [ CQM_RSSI_LIST ]: multiple CQM_RSSI_THOLD records
                * [ CONTROL_PORT_OVER_NL80211 ]: control port over nl80211
                * [ TXQS ]: FQ-CoDel-enabled intermediate TXQs
                * [ AIRTIME_FAIRNESS ]: airtime fairness scheduling
                * [ SCAN_RANDOM_SN ]: use random sequence numbers in scans
                * [ SCAN_MIN_PREQ_CONTENT ]: use probe request with only rate IEs in scans
                * [ CAN_REPLACE_PTK0 ]: can safely replace PTK 0 when rekeying
                * [ CONTROL_PORT_NO_PREAUTH ]: disable pre-auth over nl80211 control port support
                * [ DEL_IBSS_STA ]: deletion of IBSS station support
                * [ MULTICAST_REGISTRATIONS ]: mgmt frame registration for multicast
                * [ SCAN_FREQ_KHZ ]: scan on kHz frequency support
                * [ CONTROL_PORT_OVER_NL80211_TX_STATUS ]: tx status for nl80211 control port support
Wiphy phy0
        wiphy index: 0
        max # scan SSIDs: 4
        max scan IEs length: 2257 bytes
        max # sched scan SSIDs: 0
        max # match sets: 0
        Retry short limit: 7
        Retry long limit: 4
        Coverage class: 0 (up to 0m)
        Device supports AP-side u-APSD.
        Device supports T-DLS.
        Available Antennas: TX 0x3 RX 0x3
        Configured Antennas: TX 0x3 RX 0x3
        Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * monitor
                 * mesh point
                 * P2P-client
                 * P2P-GO
                 * outside context of a BSS
        Band 1:
                Capabilities: 0x11ef
                        RX LDPC
                        HT20/HT40
                        SM Power Save disabled
                        RX HT20 SGI
                        RX HT40 SGI
                        TX STBC
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-15
                Frequencies:
                        * 2412 MHz [1] (20.0 dBm)
                        * 2417 MHz [2] (20.0 dBm)
                        * 2422 MHz [3] (20.0 dBm)
                        * 2427 MHz [4] (20.0 dBm)
                        * 2432 MHz [5] (20.0 dBm)
                        * 2437 MHz [6] (20.0 dBm)
                        * 2442 MHz [7] (20.0 dBm)
                        * 2447 MHz [8] (20.0 dBm)
                        * 2452 MHz [9] (20.0 dBm)
                        * 2457 MHz [10] (20.0 dBm)
                        * 2462 MHz [11] (20.0 dBm)
                        * 2467 MHz [12] (20.0 dBm)
                        * 2472 MHz [13] (20.0 dBm)
                        * 2484 MHz [14] (disabled)
        valid interface combinations:
                 * #{ managed } &amp;lt;= 2048, #{ AP, mesh point } &amp;lt;= 8, #{ P2P-client, P2P-GO } &amp;lt;= 1, #{ IBSS } &amp;lt;= 1,
                   total &amp;lt;= 2048, #channels &amp;lt;= 1, STA/AP BI must match, radar detect widths: { 20 MHz (no HT), 20 MHz, 40 MHz }

        HT Capability overrides:
                 * MCS: ff ff ff ff ff ff ff ff ff ff
                 * maximum A-MSDU length
                 * supported channel width
                 * short GI for 40 MHz
                 * max A-MPDU length exponent
                 * min MPDU start spacing
        max # scan plans: 1
        max scan plan interval: -1
        max scan plan iterations: 0
        Supported extended features:
                * [ RRM ]: RRM
                * [ CQM_RSSI_LIST ]: multiple CQM_RSSI_THOLD records
                * [ CONTROL_PORT_OVER_NL80211 ]: control port over nl80211
                * [ TXQS ]: FQ-CoDel-enabled intermediate TXQs
                * [ AIRTIME_FAIRNESS ]: airtime fairness scheduling
                * [ SCAN_RANDOM_SN ]: use random sequence numbers in scans
                * [ SCAN_MIN_PREQ_CONTENT ]: use probe request with only rate IEs in scans
                * [ CAN_REPLACE_PTK0 ]: can safely replace PTK 0 when rekeying
                * [ CONTROL_PORT_NO_PREAUTH ]: disable pre-auth over nl80211 control port support
                * [ DEL_IBSS_STA ]: deletion of IBSS station support
                * [ MULTICAST_REGISTRATIONS ]: mgmt frame registration for multicast
                * [ SCAN_FREQ_KHZ ]: scan on kHz frequency support
                * [ CONTROL_PORT_OVER_NL80211_TX_STATUS ]: tx status for nl80211 control port support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we are particularly interested in learning the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many radios there are (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy1&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;The supported &lt;strong&gt;modes of operation&lt;/strong&gt; of each radio, and more specifically, that the device is indeed able to operate in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; mode, as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supported interface modes:&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;total number of bands&lt;/strong&gt;. In this example, each radio can use only one band but one uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.4GHz&lt;/code&gt; frequencies (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Band 1&lt;/code&gt;), while the other uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5GHz&lt;/code&gt; frequencies (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Band 2&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;For each band, the &lt;strong&gt;acceptable channels&lt;/strong&gt;, as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frequencies:&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With such information, we can now configure our radio devices in &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;&lt;/a&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/wireless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then edit each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-device&lt;/code&gt; stanza accordingly.  In the TL-WDR4300, there’s two default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-device&lt;/code&gt; stanzas–namely, one for the 2.4GHz radio (called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;) and another for the 5GHz radio (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio1&lt;/code&gt;).  After &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;changing and adding a few additional options&lt;/a&gt;, mine usually look like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-device 'radio0'
        option type 'mac80211'
        option channel '1'
        #option txpower '20'  ##uncomment and edit to override default transmission power in dBm
        option hwmode '11g'
        option path 'platform/ahb/18100000.wmac'
        #option htmode 'HT20'  ##uncomment and edit to override default high throughput mode
        option country 'BR'  ##must match your country code
        option disabled '1'  ##change to 0 to enable it

config wifi-device 'radio1'
        option type 'mac80211'
        option channel '153'  ##all nodes must use the same channel
        #option txpower '21'  ##uncomment and edit to override default transmission power in dBm
        option hwmode '11a'
        option path 'pci0000:00/0000:00:00.0'
        #option htmode 'HT20'  ##uncomment and edit to override default high throughput mode
        option country 'BR'  ##must match your country code
        option disabled '0'  ##change to 1 to disable it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;The comments in this and other config files are just for educational purpose. Feel free to remove them in your device’s config files.&lt;/p&gt;

&lt;p&gt;In this guide, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio1&lt;/code&gt; (5GHz) will be used for the &lt;em&gt;mesh&lt;/em&gt; traffic under the channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;153&lt;/code&gt;, which means all other mesh nodes must use the &lt;strong&gt;same channel&lt;/strong&gt;.  However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt; (2.4GHz) will at times be used to create standard wireless access points (WAPs; 802.11b/g/n) for &lt;em&gt;non-mesh&lt;/em&gt; clients, which means that none of the other nodes need to use the same channel with this radio.  In fact, it is strongly advised that 2.4GHz WAPs in close proximity should use &lt;strong&gt;different channels&lt;/strong&gt;–namely, channels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2401–2423MHz&lt;/code&gt; frequency range), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2426–2448MHz&lt;/code&gt;), or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2451–2473MHz&lt;/code&gt;) because those are non-overlapping channels and therefore, do not interfere with each other.  Because only mesh &lt;em&gt;bridges&lt;/em&gt; will make use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;, the configuration indicates that it should be &lt;em&gt;disabled&lt;/em&gt; by default.&lt;/p&gt;

&lt;p&gt;The segmentation between mesh and non-mesh wireless communication adopted in this guide is best summarized by the following illustration:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/segmentation.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/segmentation.jpg&quot; alt=&quot;Segmentation&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt; devices, stick to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt; if you are deploying the mesh in a crowded area, such as an apartment building; otherwise, the interference might make higher high-throughput (HT) actually less performant.  Finally, remember to edit the &lt;strong&gt;country code&lt;/strong&gt; before enabling the radio and &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_WLAN_channels#5_GHz_(802.11a/h/j/n/ac/ax)&quot;&gt;follow country regulations&lt;/a&gt; when overriding the default transmission power (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option txpower&lt;/code&gt;).  More often than not, you should actually &lt;em&gt;decrease&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txpower&lt;/code&gt; rather than increase it.  (For related material, see OpenWrt’s articles on &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/transmit.power.limits&quot;&gt;Exceeding transmit power limits&lt;/a&gt; and &lt;a href=&quot;https://openwrt.org/faq/other_transmit_power_issues&quot;&gt;Other transmit power issues&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Comment out or delete any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface&lt;/code&gt; automatically generated after a fresh install by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; at the beginning of each line or typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config wifi-iface 'default_radio0'
#        option device 'radio0'
#        option network 'lan'
#        option mode 'ap'
#        option ssid 'OpenWrt'
#        option encryption 'none'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, at the end of the file, let’s add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-iface&lt;/code&gt; for the wireless mesh, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-iface 'wmesh'
        option device 'radio1'  ##must match the name of a wifi-device
        option network 'mesh'  ##mesh stanza in /etc/config/network
        option mode 'mesh'  ##use 802.11s mode
        option mesh_id 'MeshCloud'  ##mesh &quot;ssid&quot;
        option encryption 'sae'  ##https://openwrt.org/docs/guide-user/network/wifi/basic#encryption_modes
        option key 'MeshPassword123'  ##password in plain text
        option mesh_fwding '0'  ##let batman-adv handle routing
        option mesh_ttl '1'  ##time to live in the mesh
        option mcast_rate '24000'  ##routes with a lower throughput rate won't be visible
        option disabled '0'  ##change to 1 to disable it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because all mesh nodes must operate on the same channel, use the same authentication, etc., multiple config options are often dictated by the &lt;strong&gt;“lowest common denominator”&lt;/strong&gt; across all mesh nodes–that is, the best possible configuration that will work with &lt;strong&gt;all nodes&lt;/strong&gt;, not just the ones with the best hardware and software available.  For example, not all devices will necessarily be able to use SAE because it’s very new and therefore, won’t be able to connect to mesh networks that use it. Instead, you might want to set encryption to something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psk2+aes&lt;/code&gt;, which should be good enough for most devices out there. So, keep that in mind when configuring your mesh nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now we need to configure &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;&lt;/a&gt; to allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To do so, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt; file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and let’s add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; at the bottom of the file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'bat0'
        option proto 'batadv'
        option routing_algo 'BATMAN_IV'
        option aggregated_ogms '1'
        option ap_isolation '0'
        option bonding '0'
        option bridge_loop_avoidance '1'
        option distributed_arp_table '1'
        option fragmentation '1'
        option gw_mode 'off'
        #option gw_sel_class '20'
        #option gw_bandwidth '10000/2000'
        option hop_penalty '30'
        option isolation_mark '0x00000000/0x00000000'
        option log_level '0'
        option multicast_mode '1'
        option multicast_fanout '16'
        option network_coding '0'
        option orig_interval '1000'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; stanza has options with default values to facilitate fine-tuning later on.  The specifics about each option is derived from the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;official &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; manual&lt;/a&gt;.  For more details, refer to the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki#Protocol-Documentation&quot;&gt;Protocol Documentation&lt;/a&gt; and more specifically, the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;Tweaking&lt;/a&gt; section.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;In very nichey cases of highly mobile nodes, it is recommended to disable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aggregated_ogms&lt;/code&gt; and lower &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orig_interval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, at the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s add an actual network interface to transport &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; packets, which in our case will be the network used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'mesh'
        option proto 'batadv_hardif'
        option master 'bat0'
        option mtu '1536'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_transmission_unit&quot;&gt;maximum transmission unit (MTU) size&lt;/a&gt; should be anything between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1500&lt;/code&gt; (usual size for Ethernet connections) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2304&lt;/code&gt; (usual size for WLAN connections).  However, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; adds its own header to packets traveling through the wireless mesh network, it is suggested to set a minimum of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1528&lt;/code&gt; instead.  For a more detailed discussion, see &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Fragmentation-technical&quot;&gt;Fragmentation&lt;/a&gt; in the official batman-adv wiki.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;Next, let’s &lt;strong&gt;reboot&lt;/strong&gt; the device (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and once it comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again because we want to check that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interfaces are up.  To do so, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and if the config is right, you should now see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan1&lt;/code&gt; in the output. Similarly, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to show us all active mesh interfaces, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl if
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, exit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; session, disconnect your laptop/PC from the wireless device (but keep it running nearby), and &lt;strong&gt;go ahead and configure at least one other node&lt;/strong&gt;.  This can be done manually just like you’ve just configured the current node.  However, if your other mesh nodes are identical to the one you have already configured–that is, it is the same brand, model, and it is running the same OpenWrt version–then you can simply &lt;strong&gt;copy the modified files&lt;/strong&gt; and then paste them on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; directory of the new device.  To copy all such files from the configured device to your laptop/PC current directory, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -r root@192.168.1.1:/etc/config ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; dir on your laptop/PC that has all the config files from the already configured device.  Then, once connected to another default OpenWrt device, it’s just a matter of doing the reverse operation, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
  -r ./config/* root@192.168.1.1:/etc/config/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--warning&quot;&gt;Because we are starting SSH sessions with different machines that have the same IP address (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;), we can include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null&lt;/code&gt; to disable checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file and redirect discovery of the new key to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt; instead of your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;.  Alternatively, you can manually edit or delete your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file, which is usually found at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/known_hosts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into one of the configured mesh nodes and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will show a table with the interfaces (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan1&lt;/code&gt;), MAC address of the neighboring mesh nodes, and when each of them was last seen.  Copy the MAC address (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:01&lt;/code&gt;) from each neighboring mesh node and ping them through the mesh (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl p&lt;/code&gt;) to see if they are all replying, as follows (press Ctrl+C to stop)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should output something like the following if everything is working fine&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PING f0:f0:00:00:00:01 (f0:f0:00:00:00:01) 20(48) bytes of data
20 bytes from f0:f0:00:00:00:01 icmp_seq=1 ttl=50 time=3.01 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=2 ttl=50 time=1.71 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=3 ttl=50 time=1.10 ms
--- f0:f0:00:00:00:01 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss
rtt min/avg/max/mdev = 1.103/1.942/3.008/0.794 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pat yourself on the back because you have successfully configured multiple mesh nodes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go ahead and configure all your mesh nodes the same way as before&lt;/strong&gt; and only then move on to bridges, gateways, and VLAN configs, as described next.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting-mesh-issues&quot;&gt;Troubleshooting mesh issues&lt;/h2&gt;
&lt;p&gt;These are a few tips in case you run into issues when configuring gateways and bridges.&lt;/p&gt;

&lt;p&gt;To test node to node connectivity, connect to a mesh node and use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p MAC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC&lt;/code&gt; is another node’s MAC address.  If the node does not reply, there’s an issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; or its configuration.  Try rebooting both nodes before doing anything else.&lt;/p&gt;

&lt;p&gt;A more powerful tool to see what is going on in the mesh network is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; utility for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To use it, connect to a mesh node and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td batX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interface (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; but if you have more than one, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat1&lt;/code&gt;, etc.).  This is quite useful when configuring VLANs because it will show the VLAN ID of each client as well.  In addition, it is possible to specify the VLAN ID in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;td&lt;/code&gt; argument to constraint the output to one particular VLAN (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl td bat0.1&lt;/code&gt;).  Depending on the scale of your mesh network, you might need to filter the output because things can get wild with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; really fast.&lt;/p&gt;

&lt;p&gt;For more details, see the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; manual&lt;/a&gt; or type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl -h&lt;/code&gt; for cli usage information.  Keep in mind that while many options can be set via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, those changes are ephemeral–that is, they won’t survive a reboot.  To make permanent changes, you need to add/edit the respective option in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; stanza.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that if you’ve been following my suggestion to name and take note of each device’s MAC address, you can now create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; that contains pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC address&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f0:f0:00:00:00:00 node01
f0:f1:00:00:00:00 node02
f0:f2:00:00:00:00 node03
f0:f3:00:00:00:00 node04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes it much easier to identify the mesh nodes when issuing a command like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and other debug tables.  As far as I’m aware, however, you have to create and update such file in each node because such information will just be available to nodes that have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Finally, as mentioned before, keep an eye on your device’s syslog for errors.  Module related issues are often associated with logged kernel errors (see the section &lt;a href=&quot;#hardware-specific-configurations&quot;&gt;Hardware-specific configurations&lt;/a&gt;) and wpa_supplicant has &lt;a href=&quot;https://www.toomanyatoms.com/computer/disconnection_codes.html&quot;&gt;multiple mesh-specific error codes&lt;/a&gt; to help you debug connectivity issues. The syslog can be inspected via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logread&lt;/code&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;logread
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For usage information, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logread -h&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-common-mesh-networks&quot;&gt;Configuring common mesh networks&lt;/h2&gt;
&lt;p&gt;Here, we will see how to turn one or two of our configured mesh nodes into either a mesh &lt;strong&gt;bridge&lt;/strong&gt; or a mesh &lt;strong&gt;gateway&lt;/strong&gt;.  To avoid repetition, the configuration of bridges and gateways is described in more detail in the &lt;a href=&quot;#gateway-bridge&quot;&gt;first example&lt;/a&gt;, and only a few small differences and observations are highlighted afterwards.  In addition, only IPv4 addresses and configurations were used but nothing prohibits the use of IPv6 in a mesh network.&lt;/p&gt;

&lt;h3 id=&quot;gateway-bridge&quot;&gt;Gateway-Bridge&lt;/h3&gt;
&lt;p&gt;This first example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More specifically, the mesh has access to the WAN (&lt;strong&gt;Network A&lt;/strong&gt;) via a &lt;em&gt;gateway device&lt;/em&gt; and has a single, private network defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, which is used by both the &lt;strong&gt;mesh network&lt;/strong&gt; devices and the &lt;strong&gt;Network B&lt;/strong&gt;, non-mesh devices. The latter is enabled by a &lt;em&gt;bridge device&lt;/em&gt; that works as an access point for non-mesh clients.&lt;/p&gt;

&lt;p&gt;First, let’s configure our &lt;strong&gt;mesh gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mesh-gateway-configuration&quot;&gt;Mesh gateway configuration&lt;/h4&gt;
&lt;p&gt;Get one of the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; that has at the very least two Ethernet ports, a LAN port and a WAN port.  (This, of course, is not required for a gateway device because &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wan/internet.connection&quot;&gt;there are multiple ways to connect to WAN&lt;/a&gt; but having separate physical ports makes the explanation much simpler to follow.  If that is not your case, just adapt the default configuration for your device accordingly.)&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;If you’ve configured this node as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt; to temporarily give it access to the Internet while updating and installing packages, undo the configuration before proceeding because we will use both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; config files in the gateway configuration.&lt;/p&gt;

&lt;p&gt;Connect your laptop/PC to the mesh node via cable using the LAN port–this way, the mesh node’s IP address should still be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the mesh node and let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the beginning of the file, there should a bunch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loopback&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;, for example, as well as a default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config device&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; bridge, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan&lt;/code&gt;, and.  At the end, of course, there should be the mesh interfaces we previously created for the mesh node, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;.  There are at least two options at this point:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an entirely new local network for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, at the expense of additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; configuration;&lt;/li&gt;
  &lt;li&gt;Or use the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; network by simply bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config device&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan&lt;/code&gt; stanza, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; config device                             
         option name 'br-lan'
         option type 'bridge'
         list ports 'eth0.1'  ##edit according to your device
         list ports 'bat0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the latter option is much easier than the former, we will choose the first here (i.e., create a new local network from the ground up) because it makes this tutorial compatible with multiple devices (switched or switchless) and it allows us to keep the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) as a management/debugging network.  (Later on, we will see how to bridge the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN, for example, so the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; becomes accessible to the mesh as well.  For now, keep it simple.)&lt;/p&gt;

&lt;p&gt;At the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s add the following two stanzas:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config device                             
        option name 'br-default'
        option type 'bridge'
        list ports 'bat0'

config interface 'default'
        option device 'br-default'
        option proto 'static'
        option ipaddr '192.168.10.1'  ##static address on the new 192.168.10.0/24 network pool
        option netmask '255.255.255.0'
        list dns '1.1.1.1'  ##comment out to enable cloudflare dns
        list dns '8.8.8.8'  ##comment out to disable google dns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first stanza (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config device&lt;/code&gt;) creates a &lt;strong&gt;bridge&lt;/strong&gt; (layer 2) for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network, while the second stanza (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface 'default'&lt;/code&gt;) creates the proper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; &lt;strong&gt;network&lt;/strong&gt; (layer 3) at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; pool, then sets a static IP address for this device at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; and broadcasts to any client that they should use the external DNS servers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.1.1.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Next, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;&lt;/a&gt; config to run a DHCP server on the new interface, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end of the file, add the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'default'
        option interface 'default'
        option start '50'  ##start leasing at addr 192.168.10.50
        option limit '100'  ##max leases, so for 100, leased addr goes from .50 to .149
        option leasetime '6h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;&lt;/a&gt; config.  Many things that can be done at the firewall level and for this reason, it’s often the most overwhelming part of the configuration.  Fortunately, in our case, all that we need to do here is simply &lt;strong&gt;copy&lt;/strong&gt; the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config for the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;.  That is, anything that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; we will&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy the related config;&lt;/li&gt;
  &lt;li&gt;paste it immediately below the equivalent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config;&lt;/li&gt;
  &lt;li&gt;and then change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; in the new config.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then the first set of configs we will add (immediately below the equivalent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config) is the &lt;strong&gt;zone&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     default
        list network    'default'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the second set of configs will be for the &lt;strong&gt;forwarding&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   default
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;strong&gt;that is it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. At the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file, there’s a bunch of examples that you could use as template for more avdanced usage of this device’s firewall.  Feel free to play around with them &lt;strong&gt;once you get everything up and running&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. Because we’re not going to use IPv6, I suggest (a) disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt; altogether (run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable&lt;/code&gt;) and (b) comment out any related IPv6 configuration in the files we just edited as well (e.g., remove configuration and references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan6&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device and connect the &lt;strong&gt;WAN&lt;/strong&gt; cable to the device’s &lt;strong&gt;WAN Ethernet port&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the device comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it. Then, let’s check the new configuration.  First, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and as before, there should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan1&lt;/code&gt; interfaces, but now, your gateway device should have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; in the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, because we preserved the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; configuration, the device will continue to have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt; network under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan&lt;/code&gt;.  This means it should always be reachable at its original IP address with an Ethernet cable directly connected to one of its LAN Ethernet ports.&lt;/p&gt;

&lt;p&gt;If you &lt;strong&gt;don’t see the static IP on the new network&lt;/strong&gt;, then review the files we have just configured because there’s likely a misconfiguration.  Don’t expect to get things working until you fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;mesh-bridge-configuration&quot;&gt;Mesh bridge configuration&lt;/h4&gt;
&lt;p&gt;The configuration of a mesh bridge is much simpler than of a mesh gateway because contrary to the gateway config, our mesh bridge doesn’t require the use of a DHCP server and firewall.  In fact, both services will be disabled in a mesh bridge and instead, the ony thing we will do is join interfaces to make them look like a single one to any connected device.&lt;/p&gt;

&lt;p&gt;As before, get one of the other &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; and to start things off, we will configure it as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt;.  Follow the instructions in the OpenWrt documentation, except for the following when configuring the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; to a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list ports&lt;/code&gt; entry in the bridge stanza used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Set a static IP for the device on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, pointing to our configured gateway at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;After all is done, rename every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; entry for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; to make it consistent with the gateway configuration.  This, of course, is optional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once done, the configuration of the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan&lt;/code&gt; bridge, which are now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-default&lt;/code&gt;, respectively, should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config device
        option name 'br-default'
        option type 'bridge'
        list ports 'eth0.1'
        list ports 'bat0'

config interface 'default'
        option device 'br-default'
        option proto 'static'
        option ipaddr '192.168.10.10'
        option netmask '255.255.255.0'
        option gateway '192.168.10.1'
        option dns '192.168.10.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After applying this configuration, it will let any &lt;strong&gt;non-mesh&lt;/strong&gt; clients to join the mesh &lt;strong&gt;via Ethernet cable&lt;/strong&gt;–that is, by connecting a cable to one of the &lt;strong&gt;LAN ports&lt;/strong&gt; of the mesh bridge device.  As long as the gateway is reachable, everything should work like a standard network, you could use the device’s own switch or connect the device to a switch and manage things there, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Similarly, you can create a &lt;strong&gt;wireless access point&lt;/strong&gt; (WAP) for &lt;em&gt;non-mesh&lt;/em&gt; clients, and the instructions in the &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt; documentation&lt;/a&gt; will work just fine because it uses a network that is bridged with our mesh–namely, the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.  To avoid confusion, make sure to use &lt;strong&gt;a different SSID&lt;/strong&gt; for the WAP(s) than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh_id&lt;/code&gt; used for the mesh.  In addition, use &lt;strong&gt;a different radio&lt;/strong&gt; for the WAP(s) and set them to operate on &lt;strong&gt;different channels&lt;/strong&gt;.  If that is not possible, that is probably okay for most home users but keep in mind that node hoping will start affecting performance quite noticeably.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;.) To illustrate, let’s create a simple 2.4GHz WAP for your home devices that will make use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network.  This can be done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; file as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the 2.4GHz radio stanza (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;), set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option disabled&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'0'&lt;/code&gt; to &lt;strong&gt;enable&lt;/strong&gt; it:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; config wifi-device 'radio0'
         option type 'mac80211'
         option channel '1'
         #option txpower '20'
         option hwmode '11g'
         option path 'platform/ahb/18100000.wmac'
         #option htmode 'HT20'
         option country 'BR'
         option disabled '0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the bottom of the file, create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-interface 'whome'&lt;/code&gt; stanza that configures an access point (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option mode 'ap'&lt;/code&gt;) that will make use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network. It should look similar to the following one when done:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; config wifi-iface 'whome'
         option device 'radio0'
         option network 'default'
         option mode 'ap'
         option ssid 'HomeWAP'  ##edit it
         option encryption 'psk2+aes'  ##https://openwrt.org/docs/guide-user/network/wifi/basic#encryption_modes
         option key 'MyStrongPassword123'  ##edit it
         option disabled '0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, in the terminal, make sure to disable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/dnsmasq stop &amp;amp;&amp;amp; /etc/init.d/dnsmasq disable
/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
/etc/init.d/firewall stop &amp;amp;&amp;amp; /etc/init.d/firewall disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device and on your laptop/PC, &lt;strong&gt;disable networking&lt;/strong&gt; altogether to force it to get a new IP from the bridge when it comes back online–alternatively, just disconnect the Ethernet cable.&lt;/p&gt;

&lt;p&gt;Once the bridge is back online–wait at least a minute or two to give it enough time to connect to the mesh first–&lt;strong&gt;re-enable networking&lt;/strong&gt; on your laptop/PC (or reconnect the Ethernet cable) and it should receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network (on a Linux distro, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip addr&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;), the bridge node should now be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, and you should be able to access the Internet from your laptop/PC through the mesh (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).&lt;/p&gt;

&lt;p&gt;If something doesn’t work, review the config files mentioned here and then go over the ones for the gateway, reboot all mesh nodes (gateway first, then nodes, then bridge) and test again.&lt;/p&gt;

&lt;h3 id=&quot;bridge-bridge&quot;&gt;Bridge-Bridge&lt;/h3&gt;
&lt;p&gt;This second example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contrary to the first example, there’s no mesh gateway device and as such, this topology could be used to extend an already existing private network (Networks A and B) over the wireless mesh (all defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range).  However, to make matters simple, we will assume that &lt;strong&gt;the existing network has a gateway/firewall&lt;/strong&gt; in either Network A or B that can be found at the IP addr &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;, and &lt;strong&gt;there’s a DHCP server being advertised on the network&lt;/strong&gt;.  (If your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, just edit your previous config files accordingly and the mesh network will follow your existing network instead.)&lt;/p&gt;

&lt;p&gt;Config-wise, the mesh bridges in this topology are configured exactly &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the first example&lt;/a&gt;, except for the following differences in the configuration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Each mesh bridge&lt;/strong&gt; should have a different static IP address in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface, as indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;.  For example, the first mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.10'&lt;/code&gt;, while the second mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.11'&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway '192.168.10.1'&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; stanza must match an existing gateway on either Network A or B, and similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns '192.168.10.1'&lt;/code&gt; must point to a valid DNS resolver or forwarder;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned before, if your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, then just edit the config file accordingly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gateway-gateway&quot;&gt;Gateway-Gateway&lt;/h3&gt;
&lt;p&gt;The third and final example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specifically, there’s only one private network (mesh, defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range) and notably, &lt;strong&gt;two&lt;/strong&gt; mesh gateways.  This provides “high availability” of the Internet connection to mesh nodes and surprisingly enough, the configuration of each mesh gateway is &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;just like in the first example&lt;/a&gt;, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Like in the &lt;a href=&quot;#bridge-bridge&quot;&gt;bridge-bridge example&lt;/a&gt;, we must assign different static IP addresses to &lt;strong&gt;each&lt;/strong&gt; mesh gateway.  This is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface configuration, add a different IP addr next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt; option.  For example, the first mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.1'&lt;/code&gt;, while the second mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.2'&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because we will now run &lt;strong&gt;two&lt;/strong&gt; DHCP servers on &lt;strong&gt;the same network&lt;/strong&gt;, we need to find a way of avoiding conflicts when assigning an IP address to new clients.  The easiest way of doing that is by assigning &lt;strong&gt;different intervals&lt;/strong&gt; to each DHCP server running on the same network.  In OpenWrt, this is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; DHCP configuration, we add a different starting point next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start&lt;/code&gt; option.  For example, while the DHCP server running on the first gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '50'&lt;/code&gt;, the DHCP server running on the second gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '150'&lt;/code&gt; instead.  This way, the first DHCP server leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.50&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.149&lt;/code&gt;, whereas the second leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.150&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.249&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface config of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, we can now enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt; and specify the WAN connection speed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_bandwidth '10000/2000'&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; config interface 'bat0'
         option proto 'batadv'
         option routing_algo 'BATMAN_IV'
         option aggregated_ogms '1'
         option ap_isolation '0'
         option bonding '0'
         option bridge_loop_avoidance '1'
         option distributed_arp_table '1'
         option fragmentation '1'
         option gw_mode 'server'
         #option gw_sel_class '20'
         option gw_bandwidth '10000/2000'  ##download/upload in kbps
         option hop_penalty '30'
         option isolation_mark '0x00000000/0x00000000'
         option log_level '0'
         option multicast_mode '1'
         option multicast_fanout '16'
         option network_coding '0'
         option orig_interval '1000'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Similarly, now in each other &lt;strong&gt;mesh node&lt;/strong&gt; (non-gateway devices), we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'client'&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'off'&lt;/code&gt; and enable selection options, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    config interface 'bat0'
         option proto 'batadv'
         option routing_algo 'BATMAN_IV'
         option aggregated_ogms '1'
         option ap_isolation '0'
         option bonding '0'
         option bridge_loop_avoidance '1'
         option distributed_arp_table '1'
         option fragmentation '1'
         option gw_mode 'client'
         option gw_sel_class '20'  ##set to 1 for fast connection policy (BATMAN_IV)
         #option gw_bandwidth '10000/2000'
         option hop_penalty '30'
         option isolation_mark '0x00000000/0x00000000'
         option log_level '0'
         option multicast_mode '1'
         option multicast_fanout '16'
         option network_coding '0'
         option orig_interval '1000'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This way, we can make each mesh node aware of the two gateways on the network (and their speeds) to better route mesh traffic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; handles multiple gateways, read the official &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Gateways&quot;&gt;Gateway documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mesh-vlans&quot;&gt;Mesh VLANs&lt;/h2&gt;
&lt;p&gt;You don’t need to configure VLANs in order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; but it is one of its best features.  In brief, this is a way of using &lt;strong&gt;our already configured&lt;/strong&gt; wireless mesh network to route traffic &lt;strong&gt;to/from multiple and all networks&lt;/strong&gt; in a secure, isolated way (as far as VLANs go).  No need for additional hardware–the combination of OpenWrt and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; turns even cheap wireless hardware into powerful virtual switches.  It’s just a matter of tagging the additional (and virtual) networks instead of using the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (or similarly, in a port-based analogy, “plugging” standard interfaces into different ports of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; switch).  This is a fairly advanced topic but surprisingly easy to incorporate to our existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Consider, for example, the following network&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a single gateway device that provides WAN access to the mesh and Networks B, C, and D, which are all private networks defined in different IP ranges. In addition, all the Networks B, C, and D traffic should go via &lt;strong&gt;any&lt;/strong&gt; mesh node in the mesh network while keeping them &lt;strong&gt;isolated from each other&lt;/strong&gt;.  To make it easier to remember and distinguish each private network, let’s call&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Network &lt;strong&gt;B&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;Network &lt;strong&gt;C&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;and Network &lt;strong&gt;D&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement such a mesh network with VLANs, we’re going to follow very similar steps to &lt;a href=&quot;#gateway-bridge&quot;&gt;the first example of a gateway-bridge mesh network&lt;/a&gt;, except for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will have two additional bridges in the network–that is, one for each mesh VLAN, for a total of three bridges. This is not a necessity but a matter of convenience to keep the example simple. The same bridge device can definitely bridge more than one mesh VLAN;&lt;/li&gt;
  &lt;li&gt;In the gateway device, we will create VLAN IDs for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; (&lt;strong&gt;2&lt;/strong&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; (&lt;strong&gt;5&lt;/strong&gt;), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; (&lt;strong&gt;1&lt;/strong&gt;) networks, each with a separate set of DHCP server and firewall rules;&lt;/li&gt;
  &lt;li&gt;In each bridge device, we will join the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with the &lt;strong&gt;VLAN ID&lt;/strong&gt; of the mesh VLAN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Surprisingly enough, we don’t need to do a thing about the &lt;strong&gt;mesh nodes&lt;/strong&gt; that are not &lt;strong&gt;gateways&lt;/strong&gt; or &lt;strong&gt;bridges&lt;/strong&gt;–that is, the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;mesh node basic config&lt;/a&gt; is both necessary and sufficient for simple mesh nodes, even when using VLANs.  The only exception is if one of your mesh nodes is, for example, a laptop and you want it to use a particular mesh VLAN instead of the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.  In our case, however, the pre-configured mesh nodes are ready to route traffic of any VLAN that belongs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, let’s start with the &lt;strong&gt;gateway&lt;/strong&gt; configuration.&lt;/p&gt;

&lt;h3 id=&quot;mesh-gateway-with-vlan-configuration&quot;&gt;Mesh gateway with VLAN configuration&lt;/h3&gt;
&lt;p&gt;First, configure the gateway &lt;strong&gt;the same way&lt;/strong&gt; &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, instead of listing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-default&lt;/code&gt; bridge, we will change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; to indicate that this is the &lt;strong&gt;VLAN ID #1&lt;/strong&gt; of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.  So, let’s start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; configuration file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-default&lt;/code&gt; stanza to look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config device
        option name 'br-default'
        option type 'bridge'
        list ports 'bat0.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;At this point, if you want to enable access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network via the Ethernet port of your gateway device, you can then add another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list ports 'eth0.1'&lt;/code&gt; (or whatever your device uses) to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-default&lt;/code&gt; bridge configuration.  Afterwards, remove any configuration related to the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, we are going to apply the same procedure we used to create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network (and its bridge, firewall rules, and dhcp service) to the remaining two networks, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config device&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config device                             
        option name 'br-iot'
        option type 'bridge'
        list ports 'bat0.2'

config interface 'iot'
        option device 'br-iot'
        option proto 'static'
        option ipaddr '192.168.20.1'
        option netmask '255.255.255.0'
        list dns '1.1.1.1'
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add another set of stanzas immediately below for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config device                             
        option name 'br-guest'
        option type 'bridge'
        list ports 'bat0.5'

config interface 'guest'
        option device 'br-guest'
        option proto 'static'
        option ipaddr '192.168.50.1'
        option netmask '255.255.255.0'
        list dns '1.1.1.1'
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, add a DHCP server config for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'iot'
        option interface 'iot'
        option start 50
        option limit 100
        option leasetime '6h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'guest'
        option interface 'guest'
        option start 50
        option limit 100
        option leasetime '1h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and below each stanza for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network, add one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     iot
        list network    'iot'
        option input    ACCEPT  ##recommended REJECT
        option output   ACCEPT
        option forward  ACCEPT  ##recommended REJECT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   iot
        option dest  wan  ##allows access to cloud services
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     guest
        list network    'guest'
        option input    ACCEPT  ##recommended REJECT
        option output   ACCEPT
        option forward  ACCEPT  ##recommended REJECT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   guest
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--warning&quot;&gt;Of note, it is good practice to be more restrictive with the firewall rules for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; networks.  I added comments with recommendations in the configurations above but additional rules might be necessary to enable basic functionality within each of those networks.  For a reference, check the OpenWrt’s guide on &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/guestwifi/guest-wlan#firewall&quot;&gt;Guest Wi-Fi basics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;save the file&lt;/strong&gt; and exit.  Then, &lt;strong&gt;reboot&lt;/strong&gt; the device.  This will implement the changes and offer an opportunity to check if everything will work as intended after a power loss.&lt;/p&gt;

&lt;p&gt;Once the gateway device is back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again and list its IP addresses:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should show the various new interfaces we created and the static IP address of your device in each one of them.  If everything looks good, we’re done with the gateway configuration!  We’re now ready to tell our bridges which VLAN ID to join with their standard interfaces.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;You don’t need to use &lt;strong&gt;names&lt;/strong&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;. They can be whatever you find intuitive.  However, whatever you choose, &lt;strong&gt;keep them short&lt;/strong&gt;.  Specifically, they should use less than 15 characters, owing to kernel limitations and various operations that append prefixes/suffixes to such names.&lt;/p&gt;

&lt;h3 id=&quot;mesh-bridge-with-vlan-configuration&quot;&gt;Mesh bridge with VLAN configuration&lt;/h3&gt;
&lt;p&gt;Here, we’ll also configure the bridges &lt;strong&gt;the same way&lt;/strong&gt; as in the gateway-bridge example. However, each bridge device will bridge &lt;strong&gt;a different VLAN ID&lt;/strong&gt;–namely, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The configuration of the Network D (&lt;strong&gt;Default&lt;/strong&gt;) bridge is by far the easiest one because it follows the exact same procedure &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the &lt;strong&gt;gateway-bridge example&lt;/strong&gt;&lt;/a&gt;, with the following exception in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-default&lt;/code&gt; stanza, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; config device
         option name 'br-default'
         option type 'bridge'
         list ports 'eth0.1'
         list ports 'bat0.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After making such a change, &lt;strong&gt;save the file&lt;/strong&gt; and &lt;strong&gt;reboot&lt;/strong&gt; your device.&lt;/p&gt;

&lt;p&gt;Now, let’s configure the Network B (&lt;strong&gt;IoT&lt;/strong&gt;) bridge. First, configure one of the mesh nodes &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;.  Then, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace all instances of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In the now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-iot&lt;/code&gt; bridge stanza, replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In the now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface 'iot'&lt;/code&gt; stanza:
    &lt;ul&gt;
      &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.10'&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.20.10'&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway '192.168.10.1'&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway '192.168.20.1'&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns '192.168.10.1'&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns '192.168.20.1'&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all is done, the updated configuration should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config device
        option name 'br-iot'
        option type 'bridge'
        list ports 'eth0.1'
        list ports 'bat0.2'

config interface 'iot'
        option device 'br-iot'
        option proto 'static'
        option ipaddr '192.168.20.10'
        option netmask '255.255.255.0'
        option gateway '192.168.20.1'
        option dns '192.168.20.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;If you created a 2.4GHz WAP that made use of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whome&lt;/code&gt;), you can now &lt;strong&gt;edit it&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi /etc/config/wireless&lt;/code&gt;) to make use of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network instead (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wiot&lt;/code&gt;).  Otherwise, ignore this message.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device.&lt;/p&gt;

&lt;p&gt;Once it comes back on, your laptop/PC will receive an IP address from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt; network, the bridge node should be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.10&lt;/code&gt;, and you should be able to access the Internet via the &lt;strong&gt;IoT&lt;/strong&gt; network (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If something does not work&lt;/strong&gt;, review the config files from your gateway and then from the bridge, then reboot the gateway and the bridge, and test again.&lt;/p&gt;

&lt;p&gt;If this configuration is working, &lt;strong&gt;repeat the same steps&lt;/strong&gt; as before for the Network C bridge (&lt;strong&gt;Guest&lt;/strong&gt;), with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt; IP addresses, user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.0/24&lt;/code&gt; addresses when assigning static IP and pointing to the gateway.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;. When configuring a &lt;strong&gt;Guest&lt;/strong&gt; WAP, for example, you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option isolate 1&lt;/code&gt; to the relevant stanza in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file to deny client-to-client connectivity without the need of re-enabling the firewall in the bridge device.  If that’s not enough, re-enable the firewall and configure it according to your needs–at the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; file, there are examples you can use as template.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with batman-adv on any Linux device&lt;/h2&gt;
&lt;p&gt;OpenWrt makes using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; a nearly trivial thing but you certainly don’t need OpenWrt to implement a mesh network or even to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; in your mesh.  As mentioned before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; has long been added to the Linux Kernel and therefore, you should be able to configure it on pretty much &lt;em&gt;any&lt;/em&gt; device running Linux.&lt;/p&gt;

&lt;p&gt;Even though the specifics of configuring network interfaces and managing connections might be different across Linux distributions, the initial steps always consist of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Installing (in popular distros, this is &lt;em&gt;not needed&lt;/em&gt;) and loading (&lt;em&gt;always&lt;/em&gt; needed) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; Kernel module.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsmod&lt;/code&gt; will show a list of active modules, so we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; it to check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module has already been loaded, as follows
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;then if it isn’t loaded, we add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; kmod to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules&lt;/code&gt; and load it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modprobe&lt;/code&gt;, as follows&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# append batman-adv to /etc/modules
echo 'batman-adv' | sudo tee -a /etc/modules &amp;gt; /dev/null
# load the batman-adv module
sudo modprobe batman-adv
# check that the batman-adv module is now loaded
lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Afterwards, you can check the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sysfs&quot;&gt;&lt;strong&gt;sysfs&lt;/strong&gt;&lt;/a&gt; of each network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and there should be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv&lt;/code&gt; folder.  When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module gets configured to use a particular network device, the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/iface_status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/mesh_iface&lt;/code&gt; will change their contents to reflect that. In addition, once enabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; will show up as a new network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and its options (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gw_mode&lt;/code&gt;) can be modified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing new values to their corresponding file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/bat0/mesh/&lt;/code&gt;  (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 'client' &amp;gt; /sys/class/net/bat0/mesh/gw_mode&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; package. On apt-based distros like Debian, you should be able to install it with the following
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install batctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Using a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt; to configure the network interfaces, as illustrated in the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Quick-start-guide&quot;&gt;B.A.T.M.A.N. quick start guide&lt;/a&gt;.  In our case, however, the wireless mode of operation (as in the specification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; interface creation command) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mp&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adhoc&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibss&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Using something like &lt;a href=&quot;https://en.wikipedia.org/wiki/Wpa_supplicant&quot;&gt;wpa_supplicant&lt;/a&gt; to manage connections.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you know of a program that has a GUI and is able to handle such configurations on popular Linux distros, let me know about it. As far as I know, there’s currently nothing like that and it would be so very useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;advanced-features&quot;&gt;Advanced features&lt;/h1&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; routing protocol has multiple features that were not covered in the previous sections, owing to the higher level of complexity that they introduce to a mesh project.  However, once you feel more comfortable with the details of the basic implementation, it is recommended to take a look at the more advanced features because they can have a significant impact on the performance of your mesh project.  In this section, I described a few of the advanced features that I have used in the past and find particularly useful.&lt;/p&gt;

&lt;h2 id=&quot;multi-links&quot;&gt;Multi-links&lt;/h2&gt;
&lt;p&gt;The examples in this guide used a single, dedicated wireless interface–namely, the 5GHz radio of a dual-band router–to build the wireless mesh network. While the concept of using a single interface for the wireless mesh network might work just fine on a small scale, performance will often degrade as the size of the mesh network increases–and so the number of required node hops to reach a mesh gateway. This decline in performance occurs partially because a single wireless interface cannot send and receive at the same time, which is the same limitation we would run into with standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_repeater&quot;&gt;wireless repeaters&lt;/a&gt;, for example.&lt;/p&gt;

&lt;p&gt;Fortunately, the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interface (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;) &lt;strong&gt;can actually work on multiple (wired or wireless) interfaces&lt;/strong&gt;, instead of either a 2.4GHz radio or a 5GHz radio or Ethernet cable.  In fact, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface can work &lt;em&gt;with all such interfaces at the same time&lt;/em&gt; and is able to choose which one to transmit packets depending on either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TQ&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BATMAN_IV&lt;/code&gt;) or throughput (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BATMAN_V&lt;/code&gt;) between nodes.  This is orchestrated by a feature called &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Multi-link-optimize&quot;&gt;multi-link&lt;/a&gt;.  More specifically, when using standard dual-band routers, such as the TL-WDR4300, a wireless mesh node has the option to use either the 2.4GHz radio or the 5GHz radio &lt;em&gt;or both&lt;/em&gt; for the mesh traffic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt;).  Consider, for example, the following network composed of nine mesh nodes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N01&lt;/code&gt; … &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N09&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-01.jpg&quot; alt=&quot;multilink-01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following the instructions in the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/a&gt; section, we would likely end up with nodes connected to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; via their respective 5GHz radio on channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;153&lt;/code&gt; (white lines):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-02.jpg&quot; alt=&quot;multilink-02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N01&lt;/code&gt; were the mesh gateway, then the basic configuration (single, dedicated interface for mesh traffic) would likely prove very resonable because each other node has a direct connection to the gateway.  However, had the gateway been placed anywhere at the edge of the network, nodes at the opposite side would start struggling to reach it.  To remedy this situation, we can add another wireless interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.  Because radio waves attenuate a lot quicker at higher frequencies, the use of alternative 2.4GHz radios allow each node to establish connections to nodes that are usually not reachable via 5GHz radios.  Therefore, we can take advantage of such property to provide alternative, long-ranged routes for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; mesh traffic.  For example, we can configure nodes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N01&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N06&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N07&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N08&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N09&lt;/code&gt; to connect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; via their 2.4GHz radio on channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; (green lines):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-03.jpg&quot; alt=&quot;multilink-03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can then extrapolate this idea to connect nodes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N02&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N04&lt;/code&gt; via their 2.4GHz radio on channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; (yellow line), and similarly, connect nodes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N03&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N05&lt;/code&gt; on channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt; (blue line):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-04.jpg&quot; alt=&quot;multilink-04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;planning&lt;/strong&gt; of multi-links can be very challenging when using dual-band (2.4GHz + 5GHz) devices because as mentioned before, 2.4GHz and 5GHz attenuate at different rates, which means that interference across nodes can become an issue with several 2.4GHz radios operating on the same channel.  &lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/multilink-04.jpg&quot;&gt;One alternative illustrated before&lt;/a&gt; is to space nodes that operate at the same channel, so that they can mostly reach each other at the edges of the coverage area provided by their respective 2.4GHz radios and channel.  (Fine tunning each radio’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txpower&lt;/code&gt; by &lt;em&gt;decreasing&lt;/em&gt; it to reduce unwantted overlap should help, too.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;-wise, multi-links will almost always improve throughput in comparison to using a single interface, especially when used in conjunction with &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking#bonding-mode&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bonding&lt;/code&gt;&lt;/a&gt; and the throughput focused version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; protocol, namely &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/BATMAN_V&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BATMAN_V&lt;/code&gt;&lt;/a&gt;.  Naturally, however, node-to-node connections can become bottlenecked by the radios involved in the multi-link configuration–that is, you cannot expect to transfer packets via 2.4GHz at the same rate as 5GHz.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;configuration&lt;/strong&gt;-wise, the implementation of multi-links is actually very simple because nothing new needs to be compilled or even enabled at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; level.  To illustrate, let’s extend the example from the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/a&gt; section to add a second wireless mesh interface using the 2.4GHz radio of the TL-WDR4300.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, let’s rename &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface 'mesh'&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface 'mesh5g'&lt;/code&gt;, which will be used by the 5GHz radio, and then create another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface 'mesh2g'&lt;/code&gt; stanza for the 2.4GHz radio, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'mesh5g'
      option proto 'batadv_hardif'
      option master 'bat0'
      option mtu '1536'

config interface 'mesh2g'
      option proto 'batadv_hardif'
      option master 'bat0'
      option mtu '1536'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;, let’s rename &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface 'wmesh'&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface 'wmesh5g'&lt;/code&gt; and assign it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option network 'mesh5g'&lt;/code&gt; instead, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-iface 'wmesh5g'
      option device 'radio1'
      option network 'mesh5g'
      option mode 'mesh'
      option mesh_id 'MeshCloud'
      option encryption 'sae'
      option key 'MeshPassword123'
      option mesh_fwding '0'
      option mesh_ttl '1'
      option mcast_rate '24000'
      option disabled '0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;and similarly, add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface 'wmesh2g'&lt;/code&gt; stanza that makes use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt; (2.4GHz in the TL-WDR4300) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option network 'mesh2g'&lt;/code&gt;, as follows:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-iface 'wmesh2g'
      option device 'radio0'
      option network 'mesh2g'
      option mode 'mesh'
      option mesh_id 'MeshCloud'
      option encryption 'sae'
      option key 'MeshPassword123'
      option mesh_fwding '0'
      option mesh_ttl '1'
      option mcast_rate '24000'
      option disabled '0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Make sure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt; is enabled in its stanza as well, of course.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart your device and once it comes back, check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl if&lt;/code&gt; to make sure that it can now detect &lt;em&gt;two&lt;/em&gt; interfaces, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan1&lt;/code&gt;. If you can see both interfaces, then you’re all set; otherwise, check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logread&lt;/code&gt; for related errors.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-physical-computing&quot;&gt;Bonus content: Physical computing&lt;/h1&gt;
&lt;p&gt;If your device has unused &lt;strong&gt;general purpose I/O&lt;/strong&gt; pins, it’s possible to do all sorts of things with them.  Check the &lt;a href=&quot;https://openwrt.org/docs/techref/hardware/port.gpio&quot;&gt;GPIO documentation&lt;/a&gt; for examples of how to install new LEDs and buttons, for instance.  (&lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#gpios&quot;&gt;Your device’s OpenWrt page can be very useful as well&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Also, if you want to change the functionality of a few of the existing LEDs on your wireless device, check the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/led_configuration&quot;&gt;LED configuration documentation&lt;/a&gt;.  Now that you have new mesh interfaces, you can use the LEDs to blink depending on the status of neighboring nodes, mesh gateways, or WAN connectivity through the mesh, to mention a few examples. (As mentioned before, &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#leds&quot;&gt;your device’s OpenWrt page can be very useful here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-moving-from-openwrt-19-to-21&quot;&gt;Bonus content: Moving from OpenWrt 19 to 21&lt;/h1&gt;
&lt;p class=&quot;notice--warning&quot;&gt;If you just found this guide, you can safely ignore the content in this section because the entire article &lt;strong&gt;has been updated&lt;/strong&gt; to make it compatible with OpenWrt 21.02, which is now the &lt;strong&gt;current stable release&lt;/strong&gt;.  However, if you’re currently running OpenWrt 19.07 and want to upgrade to 21.02, then read on.&lt;/p&gt;

&lt;p&gt;When this guide was first written, &lt;a href=&quot;https://openwrt.org/releases/19.07/start&quot;&gt;OpenWrt 19.07&lt;/a&gt; was the current stable release version.  However, as of September 4th, OpenWrt 19.07 transitioned to old stable and &lt;a href=&quot;https://openwrt.org/releases/21.02/start&quot;&gt;&lt;strong&gt;OpenWrt 21.02&lt;/strong&gt;&lt;/a&gt; is now the current stable release.  For one, this means that most device pages (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/archer_c7&quot;&gt;TP-Link Archer C7 AC1750&lt;/a&gt;) have been updated to link to the OpenWrt 21.02 firmware binaries.&lt;/p&gt;

&lt;p&gt;Of course, it is still possible to download and use the latest version of the OpenWrt 19.07 binaries (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19.07.8&lt;/code&gt;) by looking for your device’s target at &lt;a href=&quot;https://downloads.openwrt.org/releases/19.07.8/targets/&quot;&gt;releases/19.07.8/targets&lt;/a&gt;.  However, it is generally a good idea to run the latest release version for multiple reasons, &lt;strong&gt;security being the main one&lt;/strong&gt;.  Nonetheless, OpenWrt 21.02 introduces &lt;strong&gt;new hardware requirements&lt;/strong&gt; and &lt;strong&gt;changes to the network syntax&lt;/strong&gt; that you should not overlook before making the transition.  More specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OpenWrt 21.02 introduces initial support for the &lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/dsa/dsa.html&quot;&gt;&lt;strong&gt;Distributed Switch Architecture&lt;/strong&gt; (&lt;strong&gt;DSA&lt;/strong&gt;)&lt;/a&gt;.  Currently, however, this only applies to &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#initial_dsa_support&quot;&gt;a very limited number of devices&lt;/a&gt;.  If you have one of such devices, then make sure to read rmilecki’s &lt;a href=&quot;https://forum.openwrt.org/t/mini-tutorial-for-dsa-network-config/96998&quot;&gt;mini tutorial for DSA network configuration&lt;/a&gt; because the syntax is a little bit different than the one used in this guide.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#increased_minimum_hardware_requirements8_mb_flash_64_mb_ram&quot;&gt;hardware requirements to run OpenWrt 21.02&lt;/a&gt; has increased to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8 MB&lt;/code&gt; of flash memory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64 MB&lt;/code&gt; of RAM.  In the first version of this guide, I used the &lt;strong&gt;TP-Link TL-WR1043ND (v1.8)&lt;/strong&gt; as an example of mesh node hardware, which has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8MB&lt;/code&gt; of flash memory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32MB&lt;/code&gt; of RAM.  At first, I tried to use OpenWrt 21.02 with it but the system became &lt;strong&gt;too unstable&lt;/strong&gt;, even after making several changes to multiple firmware images (e.g., removing LuCI altogether and adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zram&lt;/code&gt; support).  This is what prompted me to change the device in the examples to the &lt;strong&gt;TP-Link TL-WDR4300&lt;/strong&gt;, which is also a &lt;em&gt;low-end&lt;/em&gt; router but it has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128MB&lt;/code&gt; of RAM instead and importantly, it is a &lt;em&gt;dual-band&lt;/em&gt; router that allows better segmentation of mesh vs non-mesh wireless traffic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;There is a small but important &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0#new_network_configuration_syntax_and_boardjson_change&quot;&gt;change in the configuration &lt;strong&gt;syntax&lt;/strong&gt;&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, namely:
    &lt;ol&gt;
      &lt;li&gt;The option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device&lt;/code&gt; in all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; stanzas;&lt;/li&gt;
      &lt;li&gt;The option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ports&lt;/code&gt; in all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config device&lt;/code&gt; stanzas of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Fortunately, it seems that the &lt;strong&gt;old syntax&lt;/strong&gt; (as in the first version of this guide) &lt;strong&gt;is still supported&lt;/strong&gt; but if you are using LuCI, you will run into compatibility issues and will be prompted to update.  To update it, take a closer look at the examples in the current version of the guide, which are now compatible with the network syntax introduced by OpenWrt 21.02.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;There many other changes in OpenWrt 21.02 but from my experience so far, none of them are as relevant as the ones mentioned before.  For other highlights and additional information, please check the &lt;a href=&quot;https://openwrt.org/releases/21.02/notes-21.02.0&quot;&gt;official OpenWrt 21.02.0 release notes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upgrading the firmware is as easy as it has always been: (a) go to the device’s OpenWrt page, (b) download the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-sysupgrade.bin&lt;/code&gt; binary, and then (c) flash it onto your device via LuCI.  If you’re only using the terminal, first SSH into your device and make sure it has enough free memory by typing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should output something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              total        used        free      shared  buff/cache   available
Mem:          27064       16168        6004         304        4892        8368
Swap:         13308         768       12540
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if the amount of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mem:&lt;/code&gt; row is higher than the size of the binary, then copy the new binary to the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt; directory via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt; (or any other method) and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysupgrade&lt;/code&gt; to upgrade your firmware to the latest release, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysupgrade -v -n /tmp/*-sysupgrade.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Importantly, owing to changes in the network syntax, I strongly recommend to &lt;strong&gt;discard all configuration files when making the transition&lt;/strong&gt;.  When upgrading via LuCI, make sure to &lt;em&gt;de&lt;/em&gt;select the option to preserve configuration, and similarly, when upgrading via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysupgrade&lt;/code&gt;, add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; argument command, as mentioned before. This, of course, means you will lose connection to the device if you are running the upgrade via a wireless connection, so make sure to use a cable for this particular operation.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;If the configuration files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; have been extensively edited, make sure to make a backup of them before running the upgrade.&lt;/p&gt;

&lt;p&gt;In addition, remember that the various packages supporting the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; do not come with pre-built (default) images, which means that you won’t be able to connect to your mesh node after an upgrade if you are relying on the mesh network to reach it.  If you do not want to reinstall all such packages (or cannot physically reach the nodes), check the updated section about &lt;a href=&quot;#openwrt-installation-and-initial-configuration&quot;&gt;OpenWrt installation and initial configuration&lt;/a&gt;, which now features instructions on how to build customized images with pre-installed mesh packages.  Building your own images also means you can create default versions for all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; files (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILES=&quot;&quot;&lt;/code&gt; usage in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make image&lt;/code&gt; command) but &lt;strong&gt;use caution with such feature&lt;/strong&gt; to avoid (soft) bricking your device.  At the very least, use only configurations you have already tested and that will work independently of any other node.&lt;/p&gt;

&lt;p&gt;Overall, I like the clearer distinction between layers 2 and 3 introduced by the new network syntax in OpenWrt 21.02.  Once you get the hang of it, the configuration looks more organized and intuitive than before, and therefore, I think it is a step forward in the right direction.  Lastly, I would like to thank &lt;a href=&quot;https://forum.openwrt.org/u/stevenewcomb&quot;&gt;SteveNewcomb&lt;/a&gt; for testing–and letting me know about–&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; under the OpenWrt 21.02 release candidates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final remarks&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/futurama.jpg&quot; alt=&quot;Futurama Hubert Farnsworth&quot; class=&quot;PostImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good news, everyone! You’ve reached the end of this tutorial, which means it’s time to start planning your own mesh networking project.  I love to hear about different takes on the projects I post on my blog, so don’t hesitate to &lt;a href=&quot;/contact/&quot;&gt;contact me&lt;/a&gt; if you just want to share or bounce a few ideas.  Different perspectives give an opportunity to learn, grow, and innovate.&lt;/p&gt;

&lt;h2 id=&quot;other-similar-mesh-solutions&quot;&gt;Other similar mesh solutions&lt;/h2&gt;
&lt;p&gt;If you find this guide overwhelming but you’re still curious about mesh networking, take a look at the following alternatives (in alphabetical order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.commotionwireless.net&quot;&gt;Commotion Wireless&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://libremesh.org&quot;&gt;LibreMesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They have pre-configured images that will work “out of the box” with compatible devices.  You might find instructive to start playing around with their software first and once comfortable, build your own configuration from a default (or customized from the source) OpenWrt image.&lt;/p&gt;

&lt;p&gt;In addition, if you don’t feel comfortable with the CLI approach I used, take a look at &lt;a href=&quot;https://www.youtube.com/channel/UCG5Ph9Mm6UEQLJJ-kGIC2AQ&quot;&gt;OneMarcFifty&lt;/a&gt;’s video tutorial on how to configure OpenWrt and batman-adv using the LuCI:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/t4A0kfg2olo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;Marc has many other interesting videos about OpenWrt, so make sure to check them out as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mesh" /><category term="adhoc" /><category term="ieee" /><category term="wifi" /><category term="wireless" /><category term="radio" /><category term="network" /><category term="router" /><category term="openwrt" /><category term="batman" /></entry><entry><title type="html">NanoPi M4 mini-NAS</title><link href="/blog/Nanopi-m4-mini-nas/" rel="alternate" type="text/html" title="NanoPi M4 mini-NAS" /><published>2020-07-06T13:42:00-03:00</published><updated>2020-07-06T13:42:00-03:00</updated><id>/blog/Nanopi-m4-mini-nas</id><content type="html" xml:base="/blog/Nanopi-m4-mini-nas/">&lt;p&gt;This article is about my mini network-attached storage (NAS) project based on FriendlyARM’s &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4&quot;&gt;NanoPi M4&lt;/a&gt; and its &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4_SATA_HAT&quot;&gt;SATA hat&lt;/a&gt;.  If you’re looking for a cheap, low-profile, low-power NAS solution for your home–or if you just like single-board computers (SBC)–then this article is for you.&lt;/p&gt;

&lt;p&gt;Here’s a preview of how my NanoPi M4 mini-NAS looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg&quot; alt=&quot;Final NAS 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg&quot; alt=&quot;Final NAS 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for comparison, here’s the unit next to a Raspberry Pi 3B:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg&quot; alt=&quot;Final NAS next to RPi&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article should give you a fairly good idea about the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What to buy;&lt;/li&gt;
  &lt;li&gt;What to install at the operating system (OS) and NAS management level;&lt;/li&gt;
  &lt;li&gt;How to put everything together and get it up and running.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, you’re free to do whatever you want for your own use-case (disk partitions, storage systems, file sharing method, applications, etc.).&lt;/p&gt;

&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;April 7th, 2022&lt;/strong&gt;: I updated a note about the issue that caused my NanoPi M4-v2 board to stop working after an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; upgrade.  More specifically, according to &lt;a href=&quot;https://forum.armbian.com/topic/20043-nanopi-m4-v2-4gb-doesnt-start-after-installing-updates/?do=findComment&amp;amp;comment=137274&quot;&gt;gilarelli’s post&lt;/a&gt;, it looks like the culprit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-dtb-legacy-rk3399&lt;/code&gt;, which does not include a device tree file for the board in its latest version, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rk3399-nanopi-m4v2.dtb&lt;/code&gt; was not included in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-dtb-legacy-rk3399=22.02.01&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--success&quot;&gt;&lt;strong&gt;March 20th, 2022&lt;/strong&gt;: I’ve had to deal with &lt;a href=&quot;https://forum.armbian.com/topic/20043-nanopi-m4-v2-4gb-doesnt-start-after-installing-updates/&quot;&gt;a software issue that broke my NanoPi-M4 v2&lt;/a&gt; and thought that this would be a nice opportunity to document a couple of procedures that allow you to recover from such scenarios. (Of note, if you are on &lt;strong&gt;Armbian Buster&lt;/strong&gt; and using the &lt;strong&gt;legacy kernel&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;do not&lt;/em&gt;&lt;/strong&gt; upgrade from version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21.08&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;22.02&lt;/code&gt;.) The result of this documentation is the addition of three new sections to this guide, namely &lt;a href=&quot;#backing-up-the-os-disk&quot;&gt;Backing up the entire mini-NAS OS disk&lt;/a&gt;, &lt;a href=&quot;#emergency-micro-sd&quot;&gt;Emergency micro-SD&lt;/a&gt;, and &lt;a href=&quot;#recovery-procedures&quot;&gt;Recovery procedures&lt;/a&gt;, all of which were added under the &lt;a href=&quot;#bonus-content&quot;&gt;Bonus Content&lt;/a&gt; section.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;October 16th, 2020&lt;/strong&gt;, (#1 of 2): I’ve re-written the &lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan&quot;&gt;pwm-fan script for the NanoPi-M4&lt;/a&gt; and updated &lt;a href=&quot;#pwm-fan-controller&quot;&gt;the section about it&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;October 16th, 2020&lt;/strong&gt;, (#2 of 2): Despite the CPU tuning improvements I mentioned in my previous update, I’ve continued to have a few stability issues with Kernel 5.x.  After a while, I’ve decided to reinstall &lt;strong&gt;Armbian Buster&lt;/strong&gt; with &lt;strong&gt;Kernel 4.4.213-rk3399 (legacy)&lt;/strong&gt; and it has been smooth sailing ever since.  I updated the &lt;a href=&quot;#software&quot;&gt;section about OS installation&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 14th, 2020&lt;/strong&gt;: Added &lt;a href=&quot;#cpu-tuning&quot;&gt;information about CPU tuning to improve system stability&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 8th, 2020&lt;/strong&gt;: Added a &lt;a href=&quot;#nanopi-m4-sata-hat--passive-cooler--cables&quot;&gt;cautionary note about SATA power cables&lt;/a&gt;; Added a &lt;a href=&quot;#cost-estimate&quot;&gt;table with the cost of all hardware components of this build&lt;/a&gt;; I also got a hold of a DC jack adapter that will let me measure the actual current draw from my final mini-NAS and will make it available here as soon as I’m done testing it.  If you’ve additional suggestions, please &lt;a href=&quot;/contact&quot;&gt;reach out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The NanoPi M4 is a SBC made by FriendlyARM (a.k.a. FriendlyElec), a Chinese company based in Guandong.  They have their own &lt;a href=&quot;https://www.friendlyarm.com/&quot;&gt;online store&lt;/a&gt; that you can use to buy a few of the boards and components they develop but chances are you can also buy from pretty much any of the large retail stores out there (e.g., AliExpress, Amazon, Newegg).  [I bought all components from AliExpress, for example, from the folks at &lt;a href=&quot;https://embedunion.aliexpress.com/store/113595&quot;&gt;RealQvol&lt;/a&gt;.]  FriendlyARM also has a fairly good &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/Main_Page&quot;&gt;wiki&lt;/a&gt; that documents the main aspects of their boards.&lt;/p&gt;

&lt;p&gt;For a general review of the board, check these two videos:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/knS854Taz-E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/sxND3lLSwB4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;You can also find a CPU performance comparison between the NanoPi M4 v2 and the Raspberry Pi 4 at &lt;a href=&quot;https://www.androidpimp.com/embedded-single-board-computers/raspberry-pi-4-vs-nanopi-m4v2/&quot;&gt;this blog post&lt;/a&gt;, which suggests that the NanoPi M4 is superior and will be able to run tasks more efficiently than the RPi 4.&lt;/p&gt;

&lt;p&gt;In the following sections, I talked about the hardware (board, hat, case, drive choices and power supply), then the software (OS + NAS management interface) and finally, assembly and board/hat testing.  The article ends with a very brief presentation of my current configuration for the mini-NAS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;For this project, I’m using the following hardware:&lt;/p&gt;
&lt;h2 id=&quot;nanopi-m4-v2&quot;&gt;NanoPi M4 v2&lt;/h2&gt;
&lt;p&gt;I’m using the &lt;strong&gt;2nd version&lt;/strong&gt; (v2) of this board but everything should apply to v1.  I think the major differences between the two is that the &lt;strong&gt;v2 has LPDDR4 RAM&lt;/strong&gt;, instead of LPDDR3, a power button, the eMMC is connected the opposite way and screwed to the board, and the v2 looks slightly cleaner than the v1.  Other than that, when buying one, you’ll have the option to buy with 2GB or 4GB of RAM.  I’m using the one with &lt;strong&gt;4GB of RAM&lt;/strong&gt; and I recommend it if you’re going to use it as a NAS, even if you’re not going to use a RAM intensive filesystem like ZFS.  (For reference, ext4 uses very little RAM and a 2GB version won’t have any issues sharing files at all.  The problem in those cases is when you start adding applications to your NAS.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg&quot; alt=&quot;Nanopi M4 v2 board&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-heatsink&quot;&gt;NanoPi M4 heatsink&lt;/h2&gt;
&lt;p&gt;This little fella gets pretty hot but fortunately, this massive heatsink does a decent job at keeping it cool.  For even better performance, try adding a fan, use thermal paste instead of a pad, or use a copper heatsink with a large surface area.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg&quot; alt=&quot;Nanopi M4 heatsink&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-16-32gb-emmc--micro-sd-adapter&quot;&gt;NanoPi M4 16-32gb eMMC (+ micro-SD adapter)&lt;/h2&gt;
&lt;p&gt;The adapter makes it easy to flash an OS image directly onto the eMMC, so make sure to buy one.  As far as I know, you don’t need to use an eMMC with the NanoPi M4.  A micro-SD will do the trick but of course, it’s slower than an eMMC.  However, an eMMC is slower than a solid state drive (SSD), so if you know how to run the OS from a SSD, let me know.  Either way, the OS and NAS program we’re going to use is already configured to reduce the amount of writes to the eMMC/micro-SD/SSD (it comes configured to not use a swap partition, for example), which is good news if you’re worried about wearing it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg&quot; alt=&quot;Nanopi M4 eMMC&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-sata-hat--passive-cooler--cables&quot;&gt;NanoPi M4 SATA hat (+ passive cooler + cables)&lt;/h2&gt;
&lt;p&gt;This little hat has a &lt;a href=&quot;https://www.marvell.com/content/dam/marvell/en/public-collateral/storage/marvell-storage-88se92xx-product-brief-2012-04.pdf&quot;&gt;Marvell 88SE9215&lt;/a&gt; Four-Port 6 Gbps SATA I/O Controller.  It usually comes with two SATA interface cables and one SATA power cable able to power two drives.  If you’re going to use more than two drives, like me, make sure to buy additional SATA interface cables and an extension/splitter for the SATA power cable (e.g., &lt;a href=&quot;https://www.amazon.com/StarTech-com-Power-Splitter-Adapter-PYO4SATA/dp/B0086OGN9E/ref=sr_1_7?dchild=1&amp;amp;keywords=sata+power+extension+cable&amp;amp;qid=1591723716&amp;amp;sr=8-7&quot;&gt;StarTech splitter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg&quot; alt=&quot;Nanopi M4 SATA hat&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;When buying your SATA power cables, make sure the terminals are &lt;strong&gt;crimped&lt;/strong&gt; (use blade connectors) instead of &lt;strong&gt;molded&lt;/strong&gt;. In brief, molded terminals are not faulty by design but they are error prone, owning to the method that the cables are terminated (molding plastic), and such errors might lead to &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=sata+power+fire&amp;amp;ia=web&quot;&gt;catastrophic events&lt;/a&gt;. The ones in my original pictures were all molded and &lt;strong&gt;you should not use them&lt;/strong&gt;.  Thanks to &lt;strong&gt;/u/Fuck_Birches&lt;/strong&gt; and &lt;strong&gt;/u/WordBoxLLC&lt;/strong&gt; for pointing that out.  I have changed them for crimped ones now.  Here’s an instructive video about the issue:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/TataDaUNEFc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;If you plan on using the same 3d printed case I’m using (see &lt;a href=&quot;#kirkdis-3d-printed-case&quot;&gt;kirkdis’ 3D printed case&lt;/a&gt;), make sure to buy SATA cables with &lt;strong&gt;a straight/horizontal connector on both ends of the cable&lt;/strong&gt;.  That case is &lt;em&gt;very&lt;/em&gt; tight, so you might want to consider buying at least two shorter than usual SATA cables for the HDDs closer to the base.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg&quot; alt=&quot;Nanopi M4 SATA hat&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;12v-8a-power-supply-unit-psu&quot;&gt;12v (8A) power supply unit (PSU)&lt;/h2&gt;
&lt;p&gt;If you’re using the SATA hat, you only need a single PSU to provide power to everything, and there are even two different options to do that: (a) via the DC 5.5x2.1mm jack on the SATA hat, using an external PSU (e.g., &lt;a href=&quot;https://www.amazon.com/ALITOVE-100-240V-Converter-Transformer-5-5x2-1mm/dp/B07MXXXBV8/ref=sr_1_3?dchild=1&amp;amp;keywords=psu+12v+10a+5.5x2.1mm&amp;amp;qid=1591721696&amp;amp;s=electronics&amp;amp;sr=1-3&quot;&gt;Alitove&lt;/a&gt;); or (b) via the 4-pin 12v connector, also on the SATA hat, using a low power (&amp;lt; 200W) PC PSU.  If you’re going to use four low revolutions per minute (RPM) 2.5” HDDs (e.g., 5400 RPM), or four SSDs, a 12v PSU that is able to deliver up to 3A should be enough.  However, if you’re driving high-RPM 2.5” HDDs (e.g., 7200RPM) or 3.5” HDDs, then do the math before powering the components.  If you want to be safe, just get a 12v PSU that is able to deliver up to 8A.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg&quot; alt=&quot;NanoPi M4 PSU connections&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that if you’re planning on using a PC PSU, you’ll need to “hack it” in order to use the PSU without plugging it into a mobo.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;If you’re not 100% sure about tinkering with anything related to electricity, do not attempt to modify any PSU you might have lying around and just buy a 12v (8A) external PSU.  You can die even if the PSU is not connected to an outlet, owing to the presence of massive capacitors inside the PSU.  I cannot emphasize this enough.  Also, don’t go around cutting its cables to just make it look cute.  You might need them later.&lt;/p&gt;

&lt;p&gt;Alright, if you really want to use a PC PSU, follow the instructions in this video (but use a proper cable to connect the pins and make sure it’s well secured):&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/j4erf6SuqdI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;25-hard-disk-drive-hdd&quot;&gt;2.5” hard disk drive (HDD)&lt;/h2&gt;
&lt;p&gt;You can run 3.5” drives as well but if you plan to keep power consumption at a minimum, I suggest running 2.5” drives instead or better yet, SSDs.  Here, I’m going to use &lt;strong&gt;four 2.5” WD Black HDD&lt;/strong&gt; because they are fast (7200rpm as opposed to the traditional 5400rpm for 2.5” drives) and I don’t have a need for a large local storage space.  (Just be careful that the 1TB 2.5” WD Black &lt;a href=&quot;https://www.westerndigital.com/products/internal-drives/wd-black-hdd&quot;&gt;model WD10SPSX is actually SMR&lt;/a&gt;.)  In general, my preference order is the following: SSD &amp;gt; 2.5” CMR HDD &amp;gt; 3.5” NAS HDD &amp;gt; 3.5” other CMR HDD &amp;gt; 2.5” whatever HDD &amp;gt; 3.5” whatever HDD.  Of course, you don’t need to use all four SATA ports if there’s no demand for it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg&quot; alt=&quot;2.5&amp;quot; WD Black HDD 500GB&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg&quot; alt=&quot;2.5&amp;quot; WD Black HDD 750GB&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kirkdis-3d-printed-case&quot;&gt;&lt;a href=&quot;https://www.thingiverse.com/thing:3736661&quot;&gt;kirkdis’ 3D printed case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are other 3D printed cases out there but I like kirkdis’ take on a minimal case for the NanoPi M4 and 2.5” drives.  Notice that there are 3- and 4-bay versions of the HDD case and mounts.  More specifically, for this project, I printed the following pieces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topcase_all_versions.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fanmount_all_versions.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;04 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4bay_discmount.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4bay_hddbase.stl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t have a 3D printer, don’t worry about it!  Just Google &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3d printing service&lt;/code&gt; and you’ll find plenty of options to choose from.  You shouldn’t have to pay more than $100 for this case, for reference.  Also, remember to &lt;a href=&quot;https://www.amazon.com/hard-drive-screws/s?k=hard+drive+screws&quot;&gt;&lt;strong&gt;buy screws&lt;/strong&gt;&lt;/a&gt; for your HDDs, if you don’t have a bunch a lying around. You’ll need 08 for the bottom and top HDDs (16) + 04 for each in between (08), for a total of &lt;strong&gt;24 screws&lt;/strong&gt; for four drives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png&quot; alt=&quot;3D case stl&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to buy a &lt;a href=&quot;https://www.amazon.co.uk/OImaster-Backplane-Function-Hot-swap-Transmission/dp/B074V52L9D&quot;&gt;4-bay enclosure for your drives&lt;/a&gt; and use some sort of &lt;a href=&quot;https://www.amazon.com/GeeekPi-Raspberry-Cluster-Cooling-Heatsink/dp/B07MW3GM1T/ref=sr_1_1?dchild=1&amp;amp;keywords=stackable+case+rpi&amp;amp;qid=1591726436&amp;amp;sr=8-1&quot;&gt;stackable case&lt;/a&gt; for your NanoPi M4.  If you go with this solution, remember to buy extra spacers to make room for the SATA hat and cables (and you might need longer cables).  Alternatively, you can always use a standard computer case (or rack mounted) that has support for 4 drives.  Get rid of the mobo and you’re probably all set (see my note on modifying a PC PSU).&lt;/p&gt;

&lt;h2 id=&quot;fan-50x50x15mm-12v-08a&quot;&gt;Fan 50x50x15mm 12v (.08A)&lt;/h2&gt;
&lt;p&gt;(This fan size is for kirkdis’ 3D printed case. You’d want something different if you’re using another case.) You can probably find a .2A fan with the same dimensions, which will move more air but will be louder.  (If you’re going to use the PWM connector, take a look at &lt;a href=&quot;#pwm-fan-controller&quot;&gt;PWM Fan controller&lt;/a&gt; to learn how to use it.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png&quot; alt=&quot;50x50x15mm Fan&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you might want to buy a filter for the fan. However, notice that &lt;em&gt;there’s no space for the filter inside the 3d printed case&lt;/em&gt; but you can glue/attach it to the outside (that’s what I’ve done with the one I bought).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png&quot; alt=&quot;50x50x15mm Fan-filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cost-estimate&quot;&gt;Cost estimate&lt;/h2&gt;
&lt;p&gt;For reference, here’s how much each hardware component cost me in Brazilian Real (BRL$) and US Dollar (USD$), except for the HDDs.  Values were the total for all units, instead of per unit.  When appropriate, values were converted using the exchange rate from &lt;strong&gt;July 8th, 2020&lt;/strong&gt;. Shipping costs were not included.  Notice that all values are likely &lt;strong&gt;overestimating the actual cost&lt;/strong&gt; because many products include Brazilian taxes and were bought multiple months ago.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;quantity&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;BRL$&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USD$&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NanoPi M4 v2 4GB RAM&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;477.25&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;89.04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heatsink&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37.41&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32gb eMMC + mSD adapter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;144.61&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;26.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA hat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;149.97&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;27.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA III cable&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;35.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RTC battery&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23.52&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA power Y splitter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;02&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.96&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3d printed case&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;155&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28.92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PSU 12v 10A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;53.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50mm Fan 12v .08A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50mm Fan filter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;19.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TOTAL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1153.16&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;214.16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;For the OS, I’m using the &lt;strong&gt;server edition&lt;/strong&gt; of the &lt;strong&gt;Armbian Buster&lt;/strong&gt; with &lt;strong&gt;Kernell 4.4 (legacy)&lt;/strong&gt;. &lt;em&gt;(Of note, this section has been updated since the original article. In the previous version of the article, I suggested installing the latest Kernel 5.x instead of the legacy 4.4.x. The reason is that I’ve had multiple stability issues with Kernel 5.x and after switching to legacy, it’s been solid as a rock.  That said, I’ve also read that many users have been running the latest Kernel without any issues, which makes me suspicious that there was somthing corrupted with my previous installation. So, my suggestion is the following: if you can afford testing for a few days, do try the latest Kernel 5.x first, and if you run into issues, reinstall the OS with legacy Kernel; otherwise, if you want it ready and solid right away, go straight to legacy Kernel.)&lt;/em&gt;  You can download the image from the &lt;a href=&quot;https://www.armbian.com/nanopi-m4/#kernels-archive-all&quot;&gt;official Armbian website&lt;/a&gt;.  Don’t skip the integrity check.  On Linux, just open a terminal and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1sum /path/to/file.img.xz&lt;/code&gt; and check the output against the SHA file from the Armbian website.  This ensures your downloaded file has the same hash as the true file.  If you’ve ever used Debian or derivatives before (e.g., Ubuntu, Raspbian), Armbian will feel like home.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg&quot; alt=&quot;SSH welcome and lscpu&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t like terminals, don’t worry.  You pretty much don’t need to ever see it again because we’ll be managing everything from &lt;a href=&quot;https://www.openmediavault.org&quot;&gt;Openmediavault 5 (OMV5)&lt;/a&gt;.  I’ve been using OMV since the 3rd edition as my go-to NAS solution and it has never let me down.  It’s not super fancy, like freeNAS and unraid, but it will get the job done for most home-users.  Plus, it’s free and &lt;a href=&quot;https://github.com/openmediavault/openmediavault&quot;&gt;open-source&lt;/a&gt; and this matters to me.  It also comes with a bunch of packages that facilitate file sharing, monitoring resources, manage users, plug-ins, etc., and it has a very clean graphical user interface accessible via web-browser (webUI):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png&quot; alt=&quot;OMV4 dashboard&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, the folks at OMV put together a guide on their Github repo that tells exactly &lt;a href=&quot;https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Adden-A-Installing_OMV5_on_Armbian.pdf&quot;&gt;how to install OMV on Armbian&lt;/a&gt;.  Download their PDF and follow it step-by-step, with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of flashing the OS image onto a micro-SD, plug your eMMC into the micro-SD adapter and then flash the OS image onto the eMMC.&lt;/li&gt;
  &lt;li&gt;Before turning the NanoPi M4 on with the eMMC installed for the first time, remove any drives connected to the SATA hat.  This is more of a cautionary move than anything else.  We want to minimize the risk of corrupting the eMMC at these initial configuration steps and there’s no need for additional drives at this point.  We’ll add them after we’re done installing OMV5.  The same applies to any other device connected to the NanoPi M4, like USB devices.  Keep it simple right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you’ll learn, the OMV installation script will take some time to finish.  We’re talking about more than 10min.  Be patient!  Afterwards, open a web browser and log into OMV’s WebUI and do your thing or read the &lt;a href=&quot;https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Getting_Started-OMV5.pdf&quot;&gt;Getting Started Guide&lt;/a&gt; that the OMV team wrote.&lt;/p&gt;

&lt;h2 id=&quot;cpu-tuning&quot;&gt;CPU tuning&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Rockchip RK3399&lt;/strong&gt; is a fairly new and nichey system on a chip and therefore, its implementation is not widely stable. On Armbian with Kernel 5.4, for example, I’ve noticed a few CPU-related Kernel panics that cause the board to freeze/reboot. &lt;a href=&quot;https://forum.armbian.com/topic/11710-nanopi-m4-v2-m4-image-not-working/page/7/?tab=comments#comment-93238&quot;&gt;Upon further investigation&lt;/a&gt;, it seems this issue can be fixed by changing the default CPU governor from &lt;em&gt;ondemand&lt;/em&gt; to &lt;strong&gt;&lt;em&gt;conservative&lt;/em&gt;&lt;/strong&gt;, and setting the &lt;em&gt;minimum CPU frequency to &lt;strong&gt;1.4GhZ&lt;/strong&gt;&lt;/em&gt; and the &lt;em&gt;maximum to &lt;strong&gt;1.8GhZ&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Be extra careful when tuning your CPU because things can go wrong if you set the board to operate in a condition that it was not meant to.  Move slowly and keep an eye on related statistics afterwards to make sure you’re not going to fry the board.&lt;/p&gt;

&lt;p&gt;There are two ways to change the CPU frequency and governor. The first and recommended one is via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;armbian-config&lt;/code&gt; configuration utility:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Run the configuration utility
armbian-config
# Navitage to CPU options: System / CPU
# Set min frequency to 1416000 Hz
# Set max frequency to 1800000 Hz
# Set the governor to conservative
# Confirm
# Exit the configuration utility
# Reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second method is by making direct changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpufrequtils&lt;/code&gt; file, as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Edit the cpufrequtils file
echo -e 'ENABLE=&quot;true&quot;\nGOVERNOR=conservative\nMAX_SPEED=1800000\nMIN_SPEED=1416000' &amp;gt; /etc/default/cpufrequtils
# Reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My board has been running rock solid after making such changes, so I recommend it.  Of course, you can try to use other configurations.  My understanding from what I read about the Kernel panics is that it’s likely a power issue caused by the rapid switching of CPU frequencies that the &lt;em&gt;ondemand&lt;/em&gt; governor makes.  The &lt;em&gt;conservative&lt;/em&gt; governor also scales the CPU frequency dynamically but much more gradually than the &lt;em&gt;ondemand&lt;/em&gt; governor.
By this logic, setting the governor to either &lt;em&gt;performance&lt;/em&gt; or &lt;em&gt;powersaving&lt;/em&gt; will likely improve stability as well because those governors do not change the CPU frequency at all.&lt;/p&gt;

&lt;h2 id=&quot;pwm-fan-controller&quot;&gt;PWM Fan controller&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;2-PIN PH2.0 connector&lt;/strong&gt; on the SATA hat is a power width modulated (PWM) connector for a 12v fan.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg&quot; alt=&quot;PWM fan connector&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this connector is not enabled by default and furthermore, the Armbian OS does not come with a service that allows you to control the fan speed according to the CPU temperature.  Fortunately, other users have reported this issue before and a few of them have even written scripts to fix this issue.  I’ve made several changes to previous scripts (e.g., &lt;a href=&quot;https://forum.armbian.com/topic/11086-pwm-fan-on-nanopi-m4/?tab=comments#comment-95180&quot;&gt;mar0ni’s script&lt;/a&gt;) and wrote a highly configurable fan controller that uses a bounded model to set the fan speed dynamically.  To make it easier for me (and everyone else), I’ve created a Github repo (&lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan&quot;&gt;cgomesu/nanopim4-satahat-fan&lt;/a&gt;&lt;/strong&gt;) for the fan controller.  For more detailed and updated info about the controller, please refer to the repo (and if you’ve any issues or suggestions, open an issue there).&lt;/p&gt;

&lt;p&gt;Briefly, to install and run the script, read the &lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan/blob/master/README.md&quot;&gt;README.md&lt;/a&gt; or follow these instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install git, clone the repo, and test the script

apt update
apt install git
cd /opt

# From now on, if you're not running as root, append 'sudo' if you run into permission issues
git clone https://github.com/cgomesu/nanopim4-satahat-fan.git
cd nanopim4-satahat-fan

# Allow the script to be executed
chmod +x pwm-fan.sh

# Test the script
./pwm-fan.sh

# Check for any error messages
# When done, press Ctrl+C after to send a SIGINT and stop the script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks good, then run the fan controller in the background (as a systemd service), as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Copy the pwm-fan.service file to your systemd folder
cp /opt/nanopim4-satahat-fan/pwm-fan.service /lib/systemd/system/

# Enable the service and start it
systemctl enable pwm-fan.service
systemctl start pwm-fan.service

# Check the service status to make sure it's running without issues
systemctl status pwm-fan.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, if you don’t want to play around with PWM stuff and are okay with having your fan at 100%, 24/7, then you can just connect it to the board as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg&quot; alt=&quot;PWM fan alt connector&quot; class=&quot;PostImage PostImage--small&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of note, you can also do the latter using the fan controller by running the script in &lt;em&gt;full speed mode&lt;/em&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./pwm-fan.sh -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;assembly&quot;&gt;Assembly&lt;/h1&gt;
&lt;p&gt;If you’re like me, you’ll not receive all parts at the same time and you’ll only print the case after making sure that the board and hat are both working.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg&quot; alt=&quot;Nanopi M4 parts on table&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you’ll want to do is &lt;strong&gt;to flash the OS onto the eMMC&lt;/strong&gt;.  That’s because the eMMC will not be as accessible as a micro-SD card and HDDs once the SATA hat is installed–it is screwed to the board itself, above the audio jack (in v2, and above the HDMI in v1).&lt;/p&gt;

&lt;p&gt;After that, install the eMMC and the SATA hat.  Your SBC should look something like this right now:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg&quot; alt=&quot;Nanopi M4 with hat 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg&quot; alt=&quot;Nanopi M4 with hat 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it’s time to test the board and the SATA hat.  &lt;strong&gt;Connect the board to an Ethernet cable and plug it into your 12v PSU.&lt;/strong&gt;  Observe the red and green LEDs as it turns on and starts running the OS for the first time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg&quot; alt=&quot;Nanopi M4 connected to PSU&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and &lt;strong&gt;find out which IP address your DHCP server gave to your NanoPi M4&lt;/strong&gt; (you might also be able to find it via the hostname nanopim4) and ping it to check it’s up and running.  If it’s replying, then &lt;strong&gt;SSH into it&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; (default pass is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234&lt;/code&gt;).  When logging in for the first time, Armbian will ask to change password and to create a new sudo user.  Go ahead and do that.  (I’ll assume that from this point on, you’ll still be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; instead of the sudo user.  If you’re using the latter though, then add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; prefix to each of the commands below.)&lt;/p&gt;

&lt;p&gt;Afterwards, run the &lt;a href=&quot;https://docs.armbian.com/User-Guide_Armbian-Config/&quot;&gt;&lt;strong&gt;armbian configuration utility&lt;/strong&gt;&lt;/a&gt; to make sure your NAS has the correct time, date, UTC offset, apt mirrors, etc., by running the command&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;armbian-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Depending on what you chose to change here, Armbian will need to reboot.  That’s fine.  Just SSH into it again afterwards.)  Now, let’s make sure all packages that came with the OS are up-to-date by running&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Go back to your router/firewall and assign a static IP address to your NanoPi M4 and then reboot the NanoPi&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After reboot, wait a few seconds and try to SSH into the static IP address you gave to the NanoPi and if everything looks good, it’s time to run the &lt;strong&gt;OMV installation script&lt;/strong&gt; (see &lt;a href=&quot;#software&quot;&gt;&lt;strong&gt;software&lt;/strong&gt;&lt;/a&gt;).  Again, this will take some time.  &lt;strong&gt;Be patient!&lt;/strong&gt;  When it’s done, open a web-browser and type the static IP address of your NanoPi M4.  At this point, it’s a good idea to do at least the following in &lt;strong&gt;System&lt;/strong&gt; (remember to &lt;strong&gt;Apply changed settings&lt;/strong&gt; every time it asks you to):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change your default admin password in &lt;strong&gt;General Settings&lt;/strong&gt;.  This will only affect access to OMV’s webUI.  It has nothing to do with your Linux user credentials;&lt;/li&gt;
  &lt;li&gt;Check &lt;strong&gt;Date/Time&lt;/strong&gt; settings to make sure they are right;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;System Monitoring&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Enable and configure &lt;strong&gt;Notification&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;In &lt;strong&gt;Power Management&lt;/strong&gt;, enable Monitoring and select the Shutdown action for the power button;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reboot&lt;/strong&gt; via the webUI (arrow at the top right corner / reboot).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After rebooting, check your &lt;strong&gt;Storage&lt;/strong&gt; and &lt;strong&gt;Diagnostics&lt;/strong&gt; tabs.  In Storage / Disks, there should be a single device for the OS eMMC.  Later on, we will come back to see if the drives plugged into the SATA hat are showing up here.&lt;/p&gt;

&lt;p&gt;In Diagnostics / Sys Info, check all tabs to make sure they are displaying things correctly.  Your OMV should be collecting Performance Stats at this point, so there should be graphs available.&lt;/p&gt;

&lt;p&gt;(If you’re new to OMV, take your time here and explore it a little bit.  This is a good time to read the Getting Started guide and get yourself familiarized with the webUI.)&lt;/p&gt;

&lt;p&gt;If everything is good, &lt;strong&gt;shutdown the NanoPi via the webUI&lt;/strong&gt;.  With everything off (none of the LEDs should be red), plug one or more HDDs to the SATA hat, as follows (I’m using an old 500GB Toshiba 2.5” HDD in the pictures below just for testing):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg&quot; alt=&quot;Nanopi M4 hat HDD test&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;turn on&lt;/strong&gt; the board.  You should notice a new LED on the other side of the SATA hat lighting up right away.  (The hat has LEDs for each SATA port.  If it’s not lighting up for a connected drive, you already know there’s a problem, like insufficient power or a bad connection.)  Go to the &lt;strong&gt;OMV webUI&lt;/strong&gt; and in &lt;strong&gt;Storage / Disks&lt;/strong&gt;, see if the NanoPi was able to detect your HDD connected to the SATA hat correctly.  If not, press the ‘Scan’ button and check again.  You can repeat this process for each SATA interface if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg&quot; alt=&quot;Storage/Disks OMV webUI&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, if it looks like the board and SATA hat are working as they should, then &lt;strong&gt;it’s time to put everything inside the case&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;my-printed-cases&quot;&gt;My printed cases&lt;/h2&gt;
&lt;p&gt;As I’ve mentioned before, I’m using kirkdis’ 3D printed case. I printed two cases for this project. This is the first one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg&quot; alt=&quot;CGomesu case 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg&quot; alt=&quot;CGomesu case 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s the second (backup) case:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scheisser.net/?p=7781&quot;&gt;In kirkdis’ last post&lt;/a&gt;, he mentioned&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“… to be careful when you put the upper case over the external ports as this is the most fragile part. Designwise I didn´t found a workaround for this area as result it can happen if you push too much that the connections between the ports break off but with a liztle bit patience you can set iz in place as one piece.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think I read his comment a bit too late:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but I managed to fix it a little bit by the end:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;my-opinion-about-the-case&quot;&gt;My opinion about the case&lt;/h3&gt;

&lt;p&gt;The HDD case and disk mounts feel very sturdy in comparison to the board case (a.k.a. upper case). I feel the &lt;strong&gt;board case&lt;/strong&gt; could be improved in the following way:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add &lt;strong&gt;thicker walls&lt;/strong&gt;, especially where the USB ports and the DC jack are;&lt;/li&gt;
  &lt;li&gt;Add a way of &lt;strong&gt;screwing&lt;/strong&gt; the board to the case;&lt;/li&gt;
  &lt;li&gt;Make the base of the fan mount thinner, so we can use the screws that come along with the board, instead of having to find longer screws just for that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding the &lt;strong&gt;whole case&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It could be &lt;strong&gt;a bit larger&lt;/strong&gt; to make room for the cables and improve air flow.  Right now, it’s an extremelly tight fit if you’re using four HDDs and some cables get bent in ways that are probably not good for them in the long run;&lt;/li&gt;
  &lt;li&gt;Because all printed pieces are so tightly connected to each other, &lt;strong&gt;there’s very little room for error&lt;/strong&gt; when printing them. I feel that both the HDD case and board case should be a little looser and rely more on &lt;strong&gt;screws&lt;/strong&gt; to secure the printed pieces to the hardware.  Honestly, it was kind of a pain to attach and remove the board to the board case, and similarly, the HDD stack to the HDD case. It felt &lt;em&gt;too&lt;/em&gt; tight with both cases I printed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Honestly, I don’t know shit about 3d printing.  This is just my opinion on how the case could be improved.  If something I said doesn’t make sense, let me know.&lt;/p&gt;

&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;/h3&gt;
&lt;p&gt;If you don’t want to figure out how to put all pieces together on your own, take a look at kirkdis’ video and notice how he disassembled his unit:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zmxovsvsy_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;My advice is to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start by attaching the HDDs to the four disk mount pieces, so that you have a nice stack by the end of this step;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect all the SATA data and SATA power cables to the SATA hat;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the fan to the mount and the mount to the SATA hat and plug it to the board;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Put the board with the fan mount inside its case, making sure all the SATA cables are accessible from the other side of the case, where the HDDs will be;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the HDD stack to the base of the board case and connect the SATA cables;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now, cover the HDD stack with its case and screw the bottom of the case to the last HDD;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your PSU to the DC power jack on the SATA hat;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Turn it on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà!  Check your OMV webUI to make sure it detected all connected disks and then start mounting them and adding your file sharing configurations, installing applications, adding users, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg&quot; alt=&quot;Nanopi M4 hat 4 HDD test&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final Remarks&lt;/h1&gt;
&lt;p&gt;I’m very happy with this mini-NAS.  It’s arguably not as powerful as my previous HP Proliant Gen8 that I turned into a NAS but it is &lt;strong&gt;more energy efficient&lt;/strong&gt;, &lt;strong&gt;smaller&lt;/strong&gt;, &lt;strong&gt;quieter&lt;/strong&gt; and &lt;strong&gt;cheaper&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Regarding applications, I strongly suggest you to take a look at &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt;.  You can install both Docker and Portainer from within the OMV webUI (System / OMV-Extras / Docker - Docker Install; Portainer Install).  They make installing and managing applications so much easier.  Just be mindful that you’re running docker within an &lt;strong&gt;ARM architecture&lt;/strong&gt;, so any image must have a compatible &lt;strong&gt;arm release&lt;/strong&gt; to be able to run with the NanoPi M4.&lt;/p&gt;

&lt;p&gt;I don’t use any sort of RAID solution for this NAS.  Instead, I use unionFS/mergerFS to pool multiple drives/folders into individual folders and then have various applications running periodic local backups and overnight remote backups.  (The SATA hat &lt;em&gt;does not support hardware RAID&lt;/em&gt; but if you’re into redundancy, then it’s possible to create a software RAID from within the OMV webUI.)&lt;/p&gt;

&lt;p&gt;Here’s an overview of how I’m currently organizing my mini-NAS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png&quot; alt=&quot;mini-NAS drives and folders&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.openmediavault.org/index.php?thread/29089-nanonas-nanopi-m4-3-bay-or-4-bay-most-compact-and-low-consumption-raid/&quot;&gt;According to kirkdis&lt;/a&gt;, a NanoPi M4 mini-NAS with three 2.5” HDDs consumes between &lt;strong&gt;7W&lt;/strong&gt; (idle) and &lt;strong&gt;20W&lt;/strong&gt; (heavy load). I cannot measure the actual power consumption of my build but I think it’s safe to assume that it consumes a bit more power than kirkdis’, especially under heavy load. I estimate that mine consumes between 9W (idle) and 25W (heavy load), owing to the fact that my HDDs have a higher RPM and I’m using an additional 2.5” HDD.  For comparison, a &lt;a href=&quot;https://www.techpowerup.com/review/synology-ds918plus/13.html&quot;&gt;Synology Diskstation DS918+ with four 3.5” HDDs&lt;/a&gt; consumes between 27W (idle) and 44W (heavy load).&lt;/p&gt;

&lt;p&gt;Well, this concludes my NanoPi M4 mini-NAS project. I hope you enjoyed this article and that it will inspire you to create something for your own use-case.  As usual, let me know if you have any questions or suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content&quot;&gt;Bonus Content&lt;/h1&gt;
&lt;h2 id=&quot;backing-up-the-os-disk&quot;&gt;Backing up the OS disk&lt;/h2&gt;
&lt;p&gt;Once you have your system up and running smoothly, it’s a good idea to have &lt;strong&gt;a backup plan&lt;/strong&gt; for cases in which your Armbian OS stops working altogether and you are unable to recover using traditional procedures (see &lt;a href=&quot;#recovery-procedures&quot;&gt;Recovery procedures&lt;/a&gt;).  There are many such strategies but in my opinion, the most straightforward one is to simply &lt;strong&gt;clone the entire mini-NAS OS disk&lt;/strong&gt; every once in a while, which can be done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; GNU/Linux utility.  This allows you to re-flash the image to the existing (or new) microSD/eMMC/HDD/SSD in case something really bad happens.  (For more advanced users, this allows to even make changes to the OS without even having it attached to the NanoPi-M4, which can be done by mounting it locally and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt;ing into it.  However, this latter procedure does require that you’re running the same architecture as your NanoPi-M4.)&lt;/p&gt;

&lt;p&gt;Suppose you installed Armbian OS on an eMMC, as suggested in the &lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt; section of this guide. Then to backup the entire OS disk, which at the end will create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.img&lt;/code&gt; file of it that you can mount or flash onto other disks, follow the steps described next:&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;For this procedure, you will need access to another computer running a &lt;strong&gt;GNU/Linux distribution&lt;/strong&gt;, such as Armbian, Raspberry Pi OS, Debian, etc.  Of course, you can use the NanoPi-M4 itself for this purpose, but this requires a second (independent) disk to boot another Armbian OS, for example.  In addition, you will need access to a &lt;strong&gt;storage space&lt;/strong&gt; (e.g., HDD) that has more space available than the size of the entire disk that we will backup.  For example, if the mini-NAS OS is on a 32GB eMMC, then at first, the backup destination needs to have at least that much space available.  (Afterwards, we can compress the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.img&lt;/code&gt; file to greatly reduce its size.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Shutdown your mini-NAS, turn it off, and then remove its eMMC;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a &lt;a href=&quot;#nanopi-m4-16-32gb-emmc--micro-sd-adapter&quot;&gt;microSD adapter&lt;/a&gt; to connect the eMMC to another computer running a GNU/Linux distribution;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Find the name of the eMMC in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/&lt;/code&gt;.  This can be done with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsblk&lt;/code&gt;, for example:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    0  29.8G  0 disk
├─sda1   8:1    0   300M  0 part
└─sda2   8:2    0  29.5G  0 part
sdb      8:16   0 447.1G  0 disk
├─sdb1   8:17   0   512M  0 part /boot/efi
├─sdb2   8:18   0 445.7G  0 part /
└─sdb3   8:19   0   977M  0 part [SWAP]
sdc      8:32   1   1.9G  0 disk
└─sdc1   8:33   1   1.8G  0 part
sr0     11:0    1  1024M  0 rom  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In this example, let’s assume that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdc&lt;/code&gt; is the eMMC;&lt;/p&gt;

    &lt;p class=&quot;notice--danger&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdc&lt;/code&gt; &lt;strong&gt;is likely not&lt;/strong&gt; the name of the eMMC in your case.  Before continuing, make sure to properly identify the actual disk name of &lt;em&gt;your eMMC&lt;/em&gt; on &lt;em&gt;your system&lt;/em&gt;.&lt;/p&gt;

    &lt;p class=&quot;notice--danger&quot;&gt;A few distributions might auto-mount disk partitions and if this has happened to you (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MOUNTPOINT&lt;/code&gt; is not empty for the eMMC partitions), make sure to &lt;strong&gt;unmount&lt;/strong&gt; any mounted partition of the eMMC before the next step.  You can unmount using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo unmount /full/path/to/mountpoint&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt;, which requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; permission, &lt;strong&gt;clone the entire eMMC&lt;/strong&gt; to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.img&lt;/code&gt; file on your local disk. For this example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.img&lt;/code&gt; file will be under your current user’s home directory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Backups/mini-nas/&lt;/code&gt;) and for future reference, its name will contain both the OS name (e.g., Armbian Buster) and the current date (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date +%Y-%m-%d&lt;/code&gt;):
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ~/Backups/mini-nas/
sudo dd if=/dev/sdc of=~/Backups/mini-nas/emmc-armbian-buster-$(date +%Y-%m-%d).img bs=1k conv=noerror status=progress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;This will take a long time.  Be patient and do not play with the eMMC at all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When done, &lt;strong&gt;compress&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img&lt;/code&gt; file into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.img.tar.gz&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar&lt;/code&gt; utility to greatly reduce its size:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -czvf ~/Backups/mini-nas/emmc-armbian-buster-$(date +%Y-%m-%d).img.tar.gz ~/Backups/mini-nas/emmc-armbian-buster-$(date +%Y-%m-%d).img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;This also might take a long time.  Be patient.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Finally, now that you have a compressed version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.img&lt;/code&gt; file, you can delete the original one to save space on your local disk:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm ~/Backups/mini-nas/emmc-armbian-buster-$(date +%Y-%m-%d).img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;emergency-micro-sd&quot;&gt;Emergency micro-SD&lt;/h2&gt;
&lt;p&gt;In addition to backing up your existing OS, I suggest having a tiny microSD (e.g., 2GB) that contains a &lt;em&gt;trimmed down version&lt;/em&gt; of the same Armbian as your mini-NAS.  This trimmed down version is just the base Armbian image that you used to build your mini-NAS, per the instructions in the &lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt; section, except that it does not need to have OMV installed.  Optionally, you could install additional utilities to the micro-SD that will help you troubleshooting issues with the eMMC and the OS installed on it (e.g., &lt;a href=&quot;https://www.kernel.org/doc/html/latest/driver-api/mmc/mmc-tools.html&quot;&gt;eMMC tools&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why, though?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One reason to have an emergency micro-SD is that it can take a lot of time to remove the eMMC from a NanoPi-M4 mini-NAS.  Remember that the eMMC module is under the SATA hat, which means you’ll need to disassemble the whole thing to finally have access to it if you ever need to.  On the other hand, the micro-SD slot is easily accessible and if for some reason your board stops working, you can attach the emergency micro-SD to quickly rule out major hardware issues, such as a bad PSU or a broken critical board component–that is, if the board does not boot from the eMMC but it does from the micro-SD, then the issue ought to be related to either the eMMC itself (hardware-wise) or the software installed on it.  On top of that, the emergency micro-SD can provide an environment to troubleshoot your eMMC and its partitions (e.g., check integrity of the filesystem on the eMMC via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsck&lt;/code&gt;) and worst case scenario, re-flash your backup image onto the still attached eMMC.&lt;/p&gt;

&lt;h2 id=&quot;recovery-procedures&quot;&gt;Recovery procedures&lt;/h2&gt;
&lt;p&gt;If for any reason you find yourself in a situation in which your mini-NAS won’t boot anymore or you experience instability, your board might be having either a hardware issue (e.g., bad PSU) or software issue (e.g., an update that breaks one ore more boot configuration files).  The folks at Armbian have documented guides to help users in such scenarios, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href=&quot;https://docs.armbian.com/User-Guide_Basic-Troubleshooting/#hardware-troubleshooting-guide&quot;&gt;hardware troubleshooting guide&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;and basic &lt;a href=&quot;https://docs.armbian.com/User-Guide_Recovery/&quot;&gt;recovery procedures&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this section, I will mention an &lt;strong&gt;additional procedure&lt;/strong&gt;.  More specifically, I’ll describe how to use the GNU/Linux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; (&lt;strong&gt;change root&lt;/strong&gt;) tool to debug and fix issues on a broken OS disk partition. Most users will find this procedure fairly complicated because it requires a little bit of preparation but the gist of it is very simple.  In brief, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; allows us to (temporarily) move our current root directory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;) to another (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/emmc&lt;/code&gt;)–that is, the mountpoint &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/emmc&lt;/code&gt; is interpreted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; in the chroot environment. There are many use cases for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; but in our case, we will use this to make changes to the eMMC &lt;em&gt;as if we were running it&lt;/em&gt;. For example, once we’ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt;ed into the eMMC, we can run things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install&lt;/code&gt; to install new packages or upgrade/downgrade old ones &lt;em&gt;onto the eMMC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This approach was motivated by &lt;a href=&quot;https://forum.armbian.com/topic/20043-nanopi-m4-v2-4gb-doesnt-start-after-installing-updates/&quot;&gt;an issue I had with my NanoPi-M4 that broke it&lt;/a&gt;–it refused to boot after an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt upgrade&lt;/code&gt;–and &lt;a href=&quot;https://forum.armbian.com/topic/20043-nanopi-m4-v2-4gb-doesnt-start-after-installing-updates/?do=findComment&amp;amp;comment=136958&quot;&gt;the solution to it&lt;/a&gt;, as originally described by the Armbian forum user &lt;a href=&quot;https://forum.armbian.com/profile/16146-gilarelli/&quot;&gt;gilarelli&lt;/a&gt;.  In this section, I used my issue as example but of course, the procedure outlined next can be adapted for any other cases that would benefit from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; environment (e.g., building images from source).  More specifically, I described the issue first, pointed out the (likely) culprits, and then used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; to implement the fix.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The issue&lt;/strong&gt;: After an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt upgrade&lt;/code&gt;, the Armbian &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21.08&lt;/code&gt; OS (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buster&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;legacy kernel 4.4.213-rk3399&lt;/code&gt;) stopped working altogether with my NanoPi-M4 v2. (Of note, I used it as NAS with &lt;a href=&quot;#&quot;&gt;Openmediavault&lt;/a&gt;. This matters because OMV makes changes to many files, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/resolv.conf&lt;/code&gt;, which in turn affect the procedures in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; environment later on.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The culprit(s)&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt upgrade&lt;/code&gt; installed four new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;22.02&lt;/code&gt; packages over their respective &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21.08&lt;/code&gt; versions, namely:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-dtb-legacy-rk3399&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-headers-legacy-rk3399&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-image-legacy-rk3399&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-libc-dev&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p class=&quot;notice&quot;&gt;Per &lt;a href=&quot;https://forum.armbian.com/topic/20043-nanopi-m4-v2-4gb-doesnt-start-after-installing-updates/?do=findComment&amp;amp;comment=137274&quot;&gt;gilarelli’s new post&lt;/a&gt;, it looks like the culprit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-dtb-legacy-rk3399&lt;/code&gt;, which does not include a device tree file for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nanopi-m4v2&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt;: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; to &lt;em&gt;downgrade&lt;/em&gt; all four culprit packages. This can be done by mounting the eMMC partition onto another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm64&lt;/code&gt; machine, such as the NanoPi-M4 v2 itself (or Raspberry Pi 4, or Odroid N2/+, and so on), then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt;ing into it, and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install&lt;/code&gt; to downgrade the packages.&lt;/p&gt;

    &lt;p class=&quot;notice&quot;&gt;Alternatively, &lt;a href=&quot;https://forum.armbian.com/topic/20043-nanopi-m4-v2-4gb-doesnt-start-after-installing-updates/?do=findComment&amp;amp;comment=136958&quot;&gt;as &lt;em&gt;gilarelli&lt;/em&gt; pointed out&lt;/a&gt;, we can manually download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.deb&lt;/code&gt; files via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; and then install with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dpkg&lt;/code&gt;. The advantage of this procedure is that in the last step of the implementation of the solution, we can download the packages using our host OS and just copy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt;) them to the eMMC, which can be done without having to enable/configure network connectivity inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; environment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement the solution, you will need the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;#emergency-micro-sd&quot;&gt;micro-SD&lt;/a&gt; to boot a clean Armbian OS using the NanoPi-M4 itself;&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Optional but strongly recommended.&lt;/em&gt;) A &lt;a href=&quot;#backing-up-the-os-disk&quot;&gt;backup image of the entire eMMC&lt;/a&gt; in case something goes terribly wrong;&lt;/li&gt;
  &lt;li&gt;WAN connectivity to download and install packages via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;.  That is, your NanoPi-M4 needs access to the Internet, so make sure it is connected to a network with access to the WAN.&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Optional.&lt;/em&gt;) Monitor and keyboard. Alternatively, you can connect to it remotely via SSH using the credentials and configuration from the micro-SD OS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you get those things sorted out, follow the steps outlined next:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Turn off your NanoPi-M4, remove any unnecessary USB peripherals, then connect it to a monitor and a simple USB keyboard. (Alternatively, you could use a serial connection or SSH for the next steps, too;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the emergency micro-SD and turn the board on. If it boots successfully, then continue;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Identify the disk name of the eMMC on your system (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsblk&lt;/code&gt;) and run a filesystem integrity check on it:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fsck /dev/mmcblkXpY -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmcblkXpY&lt;/code&gt; is the primary partition of your eMMC. Continue if no errors are found;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a new directory called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emmc&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/emmc&lt;/code&gt;) and mount the eMMC primary partition on it:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /mnt/emmc
mount /dev/mmcblkXpY /mnt/emmc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Prepare the chroot environment as follows:
    &lt;ul&gt;
      &lt;li&gt;mount the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; on the eMMC mounted partition:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount -t proc /proc /mnt/emmc/proc/
mount -t sysfs /sys /mnt/emmc/sys/
mount --rbind /dev /mnt/emmc/dev/
mount --rbind /run /mnt/emmc/run/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;test that you can connect to the WAN via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;. if successful, backup the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolv.conf&lt;/code&gt; on the eMMC and copy the one from your micro-SD to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eMMC&lt;/code&gt;, which should ensure WAN connectivity in the chroot environment as well:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv /mnt/emmc/etc/resolv.conf /mnt/emmc/etc/resolv.conf.backup
cp /etc/resolv.conf /mnt/emmc/etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot&lt;/code&gt; the mounted eMMC primary partition:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chroot /mnt/emmc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;which should move your terminal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; (root), that is, the chroot environment. If at any point you want to exit, just type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Test WAN connectivity inside the chroot environment (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;) and if it looks good, then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; to downgrade the culprit packages, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;If you have issues with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; at this point (e.g., stuck at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Waiting for headers&lt;/code&gt;), try cleaning old cached files and rebuilding the lists: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt clean &amp;amp;&amp;amp; mv /var/lib/apt/lists /var/lib/apt/lists.old &amp;amp;&amp;amp; mkdir -p /var/lib/apt/lists/partial &amp;amp;&amp;amp; apt clean &amp;amp;&amp;amp; apt update&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install linux-dtb-legacy-rk3399=21.08.1 linux-headers-legacy-rk3399=21.08.1 linux-image-legacy-rk3399=21.08.1 linux-libc-dev=21.08.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hold&lt;/code&gt; mark to the culprit packages to prevent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; from installing/removing/purging/upgrading them until the mark is removed:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-mark hold linux-dtb-legacy-rk3399 linux-headers-legacy-rk3399 linux-image-legacy-rk3399 linux-libc-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;notice&quot;&gt;Once you learn that &lt;strong&gt;a fix has been added to a new release&lt;/strong&gt; of each package marked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hold&lt;/code&gt;, you can remove the mark via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-mark unhold PKG_NAME&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Exit the chroot environment:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restore the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/resolv.conf&lt;/code&gt; on the eMMC:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv /mnt/emmc/etc/resolv.conf.backup /mnt/emmc/etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Shutdown (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutdown now&lt;/code&gt;), turn off the NanoPi-M4, and then remove the micro-SD from it;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Turn the board back on to check if it boots successfully from the eMMC. If it doesn’t, go back to the first step and review the procedure and make additional changes in the chroot environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, remember that the same issue can have different causes. Make sure to inspect closely the error messages related to yours and search the official &lt;a href=&quot;https://forum.armbian.com/&quot;&gt;Armbian Forum&lt;/a&gt; for posts related to an identical or similar issue if you are having trouble fixing yours.&lt;/p&gt;

&lt;h2 id=&quot;real-time-clock&quot;&gt;Real time clock&lt;/h2&gt;
&lt;p&gt;The NanoPi M4 comes with a built-in real time clock (RTC) module and to use it, all that you need is a compatible &lt;strong&gt;RTC battery&lt;/strong&gt; with a &lt;em&gt;Molex 53398-0271 connector&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg&quot; alt=&quot;RTC battery&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, its main purpose is to keep track of time, regardless of the board’s power state.  However, it also supports waking up the NanoPi from various power states.  On Linux, you can access and configure all such options with a package called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rtcwake&lt;/code&gt;, which comes pre-installed on Armbian (and pretty much any other Linux distro, by the way, because it’s part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util-linux&lt;/code&gt; core package).  (If the package is not accessible from within your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whereis rtcwake&lt;/code&gt; and type the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/to/rtcwake&lt;/code&gt;.)  You can find info about its usage with the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; argument. For more detailed info, read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man rtcwake&lt;/code&gt;. An RTC battery is &lt;em&gt;really&lt;/em&gt; cheap (&lt;a href=&quot;https://www.amazon.com/Rtc-Battery/s?k=Rtc+Battery&quot;&gt;less than $10&lt;/a&gt;) and worthy of your attention for such a key component of a home network.  You definitely don’t want your mini-NAS time travelling to 1970…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg&quot; alt=&quot;RTC battery&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="sbc" /><category term="arm" /><category term="homelab" /><category term="homeserver" /><category term="storage" /></entry></feed>