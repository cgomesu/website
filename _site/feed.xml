<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-26T09:39:35-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CGomesu</title><subtitle>A blog and portfolio website built with Jekyll and hosted on Github Pages</subtitle><author><name>Carlos Gomes</name></author><entry><title type="html">The ASRock J3355b-itx pfSense box</title><link href="http://localhost:4000/blog/Pfsense-white-box/" rel="alternate" type="text/html" title="The ASRock J3355b-itx pfSense box" /><published>2020-06-25T10:31:25-03:00</published><updated>2020-06-25T10:31:25-03:00</updated><id>http://localhost:4000/blog/Pfsense-white-box</id><content type="html" xml:base="http://localhost:4000/blog/Pfsense-white-box/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense CE&lt;/a&gt; is a free, &lt;a href=&quot;https://github.com/pfsense/pfsense&quot;&gt;open-source&lt;/a&gt;, and very popular &lt;strong&gt;firewall/router&lt;/strong&gt; that runs on &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt; and is developed by &lt;a href=&quot;https://www.netgate.com/&quot;&gt;Netgate&lt;/a&gt;.  Even though Netgate sells &lt;a href=&quot;https://www.netgate.com/products/appliances/&quot;&gt;official pfSense appliances&lt;/a&gt;, it’s possible to build your own, custom-made pfSense box for (way) less money (at the expense of way less support from Netgate).&lt;/p&gt;

&lt;p&gt;In this article, I talked about &lt;strong&gt;my ASRock mini-ITX pfSense box project&lt;/strong&gt;.  In the first part, I listed all the necessary hardware to build the box, and in the second part, I briefly talked about the software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;This project has five main hardware components, namely the &lt;strong&gt;motherboard&lt;/strong&gt; (mobo), the &lt;strong&gt;network interface card&lt;/strong&gt; (NIC), &lt;strong&gt;storage&lt;/strong&gt;, &lt;strong&gt;case&lt;/strong&gt;, and &lt;strong&gt;power supply unit&lt;/strong&gt; (PSU).&lt;/p&gt;

&lt;h2 id=&quot;motherboard&quot;&gt;Motherboard&lt;/h2&gt;
&lt;p&gt;Chances are that if you search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfSense white-box&lt;/code&gt;, you’ll find someone mentioning the &lt;a href=&quot;https://www.asrock.com/mb/Intel/J3355B-ITX/&quot;&gt;&lt;strong&gt;ASRock J3355b-itx&lt;/strong&gt;&lt;/a&gt;.  This is definitely &lt;strong&gt;not a top of the line&lt;/strong&gt; mobo but it comes with a &lt;strong&gt;passively cooled &lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark/products/95597/intel-celeron-processor-j3355-2m-cache-up-to-2-5-ghz.html&quot;&gt;Intel dual-core processor&lt;/a&gt;&lt;/strong&gt; (AES-NI enabled), two &lt;strong&gt;SO-DIMM DDR3L&lt;/strong&gt; memory slots, a &lt;strong&gt;PCIe 2.0x16&lt;/strong&gt; expansion slot, and 2x SATA III ports.  On top of that, this is a &lt;strong&gt;&lt;em&gt;mini&lt;/em&gt;-ITX mobo&lt;/strong&gt;, so we can put it inside a low-profile case.  At the very least, if you’re looking for a more recent mobo, my suggestion is to use the ASRock J3355b-itx as reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg&quot; alt=&quot;ASRock J3355b-itx&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;network-interface-card&quot;&gt;Network interface card&lt;/h2&gt;
&lt;p&gt;Even though the ASRock mini-itx comes with a built-in NIC, it’s a single port Realtek NIC that pfSense will likely not recognize out of the box.  Ideally, you’d buy and install an Intel NIC using the PCI-e expansion slot on the ASRock mobo.  The card choice depends on your needs but at the very least, consider a &lt;strong&gt;Gigabit Intel NIC with two ports&lt;/strong&gt;, one for WAN and another for LAN.  (It’s possible to use a single port with a VLAN-capable switch but this is a far more complex setup.)  Also, make sure the Intel NIC comes with a &lt;strong&gt;low-profile support&lt;/strong&gt; or it won’t fit many min-ITX cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg&quot; alt=&quot;Intel NIC with 2 ports&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;/h2&gt;
&lt;p&gt;pfSense uses very little storage space, so you don’t need TBs of storage here.  The things that matter are read/write speed and reliability.  A simple &lt;strong&gt;120GB solid-state drive (SSD)&lt;/strong&gt; will be more than enough, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg&quot; alt=&quot;SSD&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;case&quot;&gt;Case&lt;/h2&gt;
&lt;p&gt;You can use &lt;em&gt;any&lt;/em&gt; mini-ITX case &lt;em&gt;as long as&lt;/em&gt; it has support for at least &lt;strong&gt;one expansion slot&lt;/strong&gt;.  Also, note that some mini-itx cases have an expansion slot parallel to the mobo (it sits above the mobo’s i/o plate), instead of perpendicular (next to the mobo’s i/o plate).  That will usually be okay but you’ll need to buy compatible PCI-e extension cable then.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-supply-unit&quot;&gt;Power supply unit&lt;/h2&gt;
&lt;p&gt;If you bought an expensive case with a built-in PSU, go ahead and use it.  However, if you bought a cheap case with a PSU or one that even doesn’t have a built-in PSU, then buy and use a &lt;a href=&quot;https://www.amazon.com/s?k=pico+PSU&quot;&gt;&lt;strong&gt;pico PSU&lt;/strong&gt;&lt;/a&gt;. My experience is that &lt;strong&gt;cheap PSUs come with bad fans&lt;/strong&gt;, so avoid them if your firewall will be next to anyone in the house because it will eventually start making a lot of noise.  A pico PSU is the way to go, and because this box uses very little power, buy a low power PSU (anything between 60W-180W should be okay, for reference).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg&quot; alt=&quot;PicoPSU&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Software-wise, there’s not much to say other than&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the ISO from the &lt;a href=&quot;https://www.pfsense.org/download/&quot;&gt;official website&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Check the SHA signature of the downloaded file against the one from the official website;&lt;/li&gt;
  &lt;li&gt;Flash the image onto a USB stick;&lt;/li&gt;
  &lt;li&gt;Connect a monitor and keyboard to your pfSense box;&lt;/li&gt;
  &lt;li&gt;Insert the USB stick into your pfSense box, turn it on, and follow the instructions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you want a more in-depth look into installation and initial configuration, check &lt;a href=&quot;https://docs.netgate.com/pfsense/en/latest/install/installing-pfsense.html&quot;&gt;&lt;strong&gt;the official docummentation&lt;/strong&gt;&lt;/a&gt;.  Alternatively, there’s a very easy to follow video tutorial that &lt;a href=&quot;https://www.youtube.com/channel/UCHkYOD-3fZbuGhwsADBd9ZQ&quot;&gt;Lawrence Systems&lt;/a&gt; put together. (It’s a bit old but still valid.)&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/9kSZ1oM-4ZM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes the basics of a cheap, low-profile, and low-power (yet powerful) pfSense white-box.  I’ve never had any issues with this hardware and recommend it to anyone interested in diving into firewalls or just looking for something a bit more advanced than what commercial routers can offer.  If you want to try something different than pfSense, take a look at &lt;a href=&quot;https://opnsense.org/&quot;&gt;OPNsense&lt;/a&gt;–a pfSense fork–for another free and open-source firewall software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="homelab" /><category term="homeserver" /><category term="firewall" /><category term="network" /></entry><entry><title type="html">Youtube live-streams as IPTV channels for TVHeadend</title><link href="http://localhost:4000/blog/Youtube-as-IPTV-with-TVH/" rel="alternate" type="text/html" title="Youtube live-streams as IPTV channels for TVHeadend" /><published>2020-05-07T00:00:00-03:00</published><updated>2020-05-07T00:00:00-03:00</updated><id>http://localhost:4000/blog/Youtube-as-IPTV-with-TVH</id><content type="html" xml:base="http://localhost:4000/blog/Youtube-as-IPTV-with-TVH/">&lt;h1 id=&quot;update-tracker&quot;&gt;Update tracker&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;June 23rd, 2020: Moved content from Blogger to my website and converted to markdown.  Fixed typos I found.&lt;/li&gt;
  &lt;li&gt;May 19th, 2020: Added info about TVH m3u re-fetch period and youtube4tvh cronjob for streams that change very often.&lt;/li&gt;
  &lt;li&gt;May 14th, 2020: Added more info about streamlink install and outdated versions; fixed a few typos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this guide, we will learn how to feed Youtube live-streams into a TVHeadend (TVH) server as IPTV channels.  This is a fairly advanced guide but I’ll try my best to make it as digestible as possible to any individual with minimal knowledge about selfhosting.  You will need a &lt;strong&gt;Linux distro&lt;/strong&gt; (e.g., Debian, Ubuntu) to follow this guide.  All the software described here is &lt;strong&gt;free and open-source&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’m not an expert in any of the topics mentioned here.  If you have suggestions on how to improve something, please leave a comment below stating what could be changed and why it should be changed.&lt;/p&gt;

&lt;p&gt;Youtube4tvh is a utility program I wrote just for this guide.  I welcome anyone who wants to improve it or fork into something more abstract.  If that sounds like something you want to do, please head to &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;my Github repo&lt;/a&gt; and hit me up once you’ve done some coding.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There are multiple reasons to watch Youtube live-streams as if they were IPTV channels.  Here are a reasons few that come to mind right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s free and all programs are open-source;&lt;/li&gt;
  &lt;li&gt;There is at least one Youtube 24/7 live-stream that you enjoy. Some of my personal favorites, per category:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;News&lt;/strong&gt;: ABC News AU, Sky News, DW in English, France 24 in English&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: NASA TV, Space Videos, Space &amp;amp; The Universe HD&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Nature&lt;/strong&gt;: Cornell Lab of Ornithology Cams, Monterey Bay Aquarium, Explore Oceans, Explore Nature, Volcanoverse&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Other&lt;/strong&gt;: Virtual Railfan, earthTV, I Love You Venice,&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Radio&lt;/strong&gt;:  BGM channel, Cafe del Mar, Stay See&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You want to make selected Youtube live-streams available as IPTV channels through a TVH server (TVH -&amp;gt; Streamlink pipe -&amp;gt; Youtube);&lt;/li&gt;
  &lt;li&gt;You want to keep your streaming services as centralized as possible.  That is, instead of multiple apps, you can manage all of them using a single application (TVH);&lt;/li&gt;
  &lt;li&gt;You want to take advantage of one of the fastest and most reliable media delivery networks out there (Youtube’s CDN);&lt;/li&gt;
  &lt;li&gt;You dislike Youtube ads (Streamlink will get rid of them without the need to install any filtering system);&lt;/li&gt;
  &lt;li&gt;You like how it looks for the client:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/9FSPf5wISUY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;p&gt;By the end of the guide, you’ll have learned how to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a customized Youtube live-stream m3u playlist with the help of youtube4tvh;&lt;/li&gt;
  &lt;li&gt;Install a TVH server on a Linux machine;&lt;/li&gt;
  &lt;li&gt;Install Streamlink to pipe live-stream data into a TVH server;&lt;/li&gt;
  &lt;li&gt;Add a Youtube live-stream m3u playlist to a TVH server as an IPTV auto network;&lt;/li&gt;
  &lt;li&gt;Configure a TVH server to auto-map muxes to channels using bouquets;&lt;/li&gt;
  &lt;li&gt;Create a cronjob to automatically update the Youtube live-stream m3u playlist every day at 6am.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;client-server-layout&quot;&gt;Client-server layout&lt;/h1&gt;
&lt;p&gt;There are three main components to this setup, namely &lt;strong&gt;TVH&lt;/strong&gt;, &lt;strong&gt;Streamlink&lt;/strong&gt;, and &lt;strong&gt;youtube4tvh&lt;/strong&gt;, which are all open-source and free:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;&lt;strong&gt;TVHeadend&lt;/strong&gt;&lt;/a&gt;: Tvheadend is a TV streaming server for Linux supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, IPTV, SAT&amp;gt;IP and other formats through the unix pipe as input sources.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-github.png&quot; alt=&quot;TVH Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-webui.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-webui.png&quot; alt=&quot;TVH WebUI&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;&lt;strong&gt;Streamlink&lt;/strong&gt;&lt;/a&gt;: Streamlink is a CLI utility which pipes video streams from various services into a video player.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/streamlink-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/streamlink-github.png&quot; alt=&quot;Streamlink Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;&lt;strong&gt;youtube4tvh&lt;/strong&gt;&lt;/a&gt;: Youtube4tvh is a Python CLI program that uses Youtube API to create (or update) m3u playlists of live-streams that are piped into a TVH server via Streamlink.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/youtube4tvh-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/youtube4tvh-github.png&quot; alt=&quot;youtube4tvh Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this guide, we will assume that such components are related to each other and any clients (any IPTV players, such as VLC, Plex or a Kodi PVR) according to the following layout:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-layout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-layout.jpg&quot; alt=&quot;Client-server layout&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, once you’re done with the initial configuration, you can try changing it to accomodate your needs.  For example, you can &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/VLC_Multicasting&quot;&gt;multicast a live-stream to a TVH server using VLC&lt;/a&gt;.  This will let you use a single connection to Youtube be distributed to multiple clients, instead of creating multiple connections to Youtube–definitely take a look at it if you’re serving a large number of clients with your TVH server.  Also, you might want to pipe the Streamlink data to FFMPEG before sending to TVH, which will let you set custom AV codecs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;youtube4tvh&quot;&gt;Youtube4tvh&lt;/h1&gt;
&lt;p&gt;This is a utility program that will let us create and manage m3u playlist of Youtube live-streams.  It uses Youtube API, so we’ll need to create one (or more) to use it before anything else.  APIs have daily quotas that this program will reach fairly quickly.  Fortunately, those quotas are per project, and you should be able to create multiple projects with a free account.  For more info, checkout &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;the github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-a-youtube-api-v3&quot;&gt;Create a Youtube API v3&lt;/h2&gt;
&lt;p&gt;You can find instructions on &lt;a href=&quot;https://developers.google.com/youtube/v3/getting-started&quot;&gt;the official page&lt;/a&gt;.  (Don’t follow that video though. It’s outdated as fuck.)  If you don’t want to head there, here is a streamlined version:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sing up for or Log into your Google account;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to your &lt;a href=&quot;https://console.developers.google.com/apis/&quot;&gt;API dashboard&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a project (top left &amp;gt; new project);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give the project a name and create it (this should take a few seconds…);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the project you just created and in the dashboard, go to ‘+ Enable APIs and Services’;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for Youtube Data API v3 and enable it;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It should redirect you to its dashboard but if doesn’t, select Manage;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Create Credentials (if you don’t see a button, just go to Credentials in the side menu);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s going to ask you which API you’re going to use (select Youtube Data API v3), where you’ll be calling it from (Other UI) and what data (Public data). Then select ‘What credentials do I need?’ and it will generate an unrestricted API for the project you created;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the side menu, go to Credentials and Edit the API Key you generated;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under ‘API restrictions’, select Restrict key &amp;gt; Youtube Data API v3 &amp;gt; Save.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! Your key is that long string with random letters and numbers in the column labeled &lt;strong&gt;Key&lt;/strong&gt;. Whenever you see a field to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt;, use that one.  Also, you can repeat this process to generate additional keys.  It’s a good idea to do so.&lt;/p&gt;

&lt;h2 id=&quot;install-youtube4tvh&quot;&gt;Install youtube4tvh&lt;/h2&gt;
&lt;p&gt;Open a terminal window and run the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install git python-pip
cd /opt
sudo git clone https://github.com/cgomesu/youtube4tvh.git
cd youtube4tvh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install required packages via pip:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the program (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt; for your API key)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd youtube4tvh
python main.py --apikey=YOURKEY --channelname=&quot;DW News&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, there should be an output.m3u file on the same folder you are (you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to list files).&lt;/p&gt;

&lt;p&gt;If you run into permission issues, make sure to use a user with sudo perission.  Also, if your user is not allowed to write to /opt, then run the follwing (changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURUSER&lt;/code&gt; for your sudo username):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R YOURUSER:sudo /opt/youtube4tvh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks good, go ahead and add permission to execute the streamlink.sh helper script that will pipe data into TVH (if you want to change settings from streamlink, change them in the streamlink.sh file):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod +x /opt/youtube4tvh/streamlink.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;This program has two modes of execution, &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=add&lt;/code&gt; is the default mode and it will create an m3u file if you don’t specify one.  However, if you do provide an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput=/path/to/file.m3u&lt;/code&gt;, it will instead append channels to output.m3u. (If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uoutput&lt;/code&gt; are the same, then it appends to itself.)&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=update&lt;/code&gt; will parse an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput=/path/to/file.m3u&lt;/code&gt; and update all URLs to make sure they are the ones currently available (instead of a broken URL).  This is useful because even though some Youtube channels stream 24/7, they will at times stop and restart the stream, which will cause Youtube to generate a new URL to their live-stream.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=update&lt;/code&gt; will make sure your output.m3u is always using the correct URLs.  (Again, if you want to update the same input file, then point both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uoutput&lt;/code&gt; to the same m3u file.)&lt;/p&gt;

&lt;p&gt;First, we will generate a youtube.m3u file with the channel “DW News”.  Afterwards, we will append a couple of additional channels to the youtube.m3u file.  Then, we will create a cronjob to keep our youtube.m3u up-to-date.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create youtube.m3u file and add the channel “DW News” (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt; to your actual API key):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/youtube4tvh/youtube4tvh
python main.py --apikey=YOURKEY --m3uoutput=youtube.m3u --channelname=&quot;DW News&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Append the channel “France 24 English” to the youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python main.py --apikey=YOURKEY --m3uinput=youtube.m3u --m3uoutput=youtube.m3u --channelname=&quot;France 24 English&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Append the channel “Explore Nature” to the youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python main.py --apikey=YOURKEY --m3uinput=youtube.m3u --m3uoutput=youtube.m3u --channelname=&quot;Explore Nature&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a cronjob to update the youtube.m3u file everyday at 6am. First, make a backup or your youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /opt/youtube4tvh/youtube4tvh/youtube.m3u /opt/youtube4tvh/youtube4tvh/youtube.m3u.backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a cronjob:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add the following at the bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 6 * * * /usr/bin/python /opt/youtube4tvh/youtube4tvh/main.py --apikey=YOURKEY --m3uinput=/opt/youtube4tvh/youtube4tvh/youtube.m3u --m3uoutput=/opt/youtube4tvh/youtube4tvh/youtube.m3u --mode=update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Save and exit (ctrl+x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all we need to do with this program.  If you ever feel like adding a new channel to the playlist, you can just repeat the “Append” examples with the new channel instead.&lt;/p&gt;

&lt;p&gt;If you want to remove a channel, you’ll need to manually edit the youtube.m3u file (remove the channel’s #EXTINF row and the one immediately below it, which contains the pipe command).  You can also manually edit the m3u file to add a group-title to the channels (see sample/input.m3u, for example), change their order, etc.  Just use your favorite text editor to do that and when you’re done, save preserving the .m3u extension.&lt;/p&gt;

&lt;h2 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;Theoretically, the m3u playlists can contain as many streams as you want.  However, as a general rule of thumb, I find it useful to create one m3u playlist for each type of streaming channel–for example, youtube-webcams.m3u, youtube-news.m3u, youtube-radio.m3u, and etc–and then have a unique API key for each of them.  This way, I can run the youtube4tvh cronjob more often, thus reducing the chance of having broken URLs in the m3u file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;streamlink&quot;&gt;Streamlink&lt;/h1&gt;
&lt;p&gt;Streamlink is an awesome utility program and if you’ve never used it before, make sure to check their &lt;a href=&quot;https://streamlink.github.io/&quot;&gt;documentation&lt;/a&gt;.  Here, we will only use it to pipe data from Youtube to a TVH server but Streamlink is able to pipe video streams from many other platforms (Twitch, Dailymotion, etc.).&lt;/p&gt;

&lt;p&gt;To install Streamlink, please follow the instructions on &lt;a href=&quot;https://streamlink.github.io/install.html&quot;&gt;the official website&lt;/a&gt;.  Make sure you’re running the latest version afterwards.  You can find the installed version by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink --version&lt;/code&gt;, which should be the same one as the latest version on their &lt;a href=&quot;https://github.com/streamlink/streamlink/releases&quot;&gt;Releases page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(It looks like multiple repos are distributing a much older version than the 1.4.1, which is the latest when this article was first posted.  If that’s the case for your distro, take a look at the PyPi and source installation on their Install page.  Uninstall the older version and install via pip and if that doesn’t work, try cloning their git repo and install via setup-tools, very much like the youtube4tvh utility.)&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/youtube4tvh&lt;/code&gt;, you’ll notice a file called &lt;strong&gt;streamlink.sh&lt;/strong&gt;.  That is a helper script that TVH will use to get the video stream from a Youtube URL.  If you open it with a text editor, you’ll see the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
####################################################
################ Streamlink script #################
####################################################
# The default version writes the data from the best
# stream ($1, the first argument) to stdout using a
# thread pool of size 2 to download HLS segments.
# Everything else follows default values.
#
# Inspired by niwi_niwi's post at
# https://tvheadend.org/boards/5/topics/35658
#
# More info: https://streamlink.github.io/cli.html
#
####################################################
#### Add/modify script according to your needs #####
streamlink \
--stdout \
--hls-segment-threads 4 \
--hls-live-edge 10 \
&quot;$1&quot; best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual command to execute streamlink and its options are all at the bottom.  If you know what you’re doing and want to play with different configurations, go ahead and change the arguments in the streamlink command.  Say, if instead of playing always the ‘best’ stream you want to play the 480p version, then just change it to that (but always leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stdout&lt;/code&gt; or you won’t be able to pipe data to TVH).  Once again, &lt;a href=&quot;https://streamlink.github.io/cli.html&quot;&gt;check the docs&lt;/a&gt; for a comprehensive list of options.&lt;/p&gt;

&lt;p&gt;To test the script, you can simply execute the following (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOUTUBEURL&lt;/code&gt; for the URL of a Youtube live-stream):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash streamlink.sh YOUTUBEURL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a whole bunch random characters as streamlink outputs the video stream to the terminal.  Hit ctrl+c to terminate the process.  If you have a player, you can run the command above with a pipe to the player.  Using &lt;a href=&quot;https://github.com/videolan/vlc&quot;&gt;&lt;strong&gt;VLC&lt;/strong&gt;&lt;/a&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash streamlink.sh YOUTUBEURL | vlc -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-server&quot;&gt;TVH server&lt;/h1&gt;
&lt;p&gt;TVH was a game-changer for me.  It offers a centralized system to manage multiple IPTV networks and TV tuners.  I can fully customize how all channels will show up to all my clients and that’s so much better than using multiple (and sometimes shady) applications developed by each IPTV provider.  If a channel is down, I can tell TVH to automatically remove it or remap to another provider.  If the EPG is not working, I can tell TVH to fetch from another source.  If a client does not support a particular type of codec, I can create a profile that uses the codec that works with it.  And all those changes are automatically applied to all clients, without the need to change one by one, because they are all getting data from my TVH server instead of external sources.  (It’s the TVH server that should always do that latter.)&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install a TVH server, please follow the instructions on &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Download&quot;&gt;the official website&lt;/a&gt;.  I strongly suggest you to install from the repo to make it easy to update with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt; command.  Also, make sure you’re running the latest version of it afterwards.&lt;/p&gt;

&lt;h2 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h2&gt;
&lt;p&gt;After installing TVH, head to the webUI on &lt;a href=&quot;http://localhost:9981&quot;&gt;http://localhost:9981&lt;/a&gt;.  (If you’re not running a desktop environment on the same machine, access it from another machine on the same network and change localhost for the IP of the machine running the TVH server.  Also, it goes without saying that the machine hosting the TVH server should have a fixed IP address at the local network because all the clients will be pointing to it.)&lt;/p&gt;

&lt;p&gt;If you provided admin credentials for TVH during the installation, it will ask you to identify yourself now.&lt;/p&gt;

&lt;p&gt;TVH will start the wizard the first time you access the webUI but you can just skip it (hit Cancel).&lt;/p&gt;

&lt;p&gt;Notice that there are several tabs in the webUI but many options will not show up if the “View level” is set to Basic, so let’s change the default to &lt;strong&gt;Expert&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; General &amp;gt; Base &amp;gt; Server &amp;gt; Set &quot;User interface level&quot; to Expert and hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s configure the Stream profiles to restart on error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Stream &amp;gt; Stream profiles &amp;gt; htsp &amp;gt; Check &quot;restart on error&quot; hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(You can repeat that step to all profiles that you’re going to use.  I usually just use htsp for clients and pass for auto-recording.)&lt;/p&gt;

&lt;p&gt;While we’re at it, let’s go ahead and customize the Recording settings as well.  This is all really up to your own preferences but this is what I use that is different from the default configuration:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Recording &amp;gt; DVR Profiles &amp;gt; Default profile
# DVR file retention: 3 days
# Pre-recording padding: 5 mins
# Post-recording padding: 5 mins
# Recording system path: /path/to/my/NAS/media/iptv/recording
# Maintain free storage space in MiB: 5000
# File permissions: 0777
# Filename character set: UTF-8
# Skip commercials: Unchecked
# Format string: $c/$t - $c - %F - %R$n.$x
# Directory permissions: 0777
# Make subdirectories per channel: Checked
# Include date in filename: Checked
# Include time in filename: Checked
# Remove all unsafe characters from filename: Checked
# Hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re done with the basic configuration!  Before moving to the next section, notice that at the bottom of the webUI there’s a bar called &lt;strong&gt;Tvheadend log&lt;/strong&gt; and on the opposite side, there is a button.  Click on it to open the log.  This is very useful to check if there’s any error while you’re making changes to the server.  Keep it open as you change the settings and if you see an error, there’s probably something misconfigured that you should fix before moving on.&lt;/p&gt;

&lt;h2 id=&quot;create-an-iptv-auto-network&quot;&gt;Create an IPTV auto network&lt;/h2&gt;
&lt;p&gt;We’re now going to create an IPTV network using the youtube.m3u file we created with youtube4tvh.  Open the TVH webUI and do the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; DVB Inputs &amp;gt; Networks &amp;gt; Add
# Type: IPTV automatic network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will redirect to IPTV settings.  Change the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Network name: youtube
# URL: file:///opt/youtube4tvh/youtube4tvh/youtube.m3u
# Create bouquet: Checked
# Channel numbers start from: 1
# Accept zero value for TSID: Checked
# Provider network name: youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Content character set: UTF-8
# Service ID: 1
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we move on, now is a good time to check if streamlink and the helper script are working.  We’re going to force play a few muxes (channels from your youtube.m3u playlist) to make sure that it’s all good before mapping them to actual TV channels.  (You gonna need a player for this step; if you don’t have one, skip it or install VLC).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; DVB Inputs &amp;gt; Muxes &amp;gt; Choose a random one and Hit the Play button
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The selected stream should show up in a few seconds.  If it doesn’t, there’s likely an issue with streamlink or the player or both, in which case you should stop and try to solve it before moving on.&lt;/p&gt;

&lt;h2 id=&quot;mapping-serves-to-channels&quot;&gt;Mapping serves to channels&lt;/h2&gt;
&lt;p&gt;There are two ways of mapping services to channels.  The standard way is to go to the Services tab and choose Map Selected &amp;gt; Map all services.  This should work very well if your muxes won’t ever change.  However, if they do (as in our case), they won’t be automatically remapped to their channel, and you gonna have to do this mapping process manually once again, multiple times.  We don’t wanna do that.  Fortunately, there’s a second way of mapping services to channels that does so automatically, even if your muxes change, and that’s via &lt;strong&gt;Bouquets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember that when we created the youtube IPTV network, we selected “Create a bouquet”.  Because of that, there’s now a new entry in Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets &amp;gt; “youtube”.  So, let’s go ahead and edit it a little bit:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets &amp;gt; Edit the &quot;youtube&quot; bouquet
# Enabled: Checked
# Auto-map to channels: Checked
# Channel mapping options: Select all
# Create tags: Create provider name tags, Create network name tags
# Hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait a few seconds and go to the “Channels” tab and you should see all your channels auto-mapped to their services.  If you make any changes to the youtube.m3u playlist, the bouquet should automatically detect those changes from now on.&lt;/p&gt;

&lt;h2 id=&quot;epg-data&quot;&gt;EPG data&lt;/h2&gt;
&lt;p&gt;Some of the 24/7 news channels on Youtube (e.g., France 24, DW) actually follow the same eletronic program guide (EPG) as their Cable/Satellite broadcast.  So, if you want, you can add EPG data to their Youtube live-stream.  There’s a fantastic program called &lt;a href=&quot;http://webgrabplus.com/&quot;&gt;&lt;strong&gt;WebGrab+Plus&lt;/strong&gt;&lt;/a&gt; that can do that for you &lt;strong&gt;for free&lt;/strong&gt;, but there’s a learning curve to it and how to feed the data to TVH (netcat or curl).  I’m planning on writing a guide about it in the near future, as I work on a parser for the site.pack folder as well.  But if you don’t feel like diving into that, you can always pay an EPG provider and manually add it to your clients (bad) or try to figure it out how to feed the EPG data to the TVH server (good).&lt;/p&gt;

&lt;h2 id=&quot;creating-and-editing-users&quot;&gt;Creating and editing users&lt;/h2&gt;
&lt;p&gt;Clients can access TVH using the same credentials as you’ve been using to configure the TVH server (admin access). As a general rule of thumb, however, that’s not a good practice.  Also, if you have multiple clients, it’s nice to know what each one is trying to access on your TVH server.  So, let’s go ahead and create a “client” user:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Users &amp;gt; Access Entries &amp;gt; Add
# Streaming: Select all
# Video recorder: Basic, HTSP, View All
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s add a password for it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Users &amp;gt; Passwords &amp;gt; Add
# Enabled: Checked
# Username: client
# Password: password
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it!  You can repeat this process as many times as you need and play around with permissions, depending on your use-case.&lt;/p&gt;

&lt;h2 id=&quot;re-fetch-period-and-youtube4tvh-cronjobs&quot;&gt;Re-fetch period and youtube4tvh cronjobs&lt;/h2&gt;
&lt;p&gt;If you’ve a youtube m3u playlist with channels that are likely to change multiple times during the same day, then it’s a good idea to create a separate playlist for those channels.  Then, when you create a youtube4tvh cronjob for the new m3u playlist, make it run more frequently (e.g., every 5 mins would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*/5 * * * *&lt;/code&gt;) and in the TVH server, add a new IPTV auto network for the new m3u playlist and in its settings, edit the “re-fetch period” to match the cronjob update interval (5); hit save and then restart the TVH server to apply the new settings. If you’ve done it right, the TVH server will now check the m3u playlist at an interval equal to the re-fetch period and update any new/changed mux on it, which will be automatically mapped to a channel in its bouquet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-client&quot;&gt;TVH client&lt;/h1&gt;
&lt;p&gt;There are multiple ways to watch the channels on your TVH server, including directly from the webUI itself (EPG tab &amp;gt; Watch TV).  The one I use is &lt;a href=&quot;https://kodi.tv/download&quot;&gt;&lt;strong&gt;Kodi&lt;/strong&gt;&lt;/a&gt; + &lt;strong&gt;TVH client addon&lt;/strong&gt; because my Kodi clients also access my Plex server.&lt;/p&gt;

&lt;p&gt;You can install Kodi on virtually any single-board computer, such as &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; and &lt;a href=&quot;https://www.hardkernel.com/&quot;&gt;Odroid&lt;/a&gt;, and Linux distro.  There are hundreds of guides showing how to install Kodi, so I won’t do that.  Instead, I’ll talk about the &lt;strong&gt;TVH client addon&lt;/strong&gt; for it.&lt;/p&gt;

&lt;h2 id=&quot;install-a-tvh-client-addon-for-kodi&quot;&gt;Install a TVH client addon for Kodi&lt;/h2&gt;
&lt;p&gt;Open Kodi and try to install via the official repo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Add-ons &amp;gt; Install from repo &amp;gt; PVR clients
# Look for Tvheadend HTSP Client and install it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, depending on the distribution, you won’t see the “PVR clients” option.  In this case, you have to manually install the TVH client.  On Debian, for example, you can install it like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Open a terminal
sudo apt update
sudo apt install kodi-pvr-hts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Another option is to download a .zip of the addon but please do your research first.  Don’t download and install addons from random repos.)  If you didn’t see any error, it means the PVR client is now available on Kodi, so open it (restart it, if it was already open) and then do the following (changing the values to the appropriate ones for your TVH server and client credentials):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Add-ons &amp;gt; My add-ons &amp;gt; PVR clients &amp;gt; Tvheadend HTSP Client &amp;gt; Configure
# &amp;gt; Connection Settings
# IP address: The IP address of the machine hosting your TVH server
# HTTP port: 9981
# HTSP port: 9982
# Username: client
# Password: password
# &amp;gt; Streaming settings
# Profile to use: htsp
# (If your connection is pretty good, you might want to try enabling predictive tuning
# but I've had mixed results with it.)
# Hit OK
# Restart Kodi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to play around, you can create a video profile just for this client and then set the Profile to use it.  This could be a profile that transcodes to a particular AV codec that best fits the client hardware, for example.  Be mindful that whenever you make a change to the addon, you’ll need to restart Kodi to see the changes take effect.&lt;/p&gt;

&lt;p&gt;Test the Kodi client:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to TV &amp;gt; Channels &amp;gt; Play random one
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything is working as it should, you should now be able to watch the stream from your Kodi client.  Play around with it and try recording something, too.  Now it’s time to fine-tune your TVH server to best serve your clients.&lt;/p&gt;

&lt;p&gt;You can make further client-side changes in &lt;strong&gt;Kodi’s PVR &amp;amp; Live TV settings menu&lt;/strong&gt;, such as mapping channels to specific numbers, behavior of changing channels, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Congratulations for reaching the end of this guide.  As I said before, one of my future projects is to work on a parser for the Webgrab+Plus EPG data and then write a guide on how to implement it using the current setup.&lt;/p&gt;

&lt;p&gt;If you found this useful or have suggestions on how to improve this guide, please leave a comment and I’ll try to reply asap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="github" /><category term="iptv" /><category term="kodi" /><category term="streamlink" /><category term="tvheadend" /><category term="youtube" /></entry><entry><title type="html">Using the Odroid C2 IR receiver with LibreElec OS</title><link href="http://localhost:4000/blog/IR-with-odroidc2/" rel="alternate" type="text/html" title="Using the Odroid C2 IR receiver with LibreElec OS" /><published>2020-02-18T00:00:00-03:00</published><updated>2020-02-18T00:00:00-03:00</updated><id>http://localhost:4000/blog/IR-with-odroidc2</id><content type="html" xml:base="http://localhost:4000/blog/IR-with-odroidc2/">&lt;p&gt;In case you didn’t know, the &lt;a href=&quot;https://www.hardkernel.com/shop/odroid-c2/&quot;&gt;Odroid C2&lt;/a&gt; comes with an onboard infrared (IR) receiver.  Until a few days ago, I thought that such a receiver was only compatible with their own IR remote controller but it turns out you can use it with &lt;em&gt;any IR controller&lt;/em&gt;.  We can do that with a package called &lt;a href=&quot;http://www.lirc.org/html/&quot;&gt;&lt;strong&gt;lirc&lt;/strong&gt;&lt;/a&gt;, which stands for &lt;strong&gt;linux infrared remote control&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-02-18-IR-with-odroidc2/board.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-02-18-IR-with-odroidc2/board.png&quot; alt=&quot;Odroid C2 board&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This brief tutorial is for the &lt;strong&gt;LibreElec OS&lt;/strong&gt; but one can use lirc with &lt;strong&gt;any Linux distro&lt;/strong&gt; and the configuration won’t be completely different than the one shown here.  (For the sake of completeness, I’ve tested with &lt;strong&gt;LibreElec Official OS 9.0.2&lt;/strong&gt; running &lt;strong&gt;Kodi 18.2&lt;/strong&gt;) Here’s a step by step procedure to get the IR working with lirc:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSH into your Odroid C2
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@IP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Get a list of all available keys that you can map to your IR remote
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irrecord --list-namespace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Kill running lircd, if there’s any
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps aux | grep lircd
kill PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Turn off all other IR compatible devices before moving forward&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/storage&lt;/code&gt;, record IR custom keys and follow the instructions that will show yup on your screen:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /storage/
irrecord
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If succesful, irrecord will genetare a .conf file on /storage/ with the name you provided at the beginnig. Copy the .conf file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/storage/.conf/lircd.conf&lt;/code&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp *.conf /storage/.conf/lircd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot your system
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Test your IR remote! If some key is missing, you can go back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irrecord&lt;/code&gt; and edit or record new keys.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.  This is a short tutorial I wrote mostly to remind myself about this feature but hopefully, this tutorial is going to help someone else out there, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="odroid" /><category term="sbc" /></entry><entry><title type="html">The math of a bruised souleater</title><link href="http://localhost:4000/blog/Math-of-bruised-souleater/" rel="alternate" type="text/html" title="The math of a bruised souleater" /><published>2019-07-19T00:00:00-03:00</published><updated>2019-07-19T00:00:00-03:00</updated><id>http://localhost:4000/blog/Math-of-bruised-souleater</id><content type="html" xml:base="http://localhost:4000/blog/Math-of-bruised-souleater/">&lt;p class=&quot;notice notice--info&quot;&gt;This is a repost of my &lt;a href=&quot;https://www.reddit.com/r/magicTCG/comments/7phqk1/the_math_of_a_bruised_souleater/&quot;&gt;original reddit post&lt;/a&gt;. I’ve made a few changes to the original version to improve readability.&lt;/p&gt;

&lt;p&gt;This is a post about an interesting interaction that came up yesterday, when I was making changes to an EDH deck. I thought someone else might find this analysis interesting, so I decided to share it here. If you spot an error, feel free to point it out. The interaction is about two cards, namely &lt;strong&gt;Immolating Souleater&lt;/strong&gt; and &lt;strong&gt;Bruse Tarl, Boorish Herder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/immolating-souleater.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/immolating-souleater.jpg&quot; alt=&quot;Immolating souleater&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/bruse-tarl.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/bruse-tarl.jpg&quot; alt=&quot;Bruse tarl&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose you have Immolating Souleater on the battlefield and Bruse Tarl, Boorish Herder’s triggered ability give it double-strike and lifelink. Souleater is a 1/1 creature that costs 2 colorless and let’s you pay one phyrexian red mana to give it +1/+0 until eot.  Let’s assume you cannot pay red mana and if you want to activate Souleater’s ability, you need to pay life. The souleater is not under summoning sickness, so it can attack an opponent. For now, let’s also assume you have 40 life and your opponents also have 40 life. You see an opportunity to kill an opponent, declare attack, the souleater is not blocked, you pay 38 life to make it a 20/1 creature with double-strike and lifelink, and after all damage is done, your opponent dies and you gain 40 life back (for a +2 net life, as you end up with 42 in the end).&lt;/p&gt;

&lt;p&gt;This is cool and all but what happens when you cannot pay 38 life before the first hit? What if your opponent has more life than you? Life-wise, does it matter how much life you pay before the first hit? How much life can you pay at any given point to either maximize damage or minimize net life loss? Let’s think about it.&lt;/p&gt;

&lt;p&gt;Souleater’s activated ability is a simple linear function of the amount of life you pay. Let x be the amount of life paid, so that souleater’s power is given by&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq1.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq1.png&quot; alt=&quot;Eq 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(To make it simple, we ignore the fact that phyrexian mana is always 2 life and let x be any non-negative integer.) As in the previous example, if you pay 38 life, f(38) = 20. The tricky part is how this simple linear function interacts with Bruse’s ability, that is, the ability to give a creature double-strike and lifelink (“bruised”).&lt;/p&gt;

&lt;p&gt;The intuition with double-strike is to multiply f(x) by 2, which would be correct if we only paid life before the first hit (x1) and nothing else before the second hit (x2 = 0) but that does not need to be the case. Say we pay 20 life before the first hit (x1 = 20) and an additional 10 life afterwards (x2 = 10). How much damage will we deal to the opponent? We know that f(20) = 11 and f(10) = 6 but the first hit should carry over to the second becasue the +1/+0 lasts until eot. At this point, let’s make an equation for the first hit,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq2.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq2.png&quot; alt=&quot;Eq 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and another for the second hit,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq3.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq3.png&quot; alt=&quot;Eq 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can sum both functions to get the total amount of damage dealt (d) by a Souleater with double-strike:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq4.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq4.png&quot; alt=&quot;Eq 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(It’s easy to see how one could generalize this to triple-strike, quadruple-strike, …, but let’s not delve into it now.) Therefore, if x1=20 and x2=10, d(20,10) = f1(20)+f2(20,10), which is 27 damage for 30 life paid.&lt;/p&gt;

&lt;p&gt;So, now we have an equation (d) that we can play with. For example, if an opponent has 60 life, how much life do you need to pay? Because x1 is multiplied by two, if the goal is to deal as much damage as possible, you should always pay as much life as possible before the first hit. The easiest way here is to pay 58 life right away (x1 = 58 and x2 = 0) but what if you only have 40 life. Our dmg equation shows that if you have 40 life, you can pay 38 before the first hit (x1=38) but in order to kill your opp, you’d have to pay 40 before the second hit (x2=40), which we can already tell that won’t be possible with the other parameters we set for this scenario. The question is then how high can x2 be in order to deal the highest amount of damage without killing ourselves? Now we need to figure out how to add lifelink into the equation.&lt;/p&gt;

&lt;p&gt;Lifelink will affect your life total (k) and because a souleater with double-strike hits twice, let’s define your starting life total (k1), our life total after the first hit (k2), and our life total after the second hit (k3). As before, let’s say that we pay 20 life before the first hit (x1 = 20) and an additional 10 life afterwards (x2 = 10). Because our life total matters here, let’s also assume that our starting life total is k1 = 40. So, if x1 = 20, our remaining life before the first hit is the difference k1 – x1 = 20 and immediately after the first hit, the lifelink effect makes it go up by f1(20) = 11 points, which means that we can define&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq5.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq5.png&quot; alt=&quot;Eq 05&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and similarly,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq6.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq6.png&quot; alt=&quot;Eq 06&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have a simple way of defining net-life gain/loss (nl) as the difference between k3 and k1, namely&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq7.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq7.png&quot; alt=&quot;Eq 07&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which funny enough doesn’t include x1 into the equation. The equation for nl tells us three main things: (a) that we will never net more than 2 life, (b) we’ll net life loss proportional to the amount of life we pay before the second hit (x2), and (c) net-wise, it doesn’t really matter how much life you pay before the first hit (x1). (x1 doesn’t matter because in our scenario, it always nets 0 life. Think about it. You are paying 2 life to increase 1 dmg but with double-strike, souleater hits twice and in the end, you get your 2 life back with lifelink. The only thing that carries over is the base power, which is why there’s a constant 2 in the equation for k3.)&lt;/p&gt;

&lt;p&gt;Good. Now, what can we do with that? Well, we can figure out how to maximize dmg in terms of our life total, so that you deal as much damage as possible without dying for any given amount of starting life total (the math equivalent of “just pay as much life as you can before each hit”). For k1 &amp;gt; 0, let i1 and i2 be the amount of life you want to have before the first hit and second hit, respectively, then&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq8.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq8.png&quot; alt=&quot;Eq 08&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(There’s an additional complication here because of how we use phyrexian mana but we don’t need to worry too much about it as long as we can figure out the appropriate i1 and i2 for each value of k1. For example, if you have 40 life, max(d) = 2.5 + 1.25(40) - .75(2) - .5(2) = 50. Because k1 is multiplied by a value greater than one, this equation tells us that the amount of damage done above your starting life increases with our starting life. For example, if you have 40 life, you can deal 10 damage above your starting life to an opponent (e.g., kill an opponent with 50 life points) but if you have 20 life, you can only deal 5 damage above your starting life (e.g., kill an opponent with 25 life points). It’s easier to see this relationship when we plot max(d) as a function of the starting life (k1) using the minimum appropriate values of i1 and i2:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/regression.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/regression.jpg&quot; alt=&quot;Regression&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we fit a linear equation to it, we get a solution that does not require knowing the exact values of i1 and i2, namely max(d) ≈ .65 + 1.25k1.  However, because each point is equally likely, as /u/darth_aardvark pointed out, the appropriate intercept should be the mean of all possible combinations of min(i1) and min(i2), which can only take on values {1, 2}.  There is a total of 2^2 combinations of  min(i1) and min(i2), namely&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq9.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq9.png&quot; alt=&quot;Eq 09&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those equations give us a mean intercept = .625 and a revised and final formula for the maximum amount of damage that a “bruised” souleater can do, specifically&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq10.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq10.png&quot; alt=&quot;Eq 10&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which is equivalent to the more memorable formula&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq11.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq11.png&quot; alt=&quot;Eq 11&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in which k1 is simply your life total before the attack.  The 5/4 coefficient is quite instructive because it connects this approach to /u/darth_aardvark’s.  Specifically, the first maximized damage of a bruised souleater will hit for approximately half our life total (k1/2), while the second hit will hit for half our life total plus half of the life gained from the second hit (k1/2 + k1/4), which gives us a total of 5/4(k1).&lt;/p&gt;

&lt;p&gt;Well, this has been fun. I’m sure there are other things we could play with here but I’ve had enough for now. I think there are two main conclusions about a “bruised” Souleater. The first and least obvious one imo is that the more life you have, the more damage you can deal above your own life total. This is useful because it gives an intuition about whether you can kill an opponent or not at any given point (low life = cannot deal much above my own life; high life = can deal a bit more than my own life), and whether you should attempt to compute exacties. In most cases, however, you won’t be able to deal a whole lot more than your own life. The other conclusion is that the amount of life you pay before the first hit and second hit is net neutral and net negative, respectively, but I feel most of us would be able to figure this one out without much effort (lifelink gets only half the amount of life paid immediately before the second hit, while it gets it all back for the amount of life paid immediately before the first hit).&lt;/p&gt;

&lt;p&gt;Again, if you spot an error, please point it out. If you found a better way to look at this interaction or thought about a different scenario, feel free to explain it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="mtg" /><category term="math" /></entry><entry><title type="html">The probability of Warp World</title><link href="http://localhost:4000/blog/Probability-warp-world/" rel="alternate" type="text/html" title="The probability of Warp World" /><published>2019-07-15T00:00:00-03:00</published><updated>2019-07-15T00:00:00-03:00</updated><id>http://localhost:4000/blog/Probability-warp-world</id><content type="html" xml:base="http://localhost:4000/blog/Probability-warp-world/">&lt;div class=&quot;expando&quot; data-pin-condition=&quot;function() {return this.style.display != 'none';}&quot; style=&quot;clear: left; color: #cccccc; margin: 5px 0px; padding: 0px;&quot;&gt;
&lt;form action=&quot;https://www.reddit.com/r/magicTCG/comments/8956af/the_probability_of_warp_world_math/#&quot; class=&quot;usertext warn-on-unload&quot; id=&quot;form-t3_8956afvtw&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;
&lt;div class=&quot;usertext-body may-blank-within md-container&quot; style=&quot;background-color: #373737; margin: 0px; padding: 0px; unicode-bidi: isolate;&quot;&gt;
&lt;div class=&quot;md&quot; style=&quot;background: rgba(0, 0, 0, 0) none repeat scroll 0% 0%; border-radius: 7px; border: 1px solid rgb(102, 102, 102); color: #dddddd; margin: 5px 0px; max-width: 60em; overflow-wrap: break-word; padding: 5px 10px;&quot;&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; padding: 0px;&quot;&gt;
&lt;div style=&quot;font-size: 1em;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;(&lt;a href=&quot;https://www.reddit.com/r/magicTCG/comments/8956af/the_probability_of_warp_world_math/&quot; target=&quot;_blank&quot;&gt;This is a repost from my original reddit post.&lt;/a&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;b&gt;Introduction&lt;/b&gt;&lt;br /&gt;
&lt;div style=&quot;font-size: 1em;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;If you’re unfamiliar with &lt;b&gt;Warp World&lt;/b&gt;, you are in for a treat. It’s a 5RRR sorcery from Ravnica that reads as follows:&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;i style=&quot;font-weight: inherit; margin: 0px;&quot;&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;“Each player shuffles all permanents he or she owns into his or her library, then reveals that many cards from the top of his or her library. Each player puts all artifact, creature, and land cards revealed this way onto the battlefield, then does the same for enchantment cards, then puts all cards revealed this way that weren't put onto the battlefield on the bottom of his or her library.”&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;
&lt;i style=&quot;font-weight: inherit; margin: 0px;&quot;&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-dDj9o9kRxD4/XSyCpGBovVI/AAAAAAAABK4/UmCDFCZZxk8dhAnKa_Ltcarv-mVVba61QCLcBGAs/s1600/rav-warp-world.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;936&quot; data-original-width=&quot;672&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-dDj9o9kRxD4/XSyCpGBovVI/AAAAAAAABK4/UmCDFCZZxk8dhAnKa_Ltcarv-mVVba61QCLcBGAs/s320/rav-warp-world.jpg&quot; width=&quot;229&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;There are many different ways to build around such a card. For example, we can play mostly permanents in our deck (i.e., very few instants and sorceries), add creatures with ETB ability (e.g., Eternal Witness), add creatures with landfall ability (Lotus Cobra), and so on. I’m not going to tell you how to play Warp World or advertise any particular deck that takes advantage of it. Instead, I’ll try to formalize what happens when we cast Warp World, and how the outcome of casting it changes as a function of the type of cards we choose to play and when we cast it.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;This is not meant to be an exhaustive analysis of the card and all of its possible interactions. There are many other things that I’d like to talk about (e.g., stats for proper comparison of multivariate distributions of Warp World, describe the necessary and sufficient conditions to create an infinite loop in a Warp World deck) but I don’t have enough time to cover them right now. If someone shows interest in this sort of thing, I might release a more comprehensive version of this analysis in the future. Furthermore, I’m far from being smart enough to figure out the best way to deal with this issue. So, if you spot an error or thought about a much simpler way of analyzing Warp World, please feel free to share it in the comments below. Above all, this is meant to be an intellectual exercise (mostly mathematical/statistical). There’s math. There’re walls of text. No shortcuts. No tldr. Deal with it. (Just kidding! I’ll do my best to explain the mathematics with examples that most magic players should be familiar with.)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;b&gt;The Basics&lt;/b&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;In a game of magic, we play with a deck, Ω, composed of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;n&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;cards, such that Ω = {&lt;/span&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;ω&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;ω&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;n&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;} is our deck. The current types of cards in MtG can be of two sorts, namely permanents (land, creature, artifact, enchantment, and planeswalker) and non-permanents (sorcery and instant). Let Λ be the set of all&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;z&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;permanents that we have in our deck (e.g., Elvish Mystic, forests, mountains, Primeval Titan), such that Λ = {&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;λ&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;λ&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;z&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;} are all the permanents in our deck. Because there’re only permanents and non-permanents in our deck, the set of non-permanents can be defined as the negation of Λ, ¬Λ, such that ¬Λ∪Λ = Ω.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;When a game of magic starts, our deck becomes our library. Let’s define our library by the set Θ of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;k&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;cards, such that Θ = {&lt;/span&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;θ&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;θ&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;k&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;} is our library, and the rules tell us that Θ ⊆ Ω, that is, all cards in our library are cards from our deck. In addition, when the game starts, it also creates other three zones that are of particular relevance to us, namely the battlefield, our hand, and the graveyard. Let’s define Ψ as the set of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;permanents we have on the battlefield, such that Ψ = {&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;ψ&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;ψ&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;y&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;} are the permanents we have on our side of the battlefield. To make matters as simple as possible for now, let’s also assume that Ψ ⊆ Λ, that is, all permanents we have on the battlefield are permanents from our deck, until otherwise specified, and permanents are all but planeswalkers. Then we define Α as the set of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;a&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;permanents in our hand, such that Α = {&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;α&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;α&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;a&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;} are the permanents in our hand, and B is the set of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;b&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;permanents in our graveyard, B = {&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;β&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;β&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;b&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;}. As before, let’s also assume that A ⊆ Λ and B ⊆ Λ.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Now we have a fairly good characterization of our deck and board state, so let’s see what Warp World does. First, it makes us (a) count all permanents we have on the battlefield, (b) shuffle all of them into our library, then (c) reveal as many cards from the top of our library as permanents we counted, and finally, (d) put all revealed artifacts, creatures, lands, and (afterwards) enchantments onto the battlefield. Everything else that was not put onto the battlefield goes to the bottom of the library. (Our opponents do the same thing at the same time, and triggered abilities follow apnap order, as usual.)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Let’s relate what Warp World does to our previous definitions. During step ‘a’, the number of permanents we have on the battlefield will be the cardinality of Ψ, that is, |Ψ| =&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;y&lt;/i&gt;. During step ‘b’, we put |Ψ∩Λ| cards back into our library, and because we’re assuming that Ψ ⊆ Λ, there are exactly&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;&amp;nbsp;cards from Λ that will be put back into our library. So, by the end of step ‘b’, our library will have exactly |Θ∪Ψ| =&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;k&lt;/i&gt;&amp;nbsp;+&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;&amp;nbsp;cards, of which |Λ|-|Α∪B| =&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;z&lt;/i&gt;&amp;nbsp;– (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;a&lt;/i&gt;&amp;nbsp;+&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;b&lt;/i&gt;) are permanents. Regarding shuffling, we assume it’s not biased in any particular manner—that is, cards from our library are ordered at random every time it’s required to shuffle.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;Here comes the interesting part, namely steps ‘c’ and ‘d’. During step ‘c’, we’re instructed to reveal&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;y&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;cards from the top of our library and then, during step ‘d’, we put all artifacts, creatures, lands, and enchantments revealed this way onto the battlefield. Let’s define Φ as the set of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;x&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;revealed artifacts, creatures, lands, and enchantments, such that Φ = {&lt;/span&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;φ&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, …,&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;φ&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;x&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;} are all the revealed permanents that will be put onto the battlefield. Now, because we don’t know how all the cards in our library were ordered (unbiased shuffling), we can’t tell which cards will be revealed in a deterministic way (e.g., the first will be a land, the second will be a creature, etc.). Fortunately, we’re quite capable of telling which cards will be revealed in a stochastic way (i.e., probabilistically) (e.g., there’s a .90 chance to reveal a land, there’s a .10 chance to reveal a creature, etc.).&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;The act of revealing cards from the top of our library is analogous to sampling objects from a finite population without replacing them, much like picking apples from an apple tree. Of note, we are usually revealing more than one card (&lt;i style=&quot;font-weight: inherit; margin: 0px;&quot;&gt;y&lt;/i&gt;&amp;nbsp;&amp;gt; 1), and for now, the outcomes of interest will fall into two main categories, namely it’s either a permanent that we will put onto the battlefield or not. If each sampling were independent of one another (e.g., after revealing a card, we reshuffle it back into our library before revealing another card), we could classify this action as a Bernoulli trial and compute the probability of revealing permanents according to the binomial distribution. However, in our case, each sampling is not independent of one another, as the probability of a “success” (reveal a permanent) changes as the number of revealed cards also increases. Therefore, we should model such an action of revealing cards from the top of our library with a hypergeometric distribution, which some magic players should be already familiar with, as it is often used to compute the optimal number of lands in a deck, for example, or the chance of drawing a certain card by turn.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;When there are two mutually exclusive outcomes (e.g., permanent and non-permanent card), the probability mass function (pmf) of the number of permanents that Warp World will reveal will take the form&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-P4yQk88v7Vg/XSyEIcnQlwI/AAAAAAAABLE/8TyYMhMAiAME6QMQY4jjmHxFB_323eywACLcBGAs/s1600/10%2B-%2B2VlTkqG.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;153&quot; data-original-width=&quot;702&quot; height=&quot;86&quot; src=&quot;https://1.bp.blogspot.com/-P4yQk88v7Vg/XSyEIcnQlwI/AAAAAAAABLE/8TyYMhMAiAME6QMQY4jjmHxFB_323eywACLcBGAs/s400/10%2B-%2B2VlTkqG.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;in which (p¦q) is a binomial coefficient—that is, the number of ways q elements can be chosen from p elements, regardless of order. To make it easier for us, I wrote a table with definitions of the main parameters:&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-ssSol_jrseE/XSyEOUEUVpI/AAAAAAAABLI/tvZhihAZVoIfk4z4eHwnB_opUACbDhwqgCLcBGAs/s1600/7%2B-%2BMzjJiPk.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;388&quot; data-original-width=&quot;1394&quot; height=&quot;111&quot; src=&quot;https://1.bp.blogspot.com/-ssSol_jrseE/XSyEOUEUVpI/AAAAAAAABLI/tvZhihAZVoIfk4z4eHwnB_opUACbDhwqgCLcBGAs/s400/7%2B-%2BMzjJiPk.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;res-freetext-expando&quot; style=&quot;display: inline-block; height: 1em; margin-bottom: 0px !important; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; margin: 0px; vertical-align: middle;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;When we compute Eq. 1 for all possible number of permanents revealed with Warp World, we get a probability distribution with mean&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-EjYqtMnxYZ4/XSyEUTqENYI/AAAAAAAABLM/pBSQixBVtZMfBlhkE3ClB27gNNboPB2-ACLcBGAs/s1600/11%2B-%2B1EW19ZL.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;148&quot; data-original-width=&quot;490&quot; height=&quot;96&quot; src=&quot;https://1.bp.blogspot.com/-EjYqtMnxYZ4/XSyEUTqENYI/AAAAAAAABLM/pBSQixBVtZMfBlhkE3ClB27gNNboPB2-ACLcBGAs/s320/11%2B-%2B1EW19ZL.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;and variance&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-T81A8XeCCQc/XSyEZGJ4gaI/AAAAAAAABLQ/wmGCwK2iNnsk78UUJ8O2Cjt8UfQVpwpXwCLcBGAs/s1600/12%2B-%2BK3auR8V.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;128&quot; data-original-width=&quot;1373&quot; height=&quot;35&quot; src=&quot;https://1.bp.blogspot.com/-T81A8XeCCQc/XSyEZGJ4gaI/AAAAAAAABLQ/wmGCwK2iNnsk78UUJ8O2Cjt8UfQVpwpXwCLcBGAs/s400/12%2B-%2BK3auR8V.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;To illustrate its application, let’s imagine the following scenario. We’re playing with a 60-card deck that has 56 permanents (let’s think of them as all mountains;&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;z&lt;/i&gt;&amp;nbsp;= 56) and four copies of Warp World. The game starts. We’re on the play and we mull to two cards, a mountain and a copy of Warp World. During the next seven turns, we only draw mountains, so when we get to turn eight, we have eight mountains on the battlefield (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;&amp;nbsp;= 8), a single card in hand, which is Warp World, and 51 remaining cards in our library (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;k&lt;/i&gt;&amp;nbsp;= 51). If we cast Warp World, what are our chances of putting, say, eight permanents back on the battlefield? What about seven, six, five, …? If we calculate such probabilities with Eq. 1 and plot the results for various numbers of permanents we had before casting Warp World (&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;), we get the following probability distributions:&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-Pec_lTRcEPk/XSyEnZaWdcI/AAAAAAAABLc/IpYd8wF8INo-zz7m8IO3F1m_CQj739bEwCLcBGAs/s1600/1%2B-%2Biqdv66X.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;755&quot; data-original-width=&quot;1206&quot; height=&quot;200&quot; src=&quot;https://1.bp.blogspot.com/-Pec_lTRcEPk/XSyEnZaWdcI/AAAAAAAABLc/IpYd8wF8INo-zz7m8IO3F1m_CQj739bEwCLcBGAs/s320/1%2B-%2Biqdv66X.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;In the horizontal axis, we have the number of permanents that we get after resolving Warp World (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;x&lt;/i&gt;), while in the vertical axis, we have the probability of each of them. In addition, the multiple distributions represent different numbers of permanents we had before casting Warp World (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;). (Missing probabilities are all zero.) In our example, if we have 8 permanents on the battlefield when we cast Warp World, we will get a mean of 8 permanents after resolving Warp World—that is, we usually get our eight lands back—but if we have 20 permanents on the battlefield when we cast Warp World, on average, we get 19 permanents back. Notice that even though the variability (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;stands for standard deviation) is low in absolute terms (the value of&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;x&lt;/i&gt;&amp;nbsp;is likely equal or close to the mean), the higher is the value of&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;, the higher is the variance. For example, if we have 8 permanents on the battlefield, we will usually get 7 or 8 permanents after resolving Warp World, and rarely anything other than that. However, if we have 20 permanents on the battlefield, we will usually get something between 18 and 20 permanents after resolving Warp World, and rarely anything other than that.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Before we move on, I should point out that each probability in Figure 1 refers to the probability of getting exactly that number of permanents, as Eq. 1 is a pmf. However, if your interest is in answering questions about fewer-than/up-to/at-least a certain number of permanents, all you need to do is sum adjacent values of&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin: 0px;&quot;&gt;x&lt;/i&gt;&amp;nbsp;in the appropriate direction to get the cumulative probability. For example, if we have 20 permanents on the board before casting Warp World, what would be the probability of getting at least, say, 18 permanents? According to the Y=20 distribution in Figure 1, that probability would be .96.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Despite being a somewhat unrealistic scenario, Figure 1 gives us something that we can use to compare against different situations. For instance, how adding more non-permanents to our deck would affect the previous distributions? Let’s set everything else equal to the previous example, except that now, our deck has 44 mountains (&lt;i style=&quot;font-weight: inherit; margin: 0px;&quot;&gt;z&lt;/i&gt;&amp;nbsp;= 44), four copies of Warp World, and 12 other non-permanents. The results are the following:&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-MRRNNPpRCes/XSyErJHPEfI/AAAAAAAABLk/g-VXivYY6NAHXAf0Oc9O4BSfe-1K5o77ACLcBGAs/s1600/2%2B-%2BodXdXAg.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;750&quot; data-original-width=&quot;1192&quot; height=&quot;201&quot; src=&quot;https://1.bp.blogspot.com/-MRRNNPpRCes/XSyErJHPEfI/AAAAAAAABLk/g-VXivYY6NAHXAf0Oc9O4BSfe-1K5o77ACLcBGAs/s320/2%2B-%2BodXdXAg.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Inspection of Figure 2 indicates two main differences in comparison to Figure 1. First, adding more non-permanents to a Warp World deck decreases the mean of the probability distribution of the number of permanents you will get after resolving Warp World, regardless of how many permanents you had before casting Warp World. Second, variability increased all over the board, so the chance of getting screwed up by Warp World increased quite a lot. In other words, this is why it’s not a good idea to play non-permanents in a Warp World deck, as you decrease its expected value and increase its variability. You get double screwed.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;This concludes the basics of my approach. In the following sections, I’ll show how to add distinctions between the various types of permanents that we can reveal with Warp World (e.g., lands, creatures, other non-planeswalker permanents) and drop some of the assumptions we’ve made so far (e.g., empty hand and graveyard, no tokens).&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;b&gt;The multivariate Warp World model&lt;/b&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;One limitation of the previous approach is that we can’t tell what sort of permanent Warp World puts onto the battlefield. In some cases, the binary distinction is just what we need. In others, however, a more detailed distinction is needed, as different types of permanent will have different effects on the board state after Warp World resolves. One distinction that would make sense is the one given by Warp World itself, namely that permanents can be artifacts, creatures, lands, and enchantments. We’ve already defined Λ as the set of all permanents in our deck, so it follows that artifacts, Λ&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, creatures, Λ&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, lands, Λ&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, and enchantments, Λ&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;, ought to be subsets of Λ, such that&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-_onAsPEaQyo/XSyE2y5nO7I/AAAAAAAABLo/3p9yHv_yCfol1GahQn6n28b_wcoslJnOACLcBGAs/s1600/8%2B-%2BcXlFhpJ.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;84&quot; data-original-width=&quot;157&quot; src=&quot;https://1.bp.blogspot.com/-_onAsPEaQyo/XSyE2y5nO7I/AAAAAAAABLo/3p9yHv_yCfol1GahQn6n28b_wcoslJnOACLcBGAs/s1600/8%2B-%2BcXlFhpJ.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;because for the sake of simplicity, we will continue to assume that we’re not playing planeswalkers. (Remember that Warp World does not put planeswalkers onto the battlefield, even though they are permanents that can be part of our deck.) Similarly, let’s say that mutually exclusive subsets of Φ, A, and B fall into the same categories as Λi, such that&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-chUcocZ92k0/XSyE6IvGzjI/AAAAAAAABL4/FOdb_fhO2Ds0ronC_khwAmfzMnBQE5zFgCLcBGAs/s1600/9%2B-%2BYpXMDBW.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;98&quot; data-original-width=&quot;462&quot; height=&quot;67&quot; src=&quot;https://1.bp.blogspot.com/-chUcocZ92k0/XSyE6IvGzjI/AAAAAAAABL4/FOdb_fhO2Ds0ronC_khwAmfzMnBQE5zFgCLcBGAs/s320/9%2B-%2BYpXMDBW.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Now we can extend Eq. 1 to accommodate the additional outcomes of Warp Wold as follows&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-BGgrP2pYmI0/XSyE_7qKKvI/AAAAAAAABMA/2MzDihfRpr4eB__iaje-ClV7Etdand_aACLcBGAs/s1600/13%2B-%2BwO76V7P.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;113&quot; data-original-width=&quot;889&quot; height=&quot;50&quot; src=&quot;https://1.bp.blogspot.com/-BGgrP2pYmI0/XSyE_7qKKvI/AAAAAAAABMA/2MzDihfRpr4eB__iaje-ClV7Etdand_aACLcBGAs/s400/13%2B-%2BwO76V7P.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;which is the pmf of the multivariate Warp World model. Such a distribution has mean&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-jGF1-TsZEf0/XSyFG2lPCKI/AAAAAAAABMI/bc-mZm2XVyoxr_EPX61X6yKVCUyGVeD7wCLcBGAs/s1600/14%2B-%2BsVAGLTT.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;106&quot; data-original-width=&quot;459&quot; height=&quot;73&quot; src=&quot;https://1.bp.blogspot.com/-jGF1-TsZEf0/XSyFG2lPCKI/AAAAAAAABMI/bc-mZm2XVyoxr_EPX61X6yKVCUyGVeD7wCLcBGAs/s320/14%2B-%2BsVAGLTT.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;and variance&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-4ebUChncfZ0/XSyFMOlwk-I/AAAAAAAABMQ/1LBVb-fFsdcTGH-QvVtEneQV2DdX0P_PACLcBGAs/s1600/15%2B-%2BbCj1DnN.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;106&quot; data-original-width=&quot;1044&quot; height=&quot;40&quot; src=&quot;https://1.bp.blogspot.com/-4ebUChncfZ0/XSyFMOlwk-I/AAAAAAAABMQ/1LBVb-fFsdcTGH-QvVtEneQV2DdX0P_PACLcBGAs/s400/15%2B-%2BbCj1DnN.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;As before, let’s think about a scenario to illustrate how Eq. 4-6 informs us about the probability of Warp World revealing different sorts of permanents as a function of the properties of our deck. Similar to our previous example, imagine we we’re playing with a 60-card deck composed of 24 lands (&lt;/span&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;z&lt;/span&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;3&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;= 24), 16 creatures (&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;z&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;2&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;= 24), and 20 non-permanents. The game starts. We’re on the play and unfortunately, we have to mull to four cards, specifically two forests and two copies of [[elvish mystic]]. On turn 1, we play a forest and an elvish mystic. On turn 2, we draw a copy of Warp World, then play another forest and cast another elvish mystic. During the next four turns, we draw four mountains, so when we get to turn 6, we cast Warp World with two forests, four mountains, and two elvish mystics on the battlefield (&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;y&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;= 8), no cards in hand or graveyard, and 51 cards left in our library (&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;k&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;= 51). What’s the probability of revealing, say, two creatures and four lands with Warp World? On average, how many creatures and lands would Warp World put back on the battlefield after it resolves? We can answer such questions with Eq. 4-5. When we compute the probabilities in Eq. 4 for all possible values of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;x&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;2&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;(# of creatures that Warp World reveals) and&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;x&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;3&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;(# of lands that Warp World reveals) and plot such values, we generate the following three-dimensional representation of the probability distribution of&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;x&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;2&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 1em;&quot;&gt;&amp;nbsp;and&amp;nbsp;&lt;/span&gt;&lt;i style=&quot;font-size: 1em; font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;x&lt;/i&gt;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;&lt;span style=&quot;font-size: xx-small;&quot;&gt;3&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-cqsa5DcGiPw/XSyFSf1_voI/AAAAAAAABMY/Jep2cJqvPoU2eHrUcgtByo8zahWxrUqagCLcBGAs/s1600/3%2B-%2BkJIDkN6.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;674&quot; data-original-width=&quot;1190&quot; height=&quot;181&quot; src=&quot;https://1.bp.blogspot.com/-cqsa5DcGiPw/XSyFSf1_voI/AAAAAAAABMY/Jep2cJqvPoU2eHrUcgtByo8zahWxrUqagCLcBGAs/s320/3%2B-%2BkJIDkN6.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Figure 3 shows that when&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;y&lt;/i&gt;&amp;nbsp;= 8, the probability of revealing exactly two creatures and four lands from the top of our library is .10. In fact, this is one of the two most likely cases, the second one being two creatures and three lands, as both of them account for roughly 20% of the possible outcomes of a Warp World under this condition. In addition, Eq. 5 and 6 show that on average, Warp World will reveal 2 creatures (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 1 creature) and 3 lands (&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 1 land) in this particular example.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;We’ve seen before that playing non-permanents in a Warp World deck is a bad idea. So, let’s run the same simulation as before, except that instead of playing 16 creatures and 24 lands, our deck has 22 creatures and 26 lands. When that’s done, we find the following distribution&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-BTHrqZJ3b50/XSyFWcNMaII/AAAAAAAABMc/RCtv959dDc8HC3miMN6eJ8AUy4HIVH6WQCLcBGAs/s1600/4%2B-%2B6lFiK9b.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;721&quot; data-original-width=&quot;1215&quot; height=&quot;189&quot; src=&quot;https://1.bp.blogspot.com/-BTHrqZJ3b50/XSyFWcNMaII/AAAAAAAABMc/RCtv959dDc8HC3miMN6eJ8AUy4HIVH6WQCLcBGAs/s320/4%2B-%2B6lFiK9b.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Inspection of Figure 4 indicates a shift of the mean of the probability distribution. Indeed, on average, Warp World would reveal 3 creatures (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 1 creatures) and 4 lands (&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 1 lands) with the latter deck.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;How would Figures 3 and 4 change if we increased the number of permanents on the battlefield before casting Warp World to, say, 20 permanents (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;y&lt;/i&gt;&amp;nbsp;= 20)? The probability distribution of&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;xi&lt;/i&gt;&amp;nbsp;in Figure 3 would look like this&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-lpsdIq-EZCs/XSyFaNye1pI/AAAAAAAABMk/mVERuOUrFJsGTlQd-YeJWIf2Sww71NJAQCLcBGAs/s1600/5%2B-%2Bqh4oDDJ.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;705&quot; data-original-width=&quot;1223&quot; height=&quot;184&quot; src=&quot;https://1.bp.blogspot.com/-lpsdIq-EZCs/XSyFaNye1pI/AAAAAAAABMk/mVERuOUrFJsGTlQd-YeJWIf2Sww71NJAQCLcBGAs/s320/5%2B-%2Bqh4oDDJ.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;and would have mean 5 creatures (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 2) and 8 lands (&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 2), while the distribution in Figure 4 would look like this&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-VSGqqoC90sI/XSyFdE3YnSI/AAAAAAAABMs/CCPMGnxuCzowPwYC4DkPtQXDMY5cm30_wCLcBGAs/s1600/6%2B-%2BhuJIvIh.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;687&quot; data-original-width=&quot;1210&quot; height=&quot;181&quot; src=&quot;https://1.bp.blogspot.com/-VSGqqoC90sI/XSyFdE3YnSI/AAAAAAAABMs/CCPMGnxuCzowPwYC4DkPtQXDMY5cm30_wCLcBGAs/s320/6%2B-%2BhuJIvIh.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;and have mean 8 creatures (&lt;i style=&quot;font-weight: inherit; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 2) and 9 lands (&lt;i style=&quot;font-weight: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px;&quot;&gt;sd&lt;/i&gt;&amp;nbsp;= 2).&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;Of course, we could calculate probability distributions for decks that have non-zero artifacts and enchantments as well but it would be difficult to visualize them, as we would be using higher dimensions than before. Similarly, the same approach could be used for different, mutually exclusive distinctions (e.g., green creatures vs. red creatures vs. other permanents; ramp permanents vs. gy recursion permanents).&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;There are many things that can be done moving forward. For instance, we could use Eq. 4-6 to investigate how cards that generate mana or produce more than one permanent can net mana or permanents, then describe the necessary and sufficient conditions to create loops with Warp World. Unfortunately, I don’t have time to talk about them right now, so I’ll let you figure them out on your own.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;b&gt;Tokens&lt;/b&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;So far, we’ve worked under the assumption that when we cast Warp World, the only sort of permanent we have on the battlefield (and thus the number of cards we will reveal with Warp World) are the ones contained in our deck—that is, Ψ⊆Λ. In some cases, this will be true; in others, however, it won’t, as we might have tokens on the battlefield, which will increase the number of cards revealed with Warp World but it doesn’t mean we’ll shuffle that many cards into our library. Fortunately, taking tokens into account does not require us to make huge changes to the previous equations. Specifically, if Ψ⊆Λ is not true, then by the end of step ‘b’ of Warp World, our new library will have size |Θ| + |Ψ∩Λ|, instead of |Θ∪Ψ|, in which Ψ∩Λ are all permanents on the battlefield that are permanents from our deck (i.e., all non-token permanents). Everything else remains the same in Eq. 1-6.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;b&gt;Other spells similar to Warp World&lt;/b&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;There are a few other spells that in one way or another, do something that is quite similar to what Warp World does. One example that comes to mind is &lt;b&gt;The Great Aurora&lt;/b&gt;. I have no doubt we can use the Warp World model to compute probabilities for those spells as well. We just need to tweak the model a little bit to make it consistent with the wording used in similar spells (e.g., great aurora also makes we shuffle our hand).&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-1KwhLJ-miLs/XSyGtRht8gI/AAAAAAAABNA/Aqs2jVxGpkcI1fr3NWDuySRmfmSuW43XwCLcBGAs/s1600/ori-179-the-great-aurora.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;936&quot; data-original-width=&quot;672&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-1KwhLJ-miLs/XSyGtRht8gI/AAAAAAAABNA/Aqs2jVxGpkcI1fr3NWDuySRmfmSuW43XwCLcBGAs/s320/ori-179-the-great-aurora.jpg&quot; width=&quot;229&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;b&gt;Other possible approaches&lt;/b&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;We could find probability distributions empirically. Goldfish a Warp World deck, say, a thousand times, take note of the relevant stats prior to and after casting Warp World, and estimate the distributions empirically. I’m not that guy though.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;line-height: 1.42857em; margin-bottom: 0.357143em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;b&gt;Final remarks&lt;/b&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1em; line-height: 1.42857em; margin-top: 0.357143em; padding: 0px;&quot;&gt;
&lt;span style=&quot;font-family: inherit;&quot;&gt;We end with a cautionary note. We know that adding more permanents to a Warp World deck usually yields a better outcome—that is, the more permanents we have in the deck, the more permanents we’ll likely reveal with Warp World. However, it would be inappropriate to simply compare mean differences to draw conclusions about different Warp World decks. That is because changing properties of Warp World decks will likely change the variance of their distributions. One possible solution is to use a standardized measure of the compound mean difference—that is, the standardized measure of distance between the means of two&amp;nbsp;&lt;i style=&quot;font-weight: inherit; margin: 0px;&quot;&gt;p(xi)&lt;/i&gt;&amp;nbsp;distributions. I feel like going into this would be beyond the scope of this analysis.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 1.07692em;&quot;&gt;
&lt;br /&gt;
--CG&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;</content><author><name>Carlos Gomes</name></author><category term="mtg" /><category term="math" /><category term="probability" /><category term="model" /></entry><entry><title type="html">Securing access to backends with HAproxy’s stick-tables: A guide for pfSense users</title><link href="http://localhost:4000/blog/Securing-backend-haproxy-pfsense/" rel="alternate" type="text/html" title="Securing access to backends with HAproxy's stick-tables: A guide for pfSense users" /><published>2019-07-13T00:00:00-03:00</published><updated>2019-07-13T00:00:00-03:00</updated><id>http://localhost:4000/blog/Securing-backend-haproxy-pfsense</id><content type="html" xml:base="http://localhost:4000/blog/Securing-backend-haproxy-pfsense/">&lt;h1 id=&quot;update-tracker&quot;&gt;Update tracker&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;June 23rd 2020: Moved this guide from Blogger to my website and converted to markdown.  Fixed typos I found.&lt;/li&gt;
  &lt;li&gt;June 21st 2020: This guide stills works with &lt;strong&gt;pfsense version 2.4.5-RELEASE-p1&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;May 1st 2020: This guide still works with &lt;strong&gt;pfsense version 2.4.5-RELEASE&lt;/strong&gt; and the &lt;strong&gt;haproxy packaged version 0.60_4&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is a rough guide on how to create and configure user lists and stick-tables using pfsense’s HAproxy package to protect access to a backend and limit the number of failed login attempts.  The guide is divided into two main sections.  In the first one, we’ll create a user list and add encrypted (SHA512) passwords for each of them.  Then, in the second section, we’ll create and configure stick-tables to limit the number of failed login attempts.&lt;/p&gt;

&lt;p&gt;Now, it’s fairly simple to accomplish all those things by manually changing HAproxy’s config file (e.g., &lt;a href=&quot;https://gist.github.com/Iristyle/5005653&quot;&gt;https://gist.github.com/Iristyle/5005653&lt;/a&gt;, &lt;a href=&quot;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&quot;&gt;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&lt;/a&gt;).  However, I found it difficult to find any sort of documentation on how to accomplish the same thing using only pfsense’s graphical user interface (GUI).  The GUI makes it very easy to implement and configure the core aspects of HAproxy (e.g., reverse proxy and load balancing) but at the same time, it seems to lack support for other features, such as adding basic authentication requests and using stick-tables to mitigate attempts to brute-force users’ credentials.  If that’s what you’d like to do, then read on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;The pre-requisites are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You’re running &lt;strong&gt;pfsense version 2.4.4-RELEASE-p3&lt;/strong&gt; or similar;&lt;/li&gt;
  &lt;li&gt;You’ve installed the &lt;strong&gt;HAproxy package version 0.59_19&lt;/strong&gt; or similar;&lt;/li&gt;
  &lt;li&gt;You’ve already added backends and frontends with HAproxy using subdomains (e.g., &lt;a href=&quot;https://blog.devita.co/pfsense-to-proxy-traffic-for-websites-using-pfsense/&quot;&gt;https://blog.devita.co/pfsense-to-proxy-traffic-for-websites-using-pfsense/&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Configure ACME SSL with HAproxy.  For example:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/5Frn96oADOU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;basic-user-authentication&quot;&gt;Basic user authentication&lt;/h1&gt;
&lt;p&gt;This part of the tutorial is largely based on &lt;a href=&quot;https://hochwald.net/user-authentication-with-haproxy-on-pfsense/&quot;&gt;Joerg Hocwald’s guide&lt;/a&gt;. In HAproxy, it’s pretty simple to create a user list with encrypted passwords.  There is basically three steps involved: (a) user and password list creation, (b) adding those to the global settings, and (c) creating an access control list (ACL) and action for each backend.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a .txt file and write the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;userlist UserGroup
group is-admin
group is-user
user example01 password sha512-encrypted01 groups is-admin
user example02 password sha512-encrypted02 groups is-user
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userlist&lt;/code&gt; defines the name of your user list, which in this case we’re going to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserGroup&lt;/code&gt;.  Next, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group&lt;/code&gt; defines the group that each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; belongs to, which will be either a standard user (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is-user&lt;/code&gt;) or admin (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is-admin&lt;/code&gt;).  (You don’t need to define groups but it’s a nice way of restricting access to critical services.) Below groups, we have the list of all users, their (SHA-512 encrypted) passwords and the group they belong to.  You can add as many users as you want this way.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file.png&quot; alt=&quot;Userlist text file&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each user, create a SHA-512 encrypted password.  &lt;a href=&quot;https://lmgtfy.com/?q=how%20to%20create%20a%20sha-512%20password&amp;amp;s=g&quot;&gt;There are many ways of doing that.&lt;/a&gt;  If you’re running Debian (or any Linux distro), run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install whois&lt;/code&gt; in a terminal window, which has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkpasswd&lt;/code&gt; command that we’re going to user, and then run each of the followin commands, changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512-encrypted01&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512-encrypted02&lt;/code&gt; for the actual, &lt;em&gt;plain text&lt;/em&gt; password string of those respective users:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;printf &quot;sha512-encrypted01&quot; | mkpasswd --stdin --method=sha-512
printf &quot;sha512-encrypted02&quot; | mkpasswd --stdin --method=sha-512
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/sha-512_pass.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/sha-512_pass.png&quot; alt=&quot;mkpasswd output&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now copy each encrypted password and paste them over the respective &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512-encryptedXX&lt;/code&gt; string in the user list .txt file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file2.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file2.png&quot; alt=&quot;Edit the userlist with passwd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to pfsense’s GUI and in &lt;strong&gt;Services &amp;gt; HAproxy&lt;/strong&gt;, go to the &lt;strong&gt;Settings tab&lt;/strong&gt;.  Now find &lt;strong&gt;Global Advanced pass thru&lt;/strong&gt; and paste the content from your user list .txt file. (If you’ve other things in the global pass thru, make sure to add the user list to the bottom of all other commands.  Otherwise, you might get a few errors when trying to apply the settings.) When you’re done, hit &lt;strong&gt;Save&lt;/strong&gt; and then &lt;strong&gt;Apply Settings&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/global-pass-thru.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/global-pass-thru.png&quot; alt=&quot;HAproxy global passthru&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now head to the &lt;strong&gt;Backend tab&lt;/strong&gt;.  We’re going to &lt;strong&gt;edit one of the backends&lt;/strong&gt; (e.g., www.domain.com).  In &lt;strong&gt;Access control lists and actions&lt;/strong&gt;, create a new ACL, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = UserAuth
Expression = Custom acl:
CS = blank
Not = no
Value = http_auth_group(UserGroup) is-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(If you want to restrict access to admin, then you need to change the value from is-user to is-admin.)  Then, in &lt;strong&gt;Actions&lt;/strong&gt;, create a new one as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = http-request auth
Parameters = See below
Condition acl names = blank
Actions = blank
realm = realm User unless UserAuth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(As before, if you want to restrict access to admin, then in realm, change User for Admin.) Hit &lt;strong&gt;Save&lt;/strong&gt; and then &lt;strong&gt;Apply Settings&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_basicauth_001.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_basicauth_001.png&quot; alt=&quot;HAproxy ACL&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rinse and repeat for each backend you want to protect with basic user authentication.  Make sure to test your config before moving on to the next section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;stick-tables-to-protect-against-brute-force&quot;&gt;Stick-tables to protect against brute-force&lt;/h1&gt;
&lt;p&gt;In our case, access to each backend is secured by a basic http authentication request.  If the client does not provide correct credentials, it will be requested to enter new ones.  By default, HAproxy will do that forever, which is not something that sounds desirable to me because it allows clients to brute force their way into my services.  On HAproxy’s official blog, you’ll find a very instructive guide on how to protect your servers from bots, including a &lt;a href=&quot;https://www.haproxy.com/blog/bot-protection-with-haproxy/#brute-force-bots&quot;&gt;step-by-step procedure to help you mitigate brute-force attacks&lt;/a&gt;.  In their case, however, the authentication is associated to a particular /login page, instead of using HAproxy’s own http-request auth feature, and we’d like to use the latter instead.&lt;/p&gt;

&lt;p&gt;Fortunately, when a client provides incorrect credentials, the result is an &lt;strong&gt;http error code&lt;/strong&gt; (401) and because 4xx errors should be fairly uncommon in a properly configured server, we can use the rate of such errors (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_err_rate&lt;/code&gt;) as a marker of misuse/brute-force.  In HAproxy, a stick-table is used to keep track of a client’s IP address and both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_err_rate&lt;/code&gt; and the total number of errors (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_err_cnt&lt;/code&gt;).  In pfsense’s GUI, however, there’s no point-and-click way of enabling/disabling this, so we’ll need to make use of backend pass thru and write custom access control lists and actions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit one of your &lt;strong&gt;backends&lt;/strong&gt; (e.g., &lt;strong&gt;www&lt;/strong&gt;.domain.com) and in &lt;strong&gt;Advanced Settings&lt;/strong&gt;, add the following to &lt;strong&gt;Backend pass thru&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stick-table type ip size 1m expire 30m store conn_cur,conn_rate(3s),http_req_cnt,http_req_rate(10s),http_err_cnt,http_err_rate(20s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_001.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_001.png&quot; alt=&quot;HAproxy backend passthru&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This will create a stick-table that will capture the IP address of each client (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type ip&lt;/code&gt;), will store up to 1MB of data (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size 1m&lt;/code&gt;), will expire after 30min it was last matched/created/refreshed (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expire 30m&lt;/code&gt;) and for each client (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;), it will store the # of connections and their rate over 3s, the # of http requests and their rate over 10s, and the # of http errors and their rate over 20s (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store conn_cur,conn_rate(3s),http_req_cnt,http_req_rate(10s),http_err_cnt,http_err_rate(20s)&lt;/code&gt;).  (We won’t use all those data but I figure you might find useful for other applications.  We’ll only use the last two.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now go the the &lt;strong&gt;Frontend tab&lt;/strong&gt; edit the &lt;strong&gt;www&lt;/strong&gt;.domain.com &lt;strong&gt;frontend&lt;/strong&gt; (or whichever frontend is associated with the backend you just edited).  Here, we’ll create a couple of ACLs and actions that will make use of the data from the stick-table.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In &lt;strong&gt;Default backend&lt;/strong&gt; / &lt;strong&gt;Access control lists and actions&lt;/strong&gt;, &lt;strong&gt;create a new ACL&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = acl-www-err-rate
Expression = Custom acl:
CS = blank
Not = no
Value = sc_http_err_rate(0) gt 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This acl applies to all clients that have more than 10 4xx errors over the last 10s.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, &lt;strong&gt;create another ACL&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = acl-www-err-total
Expression = Custom acl:
CS = blank
Not = no
Value = sc_http_err_cnt(0) gt 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This acl applies to all clients that have more than 100 4xx errors stored on the stick-table (so, in the last 30min).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_002.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_002.png&quot; alt=&quot;HAproxy ACLs&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;strong&gt;Actions&lt;/strong&gt;, we will define what HAproxy will do in each of those cases.  First, however, we need to &lt;strong&gt;instruct HAproxy to track the correct backend stick-table&lt;/strong&gt;.  So, create a new action as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = Custom
Parameters = See below
Condition acl names = acl-www
customaction = http-request track-sc0 src table www.domain.com_ipvANY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The last sections, customaction, tells HAproxy to use the stick-table from the &lt;strong&gt;www&lt;/strong&gt;.domain.com backend.  By default, that table is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{backend-name}_ipvANY&lt;/code&gt;, so edit it accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we’re going to &lt;em&gt;deny requests&lt;/em&gt; from acl-&lt;strong&gt;subdomain&lt;/strong&gt;-err-total, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = http-request deny
Parameters = See below
Condition acl names = acl-www-err-total
denystatus = 403
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This will return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Forbidden error&lt;/code&gt; to clients that have more than 100 errors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Also, we’re going to &lt;em&gt;drop connections&lt;/em&gt; from clients that have a high error rate, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = Custom
Parameters = See below
Condition acl names = acl-www-err-rate
customaction = http-request silent-drop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This will cause the client to wait for a reply from our server but our server will never send one, so the client will hang in there until it gets a timeout.  This alone should be an effective way of dealing with brute-force attacks but I like the idea of completely denying access to persistent offenders.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now move your &lt;strong&gt;Use Backend&lt;/strong&gt; action to the bottom of the list and hit &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_003.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_003.png&quot; alt=&quot;HAproxy use backend bottom&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Apply settings&lt;/strong&gt; and check if it’s working correctly in the &lt;strong&gt;Stats tab&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_001.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_001.png&quot; alt=&quot;HAproxy stats tab&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_002.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_002.png&quot; alt=&quot;HAproxy stats tab&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’d like to configure stick-tables for other subdomains, just repeat all the previous steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s it!  Let me remind you that the options described here were tuned to my own case and therefore, you should review them to make sure they’ll work for yours as well.  For example, you might want to set a shorter expire for a given stick-table than 30 min., or you may not want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http-request deny&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http-request silent-drop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Stick-tables are great and there are many other things you can do with them.  For example, you can use a similar procedure to implement other recommendations mentioned in &lt;a href=&quot;https://www.haproxy.com/blog/bot-protection-with-haproxy&quot;&gt;&lt;strong&gt;the official blog&lt;/strong&gt;&lt;/a&gt;.  This one has been working very well for me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="haproxy" /><category term="homelab" /><category term="homeserver" /><category term="http" /><category term="pfsense" /></entry></feed>