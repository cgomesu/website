<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-07T15:48:43-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CGomesu</title><subtitle>A blog and portfolio website built with Jekyll and hosted on Github Pages</subtitle><author><name>Carlos Gomes</name></author><entry><title type="html">Mesh networking: A guide to using free and open-source software with common hardware</title><link href="http://localhost:4000/blog/Mesh-networking-openwrt-batman/" rel="alternate" type="text/html" title="Mesh networking: A guide to using free and open-source software with common hardware" /><published>2020-12-07T12:10:00-03:00</published><updated>2020-12-07T12:10:00-03:00</updated><id>http://localhost:4000/blog/Mesh-networking-openwrt-batman</id><content type="html" xml:base="http://localhost:4000/blog/Mesh-networking-openwrt-batman/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;Dec 7th, 2020&lt;/strong&gt;: Publication of the original guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this tutorial, we will learn how to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;&lt;strong&gt;mesh networks&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;IEEE 802.11s&lt;/strong&gt;&lt;/a&gt;) using &lt;a href=&quot;https://openwrt.org/&quot;&gt;&lt;strong&gt;OpenWrt&lt;/strong&gt;&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_link_layer&quot;&gt;layer-2&lt;/a&gt; implementation of the &lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;, called &lt;a href=&quot;https://www.kernel.org/doc/html/v4.15/networking/batman-adv.html&quot;&gt;&lt;strong&gt;batman-adv&lt;/strong&gt;&lt;/a&gt;.  All the software mentioned here is &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;open-source&lt;/strong&gt;, as opposed to commercial alternatives (&lt;a href=&quot;https://unifi-mesh.ui.com&quot;&gt;UniFi Mesh&lt;/a&gt; or &lt;a href=&quot;https://store.google.com/us/product/nest_wifi&quot;&gt;Google’s Nest Wifi&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is not meant to be an exhaustive presentation of any of the covered topics. If you have suggestions on how to improve this guide, feel free to &lt;a href=&quot;/contact/&quot;&gt;get in touch with me&lt;/a&gt;. I’m always eager to learn new things and share them. Also, I plan on updating this article every once in a while to best reflect my knowledge about the topics covered here and to add information provided by the readers. Check the &lt;a href=&quot;#changelog&quot;&gt;changelog&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-am-i-writing-this-guide&quot;&gt;Why am I writing this guide?&lt;/h1&gt;
&lt;p&gt;Even though the concept of mesh networking has been around for quite some time now, the documentation of its implementation is still scarce/nichey, proprietary, or outdated.  I don’t feel qualified to speculate on why this is so but I find it odd because many of the radio devices found in popular wireless routers actually support mesh networking–but the original firmware rarely supports it.&lt;/p&gt;

&lt;p&gt;My intention with this tutorial is to help closing the gap between concept and implementation of mesh networking using up-to-date software that anyone can download and install on cheap, commonly available hardware–primarily consumer wireless routers (from old to new, single- or multi-band) but the principles should be extendable to any cellphones, laptops, PCs or servers running &lt;strong&gt;Linux&lt;/strong&gt;.  The content is partially based on my own experience and builds upon the work of other, much more talented individuals who shared their knowledge on the Web.  More specifically, the content is notably influenced by the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brian Innes workshop about using Raspberry Pis to create a mesh network for sharing sensor data wirelessly (&lt;a href=&quot;https://github.com/binnes/WiFiMeshRaspberryPi&quot;&gt;Github repo&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Andreas Spiess &lt;a href=&quot;https://www.youtube.com/watch?v=TY6m6fS8bxU&quot;&gt;LoRa mesh project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maintaners of the &lt;a href=&quot;https://openwrt.org/docs/start&quot;&gt;OpenWRT documentation&lt;/a&gt; and the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;B.A.T.M.A.N. wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Multiple users from the OpenWrt forum who shared their opinions over the years. To name a few,  the users &lt;a href=&quot;https://forum.openwrt.org/u/jeff&quot;&gt;jeff&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/mcarni&quot;&gt;mcarni&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/oavaldezi&quot;&gt;oavaldezi&lt;/a&gt;, &lt;a href=&quot;https://forum.openwrt.org/u/slh&quot;&gt;slh&lt;/a&gt;, and many others. Thanks for keeping the posts public.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Get familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; files in OpenWrt devices (namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireless&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;) to quickly and permanently configure mesh nodes.&lt;/li&gt;
  &lt;li&gt;Edit files directly from the terminal using the default text editor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Configure OpenWrt devices to play one of three possible roles in the network: (a) mesh node, (b) mesh + bridge node, or (c) mesh + gateway node.&lt;/li&gt;
  &lt;li&gt;Install and configure the Kernel module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on an OpenWrt device using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg&lt;/code&gt; package manager.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to test, debug, and monitor connectivity within the mesh.&lt;/li&gt;
  &lt;li&gt;Add encryption to the mesh network with the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use VLANs to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; networks within the mesh using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;From this point forward, the article is divided into four main parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/a&gt;: &lt;em&gt;Optional for advanced users.&lt;/em&gt; Brief introduction to just enough network concepts to allow the implementation of simple mesh networks. When appropriate, a link to the relevant OpenWrt documentation was also provided.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the hardware used in the examples and recommendations for those who are planning on buying new/used devices for their mesh project.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#software&quot;&gt;Software&lt;/a&gt;: &lt;em&gt;Optional for everyone&lt;/em&gt;. A few notes about the software used in the examples.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt;: &lt;em&gt;Required&lt;/em&gt;. Step-by-step procedure to configure mesh nodes, bridges, and gateways.  It goes from flashing OpenWrt to configuring VLANs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;. You probably came here for this part.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;concepts-and-documentation&quot;&gt;Concepts and documentation&lt;/h1&gt;

&lt;h2 id=&quot;main-network-definitions&quot;&gt;Main network definitions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mesh &lt;a href=&quot;https://en.wikipedia.org/wiki/Node_(networking)&quot;&gt;node&lt;/a&gt;: Any network device that is connected to the mesh network and that helps routing data to (and from) mesh clients.  Here, however, if a mesh node acts as a bridge or gateway, it will always be referred by the latter role, even though by definition, mesh bridges and mesh gateways are also mesh nodes.&lt;br /&gt;
In addition, even though it’s possible to route mesh traffic via cable, in this tutorial, &lt;em&gt;all mesh nodes are also wireless devices&lt;/em&gt;, meaning that they have access to a radio with &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11s&quot;&gt;&lt;strong&gt;mesh point&lt;/strong&gt; (802.11s)&lt;/a&gt; capabilities.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;Learn about the OpenWrt wireless config &lt;strong&gt;/etc/config/wireless&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bridging_(networking)&quot;&gt;Bridge&lt;/a&gt;: A network device that joins any two or more network interfaces (e.g., LAN ethernet and wireless) into a single network.  Here, when a device is referred to as a bridge, it means that in addition to being a mesh node, the only other thing it does is bridge interfaces.  But of course, a gateway &lt;em&gt;device&lt;/em&gt;, such as a router with a built-in modem, or a firewall appliance, may also work as a bridge for multiple interfaces. The distinction in the examples is just used to highlight its main role in the network.  Therefore, a mesh bridge in this tutorial is a mesh node that simply bridges the mesh network with a WiFi access point  for non-mesh clients, for example, or its LAN ports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gateway_(telecommunications)&quot;&gt;Gateway&lt;/a&gt;: A network device that translates traffic from one network (LAN) to another (WAN) and here, acts as both a &lt;strong&gt;firewall&lt;/strong&gt; and &lt;strong&gt;DHCP server&lt;/strong&gt;.  (If there’s more than one DHCP server in the same network, they assign IPs to different ranges, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.1-100&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.101-200&lt;/code&gt;, and so on.)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;Learn about the OpenWrt network config &lt;strong&gt;/etc/config/network&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt;: In brief, a system for translating domain names (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgomesu.com&lt;/code&gt;) into IP addresses (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.108.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.109.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.110.153&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;185.199.111.153&lt;/code&gt;). DNS filtering systems, such as &lt;a href=&quot;https://pi-hole.net/&quot;&gt;PiHole&lt;/a&gt;, work by catching such requests–usually sent through port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt;–and checking if the domain is blacklisted or not.  In this tutorial, we will always use an external DNS server, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.1.1.1&lt;/code&gt; (Cloudflare) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt; (Google), but if you have your own DNS resolver, feel free to use it instead when configuring your mesh network but then make sure the mesh network/VLAN has access to its address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&quot;&gt;DHCP&lt;/a&gt;: An IP management system that dynamically assigns layer-3 addresses for devices connected to a network. For instance, it might dynamically assign IPs between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.255&lt;/code&gt; (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) to any devices connected to LAN. Of note, because this is a network layer protocol, it uses IP addresses, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; uses MAC addresses because it works at the data link layer (and therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; actually doesn’t need DHCP and IPs to discover and manage mesh clients but we’re going to use them to make it more intuitive and easier to integrate mesh with non-mesh clients).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;Learn about the OpenWrt DNS and DHCP config &lt;strong&gt;/etc/config/dhcp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Firewall_(computing)&quot;&gt;Firewall&lt;/a&gt;: A network system that monitors and controls network traffic, such as specifying rules for incoming WAN traffic (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deny all&lt;/code&gt;), outgoing LAN traffic (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept all&lt;/code&gt;), geoblocking and IP filtering systems, intrusion prevention/detection systems (&lt;a href=&quot;https://suricata-ids.org/&quot;&gt;Suricata&lt;/a&gt;), and so on.  &lt;a href=&quot;https://opnsense.org/&quot;&gt;OpenSense&lt;/a&gt; and &lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense&lt;/a&gt; are examples of dedicated firewall software. If a mesh node is acting as a mesh gateway, it’s imperative to configure the firewall or your mesh network will likely end up without access to external networks (e.g., WAN) and their services (e.g., DNS servers).
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;Learn about the OpenWrt firewall config &lt;strong&gt;/etc/config/firewall&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_LAN&quot;&gt;VLAN&lt;/a&gt;: A &lt;em&gt;virtual&lt;/em&gt; LAN that is partitioned and isolated in a network at the layer-2 level.  They are often followed by an integer to differentiate each other (e.g., VLAN 1, VLAN 50) and used to better manage network clients that belong to different groups (e.g., administrators, IoT devices, security cameras, guests).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-topologies&quot;&gt;Network topologies&lt;/h2&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zbqrNg4C98U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;mesh-networks&quot;&gt;Mesh networks&lt;/h2&gt;

&lt;h3 id=&quot;what-are-mesh-networks&quot;&gt;What are mesh networks?&lt;/h3&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/tYLU755T6_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;where-can-i-learn-more-about-mesh-networking&quot;&gt;Where can I learn more about mesh networking?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Wikipedia articles about &lt;a href=&quot;https://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;mesh networking&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network&quot;&gt;wireless mesh networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scholar.google.com/scholar?q=mesh+networking&quot;&gt;Peer-reviewed papers or books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;routing-protocols&quot;&gt;Routing protocols&lt;/h3&gt;
&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Wireless_mesh_network#Protocols&quot;&gt;dozens of algorithms&lt;/a&gt; for routing packets in a mesh network.  A few notable ones are the Optimized Link State Routing (OLSR) and the Hybrid Wireless Mesh Protocol (HWMP).&lt;/p&gt;

&lt;p&gt;In this tutorial, however, we will cover only one of them, called &lt;a href=&quot;https://en.wikipedia.org/wiki/B.A.T.M.A.N.&quot;&gt;&lt;em&gt;Better Approach to Mobile Adhoc Networking&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;B.A.T.M.A.N.&lt;/strong&gt;), because &lt;a href=&quot;https://www.kernel.org/doc/html/latest/networking/batman-adv.html&quot;&gt;it has long been incorporated into the Linux Kernel&lt;/a&gt; and is thus easily enabled on Linux devices.  It is also a &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki&quot;&gt;fairly well-documented&lt;/a&gt; algorithm that &lt;a href=&quot;https://www.open-mesh.org/projects/open-mesh/activity&quot;&gt;has been continuously improved&lt;/a&gt; over the years.  Another noteworthy feature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; is its lack of reliance on layer-3 protocols for managing mesh clients because it works at the layer-2 and its ability to create VLANs.  Think of it as if it were a big, smart, virtual switch, in which its VLANs are port-based segmentations.  If you want an interface to use a particular mesh VLAN, just “plug it” into the approriate port of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; switch (e.g., bridge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-guest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; to give the guest network access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN 2).&lt;/p&gt;

&lt;h4 id=&quot;batman-adv&quot;&gt;batman-adv&lt;/h4&gt;
&lt;p&gt;As mentioned before, B.A.T.M.A.N. has gone through multiple changes over the years, which means that there are actually &lt;em&gt;multiple versions of the algorithm&lt;/em&gt;. I’ve had a good experience with &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/BATMAN_IV&quot;&gt;&lt;strong&gt;B.A.T.M.A.N. IV&lt;/strong&gt;&lt;/a&gt; and therefore, the examples here make use of it.  However, you are free to try whatever version you want and even run them in parallel to each other, by assigning a different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface to each version of the algorithm (versions are chosen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option routing_algo&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file for each enabled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; interface).&lt;/p&gt;

&lt;p&gt;Config-wise, there’s very little to do because the default settings should work very well in most environments.  One exception is when you have multiple gateways in the network to provide high availability, for example, and you might want to let each mesh node know about them and their speeds to better route the mesh traffic.  This requires setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt;, for example.  Many other tweaks that are not covered here are &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Doc-overview#Protocol-Documentation&quot;&gt;described in their wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;batctl&quot;&gt;batctl&lt;/h4&gt;
&lt;p&gt;Another very cool feature of B.A.T.M.A.N. is the ability to test, debug, monitor, and set settings with the package &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;&lt;/a&gt;.  A few noteworthy options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ping mesh node/client with its MAC address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:00&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/tcpdump&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;&lt;/a&gt; for all mesh traffic in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Prints useful stats for all mesh traffic, such as sent and received bytes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Shows the neighboring mesh nodes
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Displays the gateway servers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt;) in the mesh network
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl gwl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It goes without saying that if you want to dive deep into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, you should take a good look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes used in the various implementations had the following hardware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;: &lt;a href=&quot;https://www.tp-link.com/us/home-networking/wifi-router/tl-wr1043nd/&quot;&gt;TP-Link WR-1043ND&lt;/a&gt; v1.8&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Architecture&lt;/strong&gt;: Atheros AR9132 rev 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-wr1043nd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/tplink-wr1043nd.jpg&quot; alt=&quot;TP-Link 1043nd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was mainly a matter of convenience–I had a few lying around and they are very, very cheap–and because the examples in the OpenWrt documentation often refer to them as well, so the community support is good.&lt;/p&gt;

&lt;p&gt;However, the general ideas presented here should apply to &lt;strong&gt;any wireless device&lt;/strong&gt; that meets the following criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compatible with the latest OpenWRT version. Refer to their &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Hardware List&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has access to a radio that supports the &lt;strong&gt;mesh point&lt;/strong&gt; (&lt;strong&gt;802.11s&lt;/strong&gt;) mode of operation. If you already have OpenWrt installed on a wireless device, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt; and search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh point&lt;/code&gt; under &lt;strong&gt;Supported interface modes&lt;/strong&gt;, or simply check if the following command outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* mesh point&lt;/code&gt; below the name of a detected radio (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phy1&lt;/code&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list | grep -ix &quot;^wiphy.*\|^.*mesh point$&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If it does, then the associated radio can be configured as a mesh point.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you’re looking for devices to buy and experiment on, my suggestion is to look for dual-band wireless routers to allow a better segmentation of the wireless networks.  If you can afford spending more for a mesh node, look for tri-band devices.  Netgear and Linksys have solid options that are compatible with OpenWrt. For example, the Linksys WRT1900AC (v1/v2) dual-band wireless router would make for a good mesh node:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-wrt1900ac.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/linksys-wrt1900ac.jpg&quot; alt=&quot;Linksys WRT1900AC&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For single-board computer (SBC) fans like me, you can run OpenWrt with most of them and then use a combination of on-board wireless and USB adapter to create a powerful mesh node. &lt;a href=&quot;https://shop.solid-run.com/product-category/embedded-computers/marvell-family/clearfog-base-pro/&quot;&gt;ClearFog boards&lt;/a&gt; with one or two mini PCIe wireless cards would make very good candidates for such a project, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/clearfog-pro.jpg&quot; alt=&quot;ClearFog Pro&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you can install OpenWrt on bare metal x86-64 machines (e.g., standard PC or server running Intel/AMD), which will give you lots of options to put together an impressive mesh device. However, if you just want your work/home laptops/PCs to &lt;em&gt;be part of the mesh&lt;/em&gt; (i.e., become a mesh node), there are better alternatives than installing OpenWrt as its OS.  For example, you can run OpenWrt with a &lt;a href=&quot;https://openwrt.org/docs/guide-user/virtualization/start&quot;&gt;virtual machine&lt;/a&gt; or as a &lt;a href=&quot;https://github.com/openwrt/docker&quot;&gt;docker container&lt;/a&gt;.  Naturally, it’s also possible to configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on Linux distributions other than OpenWrt, such as Arch, Debian, and Ubuntu.  See &lt;a href=&quot;#getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on any Linux device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned before, even if the existing/on-board radio of your SBC/laptop/PC/server does not support the mesh point mode of operation, you can always buy a compatible PCIe card or USB adapter to turn your device into a mesh node and then use the other radio for another purpose.  For example, many &lt;a href=&quot;https://www.alfa.com.tw/&quot;&gt;Alfa Network&lt;/a&gt; adapters can operate in mesh point mode, like the cheap AWUS036NH:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/AWUS036NH.jpg&quot; alt=&quot;Alfa AWUS036NH&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All that said&lt;/strong&gt;, most home users will be &lt;strong&gt;just fine with a cheapo, used, old, single-band router&lt;/strong&gt;.  For a brand reference, TP-Link has good and affordable devices that can be used in a mesh networking project without issues.  If you’re new to this, start from here (small, simple) and think about efficiency over power.  You don’t need to drive a Lamborghini to get a snack at the grocery store.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Unless otherwise specified, all mesh nodes were running the following software:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/openwrt-ssh-welcome.jpg&quot; alt=&quot;OpenWrt default SSH welcome&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Operating System&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Firmware&lt;/strong&gt;: OpenWrt 19.07.4 r11208-ce6496d796&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Linux kernel&lt;/strong&gt;: 4.14.195&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Packages mentioned in the tutorial&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/batctl-default&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;&lt;/a&gt;: 2019.2-7&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/kmod-batman-adv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;&lt;/a&gt;: 4.14.195+2019.2-9&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://openwrt.org/packages/pkgdata/wpad-mesh-openssl&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt;&lt;/a&gt;: 2019-08-08-ca8c2bd2-4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find out the version of all installed packages, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you prefer to filter the output, use grep.  For example, the following will show the version of all installed packages containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg list-installed | grep bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Huge differences in firmware, kernel, or package versions &lt;em&gt;might&lt;/em&gt; make the implementation of a mesh network a little bit different than the way it was explained here.  Of note, devices running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; &lt;strong&gt;version 2019.0-2 and older&lt;/strong&gt; are certainly incompatible with the instructions found in this tutorial, the reason being that the module was modified after then to better integrate with the &lt;a href=&quot;https://openwrt.org/docs/techref/netifd&quot;&gt;network interface daemon&lt;/a&gt;.  Fortunately, the implementation using old modules is just a simple as with the latest one. &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Batman-adv-openwrt-config#Batman-adv-20190-2-and-older&quot;&gt;Check what the B.A.T.M.A.N. wiki has to say about it&lt;/a&gt;.  However, it’s worth mentioning that with old batman modules, changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; will likely require a reboot instead of simply reloading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/init.d/network&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I’ve noticed that when installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will install a minimal version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-tiny&lt;/code&gt;, that lacks some of the options mentioned here (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batnctl o&lt;/code&gt;).  However, if you install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; first and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod-batman-adv&lt;/code&gt;, the package manager will preserve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl-default&lt;/code&gt;, which is the package used in this tutorial and that has all the options referred to in the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;batctl man page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt; will conflict with the already installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package.  This means &lt;strong&gt;you have to remove the latter before installing the former&lt;/strong&gt;.  To remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; package, simply type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vi-text-editor&quot;&gt;VI text editor&lt;/h2&gt;
&lt;p&gt;The default text editor in a standard OpenWrt image is &lt;a href=&quot;https://en.wikipedia.org/wiki/Vi&quot;&gt;&lt;strong&gt;vi&lt;/strong&gt;&lt;/a&gt;, which is an old, screen oriented editor that most modern users will find counterintuitive to use.  Fortunately, once you get the hang of it, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; becomes very easy to use and it becomes a very convenient way of editing config files.  Here’s all that you need to know about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in a terminal:&lt;/p&gt;

&lt;p&gt;You can open a file by adding the filename as an argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if the file does not exist, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will create one with that name.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; will start in &lt;strong&gt;command mode&lt;/strong&gt;.  Such a mode let’s you navigate the file with the arrow keys and use the &lt;em&gt;delete button&lt;/em&gt; to delete characters.  (Also, in command mode, you can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; to delete entire lines, which is very useful if you need to delete lots of things quickly.)&lt;/p&gt;

&lt;p&gt;However, if you need to type characters and have more flexibility to edit the file, you need to tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; to enter &lt;strong&gt;insert mode&lt;/strong&gt;.  To enter insert mode, type (no need to hit return/enter afterwards)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the bottom of the screen, you will see that it now shows a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; to indicate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; is in insert mode.  You can now type freely and even paste multiple things at once in insert mode.&lt;/p&gt;

&lt;p&gt;When you’re done, press the button &lt;strong&gt;Esc&lt;/strong&gt; to go back into command mode.  Notice that at the bottom of the screen, now there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; was, which tells you you’re in command mode once again.&lt;/p&gt;

&lt;p&gt;In command mode, you can then &lt;strong&gt;write changes to the file&lt;/strong&gt; by typing (followed by return/enter)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ve saved the file. To quit, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can &lt;em&gt;write and quit&lt;/em&gt; by simply typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; has other commands as well but honestly, that’s pretty much all that you need to know about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; in order to use in the examples covered here.  Give it a try!&lt;/p&gt;

&lt;h2 id=&quot;alternatives-to-vi&quot;&gt;Alternatives to VI&lt;/h2&gt;
&lt;p&gt;Now, if you still don’t like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, you can always transfer files from your laptop/PC to OpenWrt via sftp, for example, or utilities like &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_copy_protocol&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;In this section, we will see how to configure &lt;strong&gt;four mesh nodes&lt;/strong&gt; in &lt;strong&gt;three different network topologies&lt;/strong&gt;. More specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Bridge&lt;/strong&gt;: A mesh network in which one node plays the role of a mesh gateway and another, of a bridge, while the remaining are just mesh nodes.  This is a very typical scenario for a home or small office, for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bridge-Bridge&lt;/strong&gt;: Two nodes play the role of a bridge, therefore making the mesh network transparent to the external (non-mesh) networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gateway-Gateway&lt;/strong&gt;: Two nodes play the role of a gateway to provide high-availability to mesh clients/nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, however, we will start with the aspects that are common to all topologies, such as planning the mesh network, and the installation and basic configuration of OpenWrt mesh nodes.  Then, we will move to the specifics of each of the aforementioned mesh network topologies.  Finally, we end the section with a slightly more complex scenario to illustrate how to create &lt;strong&gt;mesh VLANs&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; and a very brief introduction to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; on other Linux distros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though the examples show static nodes, &lt;strong&gt;none of the mesh nodes need to be static&lt;/strong&gt;. The mesh network and its components can be partially or totally mobile. For example, if some of your nodes are mobile units (e.g., vehicles, drones, robots, cellphones, laptops), they can leave and join the mesh, recreate the mesh elsewhere, join a completely different mesh, and so on.  The routing algorithm (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;) will automatically (and  seamlessly) take care of changes to the network topology. (But of course, if there’s a single gateway and it does not reach any node, the network is bound to stop working as intended without proper configuration to handle such scenarios.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-moving-nodes.gif&quot; alt=&quot;Topology - Moving nodes&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;p&gt;Just like any other type of network, deploying a mesh network–especially over large areas, with dozens of nodes–requires a fair deal of planning; Otherwise, you are bound to experience, for instance, bottlenecks, uneven access point signal quality, and unstable WAN connectivity across the mesh.  Also, features like &lt;strong&gt;high availability&lt;/strong&gt; go well beyond the configuration and topology of a mesh network (e.g., power source, whre your WAN connections are coming from, and the hardware you are using all play important roles when it comes to high availability).  Mesh networks are very, very easy to scale but planning is key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eli the Computer Guy&lt;/em&gt; has an old video about mesh networks that goes into things like high availability and bottlenecks.  If that matters to you, take a look. The relevant content &lt;strong&gt;starts at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;03:30&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;ends at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17:30&lt;/code&gt;&lt;/strong&gt;, approximately.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/T7fJwAyALss&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;The examples in this tutorial are simple &lt;em&gt;by design&lt;/em&gt;–they were created to illustrate different scenarios in a way that makes it easy to understand what is going on. The idea is to use the examples as templates for more complex implementations.&lt;/p&gt;

&lt;h2 id=&quot;openwrt-installation-and-initial-configuration&quot;&gt;OpenWrt installation and initial configuration&lt;/h2&gt;
&lt;p&gt;Now that you have the hardware, the first thing to do is to install OpenWrt.  Flashing a default OpenWrt image onto a &lt;strong&gt;&lt;em&gt;compatible device&lt;/em&gt; is a very easy and safe procedure&lt;/strong&gt; because it’s been tested multiple times.  (For extra safety precautions, you might want to search the Web for your device + OpenWrt to see if there’s any indexed forum post or comment regarding installation issues and bugs, for example.)&lt;/p&gt;

&lt;p&gt;If you’re new to this, the folks at OpenWrt were kind enough to provide a plethora of instructions on &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/start&quot;&gt;how to install and uninstall OpenWrt&lt;/a&gt; and even put together an &lt;a href=&quot;https://openwrt.org/docs/guide-user/installation/generic.flashing#installation_checklist&quot;&gt;&lt;strong&gt;installation checklist&lt;/strong&gt;&lt;/a&gt;.  At the very least, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look for your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;a href=&quot;https://openwrt.org/toh/start&quot;&gt;&lt;strong&gt;Table of Hardware&lt;/strong&gt;&lt;/a&gt; and open its &lt;strong&gt;Device Page&lt;/strong&gt; (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd&quot;&gt;TP-Link TL-WR1043ND&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;Double check that the &lt;strong&gt;model and version&lt;/strong&gt; match your device’s &lt;strong&gt;model and version&lt;/strong&gt; in the &lt;strong&gt;Supported Versions&lt;/strong&gt; table;&lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;Installation&lt;/strong&gt; table, you will find a column called &lt;em&gt;Firmware OpenWrt Install URL&lt;/em&gt; and another one called &lt;em&gt;Firmware OpenWrt Upgrade URL&lt;/em&gt;. If your device is &lt;strong&gt;still running the original firmware&lt;/strong&gt;, then download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Install&lt;/strong&gt; URL&lt;/em&gt; column; otherwise, download the binary from the &lt;em&gt;Firmware OpenWrt &lt;strong&gt;Upgrade&lt;/strong&gt; URL&lt;/em&gt; column.  Both files should have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bin&lt;/code&gt; extension;&lt;/li&gt;
  &lt;li&gt;Regardless of the binary file downloaded, &lt;a href=&quot;https://openwrt.org/docs/guide-quick-start/verify_firmware_checksum&quot;&gt;&lt;strong&gt;verify its checksum&lt;/strong&gt;&lt;/a&gt; afterwards;&lt;/li&gt;
  &lt;li&gt;Disconnect your laptop/PC from any access point or switch, and connect your laptop/PC directly to the device’s ethernet port.&lt;/li&gt;
  &lt;li&gt;Open your device’s web UI, go to its Settings and/or find the &lt;strong&gt;Firmware Upgrade&lt;/strong&gt; option. Then, select the downloaded OpenWrt binary, and let it do its thing. Once it’s done, the device will reboot with OpenWrt installed. (You should be able to reach it at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; if connected to a LAN port.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you can reach the OpenWrt web UI, then you’ve successfully installed OpenWrt and it’s now time to configure it.&lt;/p&gt;

&lt;h3 id=&quot;initial-configuration&quot;&gt;Initial configuration&lt;/h3&gt;
&lt;p&gt;As mentioned before, we &lt;strong&gt;will not use the web UI&lt;/strong&gt; in this tutorial, even if the OpenWrt image you’re using has LuCI installed by default.  Instead, we will access our device and configure it using only &lt;strong&gt;SSH&lt;/strong&gt;.  So, open a terminal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into your OpenWrt device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; is your OpenWrt device’s IP address (that’s usually the case after a fresh install but if it’s different, use the proper IP then). Because this is the first time using the system, you’ll need to set a password for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user.  You can do that by typing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and following the instructions.  At this point, it’s good practice to label this device (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node01&lt;/code&gt;) and take note of its &lt;strong&gt;MAC address&lt;/strong&gt;.  To find out the latter, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and keep a record of the device’s name and its MAC address–if there are multiple different addresses, take note of all of them and their interface.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: &lt;a href=&quot;https://openwrt.org/docs/guide-user/security/dropbear.public-key.auth&quot;&gt;Configure key-based authentication&lt;/a&gt; and &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dropbear&quot;&gt;disable password login&lt;/a&gt;. Reboot and check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; access methods are correctly configured.)&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;From this point forward, we will start editing files using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;.  If you’ve not read the &lt;a href=&quot;#vi-text-editor&quot;&gt;section about how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;&lt;/a&gt; yet, this is a good time to do so.&lt;/p&gt;

&lt;h3 id=&quot;default-config-for-the-hardware&quot;&gt;Default config for the hardware&lt;/h3&gt;
&lt;p&gt;Regardless of the hardware, &lt;strong&gt;before doing anything related to the mesh network&lt;/strong&gt;, always take your time and &lt;strong&gt;study the default configuration&lt;/strong&gt; found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt;.  For reference, I usually go over the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many ethernet ports?&lt;/li&gt;
  &lt;li&gt;Are they labeled either LAN or WAN or there’s both?&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, how is the router handling multiple ethernet ports? If there’s both LAN and WAN, how is the router separating LAN from WAN?&lt;/li&gt;
  &lt;li&gt;If there is both LAN and WAN, how is the firewall handling them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;? (Probably two zones, LAN and WAN, with LAN-&amp;gt;WAN accept all but WAN-&amp;gt;LAN deny all?)&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;, how is the device handling IP addresses?  (Is there a DHCP server for LAN?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, look at the wireless settings (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many radio devices and their names? (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Configuration-wise, what is the device using by default vs. what is it capable of? (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw list&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Is the radio enabled or disabled? (Keep/add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option disabled 1&lt;/code&gt; to disable it before configuration; to re-enable, simply comment this line out or set the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;Are there pre-configured wireless access points being broadcast?  If yes, which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option network&lt;/code&gt; is it using by default? (Likely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; or whatever the LAN interface is being called in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, many wireless routers, including the TP-Link WR1043ND, have LAN and WAN ports which are handled by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; configuration with VLANs enabled to separate LAN from WAN.  Take note of it;  understand what is going on in the config files;  play with them;  then, continue.  Also, take this opportunity to go over the &lt;strong&gt;Device Page&lt;/strong&gt; to check if there’s any warnings or special configuration notes (e.g., &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#warningsgotchas&quot;&gt;warnings and gotchas with the 1043ND&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This understanding is instrumental to the way the device will be configured to play different roles in the mesh network and a good grasp of the device’s default settings will greatly reward you later on.&lt;/p&gt;

&lt;h3 id=&quot;updating-and-installing-packages&quot;&gt;Updating and installing packages&lt;/h3&gt;
&lt;p&gt;(&lt;em&gt;Only experienced users&lt;/em&gt;: If you used a default image, this is a good opportunity to remove unnecessary packages. See the OpenWrt FAQ for a reference of &lt;a href=&quot;https://openwrt.org/faq/which_packages_can_i_safely_remove_to_save_space&quot;&gt;safe to remove packages&lt;/a&gt;, for example. If this is your first time playing with mesh, leave any unmentioned pkg alone until you get everything working as intended.)&lt;/p&gt;

&lt;p&gt;In order to update and install packages, you need to give your device &lt;strong&gt;temporary access to the Internet&lt;/strong&gt;.  More often than not, if you have an existing network with access to the Internet on-site, then just connect the device to a router/switch via cable.  If that doesn’t work, go ahead and configure your device to act like a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt;&lt;/a&gt; first.  You can check that the device has access to the Internet by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt;ing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it all looks good, it’s time to &lt;strong&gt;update the package list&lt;/strong&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: Upgrade all installed packages. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; to find which packages can be upgraded and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg upgrade PKG&lt;/code&gt;, in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKG&lt;/code&gt; is the package name.  If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opkg list-upgradable&lt;/code&gt; run into memory issues, try commenting out a few lines in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/opkg/distfeeds.conf&lt;/code&gt; and try again.)&lt;/p&gt;

&lt;p&gt;Now, let’s install the mesh-related packages and remove conflicting packages.  First, remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-basic&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg remove wpad-basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpad-mesh-openssl&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opkg install batctl kmod-batman-adv wpad-mesh-openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure there are no error messages and if there are, troubleshoot them before proceeding.&lt;/p&gt;

&lt;p&gt;Remove the connection that gave your device temporary access to the Internet.  Then, &lt;strong&gt;reboot&lt;/strong&gt; (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and restart the SSH session with your laptop/PC still connected to the device via cable.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;If you’re using the &lt;strong&gt;TP-Link WR1043ND v1.x&lt;/strong&gt; in your mesh project, you’ll need to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; parameter of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt; module to use the mesh with encryption.  To enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt;, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules.d/ath9k&lt;/code&gt; and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt=1&lt;/code&gt; to it (if there’s already something in the file, use whitespaces to separate parameters), save the file, and &lt;strong&gt;reboot&lt;/strong&gt;. Then, check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohwcrypt&lt;/code&gt; is now enabled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /sys/module/ath9k/parameters/nohwcrypt&lt;/code&gt;. If it is enabled, the output will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;; otherwise, it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. (If your device also has &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ath9k&lt;/code&gt;&lt;/strong&gt; and you experience connectivity issues when using encryption with the mesh network, then you might want to try this solution as well.)&lt;/p&gt;

&lt;h2 id=&quot;mesh-node-basic-config&quot;&gt;Mesh node basic config&lt;/h2&gt;
&lt;p&gt;It is time to configure the basics of our mesh network and nodes.  To do so, we will edit multiple files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt; but first, let’s find out the capabilities of the detected radios in our wireless device, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iw list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will output something like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Wiphy phy0
	max # scan SSIDs: 4
	max scan IEs length: 2257 bytes
	max # sched scan SSIDs: 0
	max # match sets: 0
	max # scan plans: 1
	max scan plan interval: -1
	max scan plan iterations: 0
	Retry short limit: 7
	Retry long limit: 4
	Coverage class: 0 (up to 0m)
	Device supports AP-side u-APSD.
	Device supports T-DLS.
	Available Antennas: TX 0x7 RX 0x7
	Configured Antennas: TX 0x7 RX 0x7
	Supported interface modes:
		 * IBSS
		 * managed
		 * AP
		 * AP/VLAN
		 * monitor
		 * mesh point
		 * P2P-client
		 * P2P-GO
		 * outside context of a BSS
	Band 1:
		Capabilities: 0x104e
			HT20/HT40
			SM Power Save disabled
			RX HT40 SGI
			No RX STBC
			Max AMSDU length: 3839 bytes
			DSSS/CCK HT40
		Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
		Minimum RX AMPDU time spacing: 8 usec (0x06)
		HT TX/RX MCS rate indexes supported: 0-15
		Frequencies:
			* 2412 MHz [1] (20.0 dBm)
			* 2417 MHz [2] (20.0 dBm)
			* 2422 MHz [3] (20.0 dBm)
			* 2427 MHz [4] (20.0 dBm)
			* 2432 MHz [5] (20.0 dBm)
			* 2437 MHz [6] (20.0 dBm)
			* 2442 MHz [7] (20.0 dBm)
			* 2447 MHz [8] (20.0 dBm)
			* 2452 MHz [9] (20.0 dBm)
			* 2457 MHz [10] (20.0 dBm)
			* 2462 MHz [11] (20.0 dBm)
			* 2467 MHz [12] (20.0 dBm)
			* 2472 MHz [13] (20.0 dBm)
			* 2484 MHz [14] (disabled)
	valid interface combinations:
		 * #{ managed } &amp;lt;= 2048, #{ AP, mesh point } &amp;lt;= 8, #{ P2P-client, P2P-GO } &amp;lt;= 1, #{ IBSS } &amp;lt;= 1,
		   total &amp;lt;= 2048, #channels &amp;lt;= 1, STA/AP BI must match, radar detect widths: { 20 MHz (no HT), 20 MHz, 40 MHz }
	HT Capability overrides:
		 * MCS: ff ff ff ff ff ff ff ff ff ff
		 * maximum A-MSDU length
		 * supported channel width
		 * short GI for 40 MHz
		 * max A-MPDU length exponent
		 * min MPDU start spacing
	Supported extended features:
		* [ RRM ]: RRM
		* [ CQM_RSSI_LIST ]: multiple CQM_RSSI_THOLD records
		* [ CONTROL_PORT_OVER_NL80211 ]: control port over nl80211
		* [ TXQS ]: FQ-CoDel-enabled intermediate TXQs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we are particularly interested in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;strong&gt;supported modes of operation&lt;/strong&gt;, and more specifically, that the device is indeed able to operate in &lt;strong&gt;mesh point&lt;/strong&gt; mode (it is), as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supported interface modes:&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;total number of bands&lt;/strong&gt; (only one band, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Band 1&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;then for each band
    &lt;ul&gt;
      &lt;li&gt;the possible &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width&quot;&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode 'HT20'&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmode 'HT40'&lt;/code&gt;), as shown in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt;, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Capabilities:&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;the &lt;strong&gt;acceptable channels&lt;/strong&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel '1'&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel '13'&lt;/code&gt;), as shown under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Frequencies:&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With such information, we can now configure our radio devices in &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/basic&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;&lt;/a&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/wireless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then edit each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-device&lt;/code&gt; accordingly.  In the 1043ND, there’s only one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-device&lt;/code&gt; and my config looks like the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-device 'radio0'
        option type 'mac80211'
        option channel 3
        option hwmode '11g'
        option path 'platform/ahb/180c0000.wmac'
        option htmode 'HT20'
        option country 'BR'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this radio device will be used for the mesh traffic, make sure all mesh nodes &lt;strong&gt;use the same channel&lt;/strong&gt;.  However, if the radio will be used as an access point for non-mesh clients, &lt;strong&gt;use a different channel than the mesh channel&lt;/strong&gt;.  In addition, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20/HT40&lt;/code&gt; devices, stick to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt; if you are deploying the mesh in a crowded area, such as an apartment building; otherwise, the interference might make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT40&lt;/code&gt; actually slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HT20&lt;/code&gt;.  Finally, remember to edit the &lt;strong&gt;country code&lt;/strong&gt; before enabling the radio.&lt;/p&gt;

&lt;p&gt;Comment out any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config wifi-iface&lt;/code&gt; automatically generated after a fresh install by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; at the beginning of each line, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config wifi-iface 'default_radio0'
#        option device 'radio0'
#        option network 'lan'
#        option mode 'ap'
#        option ssid 'OpenWrt'
#        option encryption 'none'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, at the end of the file, let’s add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wifi-iface&lt;/code&gt; for the wireless mesh, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config wifi-iface 'wmesh'
        option device 'radio0'	#must match the name of a wifi-device
        option ifname 'if-mesh'	#name for this iface
        option network 'mesh'	#mesh stanza in /etc/config/network
        option mode 'mesh'		#use 802.11s mode
        option mesh_id 'MeshCloud'	#like an ssid of the wireless mesh
        option encryption 'sae'	#https://openwrt.org/docs/guide-user/network/wifi/basic#wpa_modes
        option key 'MeshPassword123'	#mesh password if encryption is enabled
        option mesh_fwding 0	#let batman-adv handle routing
        option mesh_ttl 1		#time to live in the mesh
        option mcast_rate 24000	#routes with a lower throughput rate than the mcast_rate will not be visible to batman-adv
#       option disabled 1		#uncomment to disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;The comments are just for educational purpose. Feel free to remove them in your device’s config file.&lt;/p&gt;

&lt;p&gt;Because all mesh nodes must operate on the same channel, use the same authentication, etc., multiple config options are often dictated by the “lowest common denominator” across all mesh nodes–that is, the best possible config that will work with &lt;strong&gt;all nodes&lt;/strong&gt;, not just the ones with the best hardware and software available.  For example, not all devices will necessarily be able to use SAE because it’s very new and therefore, won’t be able to connect to mesh networks that use it. Instead, you might want to set encryption to something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psk2+aes&lt;/code&gt;, which should be good enough for most devices out there. So, keep that in mind when configuring your mesh nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now we need to configure &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/basic-networking&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;&lt;/a&gt; to allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To do so, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt; file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and let’s add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; at the bottom of the file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'bat0'
        option proto 'batadv'
        option routing_algo 'BATMAN_IV'
        option aggregated_ogms 1
        option ap_isolation 0
        option bonding 0
        option bridge_loop_avoidance 1
        option distributed_arp_table 1
        option fragmentation 1
        option gw_mode 'off'
        option hop_penalty 30
        option isolation_mark '0x00000000/0x00000000'
        option log_level 0
        option multicast_mode 1
        option multicast_fanout 16
        option network_coding 0
        option orig_interval 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which has options with (mostly) default values to facilitate fine-tuning later on.  (For more details, refer to the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki#Protocol-Documentation&quot;&gt;&lt;strong&gt;Protocol Documentation&lt;/strong&gt;&lt;/a&gt; and more specifically, the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;&lt;strong&gt;Tweaking&lt;/strong&gt;&lt;/a&gt; section.)  Then, at the bottom of the same file, let’s add an actual &lt;strong&gt;network&lt;/strong&gt; interface to transport &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; packets, which in our case will be the network used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wmesh&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'mesh'
        option proto 'batadv_hardif'
        option master 'bat0'
        option mtu 2304
        option throughput_override 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;Next, let’s &lt;strong&gt;reboot&lt;/strong&gt; the device (type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot&lt;/code&gt; in the terminal) and once it comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again because we want to check that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interfaces are up.  To do so, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip link | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and if the config is right, you should now see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt; in the output. Similarly, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; to show us all active interfaces, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl if
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all looks good, exit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; session, disconnect your laptop/PC from the wireless device (but keep it running nearby), and &lt;strong&gt;go ahead and configure at least one other node&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Because we’re starting SSH sessions with &lt;em&gt;different machines&lt;/em&gt; using the &lt;em&gt;same IP addr&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;), it’s quite possible that your SSH client will complaint about the authenticity of the host at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  To get rid of this message, simply remove the relevant entry in your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file or delete it altogether.  On Linux distros, such file can be found at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/known_hosts&lt;/code&gt;–that is, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; folder for your current user.&lt;/p&gt;

&lt;p&gt;Afterwards, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into one of the configured mesh nodes and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will show a table with the interfaces (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt;), MAC address of the neighboring mesh nodes, and when each of them was last seen.  Copy the MAC address (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f0:f0:00:00:00:01&lt;/code&gt;) from each neighboring mesh node and ping them through the mesh (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl p&lt;/code&gt;) to see if they are all replying, as follows (press Ctrl+C to stop)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p f0:f0:00:00:00:01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should output something like the following if everything is working fine&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PING f0:f0:00:00:00:01 (f0:f0:00:00:00:01) 20(48) bytes of data
20 bytes from f0:f0:00:00:00:01 icmp_seq=1 ttl=50 time=3.01 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=2 ttl=50 time=1.71 ms
20 bytes from f0:f0:00:00:00:01 icmp_seq=3 ttl=50 time=1.10 ms
--- f0:f0:00:00:00:01 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss
rtt min/avg/max/mdev = 1.103/1.942/3.008/0.794 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pat yourself on the back because you have successfully configured multiple mesh nodes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go ahead and configure all your mesh nodes the same way as before&lt;/strong&gt; and only then move on to bridges, gateways, and VLAN configs, as described next.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: This is a good time to &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Tweaking&quot;&gt;tweak the mesh configuration&lt;/a&gt; as well.)&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting-mesh-issues&quot;&gt;Troubleshooting mesh issues&lt;/h2&gt;
&lt;p&gt;These are a few tips in case you run into issues when configuring gateways and bridges.&lt;/p&gt;

&lt;p&gt;To test node to node connectivity, connect to a mesh node and use&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl p MAC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC&lt;/code&gt; is another node’s MAC address.  If the node does not reply, there’s an issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; or its configuration.  Try rebooting both nodes before doing anything else.&lt;/p&gt;

&lt;p&gt;A more powerful tool to see what is going on in the mesh network is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; utility for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt;.  To use it, connect to a mesh node and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;batctl td batX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batX&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; interface (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; but if you have more than one, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat1&lt;/code&gt;, etc.).  This is quite useful when configuring VLANs because it will show the VLAN ID of each client as well.  Depending on the scale of your mesh network, you might need to filter the output because things can get wild with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; really fast.&lt;/p&gt;

&lt;p&gt;For more details, see the &lt;a href=&quot;https://downloads.open-mesh.org/batman/manpages/batctl.8.html&quot;&gt;&lt;strong&gt;batctl man page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you’ve been following my suggestion to name and take note of each device’s MAC address, you can create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; that contains pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAC address&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f0:f0:00:00:00:00 node01
f0:f1:00:00:00:00 node02
f0:f2:00:00:00:00 node03
f0:f3:00:00:00:00 node04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which makes it much easier to identify the mesh nodes when issuing a command like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl n&lt;/code&gt; and other debug tables.  As far as I’m aware, however, you have to create and update such file in each node because such information will just be available to nodes that have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat-hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;configuring-common-mesh-networks&quot;&gt;Configuring common mesh networks&lt;/h2&gt;
&lt;p&gt;Here, we will see how to turn one or two of our configured mesh nodes into either a mesh &lt;strong&gt;bridge&lt;/strong&gt; or a mesh &lt;strong&gt;gateway&lt;/strong&gt;.  To avoid repetition, the configuration of bridges and gateways is described in more detail in the &lt;a href=&quot;#gateway-bridge&quot;&gt;first example&lt;/a&gt;, and only a few small differences and observations are highlighted afterwards.  In addition, only IPv4 addresses and configurations were used but nothing prohibits the use of IPv6 in a mesh network.&lt;/p&gt;

&lt;h3 id=&quot;gateway-bridge&quot;&gt;Gateway-Bridge&lt;/h3&gt;
&lt;p&gt;This first example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-bridge.jpg&quot; alt=&quot;Topology - Gateway-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More specifically, the mesh has access to the WAN (&lt;strong&gt;Network A&lt;/strong&gt;) via a &lt;em&gt;gateway device&lt;/em&gt; and has a single, private network defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, which is used by both the &lt;strong&gt;mesh network&lt;/strong&gt; devices and the &lt;strong&gt;Network B&lt;/strong&gt;, non-mesh devices. The latter is enabled by a &lt;em&gt;bridge device&lt;/em&gt; that works as an access point for non-mesh clients.&lt;/p&gt;

&lt;p&gt;First, let’s configure our &lt;strong&gt;mesh gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mesh-gateway-configuration&quot;&gt;Mesh gateway configuration&lt;/h4&gt;

&lt;p&gt;Get one of the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; that has at the very least two ethernet ports, a LAN port and a WAN port.  (This, of course, is not required for a gateway device because &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wan/internet.connection&quot;&gt;there are multiple ways to connect to WAN&lt;/a&gt; but having separate physical ports makes the explanation much simpler to follow.  If that is not your case, just adapt to whatever interfaces you have configured that play the role of default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;.)&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;If you’ve configured this node as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt; to temporarily give it access to the Internet while updating and installing packages, undo the configuration before proceeding because we will use both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; config files in the gateway configuration.&lt;/p&gt;

&lt;p&gt;Connect your laptop/PC to the mesh node via cable using the LAN port–this way, the mesh node’s IP address should still be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;.  Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the mesh node and let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the beginning of the file, there should a bunch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config interface&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loopback&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wan&lt;/code&gt;, for example, and at the end, there should be the mesh interfaces we previously created for the mesh node, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt;.  There are at least two options at this point:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an entirely new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;), at the expense of additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dhcp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; configuration;&lt;/li&gt;
  &lt;li&gt;Or use the existing, default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface by simply bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the latter option is much easier than the former, we will choose the first here (i.e., create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; from the ground up) because it makes this tutorial compatible with multiple devices (switched or switchless) and it allows us to keep the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;) as a management/debugging network.  (Later on, we will see how to bridge the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; VLAN, for example, so the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; becomes accessible to the mesh as well.  For now, keep it simple.)&lt;/p&gt;

&lt;p&gt;At the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; configuration&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0'
#        option type 'bridge'	#uncomment if bridging in ifname as well
        option ifname 'bat0'
        option proto 'static'
        option ipaddr '192.168.10.1'	#static addr for this gateway on the 192.168.10.0/24 net
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#uncomment to enable cloudflare dns server instead
        list dns '8.8.8.8'	#google dns server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Next, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/dhcp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt;&lt;/a&gt; config to run a DHCP server on the new interface, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end of the file, add the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0'
        option interface 'lan_bat0'
        option start 50		#start leasing at addr 192.168.10.50
        option limit 100		#max leases, so for 100, leased addr goes from .50 to .149
        option leasetime '3h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;a href=&quot;https://openwrt.org/docs/guide-user/firewall/firewall_configuration&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt;&lt;/a&gt; config.  Many things that can be done at the firewall level and for this reason, it’s often the most overwhelming part of the configuration.  Fortunately, in our case, all that we need to do here is simply &lt;strong&gt;copy&lt;/strong&gt; the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config for the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;.  That is, anything that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; we will&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy the related config;&lt;/li&gt;
  &lt;li&gt;paste it immediately below the equivalent default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config;&lt;/li&gt;
  &lt;li&gt;and then change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; in the new config.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then the first set of configs we will add (immediately below the equivalent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; config) is the &lt;strong&gt;zone&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0
        list network    'lan_bat0'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the second set of configs will be for the &lt;strong&gt;forwarding&lt;/strong&gt; settings, namely&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;strong&gt;that is it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: At the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt; config file, there’s a bunch of examples that you could use as template for more avdanced usage of this device’s firewall.  Feel free to play around with them &lt;strong&gt;once you get everything up and running&lt;/strong&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Optional&lt;/em&gt;: Because we’re not going to use IPv6, I suggest disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and you could also comment out any related config in the files we just edited.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device and connect the &lt;strong&gt;WAN&lt;/strong&gt; cable to the device’s &lt;strong&gt;WAN ethernet port&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the device comes back online, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it. Then, let’s check the new configuration.  First, type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a | grep bat0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and as before, there should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-mesh&lt;/code&gt; interfaces, but now, your gateway device should have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; in the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.  (Of note, if you enabled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option type 'bridge'&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; stanza, then there should be an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-lan_bat0&lt;/code&gt;interface now because OpenWrt adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-&lt;/code&gt; prefix to bridges, and your device’s static IP should be associated to it instead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface.)&lt;/p&gt;

&lt;p&gt;In addition, because we preserved the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; configuration, the device will continue to have the static IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; and should always be reachable there with an ethernet cable directly connected to one of its LAN ethernet ports.&lt;/p&gt;

&lt;p&gt;If you &lt;strong&gt;don’t see the static IP on the new network&lt;/strong&gt;, then review the files we have just configured because there’s likely a misconfiguration.  Don’t expect to get things working until you fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;mesh-bridge-configuration&quot;&gt;Mesh bridge configuration&lt;/h4&gt;
&lt;p&gt;The configuration of a mesh bridge is much simpler than of a mesh gateway because contrary to the gateway config, our mesh bridge doesn’t require the use of a DHCP server and firewall.  In fact, both services will be disabled in a mesh bridge and instead, the ony thing we will do is join interfaces to make them look like a single one to any connected device.&lt;/p&gt;

&lt;p&gt;As before, get one of the other &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;pre-configured mesh nodes&lt;/a&gt; and to start things off, we will configure it as a &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;dumb access point&lt;/a&gt;.  Follow the instructions in the OpenWrt documentation, except for the following when configuring the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; to the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifname&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;set a static IP for the device on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, pointing to our gateway at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;the configuration of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; should then look something like this
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface lan
      option type 'bridge'
      option ifname 'eth0.1 eth1 bat0'	#ethX might be different for your device
      option proto 'static'
      option ipaddr '192.168.10.10'
      option netmask '255.255.255.0'
      option gateway '192.168.10.1'
      option dns '192.168.10.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After applying this configuration, it will let any &lt;strong&gt;non-mesh client&lt;/strong&gt; to join the mesh &lt;strong&gt;via ethernet cable&lt;/strong&gt;–that is, by connecting a cable to one of the LAN/WAN ports of the mesh bridge device.  As long as the gateway is reachable, everything should work like a standard network, you could use the device’s own switch or connect the device to a switch and manage things there, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Similarly, you can create a &lt;strong&gt;wireless access point&lt;/strong&gt; (WAP) for non-mesh clients, and the instructions in the &lt;a href=&quot;https://openwrt.org/docs/guide-user/network/wifi/dumbap&quot;&gt;&lt;strong&gt;dumb access point&lt;/strong&gt; documentation&lt;/a&gt; will work just fine because it uses a network that is bridged with our mesh–namely, the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.  To avoid confusion, make sure to use &lt;strong&gt;a different SSID&lt;/strong&gt; for the WAP(s) than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh_id&lt;/code&gt; used for the mesh.  In addition, if at all possible, use &lt;strong&gt;a different radio or band&lt;/strong&gt; for the WAP(s) and set it to operate on &lt;strong&gt;a different channel&lt;/strong&gt; than the mesh channel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel 3&lt;/code&gt;, unless you changed yours).  If that is not possible, that is probably okay for most home users but keep in mind that node hoping will start affecting performance quite noticeably.&lt;/p&gt;

&lt;p&gt;Finally, in the terminal, make sure to disable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odhcpd&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/dnsmasq stop &amp;amp;&amp;amp; /etc/init.d/dnsmasq disable 
/etc/init.d/odhcpd stop &amp;amp;&amp;amp; /etc/init.d/odhcpd disable
/etc/init.d/firewall stop &amp;amp;&amp;amp; /etc/init.d/firewall disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device and on your laptop/PC, &lt;strong&gt;disable networking&lt;/strong&gt; altogether (this will force it to get a new IP from the bridge when it comes back)–alternatively, just disconnect the ethernet cable.&lt;/p&gt;

&lt;p&gt;Once the bridge is back online (wait at least a minute or two to give it enough time to connect to the mesh first), &lt;strong&gt;re-enable networking&lt;/strong&gt; on your laptop/PC (or reconnect the ethernet cable) and it should receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; network (on a Linux distro, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip addr&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;), the bridge node should now be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.10&lt;/code&gt;, and you should be able to access the Internet from your laptop/PC through the mesh (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).  If something doesn’t work, review the config files mentioned here and then go over the ones for the gateway, reboot all mesh nodes (gateway first, then nodes, then bridge) and test again.&lt;/p&gt;

&lt;h3 id=&quot;bridge-bridge&quot;&gt;Bridge-Bridge&lt;/h3&gt;
&lt;p&gt;This second example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-bridge-bridge.jpg&quot; alt=&quot;Topology - Bridge-Bridge&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contrary to the first example, there’s no mesh gateway device and as such, this topology could be used to extend an already existing private network (Networks A and B) over the wireless mesh (all defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range).  However, to make matters simple, we will assume that &lt;strong&gt;the existing network has a gateway/firewall&lt;/strong&gt; in either Network A or B that can be found at the IP addr &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;, and &lt;strong&gt;there’s a DHCP server being advertised on the network&lt;/strong&gt;.  (If your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, just edit your previous config files accordingly and the mesh network will follow your existing network instead.)&lt;/p&gt;

&lt;p&gt;Config-wise, the mesh bridges in this topology are configured exactly &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the first example&lt;/a&gt;, except for the following differences in the configuration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Each mesh bridge&lt;/strong&gt; should have a different static IP address in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface, as indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;.  For example, the first mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.10'&lt;/code&gt;, while the second mesh bridge will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.11'&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway '192.168.10.1'&lt;/code&gt; in the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; stanza must match an existing gateway on either Network A or B, and similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns '192.168.10.1'&lt;/code&gt; must point to a valid DNS resolver;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned before, if your existing Networks A and B are not defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range, then just edit the config file accordingly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gateway-gateway&quot;&gt;Gateway-Gateway&lt;/h3&gt;
&lt;p&gt;The third and final example applies to the following topology:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-gateway-gateway.jpg&quot; alt=&quot;Topology - Gateway-Gateway&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specifically, there’s only one private network (mesh, defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt; IP range) and notably, &lt;strong&gt;two&lt;/strong&gt; mesh gateways.  This provides “high availability” of the Internet connection to mesh nodes and surprisingly enough, the configuration of each mesh gateway is &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;just like in the first example&lt;/a&gt;, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Like in the &lt;a href=&quot;#bridge-bridge&quot;&gt;bridge-bridge example&lt;/a&gt;, we must assign different static IP addresses to &lt;strong&gt;each&lt;/strong&gt; mesh gateway.  This is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface configuration, add a different IP addr next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt; option.  For example, the first mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.1'&lt;/code&gt;, while the second mesh gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr '192.168.10.2'&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because we will now run &lt;strong&gt;two&lt;/strong&gt; DHCP servers on &lt;strong&gt;the same network&lt;/strong&gt;, we need to find a way of avoiding conflicts when assigning an IP address to new clients.  The easiest way of doing that is by assigning &lt;strong&gt;different intervals&lt;/strong&gt; to each DHCP server running on the same network.  In OpenWrt, this is done by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; DHCP configuration, we add a different starting point next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start&lt;/code&gt; option.  For example, while the DHCP server running on the first gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '50'&lt;/code&gt;, the DHCP server running on the second gateway will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option start '150'&lt;/code&gt; instead.  This way, the first DHCP server leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.50&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.149&lt;/code&gt;, whereas the second leases addresses from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.150&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.249&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; interface config of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, we can now enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode 'server'&lt;/code&gt; and specify the WAN connection speed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_bandwidth '10000/2000'&lt;/code&gt; (i.e., 10000kbps download and 2000kbps upload).  Then, in each other &lt;strong&gt;mesh node&lt;/strong&gt;, we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gw_mode&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'client'&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'off'&lt;/code&gt;.  This way, we can make each mesh node aware of the two gateways on the network (and their speeds) to better route mesh traffic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mesh-vlans&quot;&gt;Mesh VLANs&lt;/h2&gt;
&lt;p&gt;You don’t need to configure VLANs in order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; but it is one of its best features.  In brief, this is a way of using &lt;strong&gt;our already configured&lt;/strong&gt; wireless mesh network to route traffic &lt;strong&gt;to/from multiple and all networks&lt;/strong&gt; in a secure, isolated way (as far as VLANs go).  No need for additional hardware–the combination of OpenWrt and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; turns even cheap wireless hardware into powerful virtual switches.  It’s just a matter of tagging the additional (and virtual) networks instead of using the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; (or similarly, in a port-based analogy, “plugging” standard interfaces into different ports of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; switch).  This is a fairly advanced topic but surprisingly easy to incorporate to our existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Consider, for example, the following network&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/topo-mesh-vlans.jpg&quot; alt=&quot;Topology - Mesh VLANs&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a single gateway device that provides WAN access to the mesh and Networks B, C, and D, which are all private networks defined in different IP ranges. In addition, all the Networks B, C, and D traffic should go via &lt;strong&gt;any&lt;/strong&gt; mesh node in the mesh network while keeping them &lt;strong&gt;isolated from each other&lt;/strong&gt;.  To make it easier to remember and distinguish each private network, let’s call&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Network &lt;strong&gt;B&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;Network &lt;strong&gt;C&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.0/24&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;and Network &lt;strong&gt;D&lt;/strong&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; network (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.0/24&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement such a mesh network with VLANs, we’re going to follow very similar steps to &lt;a href=&quot;#gateway-bridge&quot;&gt;the first example of a gateway-bridge mesh network&lt;/a&gt;, except for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will have two additional bridges in the network–that is, one for each mesh VLAN, for a total of three bridges. This is not a necessity but a matter of convenience to keep the example simple. The same bridge device can definitely bridge more than one mesh VLAN;&lt;/li&gt;
  &lt;li&gt;In the gateway device, we will create VLAN IDs for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; (&lt;strong&gt;2&lt;/strong&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; (&lt;strong&gt;5&lt;/strong&gt;), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; (&lt;strong&gt;1&lt;/strong&gt;) networks, each with a separate set of DHCP server and firewall rules;&lt;/li&gt;
  &lt;li&gt;In each bridge device, we will join the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; with the &lt;strong&gt;VLAN ID&lt;/strong&gt; of the mesh VLAN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Surprisingly enough, we don’t need to do a thing about the &lt;strong&gt;mesh nodes&lt;/strong&gt; that are not &lt;strong&gt;gateways&lt;/strong&gt; or &lt;strong&gt;bridges&lt;/strong&gt;–that is, the &lt;a href=&quot;#mesh-node-basic-config&quot;&gt;mesh node basic config&lt;/a&gt; is both necessary and sufficient for simple mesh nodes, even when using VLANs.  The only exception is if one of your mesh nodes is, for example, a laptop and you want it to use a particular mesh VLAN instead of the untagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.  In our case, however, the pre-configured mesh nodes are ready to route traffic of any VLAN that belongs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, let’s start with the &lt;strong&gt;gateway&lt;/strong&gt; configuration.&lt;/p&gt;

&lt;h3 id=&quot;mesh-gateway-with-vlan-configuration&quot;&gt;Mesh gateway with VLAN configuration&lt;/h3&gt;
&lt;p&gt;First, configure the gateway &lt;strong&gt;the same way&lt;/strong&gt; &lt;a href=&quot;#mesh-gateway-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt;, we’re going to change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; in the config files, then do the same for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;.  So, if you’re ready, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; back into it and let’s start by editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end, comment out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; config, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config interface 'lan_bat0'
#        option type 'bridge'		#uncomment if adding other interfaces to ifname
#        option ifname 'bat0'
#        option proto 'static'
#        option ipaddr '192.168.10.1'	#static addr for this gateway on the 192.168.10.0/24 net
#        option netmask '255.255.255.0'
#        list dns '1.1.1.1'			#cloudflare dns server
#        list dns '8.8.8.8'			#google dns server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then below it, let’s add a new interface for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_1'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.1'
        option proto 'static'
        option ipaddr '192.168.10.1'
        option netmask '255.255.255.0'
        list dns '1.1.1.1'
#        list dns '8.8.8.8'	#make it use cloudflare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_2'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.2'
        option proto 'static'
        option ipaddr '192.168.20.1'
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#make it use google
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface 'lan_bat0_5'
#        option type 'bridge'	#uncomment if adding other interfaces to ifname
        option ifname 'bat0.5'
        option proto 'static'
        option ipaddr '192.168.50.1'
        option netmask '255.255.255.0'
#        list dns '1.1.1.1'	#make it use google
        list dns '8.8.8.8'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Now, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/dhcp&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, comment out all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; config, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config dhcp 'lan_bat0'
#        option interface 'lan_bat0'
#        option start 50		#start leasing at addr 192.168.10.50
#        option limit 100		#max leases, so for 100, leased addr goes from .50 to .149
#        option leasetime '3h'
#        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then add a DHCP server config for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface below it&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_1'
        option interface 'lan_bat0_1'
        option start 50
        option limit 100
        option leasetime '12h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and like before, we will add another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_2'
        option interface 'lan_bat0_2'
        option start 50
        option limit 100
        option leasetime '6h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config dhcp 'lan_bat0_5'
        option interface 'lan_bat0_5'
        option start 50
        option limit 100
        option leasetime '1h'
        option ra 'server'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;Finally, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; config file, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/config/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and once again, comment out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0&lt;/code&gt; configs, as follows&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config zone
#        option name     lan_bat0
#        list network    'lan_bat0'
#        option input    ACCEPT
#        option output   ACCEPT
#        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#config forwarding
#        option src   lan_bat0
#        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and below each one of them, add one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_1
        list network    'lan_bat0_1'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_1
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_2
        list network    'lan_bat0_2'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_2
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and another one for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; interface&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config zone
        option name     lan_bat0_5
        list network    'lan_bat0_5'
        option input    ACCEPT
        option output   ACCEPT
        option forward  ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config forwarding
        option src   lan_bat0_5
        option dest  wan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the device.&lt;/p&gt;

&lt;p&gt;Once the gateway device is back online–by the way, it should still be at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; because the gateway’s default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; is intact, so even if we fuck something up, we should be able to find the gateway via a direct cable connection–&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it once again and type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which now should show the new interfaces we created (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1@bat0&lt;/code&gt;) and the static IP addr of your device in each one of them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt;).  (As mentioned before, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option type 'bridge'&lt;/code&gt; was enabled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; config stanza, then there will be an additional interface with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br-&lt;/code&gt; prefix attached to it and the static IP addr of your device will be associated with it.)&lt;/p&gt;

&lt;p&gt;If everything looks good, we’re done with the gateway configuration!  We’re now ready to tell our bridges which VLAN ID to join with their standard interfaces.&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;You don’t need to use &lt;strong&gt;interface names&lt;/strong&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan_bat0_1&lt;/code&gt;; they can be whatever you find intuitive.  However, whatever you choose, &lt;strong&gt;keep them short&lt;/strong&gt;–that is, less than 14 characters long–or you’ll start experiencing config issues.&lt;/p&gt;

&lt;h3 id=&quot;mesh-bridge-with-vlan-configuration&quot;&gt;Mesh bridge with VLAN configuration&lt;/h3&gt;
&lt;p&gt;Here, we’ll also configure the bridges &lt;strong&gt;the same way&lt;/strong&gt; as in the gateway-bridge example. However, each bridge device will bridge &lt;strong&gt;a different VLAN ID&lt;/strong&gt;–namely, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt;–with its default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;, instead of bridging &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; with its default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with the Network B (&lt;strong&gt;IoT&lt;/strong&gt;) bridge.&lt;/p&gt;

&lt;p&gt;Configure one of the mesh nodes &lt;a href=&quot;#mesh-bridge-configuration&quot;&gt;as in the gateway-bridge example&lt;/a&gt;, except that in the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; interface stanza of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt; file, let’s do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ifname&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option ipaddr&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option gateway&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option dns&lt;/code&gt;, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.1&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Then, the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lan&lt;/code&gt; stanza should look something like this
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface lan
      option type 'bridge'
      option ifname 'eth0.1 eth1 bat0.2'	#ethX might be different for your device
      option proto 'static'
      option ipaddr '192.168.20.10'
      option netmask '255.255.255.0'
      option gateway '192.168.20.1'
      option dns '192.168.20.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Save the file&lt;/strong&gt; and exit it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reboot&lt;/strong&gt; your device.&lt;/p&gt;

&lt;p&gt;Once it comes back on, your laptop/PC will receive an IP addr from our mesh gateway in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.0/24&lt;/code&gt; network, the bridge node should be reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.10&lt;/code&gt;, and you should be able to access the Internet via the &lt;strong&gt;IoT&lt;/strong&gt; network (try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping google.com&lt;/code&gt;, for example).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If something doesn’t work&lt;/strong&gt;, review the config files from your gateway and then from the bridge, then reboot the gateway and the bridge, and test again.&lt;/p&gt;

&lt;p&gt;If this config is working, &lt;strong&gt;repeat the same steps&lt;/strong&gt; in the config of the other two bridges, with the following exceptions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the Network C bridge (&lt;strong&gt;Guest&lt;/strong&gt;), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.5&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, and similarly, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.50.&lt;/code&gt; IP addr instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Network D bridge (&lt;strong&gt;Default&lt;/strong&gt;), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.1&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0.2&lt;/code&gt;, and similarly, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.10.&lt;/code&gt; IP addr instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.20.&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: When configuring a &lt;strong&gt;Guest&lt;/strong&gt; WAP, for example, you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option isolate 1&lt;/code&gt; to the relevant stanza in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt; config file to deny client-to-client connectivity without the need of re-enabling the firewall in the bridge device.  If that’s not enough, re-enable the firewall and configure it according to your needs–at the bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/config/firewall&lt;/code&gt; file, there are examples you can use as template.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-batman-adv-on-any-linux-device&quot;&gt;Getting started with batman-adv on any Linux device&lt;/h2&gt;
&lt;p&gt;OpenWrt makes using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; a nearly trivial thing but you certainly don’t need OpenWrt to implement a mesh network or even to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; in your mesh.  As mentioned before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; has long been added to the Linux Kernel and therefore, you should be able to configure it on pretty much &lt;em&gt;any&lt;/em&gt; device running Linux.&lt;/p&gt;

&lt;p&gt;Even though the specifics of configuring network interfaces and managing connections might be different across Linux distributions, the initial steps always consist of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Installing (in popular distros, this is &lt;em&gt;not needed&lt;/em&gt;) and loading (&lt;em&gt;always&lt;/em&gt; needed) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; Kernel module.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsmod&lt;/code&gt; will show a list of active modules, so we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; it to check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module has already been loaded, as follows
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;then if it isn’t loaded, we add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; kmod to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modules&lt;/code&gt; and load it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modprobe&lt;/code&gt;, as follows&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# append batman-adv to /etc/modules
echo 'batman-adv' | sudo tee -a /etc/modules &amp;gt; /dev/null
# load the batman-adv module
sudo modprobe batman-adv
# check that the batman-adv module is now loaded
lsmod | grep batman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Afterwards, you can check the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sysfs&quot;&gt;&lt;strong&gt;sysfs&lt;/strong&gt;&lt;/a&gt; of each network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and there should be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv&lt;/code&gt; folder.  When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman-adv&lt;/code&gt; module gets configured to use a particular network device, the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/iface_status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman_adv/mesh_iface&lt;/code&gt; will change their contents to reflect that. In addition, once enabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bat0&lt;/code&gt; will show up as a new network device in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/&lt;/code&gt; and its options (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gw_mode&lt;/code&gt;) can be modified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;ing new values to their corresponding file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/class/net/bat0/mesh/&lt;/code&gt;  (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 'client' &amp;gt; /sys/class/net/bat0/mesh/gw_mode&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batctl&lt;/code&gt; package. On apt-based distros like Debian, you should be able to install it with the following
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install batctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Using a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt; to configure the network interfaces, as illustrated in the &lt;a href=&quot;https://www.open-mesh.org/projects/batman-adv/wiki/Quick-start-guide&quot;&gt;B.A.T.M.A.N. quick start guide&lt;/a&gt;.  In our case, however, the wireless mode of operation (as in the specification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iw&lt;/code&gt; interface creation command) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mesh&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mp&lt;/code&gt;), instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adhoc&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibss&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Using something like &lt;a href=&quot;https://en.wikipedia.org/wiki/Wpa_supplicant&quot;&gt;wpa_supplicant&lt;/a&gt; to manage connections.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you know of a program that has a GUI and is able to handle such configurations on popular Linux distros, let me know about it. As far as I know, there’s currently nothing like that and it would be so very useful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content-physical-computing&quot;&gt;Bonus content: Physical computing&lt;/h1&gt;
&lt;p&gt;If your device has unused &lt;strong&gt;general purpose I/O&lt;/strong&gt; pins, it’s possible to do all sorts of things with them.  Check the &lt;a href=&quot;https://openwrt.org/docs/techref/hardware/port.gpio&quot;&gt;GPIO documentation&lt;/a&gt; for examples of how to install new LEDs and buttons, for instance.  (&lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#gpios&quot;&gt;Your device’s OpenWrt page can be very useful as well&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Also, if you want to change the functionality of a few of the existing LEDs on your wireless device, check the &lt;a href=&quot;https://openwrt.org/docs/guide-user/base-system/led_configuration&quot;&gt;LED configuration documentation&lt;/a&gt;.  Now that you have new mesh interfaces, you can use the LEDs to blink depending on the status of neighboring nodes, mesh gateways, or WAN connectivity through the mesh, to mention a few examples. (As mentioned before, &lt;a href=&quot;https://openwrt.org/toh/tp-link/tl-wr1043nd#leds&quot;&gt;your device’s OpenWrt page can be very useful here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final remarks&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-11-24-mesh-networking-openwrt-batman/futurama.jpg&quot; alt=&quot;Futurama Hubert Farnsworth&quot; class=&quot;PostImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good news, everyone! You’ve reached the end of this tutorial, which means it’s time to start planning your own mesh networking project.  I love to hear about different takes on the projects I post on my blog, so don’t hesitate to &lt;a href=&quot;/contact/&quot;&gt;contact me&lt;/a&gt; if you just want to share or bounce a few ideas.  Different perspectives give an opportunity to learn, grow, and innovate.&lt;/p&gt;

&lt;h2 id=&quot;other-similar-mesh-solutions&quot;&gt;Other similar mesh solutions&lt;/h2&gt;
&lt;p&gt;If you find this guide overwhelming but you’re still curious about mesh networking, take a look at the following alternatives (in alphabetical order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.commotionwireless.net&quot;&gt;Commotion Wireless&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://libremesh.org&quot;&gt;LibreMesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They have pre-configured images that will work “out of the box” with compatible devices.  You might find instructive to start playing around with their software first and once comfortable, build your own configuration from a default (or customized from the source) OpenWrt image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mesh" /><category term="adhoc" /><category term="ieee" /><category term="wifi" /><category term="wireless" /><category term="radio" /><category term="network" /><category term="router" /><category term="openwrt" /><category term="batman" /></entry><entry><title type="html">NanoPi M4 mini-NAS</title><link href="http://localhost:4000/blog/Nanopi-m4-mini-nas/" rel="alternate" type="text/html" title="NanoPi M4 mini-NAS" /><published>2020-07-06T13:42:00-03:00</published><updated>2020-07-06T13:42:00-03:00</updated><id>http://localhost:4000/blog/Nanopi-m4-mini-nas</id><content type="html" xml:base="http://localhost:4000/blog/Nanopi-m4-mini-nas/">&lt;p&gt;This article is about my mini network-attached storage (NAS) project based on FriendlyARM’s &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4&quot;&gt;NanoPi M4&lt;/a&gt; and its &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4_SATA_HAT&quot;&gt;SATA hat&lt;/a&gt;.  If you’re looking for a cheap, low-profile, low-power NAS solution for your home–or if you just like single-board computers (SBC)–then this article is for you.&lt;/p&gt;

&lt;p&gt;Here’s a preview of how my NanoPi M4 mini-NAS looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-01.jpg&quot; alt=&quot;Final NAS 02&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-02.jpg&quot; alt=&quot;Final NAS 01&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for comparison, here’s the unit next to a Raspberry Pi 3B:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-final-and-rpi.jpg&quot; alt=&quot;Final NAS next to RPi&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article should give you a fairly good idea about the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What to buy;&lt;/li&gt;
  &lt;li&gt;What to install at the operating system (OS) and NAS management level;&lt;/li&gt;
  &lt;li&gt;How to put everything together and get it up and running.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, you’re free to do whatever you want for your own use-case (disk partitions, storage systems, file sharing method, applications, etc.).&lt;/p&gt;

&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;October 16th, 2020&lt;/strong&gt;, (#1 of 2): I’ve re-written the &lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan&quot;&gt;pwm-fan script for the NanoPi-M4&lt;/a&gt; and updated &lt;a href=&quot;#pwm-fan-controller&quot;&gt;the section about it&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;&lt;strong&gt;October 16th, 2020&lt;/strong&gt;, (#2 of 2): Despite the CPU tuning improvements I mentioned in my previous update, I’ve continued to have a few stability issues with Kernel 5.x.  After a while, I’ve decided to reinstall &lt;strong&gt;Armbian Buster&lt;/strong&gt; with &lt;strong&gt;Kernel 4.4.213-rk3399 (legacy)&lt;/strong&gt; and it has been smooth sailing ever since.  I updated the &lt;a href=&quot;#software&quot;&gt;section about OS installation&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 14th, 2020&lt;/strong&gt;: Added &lt;a href=&quot;#cpu-tuning&quot;&gt;information about CPU tuning to improve system stability&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;July 8th, 2020&lt;/strong&gt;: Added a &lt;a href=&quot;#nanopi-m4-sata-hat--passive-cooler--cables&quot;&gt;cautionary note about SATA power cables&lt;/a&gt;; Added a &lt;a href=&quot;#cost-estimate&quot;&gt;table with the cost of all hardware components of this build&lt;/a&gt;; I also got a hold of a DC jack adapter that will let me measure the actual current draw from my final mini-NAS and will make it available here as soon as I’m done testing it.  If you’ve additional suggestions, please &lt;a href=&quot;/contact&quot;&gt;reach out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The NanoPi M4 is a SBC made by FriendlyARM (a.k.a. FriendlyElec), a Chinese company based in Guandong.  They have their own &lt;a href=&quot;https://www.friendlyarm.com/&quot;&gt;online store&lt;/a&gt; that you can use to buy a few of the boards and components they develop but chances are you can also buy from pretty much any of the large retail stores out there (e.g., AliExpress, Amazon, Newegg).  [I bought all components from AliExpress, for example, from the folks at &lt;a href=&quot;https://embedunion.aliexpress.com/store/113595&quot;&gt;RealQvol&lt;/a&gt;.]  FriendlyARM also has a fairly good &lt;a href=&quot;http://wiki.friendlyarm.com/wiki/index.php/Main_Page&quot;&gt;wiki&lt;/a&gt; that documents the main aspects of their boards.&lt;/p&gt;

&lt;p&gt;For a general review of the board, check these two videos:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/knS854Taz-E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/sxND3lLSwB4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;You can also find a CPU performance comparison between the NanoPi M4 v2 and the Raspberry Pi 4 at &lt;a href=&quot;https://www.androidpimp.com/embedded-single-board-computers/raspberry-pi-4-vs-nanopi-m4v2/&quot;&gt;this blog post&lt;/a&gt;, which suggests that the NanoPi M4 is superior and will be able to run tasks more efficiently than the RPi 4.&lt;/p&gt;

&lt;p&gt;In the following sections, I talked about the hardware (board, hat, case, drive choices and power supply), then the software (OS + NAS management interface) and finally, assembly and board/hat testing.  The article ends with a very brief presentation of my current configuration for the mini-NAS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;For this project, I’m using the following hardware:&lt;/p&gt;
&lt;h2 id=&quot;nanopi-m4-v2&quot;&gt;NanoPi M4 v2&lt;/h2&gt;
&lt;p&gt;I’m using the &lt;strong&gt;2nd version&lt;/strong&gt; (v2) of this board but everything should apply to v1.  I think the major differences between the two is that the &lt;strong&gt;v2 has LPDDR4 RAM&lt;/strong&gt;, instead of LPDDR3, a power button, the eMMC is connected the opposite way and screwed to the board, and the v2 looks slightly cleaner than the v1.  Other than that, when buying one, you’ll have the option to buy with 2GB or 4GB of RAM.  I’m using the one with &lt;strong&gt;4GB of RAM&lt;/strong&gt; and I recommend it if you’re going to use it as a NAS, even if you’re not going to use a RAM intensive filesystem like ZFS.  (For reference, ext4 uses very little RAM and a 2GB version won’t have any issues sharing files at all.  The problem in those cases is when you start adding applications to your NAS.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4v2-board.jpg&quot; alt=&quot;Nanopi M4 v2 board&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-heatsink&quot;&gt;NanoPi M4 heatsink&lt;/h2&gt;
&lt;p&gt;This little fella gets pretty hot but fortunately, this massive heatsink does a decent job at keeping it cool.  For even better performance, try adding a fan, use thermal paste instead of a pad, or use a copper heatsink with a large surface area.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-heatsink.jpg&quot; alt=&quot;Nanopi M4 heatsink&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-16-32gb-emmc--micro-sd-adapter&quot;&gt;NanoPi M4 16-32gb eMMC (+ micro-SD adapter)&lt;/h2&gt;
&lt;p&gt;The adapter makes it easy to flash an OS image directly onto the eMMC, so make sure to buy one.  As far as I know, you don’t need to use an eMMC with the NanoPi M4.  A micro-SD will do the trick but of course, it’s slower than an eMMC.  However, an eMMC is slower than a solid state drive (SSD), so if you know how to run the OS from a SSD, let me know.  Either way, the OS and NAS program we’re going to use is already configured to reduce the amount of writes to the eMMC/micro-SD/SSD (it comes configured to not use a swap partition, for example), which is good news if you’re worried about wearing it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-emmc.jpg&quot; alt=&quot;Nanopi M4 eMMC&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nanopi-m4-sata-hat--passive-cooler--cables&quot;&gt;NanoPi M4 SATA hat (+ passive cooler + cables)&lt;/h2&gt;
&lt;p&gt;This little hat has a &lt;a href=&quot;https://www.marvell.com/content/dam/marvell/en/public-collateral/storage/marvell-storage-88se92xx-product-brief-2012-04.pdf&quot;&gt;Marvell 88SE9215&lt;/a&gt; Four-Port 6 Gbps SATA I/O Controller.  It usually comes with two SATA interface cables and one SATA power cable able to power two drives.  If you’re going to use more than two drives, like me, make sure to buy additional SATA interface cables and an extension/splitter for the SATA power cable (e.g., &lt;a href=&quot;https://www.amazon.com/StarTech-com-Power-Splitter-Adapter-PYO4SATA/dp/B0086OGN9E/ref=sr_1_7?dchild=1&amp;amp;keywords=sata+power+extension+cable&amp;amp;qid=1591723716&amp;amp;sr=8-7&quot;&gt;StarTech splitter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sata-hat.jpg&quot; alt=&quot;Nanopi M4 SATA hat&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice notice--danger&quot;&gt;When buying your SATA power cables, make sure the terminals are &lt;strong&gt;crimped&lt;/strong&gt; (use blade connectors) instead of &lt;strong&gt;molded&lt;/strong&gt;. In brief, molded terminals are not faulty by design but they are error prone, owning to the method that the cables are terminated (molding plastic), and such errors might lead to &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=sata+power+fire&amp;amp;ia=web&quot;&gt;catastrophic events&lt;/a&gt;. The ones in my original pictures were all molded and &lt;strong&gt;you should not use them&lt;/strong&gt;.  Thanks to &lt;strong&gt;/u/Fuck_Birches&lt;/strong&gt; and &lt;strong&gt;/u/WordBoxLLC&lt;/strong&gt; for pointing that out.  I have changed them for crimped ones now.  Here’s an instructive video about the issue:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/TataDaUNEFc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;If you plan on using the same 3d printed case I’m using (see &lt;a href=&quot;#kirkdis-3d-printed-case&quot;&gt;kirkdis’ 3D printed case&lt;/a&gt;), make sure to buy SATA cables with &lt;strong&gt;a straight/horizontal connector on both ends of the cable&lt;/strong&gt;.  That case is &lt;em&gt;very&lt;/em&gt; tight, so you might want to consider buying at least two shorter than usual SATA cables for the HDDs closer to the base.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-cables.jpg&quot; alt=&quot;Nanopi M4 SATA hat&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;12v-8a-power-supply-unit-psu&quot;&gt;12v (8A) power supply unit (PSU)&lt;/h2&gt;
&lt;p&gt;If you’re using the SATA hat, you only need a single PSU to provide power to everything, and there are even two different options to do that: (a) via the DC 5.5x2.1mm jack on the SATA hat, using an external PSU (e.g., &lt;a href=&quot;https://www.amazon.com/ALITOVE-100-240V-Converter-Transformer-5-5x2-1mm/dp/B07MXXXBV8/ref=sr_1_3?dchild=1&amp;amp;keywords=psu+12v+10a+5.5x2.1mm&amp;amp;qid=1591721696&amp;amp;s=electronics&amp;amp;sr=1-3&quot;&gt;Alitove&lt;/a&gt;); or (b) via the 4-pin 12v connector, also on the SATA hat, using a low power (&amp;lt; 200W) PC PSU.  If you’re going to use four low revolutions per minute (RPM) 2.5” HDDs (e.g., 5400 RPM), or four SSDs, a 12v PSU that is able to deliver up to 3A should be enough.  However, if you’re driving high-RPM 2.5” HDDs (e.g., 7200RPM) or 3.5” HDDs, then do the math before powering the components.  If you want to be safe, just get a 12v PSU that is able to deliver up to 8A.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-psu-connections.jpg&quot; alt=&quot;NanoPi M4 PSU connections&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that if you’re planning on using a PC PSU, you’ll need to “hack it” in order to use the PSU without plugging it into a mobo.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;If you’re not 100% sure about tinkering with anything related to electricity, do not attempt to modify any PSU you might have lying around and just buy a 12v (8A) external PSU.  You can die even if the PSU is not connected to an outlet, owing to the presence of massive capacitors inside the PSU.  I cannot emphasize this enough.  Also, don’t go around cutting its cables to just make it look cute.  You might need them later.&lt;/p&gt;

&lt;p&gt;Alright, if you really want to use a PC PSU, follow the instructions in this video (but use a proper cable to connect the pins and make sure it’s well secured):&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/j4erf6SuqdI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;25-hard-disk-drive-hdd&quot;&gt;2.5” hard disk drive (HDD)&lt;/h2&gt;
&lt;p&gt;You can run 3.5” drives as well but if you plan to keep power consumption at a minimum, I suggest running 2.5” drives instead or better yet, SSDs.  Here, I’m going to use &lt;strong&gt;four 2.5” WD Black HDD&lt;/strong&gt; because they are fast (7200rpm as opposed to the traditional 5400rpm for 2.5” drives) and I don’t have a need for a large local storage space.  (Just be careful that the 1TB 2.5” WD Black &lt;a href=&quot;https://www.westerndigital.com/products/internal-drives/wd-black-hdd&quot;&gt;model WD10SPSX is actually SMR&lt;/a&gt;.)  In general, my preference order is the following: SSD &amp;gt; 2.5” CMR HDD &amp;gt; 3.5” NAS HDD &amp;gt; 3.5” other CMR HDD &amp;gt; 2.5” whatever HDD &amp;gt; 3.5” whatever HDD.  Of course, you don’t need to use all four SATA ports if there’s no demand for it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-500gb.jpg&quot; alt=&quot;2.5&amp;quot; WD Black HDD 500GB&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/hdd-wb-black-25-750gb.jpg&quot; alt=&quot;2.5&amp;quot; WD Black HDD 750GB&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kirkdis-3d-printed-case&quot;&gt;&lt;a href=&quot;https://www.thingiverse.com/thing:3736661&quot;&gt;kirkdis’ 3D printed case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are other 3D printed cases out there but I like kirkdis’ take on a minimal case for the NanoPi M4 and 2.5” drives.  Notice that there are 3- and 4-bay versions of the HDD case and mounts.  More specifically, for this project, I printed the following pieces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topcase_all_versions.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fanmount_all_versions.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;04 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4bay_discmount.stl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;01 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4bay_hddbase.stl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t have a 3D printer, don’t worry about it!  Just Google &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3d printing service&lt;/code&gt; and you’ll find plenty of options to choose from.  You shouldn’t have to pay more than $100 for this case, for reference.  Also, remember to &lt;a href=&quot;https://www.amazon.com/hard-drive-screws/s?k=hard+drive+screws&quot;&gt;&lt;strong&gt;buy screws&lt;/strong&gt;&lt;/a&gt; for your HDDs, if you don’t have a bunch a lying around. You’ll need 08 for the bottom and top HDDs (16) + 04 for each in between (08), for a total of &lt;strong&gt;24 screws&lt;/strong&gt; for four drives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-kirkdis-case.png&quot; alt=&quot;3D case stl&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to buy a &lt;a href=&quot;https://www.amazon.co.uk/OImaster-Backplane-Function-Hot-swap-Transmission/dp/B074V52L9D&quot;&gt;4-bay enclosure for your drives&lt;/a&gt; and use some sort of &lt;a href=&quot;https://www.amazon.com/GeeekPi-Raspberry-Cluster-Cooling-Heatsink/dp/B07MW3GM1T/ref=sr_1_1?dchild=1&amp;amp;keywords=stackable+case+rpi&amp;amp;qid=1591726436&amp;amp;sr=8-1&quot;&gt;stackable case&lt;/a&gt; for your NanoPi M4.  If you go with this solution, remember to buy extra spacers to make room for the SATA hat and cables (and you might need longer cables).  Alternatively, you can always use a standard computer case (or rack mounted) that has support for 4 drives.  Get rid of the mobo and you’re probably all set (see my note on modifying a PC PSU).&lt;/p&gt;

&lt;h2 id=&quot;fan-50x50x15mm-12v-08a&quot;&gt;Fan 50x50x15mm 12v (.08A)&lt;/h2&gt;
&lt;p&gt;(This fan size is for kirkdis’ 3D printed case. You’d want something different if you’re using another case.) You can probably find a .2A fan with the same dimensions, which will move more air but will be louder.  (If you’re going to use the PWM connector, take a look at &lt;a href=&quot;#pwm-fan-controller&quot;&gt;PWM Fan controller&lt;/a&gt; to learn how to use it.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan.png&quot; alt=&quot;50x50x15mm Fan&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you might want to buy a filter for the fan. However, notice that &lt;em&gt;there’s no space for the filter inside the 3d printed case&lt;/em&gt; but you can glue/attach it to the outside (that’s what I’ve done with the one I bought).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/fan-filter.png&quot; alt=&quot;50x50x15mm Fan-filter&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cost-estimate&quot;&gt;Cost estimate&lt;/h2&gt;
&lt;p&gt;For reference, here’s how much each hardware component cost me in Brazilian Real (BRL$) and US Dollar (USD$), except for the HDDs.  Values were the total for all units, instead of per unit.  When appropriate, values were converted using the exchange rate from &lt;strong&gt;July 8th, 2020&lt;/strong&gt;. Shipping costs were not included.  Notice that all values are likely &lt;strong&gt;overestimating the actual cost&lt;/strong&gt; because many products include Brazilian taxes and were bought multiple months ago.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;quantity&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;BRL$&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USD$&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NanoPi M4 v2 4GB RAM&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;477.25&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;89.04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heatsink&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37.41&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32gb eMMC + mSD adapter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;144.61&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;26.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA hat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;149.97&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;27.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA III cable&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;35.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RTC battery&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23.52&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SATA power Y splitter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;02&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.96&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3d printed case&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;155&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28.92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PSU 12v 10A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;53.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50mm Fan 12v .08A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50mm Fan filter&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;19.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TOTAL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1153.16&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;214.16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;For the OS, I’m using the &lt;strong&gt;server edition&lt;/strong&gt; of the &lt;strong&gt;Armbian Buster&lt;/strong&gt; with &lt;strong&gt;Kernell 4.4 (legacy)&lt;/strong&gt;. &lt;em&gt;(Of note, this section has been updated since the original article. In the previous version of the article, I suggested installing the latest Kernel 5.x instead of the legacy 4.4.x. The reason is that I’ve had multiple stability issues with Kernel 5.x and after switching to legacy, it’s been solid as a rock.  That said, I’ve also read that many users have been running the latest Kernel without any issues, which makes me suspicious that there was somthing corrupted with my previous installation. So, my suggestion is the following: if you can afford testing for a few days, do try the latest Kernel 5.x first, and if you run into issues, reinstall the OS with legacy Kernel; otherwise, if you want it ready and solid right away, go straight to legacy Kernel.)&lt;/em&gt;  You can download the image from the &lt;a href=&quot;https://www.armbian.com/nanopi-m4/#kernels-archive-all&quot;&gt;official Armbian website&lt;/a&gt;.  Don’t skip the integrity check.  On Linux, just open a terminal and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1sum /path/to/file.img.xz&lt;/code&gt; and check the output against the SHA file from the Armbian website.  This ensures your downloaded file has the same hash as the true file.  If you’ve ever used Debian or derivatives before (e.g., Ubuntu, Raspbian), Armbian will feel like home.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-sshwelcome-lscpu.jpg&quot; alt=&quot;SSH welcome and lscpu&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t like terminals, don’t worry.  You pretty much don’t need to ever see it again because we’ll be managing everything from &lt;a href=&quot;https://www.openmediavault.org&quot;&gt;Openmediavault 5 (OMV5)&lt;/a&gt;.  I’ve been using OMV since the 3rd edition as my go-to NAS solution and it has never let me down.  It’s not super fancy, like freeNAS and unraid, but it will get the job done for most home-users.  Plus, it’s free and &lt;a href=&quot;https://github.com/openmediavault/openmediavault&quot;&gt;open-source&lt;/a&gt; and this matters to me.  It also comes with a bunch of packages that facilitate file sharing, monitoring resources, manage users, plug-ins, etc., and it has a very clean graphical user interface accessible via web-browser (webUI):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/omv4-dashboard.png&quot; alt=&quot;OMV4 dashboard&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, the folks at OMV put together a guide on their Github repo that tells exactly &lt;a href=&quot;https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Adden-A-Installing_OMV5_on_Armbian.pdf&quot;&gt;how to install OMV on Armbian&lt;/a&gt;.  Download their PDF and follow it step-by-step, with the following exceptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of flashing the OS image onto a micro-SD, plug your eMMC into the micro-SD adapter and then flash the OS image onto the eMMC.&lt;/li&gt;
  &lt;li&gt;Before turning the NanoPi M4 on with the eMMC installed for the first time, remove any drives connected to the SATA hat.  This is more of a cautionary move than anything else.  We want to minimize the risk of corrupting the eMMC at these initial configuration steps and there’s no need for additional drives at this point.  We’ll add them after we’re done installing OMV5.  The same applies to any other device connected to the NanoPi M4, like USB devices.  Keep it simple right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you’ll learn, the OMV installation script will take some time to finish.  We’re talking about more than 10min.  Be patient!  Afterwards, open a web browser and log into OMV’s WebUI and do your thing or read the &lt;a href=&quot;https://github.com/OpenMediaVault-Plugin-Developers/docs/blob/master/Getting_Started-OMV5.pdf&quot;&gt;Getting Started Guide&lt;/a&gt; that the OMV team wrote.&lt;/p&gt;

&lt;h2 id=&quot;cpu-tuning&quot;&gt;CPU tuning&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Rockchip RK3399&lt;/strong&gt; is a fairly new and nichey system on a chip and therefore, its implementation is not widely stable. On Armbian with Kernel 5.4, for example, I’ve noticed a few CPU-related Kernel panics that cause the board to freeze/reboot. &lt;a href=&quot;https://forum.armbian.com/topic/11710-nanopi-m4-v2-m4-image-not-working/page/7/?tab=comments#comment-93238&quot;&gt;Upon further investigation&lt;/a&gt;, it seems this issue can be fixed by changing the default CPU governor from &lt;em&gt;ondemand&lt;/em&gt; to &lt;strong&gt;&lt;em&gt;conservative&lt;/em&gt;&lt;/strong&gt;, and setting the &lt;em&gt;minimum CPU frequency to &lt;strong&gt;1.4GhZ&lt;/strong&gt;&lt;/em&gt; and the &lt;em&gt;maximum to &lt;strong&gt;1.8GhZ&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--warning&quot;&gt;Be extra careful when tuning your CPU because things can go wrong if you set the board to operate in a condition that it was not meant to.  Move slowly and keep an eye on related statistics afterwards to make sure you’re not going to fry the board.&lt;/p&gt;

&lt;p&gt;There are two ways to change the CPU frequency and governor. The first and recommended one is via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;armbian-config&lt;/code&gt; configuration utility:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Run the configuration utility
armbian-config
# Navitage to CPU options: System / CPU
# Set min frequency to 1416000 Hz
# Set max frequency to 1800000 Hz
# Set the governor to conservative
# Confirm 
# Exit the configuration utility
# Reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second method is by making direct changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpufrequtils&lt;/code&gt; file, as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Edit the cpufrequtils file
echo -e 'ENABLE=&quot;true&quot;\nGOVERNOR=conservative\nMAX_SPEED=1800000\nMIN_SPEED=1416000' &amp;gt; /etc/default/cpufrequtils
# Reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My board has been running rock solid after making such changes, so I recommend it.  Of course, you can try to use other configurations.  My understanding from what I read about the Kernel panics is that it’s likely a power issue caused by the rapid switching of CPU frequencies that the &lt;em&gt;ondemand&lt;/em&gt; governor makes.  The &lt;em&gt;conservative&lt;/em&gt; governor also scales the CPU frequency dynamically but much more gradually than the &lt;em&gt;ondemand&lt;/em&gt; governor.
By this logic, setting the governor to either &lt;em&gt;performance&lt;/em&gt; or &lt;em&gt;powersaving&lt;/em&gt; will likely improve stability as well because those governors do not change the CPU frequency at all.&lt;/p&gt;

&lt;h2 id=&quot;pwm-fan-controller&quot;&gt;PWM Fan controller&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;2-PIN PH2.0 connector&lt;/strong&gt; on the SATA hat is a power width modulated (PWM) connector for a 12v fan.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-pwm.jpg&quot; alt=&quot;PWM fan connector&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this connector is not enabled by default and furthermore, the Armbian OS does not come with a service that allows you to control the fan speed according to the CPU temperature.  Fortunately, other users have reported this issue before and a few of them have even written scripts to fix this issue.  I’ve made several changes to previous scripts (e.g., &lt;a href=&quot;https://forum.armbian.com/topic/11086-pwm-fan-on-nanopi-m4/?tab=comments#comment-95180&quot;&gt;mar0ni’s script&lt;/a&gt;) and wrote a highly configurable fan controller that uses a bounded model to set the fan speed dynamically.  To make it easier for me (and everyone else), I’ve created a Github repo (&lt;strong&gt;&lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan&quot;&gt;cgomesu/nanopim4-satahat-fan&lt;/a&gt;&lt;/strong&gt;) for the fan controller.  For more detailed and updated info about the controller, please refer to the repo (and if you’ve any issues or suggestions, open an issue there).&lt;/p&gt;

&lt;p&gt;Briefly, to install and run the script, read the &lt;a href=&quot;https://github.com/cgomesu/nanopim4-satahat-fan/blob/master/README.md&quot;&gt;README.md&lt;/a&gt; or follow these instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install git, clone the repo, and test the script

apt update
apt install git
cd /opt

# From now on, if you're not running as root, append 'sudo' if you run into permission issues
git clone https://github.com/cgomesu/nanopim4-satahat-fan.git
cd nanopim4-satahat-fan

# Allow the script to be executed
chmod +x pwm-fan.sh

# Test the script
./pwm-fan.sh

# Check for any error messages 
# When done, press Ctrl+C after to send a SIGINT and stop the script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks good, then run the fan controller in the background (as a systemd service), as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Copy the pwm-fan.service file to your systemd folder
cp /opt/nanopim4-satahat-fan/pwm-fan.service /lib/systemd/system/

# Enable the service and start it
systemctl enable pwm-fan.service
systemctl start pwm-fan.service

# Check the service status to make sure it's running without issues
systemctl status pwm-fan.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, if you don’t want to play around with PWM stuff and are okay with having your fan at 100%, 24/7, then you can just connect it to the board as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-fan-alternative-alwayson.jpg&quot; alt=&quot;PWM fan alt connector&quot; class=&quot;PostImage PostImage--small&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of note, you can also do the latter using the fan controller by running the script in &lt;em&gt;full speed mode&lt;/em&gt;, as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./pwm-fan.sh -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;assembly&quot;&gt;Assembly&lt;/h1&gt;
&lt;p&gt;If you’re like me, you’ll not receive all parts at the same time and you’ll only print the case after making sure that the board and hat are both working.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-parts.jpg&quot; alt=&quot;Nanopi M4 parts on table&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you’ll want to do is &lt;strong&gt;to flash the OS onto the eMMC&lt;/strong&gt;.  That’s because the eMMC will not be as accessible as a micro-SD card and HDDs once the SATA hat is installed–it is screwed to the board itself, above the audio jack (in v2, and above the HDMI in v1).&lt;/p&gt;

&lt;p&gt;After that, install the eMMC and the SATA hat.  Your SBC should look something like this right now:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-01.jpg&quot; alt=&quot;Nanopi M4 with hat 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-02.jpg&quot; alt=&quot;Nanopi M4 with hat 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it’s time to test the board and the SATA hat.  &lt;strong&gt;Connect the board to an Ethernet cable and plug it into your 12v PSU.&lt;/strong&gt;  Observe the red and green LEDs as it turns on and starts running the OS for the first time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-psu-test01.jpg&quot; alt=&quot;Nanopi M4 connected to PSU&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and &lt;strong&gt;find out which IP address your DHCP server gave to your NanoPi M4&lt;/strong&gt; (you might also be able to find it via the hostname nanopim4) and ping it to check it’s up and running.  If it’s replying, then &lt;strong&gt;SSH into it&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; (default pass is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234&lt;/code&gt;).  When logging in for the first time, Armbian will ask to change password and to create a new sudo user.  Go ahead and do that.  (I’ll assume that from this point on, you’ll still be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; instead of the sudo user.  If you’re using the latter though, then add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; prefix to each of the commands below.)&lt;/p&gt;

&lt;p&gt;Afterwards, run the &lt;a href=&quot;https://docs.armbian.com/User-Guide_Armbian-Config/&quot;&gt;&lt;strong&gt;armbian configuration utility&lt;/strong&gt;&lt;/a&gt; to make sure your NAS has the correct time, date, UTC offset, apt mirrors, etc., by running the command&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;armbian-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Depending on what you chose to change here, Armbian will need to reboot.  That’s fine.  Just SSH into it again afterwards.)  Now, let’s make sure all packages that came with the OS are up-to-date by running&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Go back to your router/firewall and assign a static IP address to your NanoPi M4 and then reboot the NanoPi&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After reboot, wait a few seconds and try to SSH into the static IP address you gave to the NanoPi and if everything looks good, it’s time to run the &lt;strong&gt;OMV installation script&lt;/strong&gt; (see &lt;a href=&quot;#software&quot;&gt;&lt;strong&gt;software&lt;/strong&gt;&lt;/a&gt;).  Again, this will take some time.  &lt;strong&gt;Be patient!&lt;/strong&gt;  When it’s done, open a web-browser and type the static IP address of your NanoPi M4.  At this point, it’s a good idea to do at least the following in &lt;strong&gt;System&lt;/strong&gt; (remember to &lt;strong&gt;Apply changed settings&lt;/strong&gt; every time it asks you to):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change your default admin password in &lt;strong&gt;General Settings&lt;/strong&gt;.  This will only affect access to OMV’s webUI.  It has nothing to do with your Linux user credentials;&lt;/li&gt;
  &lt;li&gt;Check &lt;strong&gt;Date/Time&lt;/strong&gt; settings to make sure they are right;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;System Monitoring&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Enable and configure &lt;strong&gt;Notification&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;In &lt;strong&gt;Power Management&lt;/strong&gt;, enable Monitoring and select the Shutdown action for the power button;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reboot&lt;/strong&gt; via the webUI (arrow at the top right corner / reboot).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After rebooting, check your &lt;strong&gt;Storage&lt;/strong&gt; and &lt;strong&gt;Diagnostics&lt;/strong&gt; tabs.  In Storage / Disks, there should be a single device for the OS eMMC.  Later on, we will come back to see if the drives plugged into the SATA hat are showing up here.&lt;/p&gt;

&lt;p&gt;In Diagnostics / Sys Info, check all tabs to make sure they are displaying things correctly.  Your OMV should be collecting Performance Stats at this point, so there should be graphs available.&lt;/p&gt;

&lt;p&gt;(If you’re new to OMV, take your time here and explore it a little bit.  This is a good time to read the Getting Started guide and get yourself familiarized with the webUI.)&lt;/p&gt;

&lt;p&gt;If everything is good, &lt;strong&gt;shutdown the NanoPi via the webUI&lt;/strong&gt;.  With everything off (none of the LEDs should be red), plug one or more HDDs to the SATA hat, as follows (I’m using an old 500GB Toshiba 2.5” HDD in the pictures below just for testing):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-test01.jpg&quot; alt=&quot;Nanopi M4 hat HDD test&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;turn on&lt;/strong&gt; the board.  You should notice a new LED on the other side of the SATA hat lighting up right away.  (The hat has LEDs for each SATA port.  If it’s not lighting up for a connected drive, you already know there’s a problem, like insufficient power or a bad connection.)  Go to the &lt;strong&gt;OMV webUI&lt;/strong&gt; and in &lt;strong&gt;Storage / Disks&lt;/strong&gt;, see if the NanoPi was able to detect your HDD connected to the SATA hat correctly.  If not, press the ‘Scan’ button and check again.  You can repeat this process for each SATA interface if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-toshiba25hdd.jpg&quot; alt=&quot;Storage/Disks OMV webUI&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, if it looks like the board and SATA hat are working as they should, then &lt;strong&gt;it’s time to put everything inside the case&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;my-printed-cases&quot;&gt;My printed cases&lt;/h2&gt;
&lt;p&gt;As I’ve mentioned before, I’m using kirkdis’ 3D printed case. I printed two cases for this project. This is the first one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case01.jpg&quot; alt=&quot;CGomesu case 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-case02.jpg&quot; alt=&quot;CGomesu case 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s the second (backup) case:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-backup-case.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scheisser.net/?p=7781&quot;&gt;In kirkdis’ last post&lt;/a&gt;, he mentioned&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“… to be careful when you put the upper case over the external ports as this is the most fragile part. Designwise I didn´t found a workaround for this area as result it can happen if you push too much that the connections between the ports break off but with a liztle bit patience you can set iz in place as one piece.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think I read his comment a bit too late:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-01.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but I managed to fix it a little bit by the end:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-frankensteins-case-02.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;my-opinion-about-the-case&quot;&gt;My opinion about the case&lt;/h3&gt;

&lt;p&gt;The HDD case and disk mounts feel very sturdy in comparison to the board case (a.k.a. upper case). I feel the &lt;strong&gt;board case&lt;/strong&gt; could be improved in the following way:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add &lt;strong&gt;thicker walls&lt;/strong&gt;, especially where the USB ports and the DC jack are;&lt;/li&gt;
  &lt;li&gt;Add a way of &lt;strong&gt;screwing&lt;/strong&gt; the board to the case;&lt;/li&gt;
  &lt;li&gt;Make the base of the fan mount thinner, so we can use the screws that come along with the board, instead of having to find longer screws just for that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-screws.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding the &lt;strong&gt;whole case&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It could be &lt;strong&gt;a bit larger&lt;/strong&gt; to make room for the cables and improve air flow.  Right now, it’s an extremelly tight fit if you’re using four HDDs and some cables get bent in ways that are probably not good for them in the long run;&lt;/li&gt;
  &lt;li&gt;Because all printed pieces are so tightly connected to each other, &lt;strong&gt;there’s very little room for error&lt;/strong&gt; when printing them. I feel that both the HDD case and board case should be a little looser and rely more on &lt;strong&gt;screws&lt;/strong&gt; to secure the printed pieces to the hardware.  Honestly, it was kind of a pain to attach and remove the board to the board case, and similarly, the HDD stack to the HDD case. It felt &lt;em&gt;too&lt;/em&gt; tight with both cases I printed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Honestly, I don’t know shit about 3d printing.  This is just my opinion on how the case could be improved.  If something I said doesn’t make sense, let me know.&lt;/p&gt;

&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;/h3&gt;
&lt;p&gt;If you don’t want to figure out how to put all pieces together on your own, take a look at kirkdis’ video and notice how he disassembled his unit:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/zmxovsvsy_I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;My advice is to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start by attaching the HDDs to the four disk mount pieces, so that you have a nice stack by the end of this step;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-01.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-02.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-03.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect all the SATA data and SATA power cables to the SATA hat;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-sata-ports.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the fan to the mount and the mount to the SATA hat and plug it to the board;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Put the board with the fan mount inside its case, making sure all the SATA cables are accessible from the other side of the case, where the HDDs will be;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attach the HDD stack to the base of the board case and connect the SATA cables;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-04.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-hdd-stack-05.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now, cover the HDD stack with its case and screw the bottom of the case to the last HDD;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-assembled-04.jpg&quot; alt=&quot;CGomesu backup case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your PSU to the DC power jack on the SATA hat;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Turn it on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà!  Check your OMV webUI to make sure it detected all connected disks and then start mounting them and adding your file sharing configurations, installing applications, adding users, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-satahat-test-fourwdblacks.jpg&quot; alt=&quot;Nanopi M4 hat 4 HDD test&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final Remarks&lt;/h1&gt;
&lt;p&gt;I’m very happy with this mini-NAS.  It’s arguably not as powerful as my previous HP Proliant Gen8 that I turned into a NAS but it is &lt;strong&gt;more energy efficient&lt;/strong&gt;, &lt;strong&gt;smaller&lt;/strong&gt;, &lt;strong&gt;quieter&lt;/strong&gt; and &lt;strong&gt;cheaper&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Regarding applications, I strongly suggest you to take a look at &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt;.  You can install both Docker and Portainer from within the OMV webUI (System / OMV-Extras / Docker - Docker Install; Portainer Install).  They make installing and managing applications so much easier.  Just be mindful that you’re running docker within an &lt;strong&gt;ARM architecture&lt;/strong&gt;, so any image must have a compatible &lt;strong&gt;arm release&lt;/strong&gt; to be able to run with the NanoPi M4.&lt;/p&gt;

&lt;p&gt;I don’t use any sort of RAID solution for this NAS.  Instead, I use unionFS/mergerFS to pool multiple drives/folders into individual folders and then have various applications running periodic local backups and overnight remote backups.  (The SATA hat &lt;em&gt;does not support hardware RAID&lt;/em&gt; but if you’re into redundancy, then it’s possible to create a software RAID from within the OMV webUI.)&lt;/p&gt;

&lt;p&gt;Here’s an overview of how I’m currently organizing my mini-NAS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-organization.png&quot; alt=&quot;mini-NAS drives and folders&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.openmediavault.org/index.php?thread/29089-nanonas-nanopi-m4-3-bay-or-4-bay-most-compact-and-low-consumption-raid/&quot;&gt;According to kirkdis&lt;/a&gt;, a NanoPi M4 mini-NAS with three 2.5” HDDs consumes between &lt;strong&gt;7W&lt;/strong&gt; (idle) and &lt;strong&gt;20W&lt;/strong&gt; (heavy load). I cannot measure the actual power consumption of my build but I think it’s safe to assume that it consumes a bit more power than kirkdis’, especially under heavy load. I estimate that mine consumes between 9W (idle) and 25W (heavy load), owing to the fact that my HDDs have a higher RPM and I’m using an additional 2.5” HDD.  For comparison, a &lt;a href=&quot;https://www.techpowerup.com/review/synology-ds918plus/13.html&quot;&gt;Synology Diskstation DS918+ with four 3.5” HDDs&lt;/a&gt; consumes between 27W (idle) and 44W (heavy load).&lt;/p&gt;

&lt;p&gt;Well, this concludes my NanoPi M4 mini-NAS project. I hope you enjoyed this article and that it will inspire you to create something for your own use-case.  As usual, let me know if you have any questions or suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;bonus-content&quot;&gt;Bonus Content&lt;/h1&gt;
&lt;h2 id=&quot;real-time-clock&quot;&gt;Real time clock&lt;/h2&gt;
&lt;p&gt;The NanoPi M4 comes with a built-in real time clock (RTC) module and to use it, all that you need is a compatible &lt;strong&gt;RTC battery&lt;/strong&gt; with a &lt;em&gt;Molex 53398-0271 connector&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/rtc-battery.jpg&quot; alt=&quot;RTC battery&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, its main purpose is to keep track of time, regardless of the board’s power state.  However, it also supports waking up the NanoPi from various power states.  On Linux, you can access and configure all such options with a package called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rtcwake&lt;/code&gt;, which comes pre-installed on Armbian (and pretty much any other Linux distro, by the way, because it’s part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util-linux&lt;/code&gt; core package).  (If the package is not accessible from within your user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whereis rtcwake&lt;/code&gt; and type the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/to/rtcwake&lt;/code&gt;.)  You can find info about its usage with the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; argument. For more detailed info, read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man rtcwake&lt;/code&gt;. An RTC battery is &lt;em&gt;really&lt;/em&gt; cheap (&lt;a href=&quot;https://www.amazon.com/Rtc-Battery/s?k=Rtc+Battery&quot;&gt;less than $10&lt;/a&gt;) and worthy of your attention for such a key component of a home network.  You definitely don’t want your mini-NAS time travelling to 1970…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-07-06-Nanopi-m4-mini-nas/nanopim4-cgomesu-rtc-battery.jpg&quot; alt=&quot;RTC battery&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="sbc" /><category term="arm" /><category term="homelab" /><category term="homeserver" /><category term="storage" /></entry><entry><title type="html">The ASRock J3355b-itx pfSense box</title><link href="http://localhost:4000/blog/Pfsense-white-box/" rel="alternate" type="text/html" title="The ASRock J3355b-itx pfSense box" /><published>2020-06-25T10:31:25-03:00</published><updated>2020-06-25T10:31:25-03:00</updated><id>http://localhost:4000/blog/Pfsense-white-box</id><content type="html" xml:base="http://localhost:4000/blog/Pfsense-white-box/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pfsense.org/&quot;&gt;pfSense CE&lt;/a&gt; is a free, &lt;a href=&quot;https://github.com/pfsense/pfsense&quot;&gt;open-source&lt;/a&gt;, and very popular &lt;strong&gt;firewall/router&lt;/strong&gt; that runs on &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt; and is developed by &lt;a href=&quot;https://www.netgate.com/&quot;&gt;Netgate&lt;/a&gt;.  Even though Netgate sells &lt;a href=&quot;https://www.netgate.com/products/appliances/&quot;&gt;official pfSense appliances&lt;/a&gt;, it’s possible to build your own, custom-made pfSense box for (way) less money (at the expense of way less support from Netgate).&lt;/p&gt;

&lt;p&gt;In this article, I talked about &lt;strong&gt;my ASRock mini-ITX pfSense box project&lt;/strong&gt;.  In the first part, I listed all the necessary hardware to build the box, and in the second part, I briefly talked about the software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;This project has five main hardware components, namely the &lt;strong&gt;motherboard&lt;/strong&gt; (mobo), the &lt;strong&gt;network interface card&lt;/strong&gt; (NIC), &lt;strong&gt;storage&lt;/strong&gt;, &lt;strong&gt;case&lt;/strong&gt;, and &lt;strong&gt;power supply unit&lt;/strong&gt; (PSU).&lt;/p&gt;

&lt;h2 id=&quot;motherboard&quot;&gt;Motherboard&lt;/h2&gt;
&lt;p&gt;Chances are that if you search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pfSense white-box&lt;/code&gt;, you’ll find someone mentioning the &lt;a href=&quot;https://www.asrock.com/mb/Intel/J3355B-ITX/&quot;&gt;&lt;strong&gt;ASRock J3355b-itx&lt;/strong&gt;&lt;/a&gt;.  This is definitely &lt;strong&gt;not a top of the line&lt;/strong&gt; mobo but it comes with a &lt;strong&gt;passively cooled &lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark/products/95597/intel-celeron-processor-j3355-2m-cache-up-to-2-5-ghz.html&quot;&gt;Intel dual-core processor&lt;/a&gt;&lt;/strong&gt; (AES-NI enabled), two &lt;strong&gt;SO-DIMM DDR3L&lt;/strong&gt; memory slots, a &lt;strong&gt;PCIe 2.0x16&lt;/strong&gt; expansion slot, and 2x SATA III ports.  On top of that, this is a &lt;strong&gt;&lt;em&gt;mini&lt;/em&gt;-ITX mobo&lt;/strong&gt;, so we can put it inside a low-profile case.  At the very least, if you’re looking for a more recent mobo, my suggestion is to use the ASRock J3355b-itx as reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/asrock-mobo.jpg&quot; alt=&quot;ASRock J3355b-itx&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;network-interface-card&quot;&gt;Network interface card&lt;/h2&gt;
&lt;p&gt;Even though the ASRock mini-itx comes with a built-in NIC, it’s a single port Realtek NIC that pfSense will likely not recognize out of the box.  Ideally, you’d buy and install an Intel NIC using the PCI-e expansion slot on the ASRock mobo.  The card choice depends on your needs but at the very least, consider a &lt;strong&gt;Gigabit Intel NIC with two ports&lt;/strong&gt;, one for WAN and another for LAN.  (It’s possible to use a single port with a VLAN-capable switch but this is a far more complex setup.)  Also, make sure the Intel NIC comes with a &lt;strong&gt;low-profile support&lt;/strong&gt; or it won’t fit many min-ITX cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/intel-nic.jpg&quot; alt=&quot;Intel NIC with 2 ports&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;/h2&gt;
&lt;p&gt;pfSense uses very little storage space, so you don’t need TBs of storage here.  The things that matter are read/write speed and reliability.  A simple &lt;strong&gt;120GB solid-state drive (SSD)&lt;/strong&gt; will be more than enough, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/120gb-ssd.jpg&quot; alt=&quot;SSD&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;case&quot;&gt;Case&lt;/h2&gt;
&lt;p&gt;You can use &lt;em&gt;any&lt;/em&gt; mini-ITX case &lt;em&gt;as long as&lt;/em&gt; it has support for at least &lt;strong&gt;one expansion slot&lt;/strong&gt;.  Also, note that some mini-itx cases have an expansion slot parallel to the mobo (it sits above the mobo’s i/o plate), instead of perpendicular (next to the mobo’s i/o plate).  That will usually be okay but you’ll need to buy compatible PCI-e extension cable then.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-front.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-antec-back.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-front.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/case-kmex-back.jpg&quot; alt=&quot;Case&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-supply-unit&quot;&gt;Power supply unit&lt;/h2&gt;
&lt;p&gt;If you bought an expensive case with a built-in PSU, go ahead and use it.  However, if you bought a cheap case with a PSU or one that even doesn’t have a built-in PSU, then buy and use a &lt;a href=&quot;https://www.amazon.com/s?k=pico+PSU&quot;&gt;&lt;strong&gt;pico PSU&lt;/strong&gt;&lt;/a&gt;. My experience is that &lt;strong&gt;cheap PSUs come with bad fans&lt;/strong&gt;, so avoid them if your firewall will be next to anyone in the house because it will eventually start making a lot of noise.  A pico PSU is the way to go, and because this box uses very little power, buy a low power PSU (anything between 60W-180W should be okay, for reference).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-06-25-Pfsense-white-box/pico-psu.jpg&quot; alt=&quot;PicoPSU&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;software&quot;&gt;Software&lt;/h1&gt;
&lt;p&gt;Software-wise, there’s not much to say other than&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the ISO from the &lt;a href=&quot;https://www.pfsense.org/download/&quot;&gt;official website&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Check the SHA signature of the downloaded file against the one from the official website;&lt;/li&gt;
  &lt;li&gt;Flash the image onto a USB stick;&lt;/li&gt;
  &lt;li&gt;Connect a monitor and keyboard to your pfSense box;&lt;/li&gt;
  &lt;li&gt;Insert the USB stick into your pfSense box, turn it on, and follow the instructions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if you want a more in-depth look into installation and initial configuration, check &lt;a href=&quot;https://docs.netgate.com/pfsense/en/latest/install/installing-pfsense.html&quot;&gt;&lt;strong&gt;the official docummentation&lt;/strong&gt;&lt;/a&gt;.  Alternatively, there’s a very easy to follow video tutorial that &lt;a href=&quot;https://www.youtube.com/channel/UCHkYOD-3fZbuGhwsADBd9ZQ&quot;&gt;Lawrence Systems&lt;/a&gt; put together. (It’s a bit old but still valid.)&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/9kSZ1oM-4ZM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This concludes the basics of a cheap, low-profile, and low-power (yet powerful) pfSense white-box.  I’ve never had any issues with this hardware and recommend it to anyone interested in diving into firewalls or just looking for something a bit more advanced than what commercial routers can offer.  If you want to try something different than pfSense, take a look at &lt;a href=&quot;https://opnsense.org/&quot;&gt;OPNsense&lt;/a&gt;–a pfSense fork–for another free and open-source firewall software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="homelab" /><category term="homeserver" /><category term="firewall" /><category term="network" /></entry><entry><title type="html">Youtube live-streams as IPTV channels for TVHeadend</title><link href="http://localhost:4000/blog/Youtube-as-IPTV-with-TVH/" rel="alternate" type="text/html" title="Youtube live-streams as IPTV channels for TVHeadend" /><published>2020-05-07T00:00:00-03:00</published><updated>2020-05-07T00:00:00-03:00</updated><id>http://localhost:4000/blog/Youtube-as-IPTV-with-TVH</id><content type="html" xml:base="http://localhost:4000/blog/Youtube-as-IPTV-with-TVH/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;September 15th, 2020&lt;/strong&gt;: There’s a &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh/releases&quot;&gt;new release of the Youtube4TVH&lt;/a&gt; program that does not require the use of API keys. The section about how to create an API key has been updated accordingly.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;June 23rd, 2020&lt;/strong&gt;: Moved content from Blogger to my website and converted to markdown.  Fixed typos I found.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;May 19th, 2020&lt;/strong&gt;: Added info about TVH m3u re-fetch period and youtube4tvh cronjob for streams that change very often.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;May 14th, 2020&lt;/strong&gt;: Added more info about streamlink install and outdated versions; fixed a few typos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this guide, we will learn how to feed Youtube live-streams into a TVHeadend (TVH) server as IPTV channels.  This is a fairly advanced guide but I’ll try my best to make it as digestible as possible to any individual with minimal knowledge about selfhosting.  You will need a &lt;strong&gt;Linux distro&lt;/strong&gt; (e.g., Debian, Ubuntu) to follow this guide.  All the software described here is &lt;strong&gt;free and open-source&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’m not an expert in any of the topics mentioned here.  If you have suggestions on how to improve something, please leave a comment below stating what could be changed and why it should be changed.&lt;/p&gt;

&lt;p&gt;Youtube4tvh is a utility program I wrote just for this guide.  I welcome anyone who wants to improve it or fork into something more abstract.  If that sounds like something you want to do, please head to &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;my Github repo&lt;/a&gt; and hit me up once you’ve done some coding.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There are multiple reasons to watch Youtube live-streams as if they were IPTV channels.  Here are a reasons few that come to mind right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s free and all programs are open-source;&lt;/li&gt;
  &lt;li&gt;There is at least one Youtube 24/7 live-stream that you enjoy. Some of my personal favorites, per category:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;News&lt;/strong&gt;: ABC News AU, Sky News, DW in English, France 24 in English&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: NASA TV, Space Videos, Space &amp;amp; The Universe HD&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Nature&lt;/strong&gt;: Cornell Lab of Ornithology Cams, Monterey Bay Aquarium, Explore Oceans, Explore Nature, Volcanoverse&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Webcam - Other&lt;/strong&gt;: Virtual Railfan, earthTV, I Love You Venice,&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Radio&lt;/strong&gt;:  BGM channel, Cafe del Mar, Stay See&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You want to make selected Youtube live-streams available as IPTV channels through a TVH server (TVH -&amp;gt; Streamlink pipe -&amp;gt; Youtube);&lt;/li&gt;
  &lt;li&gt;You want to keep your streaming services as centralized as possible.  That is, instead of multiple apps, you can manage all of them using a single application (TVH);&lt;/li&gt;
  &lt;li&gt;You want to take advantage of one of the fastest and most reliable media delivery networks out there (Youtube’s CDN);&lt;/li&gt;
  &lt;li&gt;You dislike Youtube ads (Streamlink will get rid of them without the need to install any filtering system);&lt;/li&gt;
  &lt;li&gt;You like how it looks for the client:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/9FSPf5wISUY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;objectives&quot;&gt;Objectives&lt;/h1&gt;
&lt;p&gt;By the end of the guide, you’ll have learned how to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a customized Youtube live-stream m3u playlist with the help of youtube4tvh;&lt;/li&gt;
  &lt;li&gt;Install a TVH server on a Linux machine;&lt;/li&gt;
  &lt;li&gt;Install Streamlink to pipe live-stream data into a TVH server;&lt;/li&gt;
  &lt;li&gt;Add a Youtube live-stream m3u playlist to a TVH server as an IPTV auto network;&lt;/li&gt;
  &lt;li&gt;Configure a TVH server to auto-map muxes to channels using bouquets;&lt;/li&gt;
  &lt;li&gt;Create a cronjob to automatically update the Youtube live-stream m3u playlist every day at 6am.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;client-server-layout&quot;&gt;Client-server layout&lt;/h1&gt;
&lt;p&gt;There are three main components to this setup, namely &lt;strong&gt;TVH&lt;/strong&gt;, &lt;strong&gt;Streamlink&lt;/strong&gt;, and &lt;strong&gt;youtube4tvh&lt;/strong&gt;, which are all open-source and free:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tvheadend/tvheadend&quot;&gt;&lt;strong&gt;TVHeadend&lt;/strong&gt;&lt;/a&gt;: Tvheadend is a TV streaming server for Linux supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, IPTV, SAT&amp;gt;IP and other formats through the unix pipe as input sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-github.png&quot; alt=&quot;TVH Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-webui.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-webui.png&quot; alt=&quot;TVH WebUI&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;&lt;strong&gt;Streamlink&lt;/strong&gt;&lt;/a&gt;: Streamlink is a CLI utility which pipes video streams from various services into a video player.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/streamlink-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/streamlink-github.png&quot; alt=&quot;Streamlink Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;&lt;strong&gt;youtube4tvh&lt;/strong&gt;&lt;/a&gt;: Youtube4tvh is a Python CLI program that uses Youtube API to create (or update) m3u playlists of live-streams that are piped into a TVH server via Streamlink.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/youtube4tvh-github.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/youtube4tvh-github.png&quot; alt=&quot;youtube4tvh Github&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this guide, we will assume that such components are related to each other and any clients (any IPTV players, such as VLC, Plex or a Kodi PVR) according to the following layout:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-layout.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2020-05-07-Youtube-as-IPTV-with-TVH/tvh-layout.jpg&quot; alt=&quot;Client-server layout&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, once you’re done with the initial configuration, you can try changing it to accomodate your needs.  For example, you can &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/VLC_Multicasting&quot;&gt;multicast a live-stream to a TVH server using VLC&lt;/a&gt;.  This will let you use a single connection to Youtube be distributed to multiple clients, instead of creating multiple connections to Youtube–definitely take a look at it if you’re serving a large number of clients with your TVH server.  Also, you might want to pipe the Streamlink data to FFMPEG before sending to TVH, which will let you set custom AV codecs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;youtube4tvh&quot;&gt;Youtube4tvh&lt;/h1&gt;
&lt;p&gt;This is a utility program that will let us create and manage m3u playlist of Youtube live-streams.  It can extract information directly from Youtube’s frontend (default) or from Youtube’s API (by using a valid API key).  Be aware that the API keys have daily quotas that this program will reach fairly quickly. For more info, checkout &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh&quot;&gt;the github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-a-youtube-api-v3&quot;&gt;Create a Youtube API v3&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Since the release of &lt;a href=&quot;https://github.com/cgomesu/youtube4tvh/releases&quot;&gt;&lt;strong&gt;v0.1.1&lt;/strong&gt;&lt;/a&gt;, youtube4tvh does not require the use of API keys to run. Therefore, &lt;strong&gt;the use of API keys is now optional&lt;/strong&gt;. If you choose to skip this step, simply omit the&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--apikey&lt;/code&gt; &lt;em&gt;argument when running this utility.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can find instructions on &lt;a href=&quot;https://developers.google.com/youtube/v3/getting-started&quot;&gt;the official page&lt;/a&gt;.  If you don’t want to head there, here is a streamlined version:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sing up for or Log into your Google account;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to your &lt;a href=&quot;https://console.developers.google.com/apis/&quot;&gt;API dashboard&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a project (top left &amp;gt; new project);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give the project a name and create it (this should take a few seconds…);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the project you just created and in the dashboard, go to ‘+ Enable APIs and Services’;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for Youtube Data API v3 and enable it;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It should redirect you to its dashboard but if doesn’t, select Manage;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Create Credentials (if you don’t see a button, just go to Credentials in the side menu);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s going to ask you which API you’re going to use (select Youtube Data API v3), where you’ll be calling it from (Other UI) and what data (Public data). Then select ‘What credentials do I need?’ and it will generate an unrestricted API for the project you created;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the side menu, go to Credentials and Edit the API Key you generated;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under ‘API restrictions’, select Restrict key &amp;gt; Youtube Data API v3 &amp;gt; Save.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! Your key is that long string with random letters and numbers in the column labeled &lt;strong&gt;Key&lt;/strong&gt;. Whenever you see a field to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt;, use that one.  Also, you can repeat this process to generate additional keys.  It’s a good idea to do so.&lt;/p&gt;

&lt;h2 id=&quot;install-youtube4tvh&quot;&gt;Install youtube4tvh&lt;/h2&gt;
&lt;p&gt;Open a terminal window and run the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install git python-pip
cd /opt
sudo git clone https://github.com/cgomesu/youtube4tvh.git
cd youtube4tvh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install required packages via pip:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the program (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt; for your API key)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd youtube4tvh
python main.py --apikey=YOURKEY --channelname=&quot;DW News&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, there should be an output.m3u file on the same folder you are (you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to list files).&lt;/p&gt;

&lt;p&gt;If you run into permission issues, make sure to use a user with sudo perission.  Also, if your user is not allowed to write to /opt, then run the follwing (changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURUSER&lt;/code&gt; for your sudo username):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R YOURUSER:sudo /opt/youtube4tvh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything looks good, go ahead and add permission to execute the streamlink.sh helper script that will pipe data into TVH (if you want to change settings from streamlink, change them in the streamlink.sh file):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod +x /opt/youtube4tvh/streamlink.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;This program has two modes of execution, &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=add&lt;/code&gt; is the default mode and it will create an m3u file if you don’t specify one.  However, if you do provide an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput=/path/to/file.m3u&lt;/code&gt;, it will instead append channels to output.m3u. (If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uoutput&lt;/code&gt; are the same, then it appends to itself.)&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=update&lt;/code&gt; will parse an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput=/path/to/file.m3u&lt;/code&gt; and update all URLs to make sure they are the ones currently available (instead of a broken URL).  This is useful because even though some Youtube channels stream 24/7, they will at times stop and restart the stream, which will cause Youtube to generate a new URL to their live-stream.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode=update&lt;/code&gt; will make sure your output.m3u is always using the correct URLs.  (Again, if you want to update the same input file, then point both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uinput&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--m3uoutput&lt;/code&gt; to the same m3u file.)&lt;/p&gt;

&lt;p&gt;First, we will generate a youtube.m3u file with the channel “DW News”.  Afterwards, we will append a couple of additional channels to the youtube.m3u file.  Then, we will create a cronjob to keep our youtube.m3u up-to-date.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create youtube.m3u file and add the channel “DW News” (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOURKEY&lt;/code&gt; to your actual API key):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/youtube4tvh/youtube4tvh
python main.py --apikey=YOURKEY --m3uoutput=youtube.m3u --channelname=&quot;DW News&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Append the channel “France 24 English” to the youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python main.py --apikey=YOURKEY --m3uinput=youtube.m3u --m3uoutput=youtube.m3u --channelname=&quot;France 24 English&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Append the channel “Explore Nature” to the youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python main.py --apikey=YOURKEY --m3uinput=youtube.m3u --m3uoutput=youtube.m3u --channelname=&quot;Explore Nature&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a cronjob to update the youtube.m3u file everyday at 6am. First, make a backup or your youtube.m3u file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /opt/youtube4tvh/youtube4tvh/youtube.m3u /opt/youtube4tvh/youtube4tvh/youtube.m3u.backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a cronjob:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add the following at the bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 6 * * * /usr/bin/python /opt/youtube4tvh/youtube4tvh/main.py --apikey=YOURKEY --m3uinput=/opt/youtube4tvh/youtube4tvh/youtube.m3u --m3uoutput=/opt/youtube4tvh/youtube4tvh/youtube.m3u --mode=update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Save and exit (ctrl+x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all we need to do with this program.  If you ever feel like adding a new channel to the playlist, you can just repeat the “Append” examples with the new channel instead.&lt;/p&gt;

&lt;p&gt;If you want to remove a channel, you’ll need to manually edit the youtube.m3u file (remove the channel’s #EXTINF row and the one immediately below it, which contains the pipe command).  You can also manually edit the m3u file to add a group-title to the channels (see sample/input.m3u, for example), change their order, etc.  Just use your favorite text editor to do that and when you’re done, save preserving the .m3u extension.&lt;/p&gt;

&lt;h2 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;Theoretically, the m3u playlists can contain as many streams as you want.  However, as a general rule of thumb, I find it useful to create one m3u playlist for each type of streaming channel–for example, youtube-webcams.m3u, youtube-news.m3u, youtube-radio.m3u, and etc–and then have a unique API key for each of them.  This way, I can run the youtube4tvh cronjob more often, thus reducing the chance of having broken URLs in the m3u file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;streamlink&quot;&gt;Streamlink&lt;/h1&gt;
&lt;p&gt;Streamlink is an awesome utility program and if you’ve never used it before, make sure to check their &lt;a href=&quot;https://streamlink.github.io/&quot;&gt;documentation&lt;/a&gt;.  Here, we will only use it to pipe data from Youtube to a TVH server but Streamlink is able to pipe video streams from many other platforms (Twitch, Dailymotion, etc.).&lt;/p&gt;

&lt;p&gt;To install Streamlink, please follow the instructions on &lt;a href=&quot;https://streamlink.github.io/install.html&quot;&gt;the official website&lt;/a&gt;.  Make sure you’re running the latest version afterwards.  You can find the installed version by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;streamlink --version&lt;/code&gt;, which should be the same one as the latest version on their &lt;a href=&quot;https://github.com/streamlink/streamlink/releases&quot;&gt;Releases page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(It looks like multiple repos are distributing a much older version than the 1.4.1, which is the latest when this article was first posted.  If that’s the case for your distro, take a look at the PyPi and source installation on their Install page.  Uninstall the older version and install via pip and if that doesn’t work, try cloning their git repo and install via setup-tools, very much like the youtube4tvh utility.)&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/youtube4tvh&lt;/code&gt;, you’ll notice a file called &lt;strong&gt;streamlink.sh&lt;/strong&gt;.  That is a helper script that TVH will use to get the video stream from a Youtube URL.  If you open it with a text editor, you’ll see the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
####################################################
################ Streamlink script #################
####################################################
# The default version writes the data from the best
# stream ($1, the first argument) to stdout using a
# thread pool of size 2 to download HLS segments.
# Everything else follows default values.
#
# Inspired by niwi_niwi's post at
# https://tvheadend.org/boards/5/topics/35658
#
# More info: https://streamlink.github.io/cli.html
#
####################################################
#### Add/modify script according to your needs #####
streamlink \
--stdout \
--hls-segment-threads 4 \
--hls-live-edge 10 \
&quot;$1&quot; best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual command to execute streamlink and its options are all at the bottom.  If you know what you’re doing and want to play with different configurations, go ahead and change the arguments in the streamlink command.  Say, if instead of playing always the ‘best’ stream you want to play the 480p version, then just change it to that (but always leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stdout&lt;/code&gt; or you won’t be able to pipe data to TVH).  Once again, &lt;a href=&quot;https://streamlink.github.io/cli.html&quot;&gt;check the docs&lt;/a&gt; for a comprehensive list of options.&lt;/p&gt;

&lt;p&gt;To test the script, you can simply execute the following (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOUTUBEURL&lt;/code&gt; for the URL of a Youtube live-stream):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash streamlink.sh YOUTUBEURL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a whole bunch random characters as streamlink outputs the video stream to the terminal.  Hit ctrl+c to terminate the process.  If you have a player, you can run the command above with a pipe to the player.  Using &lt;a href=&quot;https://github.com/videolan/vlc&quot;&gt;&lt;strong&gt;VLC&lt;/strong&gt;&lt;/a&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash streamlink.sh YOUTUBEURL | vlc -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-server&quot;&gt;TVH server&lt;/h1&gt;
&lt;p&gt;TVH was a game-changer for me.  It offers a centralized system to manage multiple IPTV networks and TV tuners.  I can fully customize how all channels will show up to all my clients and that’s so much better than using multiple (and sometimes shady) applications developed by each IPTV provider.  If a channel is down, I can tell TVH to automatically remove it or remap to another provider.  If the EPG is not working, I can tell TVH to fetch from another source.  If a client does not support a particular type of codec, I can create a profile that uses the codec that works with it.  And all those changes are automatically applied to all clients, without the need to change one by one, because they are all getting data from my TVH server instead of external sources.  (It’s the TVH server that should always do that latter.)&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install a TVH server, please follow the instructions on &lt;a href=&quot;https://tvheadend.org/projects/tvheadend/wiki/Download&quot;&gt;the official website&lt;/a&gt;.  I strongly suggest you to install from the repo to make it easy to update with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt; command.  Also, make sure you’re running the latest version of it afterwards.&lt;/p&gt;

&lt;h2 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h2&gt;
&lt;p&gt;After installing TVH, head to the webUI on &lt;a href=&quot;http://localhost:9981&quot;&gt;http://localhost:9981&lt;/a&gt;.  (If you’re not running a desktop environment on the same machine, access it from another machine on the same network and change localhost for the IP of the machine running the TVH server.  Also, it goes without saying that the machine hosting the TVH server should have a fixed IP address at the local network because all the clients will be pointing to it.)&lt;/p&gt;

&lt;p&gt;If you provided admin credentials for TVH during the installation, it will ask you to identify yourself now.&lt;/p&gt;

&lt;p&gt;TVH will start the wizard the first time you access the webUI but you can just skip it (hit Cancel).&lt;/p&gt;

&lt;p&gt;Notice that there are several tabs in the webUI but many options will not show up if the “View level” is set to Basic, so let’s change the default to &lt;strong&gt;Expert&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; General &amp;gt; Base &amp;gt; Server &amp;gt; Set &quot;User interface level&quot; to Expert and hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s configure the Stream profiles to restart on error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Stream &amp;gt; Stream profiles &amp;gt; htsp &amp;gt; Check &quot;restart on error&quot; hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(You can repeat that step to all profiles that you’re going to use.  I usually just use htsp for clients and pass for auto-recording.)&lt;/p&gt;

&lt;p&gt;While we’re at it, let’s go ahead and customize the Recording settings as well.  This is all really up to your own preferences but this is what I use that is different from the default configuration:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Recording &amp;gt; DVR Profiles &amp;gt; Default profile
# DVR file retention: 3 days
# Pre-recording padding: 5 mins
# Post-recording padding: 5 mins
# Recording system path: /path/to/my/NAS/media/iptv/recording
# Maintain free storage space in MiB: 5000
# File permissions: 0777
# Filename character set: UTF-8
# Skip commercials: Unchecked
# Format string: $c/$t - $c - %F - %R$n.$x
# Directory permissions: 0777
# Make subdirectories per channel: Checked
# Include date in filename: Checked
# Include time in filename: Checked
# Remove all unsafe characters from filename: Checked
# Hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re done with the basic configuration!  Before moving to the next section, notice that at the bottom of the webUI there’s a bar called &lt;strong&gt;Tvheadend log&lt;/strong&gt; and on the opposite side, there is a button.  Click on it to open the log.  This is very useful to check if there’s any error while you’re making changes to the server.  Keep it open as you change the settings and if you see an error, there’s probably something misconfigured that you should fix before moving on.&lt;/p&gt;

&lt;h2 id=&quot;create-an-iptv-auto-network&quot;&gt;Create an IPTV auto network&lt;/h2&gt;
&lt;p&gt;We’re now going to create an IPTV network using the youtube.m3u file we created with youtube4tvh.  Open the TVH webUI and do the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; DVB Inputs &amp;gt; Networks &amp;gt; Add
# Type: IPTV automatic network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will redirect to IPTV settings.  Change the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Network name: youtube
# URL: file:///opt/youtube4tvh/youtube4tvh/youtube.m3u
# Create bouquet: Checked
# Channel numbers start from: 1
# Accept zero value for TSID: Checked
# Provider network name: youtube
# Ignore provider's channel numbers: Checked
# Character set: UTF-8
# Scan after creation: Unchecked
# Content character set: UTF-8
# Service ID: 1
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we move on, now is a good time to check if streamlink and the helper script are working.  We’re going to force play a few muxes (channels from your youtube.m3u playlist) to make sure that it’s all good before mapping them to actual TV channels.  (You gonna need a player for this step; if you don’t have one, skip it or install VLC).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; DVB Inputs &amp;gt; Muxes &amp;gt; Choose a random one and Hit the Play button
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The selected stream should show up in a few seconds.  If it doesn’t, there’s likely an issue with streamlink or the player or both, in which case you should stop and try to solve it before moving on.&lt;/p&gt;

&lt;h2 id=&quot;mapping-serves-to-channels&quot;&gt;Mapping serves to channels&lt;/h2&gt;
&lt;p&gt;There are two ways of mapping services to channels.  The standard way is to go to the Services tab and choose Map Selected &amp;gt; Map all services.  This should work very well if your muxes won’t ever change.  However, if they do (as in our case), they won’t be automatically remapped to their channel, and you gonna have to do this mapping process manually once again, multiple times.  We don’t wanna do that.  Fortunately, there’s a second way of mapping services to channels that does so automatically, even if your muxes change, and that’s via &lt;strong&gt;Bouquets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember that when we created the youtube IPTV network, we selected “Create a bouquet”.  Because of that, there’s now a new entry in Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets &amp;gt; “youtube”.  So, let’s go ahead and edit it a little bit:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Channel / EPG &amp;gt; Bouquets &amp;gt; Edit the &quot;youtube&quot; bouquet
# Enabled: Checked
# Auto-map to channels: Checked
# Channel mapping options: Select all
# Create tags: Create provider name tags, Create network name tags
# Hit Save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait a few seconds and go to the “Channels” tab and you should see all your channels auto-mapped to their services.  If you make any changes to the youtube.m3u playlist, the bouquet should automatically detect those changes from now on.&lt;/p&gt;

&lt;h2 id=&quot;epg-data&quot;&gt;EPG data&lt;/h2&gt;
&lt;p&gt;Some of the 24/7 news channels on Youtube (e.g., France 24, DW) actually follow the same eletronic program guide (EPG) as their Cable/Satellite broadcast.  So, if you want, you can add EPG data to their Youtube live-stream.  There’s a fantastic program called &lt;a href=&quot;http://webgrabplus.com/&quot;&gt;&lt;strong&gt;WebGrab+Plus&lt;/strong&gt;&lt;/a&gt; that can do that for you &lt;strong&gt;for free&lt;/strong&gt;, but there’s a learning curve to it and how to feed the data to TVH (netcat or curl).  I’m planning on writing a guide about it in the near future, as I work on a parser for the site.pack folder as well.  But if you don’t feel like diving into that, you can always pay an EPG provider and manually add it to your clients (bad) or try to figure it out how to feed the EPG data to the TVH server (good).&lt;/p&gt;

&lt;h2 id=&quot;creating-and-editing-users&quot;&gt;Creating and editing users&lt;/h2&gt;
&lt;p&gt;Clients can access TVH using the same credentials as you’ve been using to configure the TVH server (admin access). As a general rule of thumb, however, that’s not a good practice.  Also, if you have multiple clients, it’s nice to know what each one is trying to access on your TVH server.  So, let’s go ahead and create a “client” user:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Users &amp;gt; Access Entries &amp;gt; Add
# Streaming: Select all
# Video recorder: Basic, HTSP, View All
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s add a password for it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Configuration &amp;gt; Users &amp;gt; Passwords &amp;gt; Add
# Enabled: Checked
# Username: client
# Password: password
# Hit Create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it!  You can repeat this process as many times as you need and play around with permissions, depending on your use-case.&lt;/p&gt;

&lt;h2 id=&quot;re-fetch-period-and-youtube4tvh-cronjobs&quot;&gt;Re-fetch period and youtube4tvh cronjobs&lt;/h2&gt;
&lt;p&gt;If you’ve a youtube m3u playlist with channels that are likely to change multiple times during the same day, then it’s a good idea to create a separate playlist for those channels.  Then, when you create a youtube4tvh cronjob for the new m3u playlist, make it run more frequently (e.g., every 5 mins would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*/5 * * * *&lt;/code&gt;) and in the TVH server, add a new IPTV auto network for the new m3u playlist and in its settings, edit the “re-fetch period” to match the cronjob update interval (5); hit save and then restart the TVH server to apply the new settings. If you’ve done it right, the TVH server will now check the m3u playlist at an interval equal to the re-fetch period and update any new/changed mux on it, which will be automatically mapped to a channel in its bouquet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tvh-client&quot;&gt;TVH client&lt;/h1&gt;
&lt;p&gt;There are multiple ways to watch the channels on your TVH server, including directly from the webUI itself (EPG tab &amp;gt; Watch TV).  The one I use is &lt;a href=&quot;https://kodi.tv/download&quot;&gt;&lt;strong&gt;Kodi&lt;/strong&gt;&lt;/a&gt; + &lt;strong&gt;TVH client addon&lt;/strong&gt; because my Kodi clients also access my Plex server.&lt;/p&gt;

&lt;p&gt;You can install Kodi on virtually any single-board computer, such as &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; and &lt;a href=&quot;https://www.hardkernel.com/&quot;&gt;Odroid&lt;/a&gt;, and Linux distro.  There are hundreds of guides showing how to install Kodi, so I won’t do that.  Instead, I’ll talk about the &lt;strong&gt;TVH client addon&lt;/strong&gt; for it.&lt;/p&gt;

&lt;h2 id=&quot;install-a-tvh-client-addon-for-kodi&quot;&gt;Install a TVH client addon for Kodi&lt;/h2&gt;
&lt;p&gt;Open Kodi and try to install via the official repo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Add-ons &amp;gt; Install from repo &amp;gt; PVR clients
# Look for Tvheadend HTSP Client and install it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, depending on the distribution, you won’t see the “PVR clients” option.  In this case, you have to manually install the TVH client.  On Debian, for example, you can install it like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Open a terminal
sudo apt update
sudo apt install kodi-pvr-hts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Another option is to download a .zip of the addon but please do your research first.  Don’t download and install addons from random repos.)  If you didn’t see any error, it means the PVR client is now available on Kodi, so open it (restart it, if it was already open) and then do the following (changing the values to the appropriate ones for your TVH server and client credentials):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to Add-ons &amp;gt; My add-ons &amp;gt; PVR clients &amp;gt; Tvheadend HTSP Client &amp;gt; Configure
# &amp;gt; Connection Settings
# IP address: The IP address of the machine hosting your TVH server
# HTTP port: 9981
# HTSP port: 9982
# Username: client
# Password: password
# &amp;gt; Streaming settings
# Profile to use: htsp
# (If your connection is pretty good, you might want to try enabling predictive tuning
# but I've had mixed results with it.)
# Hit OK
# Restart Kodi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to play around, you can create a video profile just for this client and then set the Profile to use it.  This could be a profile that transcodes to a particular AV codec that best fits the client hardware, for example.  Be mindful that whenever you make a change to the addon, you’ll need to restart Kodi to see the changes take effect.&lt;/p&gt;

&lt;p&gt;Test the Kodi client:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Go to TV &amp;gt; Channels &amp;gt; Play random one
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything is working as it should, you should now be able to watch the stream from your Kodi client.  Play around with it and try recording something, too.  Now it’s time to fine-tune your TVH server to best serve your clients.&lt;/p&gt;

&lt;p&gt;You can make further client-side changes in &lt;strong&gt;Kodi’s PVR &amp;amp; Live TV settings menu&lt;/strong&gt;, such as mapping channels to specific numbers, behavior of changing channels, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Congratulations for reaching the end of this guide.  As I said before, one of my future projects is to work on a parser for the Webgrab+Plus EPG data and then write a guide on how to implement it using the current setup.&lt;/p&gt;

&lt;p&gt;If you found this useful or have suggestions on how to improve this guide, please leave a comment and I’ll try to reply asap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="github" /><category term="iptv" /><category term="kodi" /><category term="streamlink" /><category term="tvheadend" /><category term="youtube" /></entry><entry><title type="html">Using the Odroid C2 IR receiver with LibreElec OS</title><link href="http://localhost:4000/blog/IR-with-odroidc2/" rel="alternate" type="text/html" title="Using the Odroid C2 IR receiver with LibreElec OS" /><published>2020-02-18T00:00:00-03:00</published><updated>2020-02-18T00:00:00-03:00</updated><id>http://localhost:4000/blog/IR-with-odroidc2</id><content type="html" xml:base="http://localhost:4000/blog/IR-with-odroidc2/">&lt;p&gt;In case you didn’t know, the &lt;a href=&quot;https://www.hardkernel.com/shop/odroid-c2/&quot;&gt;Odroid C2&lt;/a&gt; comes with an onboard infrared (IR) receiver.  Until a few days ago, I thought that such a receiver was only compatible with their own IR remote controller but it turns out you can use it with &lt;em&gt;any IR controller&lt;/em&gt;.  We can do that with a package called &lt;a href=&quot;http://www.lirc.org/html/&quot;&gt;&lt;strong&gt;lirc&lt;/strong&gt;&lt;/a&gt;, which stands for &lt;strong&gt;linux infrared remote control&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2020-02-18-IR-with-odroidc2/board.png&quot;&gt;&lt;img src=&quot;/assets/posts/2020-02-18-IR-with-odroidc2/board.png&quot; alt=&quot;Odroid C2 board&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This brief tutorial is for the &lt;strong&gt;LibreElec OS&lt;/strong&gt; but one can use lirc with &lt;strong&gt;any Linux distro&lt;/strong&gt; and the configuration won’t be completely different than the one shown here.  (For the sake of completeness, I’ve tested with &lt;strong&gt;LibreElec Official OS 9.0.2&lt;/strong&gt; running &lt;strong&gt;Kodi 18.2&lt;/strong&gt;) Here’s a step by step procedure to get the IR working with lirc:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSH into your Odroid C2
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@IP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Get a list of all available keys that you can map to your IR remote
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irrecord --list-namespace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Kill running lircd, if there’s any
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps aux | grep lircd
kill PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Turn off all other IR compatible devices before moving forward&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/storage&lt;/code&gt;, record IR custom keys and follow the instructions that will show yup on your screen:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /storage/
irrecord
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If succesful, irrecord will genetare a .conf file on /storage/ with the name you provided at the beginnig. Copy the .conf file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/storage/.conf/lircd.conf&lt;/code&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp *.conf /storage/.conf/lircd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot your system
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Test your IR remote! If some key is missing, you can go back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irrecord&lt;/code&gt; and edit or record new keys.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.  This is a short tutorial I wrote mostly to remind myself about this feature but hopefully, this tutorial is going to help someone else out there, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="odroid" /><category term="sbc" /></entry><entry><title type="html">The math of a bruised souleater</title><link href="http://localhost:4000/blog/Math-of-bruised-souleater/" rel="alternate" type="text/html" title="The math of a bruised souleater" /><published>2019-07-19T00:00:00-03:00</published><updated>2019-07-19T00:00:00-03:00</updated><id>http://localhost:4000/blog/Math-of-bruised-souleater</id><content type="html" xml:base="http://localhost:4000/blog/Math-of-bruised-souleater/">&lt;p class=&quot;notice notice--info&quot;&gt;This is a repost of my &lt;a href=&quot;https://www.reddit.com/r/magicTCG/comments/7phqk1/the_math_of_a_bruised_souleater/&quot;&gt;original reddit post&lt;/a&gt;. I’ve made a few changes to the original version to improve readability.&lt;/p&gt;

&lt;p&gt;This is a post about an interesting interaction that came up yesterday, when I was making changes to an EDH deck. I thought someone else might find this analysis interesting, so I decided to share it here. If you spot an error, feel free to point it out. The interaction is about two cards, namely &lt;strong&gt;Immolating Souleater&lt;/strong&gt; and &lt;strong&gt;Bruse Tarl, Boorish Herder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/immolating-souleater.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/immolating-souleater.jpg&quot; alt=&quot;Immolating souleater&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/bruse-tarl.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/bruse-tarl.jpg&quot; alt=&quot;Bruse tarl&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose you have Immolating Souleater on the battlefield and Bruse Tarl, Boorish Herder’s triggered ability give it double-strike and lifelink. Souleater is a 1/1 creature that costs 2 colorless and let’s you pay one phyrexian red mana to give it +1/+0 until eot.  Let’s assume you cannot pay red mana and if you want to activate Souleater’s ability, you need to pay life. The souleater is not under summoning sickness, so it can attack an opponent. For now, let’s also assume you have 40 life and your opponents also have 40 life. You see an opportunity to kill an opponent, declare attack, the souleater is not blocked, you pay 38 life to make it a 20/1 creature with double-strike and lifelink, and after all damage is done, your opponent dies and you gain 40 life back (for a +2 net life, as you end up with 42 in the end).&lt;/p&gt;

&lt;p&gt;This is cool and all but what happens when you cannot pay 38 life before the first hit? What if your opponent has more life than you? Life-wise, does it matter how much life you pay before the first hit? How much life can you pay at any given point to either maximize damage or minimize net life loss? Let’s think about it.&lt;/p&gt;

&lt;p&gt;Souleater’s activated ability is a simple linear function of the amount of life you pay. Let x be the amount of life paid, so that souleater’s power is given by&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq1.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq1.png&quot; alt=&quot;Eq 01&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(To make it simple, we ignore the fact that phyrexian mana is always 2 life and let x be any non-negative integer.) As in the previous example, if you pay 38 life, f(38) = 20. The tricky part is how this simple linear function interacts with Bruse’s ability, that is, the ability to give a creature double-strike and lifelink (“bruised”).&lt;/p&gt;

&lt;p&gt;The intuition with double-strike is to multiply f(x) by 2, which would be correct if we only paid life before the first hit (x1) and nothing else before the second hit (x2 = 0) but that does not need to be the case. Say we pay 20 life before the first hit (x1 = 20) and an additional 10 life afterwards (x2 = 10). How much damage will we deal to the opponent? We know that f(20) = 11 and f(10) = 6 but the first hit should carry over to the second becasue the +1/+0 lasts until eot. At this point, let’s make an equation for the first hit,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq2.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq2.png&quot; alt=&quot;Eq 02&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and another for the second hit,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq3.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq3.png&quot; alt=&quot;Eq 03&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can sum both functions to get the total amount of damage dealt (d) by a Souleater with double-strike:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq4.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq4.png&quot; alt=&quot;Eq 04&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(It’s easy to see how one could generalize this to triple-strike, quadruple-strike, …, but let’s not delve into it now.) Therefore, if x1=20 and x2=10, d(20,10) = f1(20)+f2(20,10), which is 27 damage for 30 life paid.&lt;/p&gt;

&lt;p&gt;So, now we have an equation (d) that we can play with. For example, if an opponent has 60 life, how much life do you need to pay? Because x1 is multiplied by two, if the goal is to deal as much damage as possible, you should always pay as much life as possible before the first hit. The easiest way here is to pay 58 life right away (x1 = 58 and x2 = 0) but what if you only have 40 life. Our dmg equation shows that if you have 40 life, you can pay 38 before the first hit (x1=38) but in order to kill your opp, you’d have to pay 40 before the second hit (x2=40), which we can already tell that won’t be possible with the other parameters we set for this scenario. The question is then how high can x2 be in order to deal the highest amount of damage without killing ourselves? Now we need to figure out how to add lifelink into the equation.&lt;/p&gt;

&lt;p&gt;Lifelink will affect your life total (k) and because a souleater with double-strike hits twice, let’s define your starting life total (k1), our life total after the first hit (k2), and our life total after the second hit (k3). As before, let’s say that we pay 20 life before the first hit (x1 = 20) and an additional 10 life afterwards (x2 = 10). Because our life total matters here, let’s also assume that our starting life total is k1 = 40. So, if x1 = 20, our remaining life before the first hit is the difference k1 – x1 = 20 and immediately after the first hit, the lifelink effect makes it go up by f1(20) = 11 points, which means that we can define&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq5.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq5.png&quot; alt=&quot;Eq 05&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and similarly,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq6.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq6.png&quot; alt=&quot;Eq 06&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have a simple way of defining net-life gain/loss (nl) as the difference between k3 and k1, namely&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq7.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq7.png&quot; alt=&quot;Eq 07&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which funny enough doesn’t include x1 into the equation. The equation for nl tells us three main things: (a) that we will never net more than 2 life, (b) we’ll net life loss proportional to the amount of life we pay before the second hit (x2), and (c) net-wise, it doesn’t really matter how much life you pay before the first hit (x1). (x1 doesn’t matter because in our scenario, it always nets 0 life. Think about it. You are paying 2 life to increase 1 dmg but with double-strike, souleater hits twice and in the end, you get your 2 life back with lifelink. The only thing that carries over is the base power, which is why there’s a constant 2 in the equation for k3.)&lt;/p&gt;

&lt;p&gt;Good. Now, what can we do with that? Well, we can figure out how to maximize dmg in terms of our life total, so that you deal as much damage as possible without dying for any given amount of starting life total (the math equivalent of “just pay as much life as you can before each hit”). For k1 &amp;gt; 0, let i1 and i2 be the amount of life you want to have before the first hit and second hit, respectively, then&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq8.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq8.png&quot; alt=&quot;Eq 08&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(There’s an additional complication here because of how we use phyrexian mana but we don’t need to worry too much about it as long as we can figure out the appropriate i1 and i2 for each value of k1. For example, if you have 40 life, max(d) = 2.5 + 1.25(40) - .75(2) - .5(2) = 50. Because k1 is multiplied by a value greater than one, this equation tells us that the amount of damage done above your starting life increases with our starting life. For example, if you have 40 life, you can deal 10 damage above your starting life to an opponent (e.g., kill an opponent with 50 life points) but if you have 20 life, you can only deal 5 damage above your starting life (e.g., kill an opponent with 25 life points). It’s easier to see this relationship when we plot max(d) as a function of the starting life (k1) using the minimum appropriate values of i1 and i2:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/regression.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/regression.jpg&quot; alt=&quot;Regression&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we fit a linear equation to it, we get a solution that does not require knowing the exact values of i1 and i2, namely max(d) ≈ .65 + 1.25k1.  However, because each point is equally likely, as /u/darth_aardvark pointed out, the appropriate intercept should be the mean of all possible combinations of min(i1) and min(i2), which can only take on values {1, 2}.  There is a total of 2^2 combinations of  min(i1) and min(i2), namely&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq9.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq9.png&quot; alt=&quot;Eq 09&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those equations give us a mean intercept = .625 and a revised and final formula for the maximum amount of damage that a “bruised” souleater can do, specifically&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq10.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq10.png&quot; alt=&quot;Eq 10&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which is equivalent to the more memorable formula&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq11.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-19-Math-bruised-souleater/eq11.png&quot; alt=&quot;Eq 11&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in which k1 is simply your life total before the attack.  The 5/4 coefficient is quite instructive because it connects this approach to /u/darth_aardvark’s.  Specifically, the first maximized damage of a bruised souleater will hit for approximately half our life total (k1/2), while the second hit will hit for half our life total plus half of the life gained from the second hit (k1/2 + k1/4), which gives us a total of 5/4(k1).&lt;/p&gt;

&lt;p&gt;Well, this has been fun. I’m sure there are other things we could play with here but I’ve had enough for now. I think there are two main conclusions about a “bruised” Souleater. The first and least obvious one imo is that the more life you have, the more damage you can deal above your own life total. This is useful because it gives an intuition about whether you can kill an opponent or not at any given point (low life = cannot deal much above my own life; high life = can deal a bit more than my own life), and whether you should attempt to compute exacties. In most cases, however, you won’t be able to deal a whole lot more than your own life. The other conclusion is that the amount of life you pay before the first hit and second hit is net neutral and net negative, respectively, but I feel most of us would be able to figure this one out without much effort (lifelink gets only half the amount of life paid immediately before the second hit, while it gets it all back for the amount of life paid immediately before the first hit).&lt;/p&gt;

&lt;p&gt;Again, if you spot an error, please point it out. If you found a better way to look at this interaction or thought about a different scenario, feel free to explain it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mtg" /><category term="math" /></entry><entry><title type="html">The probability of Warp World</title><link href="http://localhost:4000/blog/Probability-warp-world/" rel="alternate" type="text/html" title="The probability of Warp World" /><published>2019-07-15T00:00:00-03:00</published><updated>2019-07-15T00:00:00-03:00</updated><id>http://localhost:4000/blog/Probability-warp-world</id><content type="html" xml:base="http://localhost:4000/blog/Probability-warp-world/">&lt;p class=&quot;notice notice--info&quot;&gt;This is a repost from my &lt;a href=&quot;https://www.reddit.com/r/magicTCG/comments/8956af/the_probability_of_warp_world_math/&quot;&gt;original reddit post&lt;/a&gt;. I’ve made a few changes to it to improve readability as well.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;If you’re unfamiliar with &lt;strong&gt;Warp World&lt;/strong&gt;, you are in for a treat. It’s a 5RRR sorcery from Ravnica that reads as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each player shuffles all permanents he or she owns into his or her library, then reveals that many cards from the top of his or her library. Each player puts all artifact, creature, and land cards revealed this way onto the battlefield, then does the same for enchantment cards, then puts all cards revealed this way that weren’t put onto the battlefield on the bottom of his or her library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/warp-world.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/warp-world.jpg&quot; alt=&quot;Warp world&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many different ways to build around such a card. For example, we can play mostly permanents in our deck (i.e., very few instants and sorceries), add creatures with enter the battlefield (ETB) ability (e.g., Eternal Witness), add creatures with landfall ability (Lotus Cobra), and so on. I’m not going to tell you how to play Warp World or advertise any particular deck that takes advantage of it. Instead, I’ll try to formalize what happens when we cast Warp World, and how the outcome of casting it changes as a function of the type of cards we choose to play and when we cast it.&lt;/p&gt;

&lt;p&gt;This is not meant to be an exhaustive analysis of the card and all of its possible interactions. If you spot an error or thought about a much simpler way of analyzing Warp World, please feel free to share it. Above all, this is meant to be a mathematical and statistical exercise.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-basics&quot;&gt;The Basics&lt;/h1&gt;
&lt;p&gt;In a game of magic, we play with a deck, Ω, composed of &lt;em&gt;n&lt;/em&gt; cards, such that Ω = {&lt;em&gt;ω&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;ω&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;} is our deck. The current types of cards in MtG can be of two sorts, namely permanents (land, creature, artifact, enchantment, and planeswalker) and non-permanents (sorcery and instant). Let Λ be the set of all &lt;em&gt;z&lt;/em&gt; permanents that we have in our deck (e.g., Elvish Mystic, forests, mountains, Primeval Titan), such that Λ = {&lt;em&gt;λ&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;λ&lt;sub&gt;z&lt;/sub&gt;&lt;/em&gt;} are all the permanents in our deck. Because there’re only permanents and non-permanents in our deck, the set of non-permanents can be defined as the negation of Λ, ¬Λ, such that ¬Λ ∪ Λ = Ω.&lt;/p&gt;

&lt;p&gt;When a game of magic starts, our deck becomes our library. Let’s define our library by the set Θ of &lt;em&gt;k&lt;/em&gt; cards, such that Θ = {&lt;em&gt;θ&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;θ&lt;sub&gt;k&lt;/sub&gt;&lt;/em&gt;} is our library, and the rules tell us that Θ ⊆ Ω, that is, all cards in our library are cards from our deck. In addition, when the game starts, it also creates other three zones that are of particular relevance to us, namely the battlefield, our hand, and the graveyard. Let’s define Ψ as the set of &lt;em&gt;y&lt;/em&gt; permanents we have on the battlefield, such that Ψ = {&lt;em&gt;ψ&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;ψ&lt;sub&gt;y&lt;/sub&gt;&lt;/em&gt;} are the permanents we have on our side of the battlefield. To make matters as simple as possible for now, let’s also assume that Ψ ⊆ Λ, that is, all permanents we have on the battlefield are permanents from our deck, until otherwise specified, and permanents are all but planeswalkers. Then we define Α as the set of &lt;em&gt;a&lt;/em&gt; permanents in our hand, such that Α = {&lt;em&gt;α&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;α&lt;sub&gt;a&lt;/sub&gt;&lt;/em&gt;} are the permanents in our hand, and B is the set of &lt;em&gt;b&lt;/em&gt; permanents in our graveyard, B = {&lt;em&gt;β&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;β&lt;sub&gt;b&lt;/sub&gt;&lt;/em&gt;}. As before, let’s also assume that A ⊆ Λ and B ⊆ Λ.&lt;/p&gt;

&lt;p&gt;Now we have a fairly good characterization of our deck and board state, so let’s see what Warp World does. First, it makes us:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;count all permanents we have on the battlefield;&lt;/li&gt;
  &lt;li&gt;shuffle all of them into our library;&lt;/li&gt;
  &lt;li&gt;then reveal as many cards from the top of our library as permanents we counted;&lt;/li&gt;
  &lt;li&gt;and finally, put all revealed artifacts, creatures, lands, and (afterwards) enchantments onto the battlefield. Everything else that was not put onto the battlefield goes to the bottom of the library. (Our opponents do the same thing at the same time, and triggered abilities follow &lt;em&gt;apnap&lt;/em&gt; order, as usual.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s relate what Warp World does to our previous definitions. During the &lt;strong&gt;first&lt;/strong&gt; step, the number of permanents we have on the battlefield will be the cardinality of Ψ, that is, |Ψ| = &lt;em&gt;y&lt;/em&gt;. During the &lt;strong&gt;second&lt;/strong&gt; step, we put |Ψ ∩ Λ| cards back into our library, and because we’re assuming that Ψ ⊆ Λ, there are exactly &lt;em&gt;y&lt;/em&gt; cards from Λ that will be put back into our library. So, by the end of the second step, our library will have exactly |Θ ∪ Ψ| = &lt;em&gt;k&lt;/em&gt; + &lt;em&gt;y&lt;/em&gt; cards, of which |Λ| - |Α ∪ B| = &lt;em&gt;z&lt;/em&gt; - (&lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt;) are permanents. Regarding shuffling, we assume it’s not biased in any particular manner–that is, cards from our library are ordered at random every time it’s required to shuffle.&lt;/p&gt;

&lt;p&gt;Here comes the interesting part, namely the &lt;strong&gt;third&lt;/strong&gt; and &lt;strong&gt;fourth&lt;/strong&gt; steps. During the &lt;strong&gt;third&lt;/strong&gt; step, we’re instructed to reveal &lt;em&gt;y&lt;/em&gt; cards from the top of our library and then, during the &lt;strong&gt;fourth&lt;/strong&gt; step, we put all artifacts, creatures, lands, and enchantments revealed this way onto the battlefield. Let’s define Φ as the set of &lt;em&gt;x&lt;/em&gt; revealed artifacts, creatures, lands, and enchantments, such that Φ = {&lt;em&gt;φ&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, …, &lt;em&gt;φ&lt;sub&gt;x&lt;/sub&gt;&lt;/em&gt;} are all the revealed permanents that will be put onto the battlefield. Now, because we don’t know how all the cards in our library were ordered (unbiased shuffling), we can’t tell which cards will be revealed in a deterministic way (e.g., the first will be a land, the second will be a creature, etc.). Fortunately, we’re quite capable of telling which cards will be revealed in a stochastic way (probabilistically).  For example, there’s a .90 chance to reveal a land, or there’s a .10 chance to reveal a creature.&lt;/p&gt;

&lt;p&gt;The act of revealing cards from the top of our library is analogous to &lt;strong&gt;sampling objects from a finite population without replacing them&lt;/strong&gt;, much like picking apples from an apple tree. Of note, we are usually revealing more than one card (&lt;em&gt;y&lt;/em&gt; &amp;gt; 1), and for now, the outcomes of interest will fall into two main categories, namely it’s either a permanent that we will put onto the battlefield or not. If each sampling were independent of one another (e.g., after revealing a card, we reshuffle it back into our library before revealing another card), we could classify this action as a Bernoulli trial and compute the probability of revealing permanents according to the binomial distribution. However, in our case, each sampling is not independent of one another, as the probability of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt; (to reveal a permanent) changes as the number of revealed cards also changes. Therefore, we should model such an action of revealing cards from the top of our library with a &lt;strong&gt;hypergeometric distribution&lt;/strong&gt;, which some magic players should be already familiar with, as it is often used to compute the optimal number of lands in a deck, for example, or the chance of drawing a certain card by turn.&lt;/p&gt;

&lt;p&gt;When there are two mutually exclusive outcomes (e.g., permanent and non-permanent card), the &lt;strong&gt;probability mass function&lt;/strong&gt; (pmf) of the number of permanents that Warp World will reveal will take the form&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq1.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq1.jpg&quot; alt=&quot;Eq. 1&quot; title=&quot;Equation 1&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in which (&lt;em&gt;p&lt;/em&gt; ¦ &lt;em&gt;q&lt;/em&gt;) is a &lt;strong&gt;binomial coefficient&lt;/strong&gt;–that is, the number of ways &lt;em&gt;q&lt;/em&gt; elements can be chosen from &lt;em&gt;p&lt;/em&gt; elements, regardless of order, computed as &lt;em&gt;p&lt;/em&gt;! / [&lt;em&gt;q&lt;/em&gt;!(&lt;em&gt;p&lt;/em&gt; - &lt;em&gt;q&lt;/em&gt;)!]. Across &lt;em&gt;&lt;strong&gt;four&lt;/strong&gt; coin tosses&lt;/em&gt; (&lt;em&gt;p&lt;/em&gt; = 4), for example, there are &lt;em&gt;&lt;strong&gt;six&lt;/strong&gt; different ways of arranging&lt;/em&gt; &lt;em&gt;&lt;strong&gt;two&lt;/strong&gt; Tails&lt;/em&gt; (&lt;em&gt;q&lt;/em&gt; = 2)–namely, TTHH, THTH, THHT, HTTH, HTHT, and HHTT–which can be represented by the binomial coefficient (4 ¦ 2) = 6.&lt;/p&gt;

&lt;p&gt;To make it easier for us, I wrote a table with definitions of the main parameters:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;a&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number of permanents in hand&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;b&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number of permanents in the graveyard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;k&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number of cards in the library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number of permanents revealed with Warp World&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;y&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number of cards revealed and number of permanents on the battlefield before resolving Warp World&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;z&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;number of permanents in the deck&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When we compute Eq.1 for all possible number of permanents revealed with Warp World, we get a probability distribution with mean&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq2.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq2.jpg&quot; alt=&quot;Eq. 2&quot; title=&quot;Equation 2&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and variance&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq3.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq3.jpg&quot; alt=&quot;Eq. 3&quot; title=&quot;Equation 3&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To illustrate its application, let’s imagine the following scenario. We’re playing with a 60-card deck that has 56 permanents (let’s think of them as all mountains; &lt;em&gt;z&lt;/em&gt; = 56) and four copies of Warp World. The game starts. We’re on the play and we mull to two cards, a mountain and a copy of Warp World. During the next seven turns, we only draw mountains, so when we get to turn eight, we have eight mountains on the battlefield (&lt;em&gt;y&lt;/em&gt; = 8), a single card in hand, which is Warp World, and 51 remaining cards in our library (&lt;em&gt;k&lt;/em&gt; = 51). If we cast Warp World, what are our chances of putting, say, eight permanents back on the battlefield? What about seven, six, five, …? If we calculate such probabilities with Eq. 1 and plot the results for various numbers of permanents we had before casting Warp World (&lt;em&gt;y&lt;/em&gt;), we get the following probability distributions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure1.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure1.jpg&quot; alt=&quot;Figure 1&quot; title=&quot;Figure 1&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the horizontal axis, we have the number of permanents that we get after resolving Warp World (&lt;em&gt;x&lt;/em&gt;), while in the vertical axis, we have the probability of each of them. In addition, the multiple distributions represent different numbers of permanents we had before casting Warp World (&lt;em&gt;y&lt;/em&gt;). (Missing probabilities are all zero.) In our example, if we have 8 permanents on the battlefield when we cast Warp World, we will get a mean of 8 permanents after resolving Warp World—that is, we usually get our eight lands back—but if we have 20 permanents on the battlefield when we cast Warp World, on average, we get 19 permanents back. Notice that even though the variability (sd stands for standard deviation) is low in absolute terms (the value of &lt;em&gt;x&lt;/em&gt; is likely equal or close to the mean), the higher is the value of &lt;em&gt;y&lt;/em&gt;, the higher is the variance. For example, if we have 8 permanents on the battlefield, we will usually get 7 or 8 permanents after resolving Warp World, and rarely anything other than that. However, if we have 20 permanents on the battlefield, we will usually get something between 18 and 20 permanents after resolving Warp World, and rarely anything other than that.&lt;/p&gt;

&lt;p&gt;Before we move on, I should point out that each probability in Figure 1 refers to the probability of getting exactly that number of permanents, as Eq. 1 is a pmf. However, if your interest is in answering questions about fewer-than/up-to/at-least a certain number of permanents, all you need to do is sum adjacent values of &lt;em&gt;x&lt;/em&gt; in the appropriate direction to get the cumulative probability. For example, if we have 20 permanents on the board before casting Warp World, what would be the probability of getting at least, say, 18 permanents? According to the Y=20 distribution in Figure 1, that probability would be .96.&lt;/p&gt;

&lt;p&gt;Despite being a somewhat unrealistic scenario, Figure 1 gives us something that we can use to compare against different situations. For instance, how adding more non-permanents to our deck would affect the previous distributions? Let’s set everything else equal to the previous example, except that now, our deck has 44 mountains (&lt;em&gt;z&lt;/em&gt; = 44), four copies of Warp World, and 12 other non-permanents. The results are the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure2.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure2.jpg&quot; alt=&quot;Figure 2&quot; title=&quot;Figure 2&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inspection of Figure 2 indicates two main differences in comparison to Figure 1. First, adding more non-permanents to a Warp World deck decreases the mean of the probability distribution of the number of permanents you will get after resolving Warp World, regardless of how many permanents you had before casting Warp World. Second, variability increased all over the board, so the chance of getting screwed up by Warp World increased quite a lot. In other words, this is why it’s not a good idea to play non-permanents in a Warp World deck, as you decrease its expected value and increase its variability. You get double screwed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-multivariate-warp-world-model&quot;&gt;The Multivariate Warp World Model&lt;/h1&gt;

&lt;p&gt;One limitation of the previous approach is that we can’t tell what sort of permanent Warp World puts onto the battlefield. In some cases, the binary distinction is just what we need. In others, however, a more detailed distinction is needed, as different types of permanent will have different effects on the board state after Warp World resolves. One distinction that would make sense is the one given by Warp World itself, namely that permanents can be artifacts, creatures, lands, and enchantments. We’ve already defined Λ as the set of all permanents in our deck, so it follows that artifacts, Λ&lt;sub&gt;1&lt;/sub&gt;, creatures, Λ&lt;sub&gt;2&lt;/sub&gt;, lands, Λ&lt;sub&gt;3&lt;/sub&gt;, and enchantments, Λ&lt;sub&gt;4&lt;/sub&gt;, ought to be subsets of Λ, such that&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq4.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq4.jpg&quot; alt=&quot;Eq. 4&quot; title=&quot;Equation 4&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;because for the sake of simplicity, we will continue to assume that we’re not playing planeswalkers. (Remember that Warp World does not put planeswalkers onto the battlefield, even though they are permanents that can be part of our deck.) Similarly, let’s say that mutually exclusive subsets of Φ, A, and B fall into the same categories as Λ&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;, such that&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq5.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq5.jpg&quot; alt=&quot;Eq. 5&quot; title=&quot;Equation 5&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can extend Eq. 1 to accommodate the additional outcomes of Warp Wold as follows&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq6.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq6.jpg&quot; alt=&quot;Eq. 6&quot; title=&quot;Equation 6&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which is the pmf of the multivariate Warp World model. Such a distribution has mean&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq7.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq7.jpg&quot; alt=&quot;Eq. 7&quot; title=&quot;Equation 7&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and variance&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq8.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/eq8.jpg&quot; alt=&quot;Eq. 8&quot; title=&quot;Equation 8&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As before, let’s think about a scenario to illustrate how Eq. 4-6 informs us about the probability of Warp World revealing different sorts of permanents as a function of the properties of our deck. Similar to our previous example, imagine we we’re playing with a 60-card deck composed of 24 lands (&lt;em&gt;z&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt; = 24), 16 creatures (&lt;em&gt;z&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; = 24), and 20 non-permanents. The game starts. We’re on the play and unfortunately, we have to mull to four cards, specifically two forests and two copies of Elvish Mystic. On turn 1, we play a forest and an elvish mystic. On turn 2, we draw a copy of Warp World, then play another forest and cast another elvish mystic. During the next four turns, we draw four mountains, so when we get to turn 6, we cast Warp World with two forests, four mountains, and two elvish mystics on the battlefield (&lt;em&gt;y&lt;/em&gt; = 8), no cards in hand or graveyard, and 51 cards left in our library (&lt;em&gt;k&lt;/em&gt; = 51). What’s the probability of revealing, say, two creatures and four lands with Warp World? On average, how many creatures and lands would Warp World put back on the battlefield after it resolves? We can answer such questions with Eq. 6-8. When we compute the probabilities in Eq. 6 for all possible values of &lt;em&gt;x&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;x&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt; and plot such values, we generate the following three-dimensional representation of the probability distribution of &lt;em&gt;x&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;x&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure3.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure3.jpg&quot; alt=&quot;Figure 3&quot; title=&quot;Figure 3&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 3 shows that when &lt;em&gt;y&lt;/em&gt; = 8, the probability of revealing exactly two creatures and four lands from the top of our library is .10. In fact, this is one of the two most likely cases, the second one being two creatures and three lands, as both of them account for roughly 20% of the possible outcomes of a Warp World under this condition. In addition, Eq. 7 and 8 show that on average, Warp World will reveal 2 creatures (&lt;em&gt;sd&lt;/em&gt; = 1 creature) and 3 lands (&lt;em&gt;sd&lt;/em&gt; = 1 land) in this particular example.&lt;/p&gt;

&lt;p&gt;We’ve seen before that playing non-permanents in a Warp World deck is a bad idea. So, let’s run the same simulation as before, except that instead of playing 16 creatures and 24 lands, our deck has 22 creatures and 26 lands. When that’s done, we find the following distribution&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure4.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure4.jpg&quot; alt=&quot;Figure 4&quot; title=&quot;Figure 4&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inspection of Figure 4 indicates a shift of the mean of the probability distribution. Indeed, on average, Warp World would reveal 3 creatures (&lt;em&gt;sd&lt;/em&gt; = 1 creatures) and 4 lands (&lt;em&gt;sd&lt;/em&gt; = 1 lands) with the latter deck.&lt;/p&gt;

&lt;p&gt;How would Figures 3 and 4 change if we increased the number of permanents on the battlefield before casting Warp World to, say, 20 permanents (&lt;em&gt;y&lt;/em&gt; = 20)? The probability distribution of &lt;em&gt;x&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; in Figure 3 would look like this&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure5.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure5.jpg&quot; alt=&quot;Figure 5&quot; title=&quot;Figure 5&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and would have mean 5 creatures (&lt;em&gt;sd&lt;/em&gt; = 2) and 8 lands (&lt;em&gt;sd&lt;/em&gt; = 2), while the distribution in Figure 4 would look like this&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure6.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/figure6.jpg&quot; alt=&quot;Figure 6&quot; title=&quot;Figure 6&quot; class=&quot;PostImage PostImage--large&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and have mean 8 creatures (&lt;em&gt;sd&lt;/em&gt; = 2) and 9 lands (&lt;em&gt;sd&lt;/em&gt; = 2).&lt;/p&gt;

&lt;p&gt;Of course, we could calculate probability distributions for decks that have non-zero artifacts and enchantments as well but it would be difficult to visualize them, as we would be using higher dimensions than before. Similarly, the same approach could be used for different, mutually exclusive distinctions (e.g., green creatures vs. red creatures vs. other permanents; ramp permanents vs. graveyard recursion permanents).&lt;/p&gt;

&lt;p&gt;There are many things that can be done moving forward. For instance, we could use Eq. 6-8 to investigate how cards that generate mana or produce more than one permanent can net mana or permanents, then describe the necessary and sufficient conditions to create loops with Warp World.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tokens&quot;&gt;Tokens&lt;/h1&gt;
&lt;p&gt;So far, we’ve worked under the assumption that when we cast Warp World, the only sort of permanent we have on the battlefield (and thus the number of cards we will reveal with Warp World) are the ones contained in our deck—that is, Ψ ⊆ Λ. In some cases, this will be true; in others, however, it won’t, as we might have tokens on the battlefield, which will increase the number of cards revealed with Warp World but it doesn’t mean we’ll shuffle that many cards into our library. Fortunately, taking tokens into account does not require us to make huge changes to the previous equations. Specifically, if Ψ ⊆ Λ is not true, then by the end of the &lt;strong&gt;second&lt;/strong&gt; step of Warp World, our new library will have size |Θ| + |Ψ ∩ Λ|, instead of |Θ ∪ Ψ|, in which Ψ ∩ Λ are all permanents on the battlefield that are permanents from our deck (i.e., all non-token permanents). Everything else remains the same.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;other-similar-spells&quot;&gt;Other Similar Spells&lt;/h1&gt;
&lt;p&gt;There are a few other spells that in one way or another, do something that is quite similar to what Warp World does. One example that comes to mind is &lt;strong&gt;The Great Aurora&lt;/strong&gt;. I have no doubt we can use the Warp World model to compute probabilities for those spells as well. We just need to tweak the model a little bit to make it consistent with the wording used in similar spells (e.g., great aurora also makes we shuffle our hand).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-15-Probability-warp-world/great-aurora.jpg&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-15-Probability-warp-world/great-aurora.jpg&quot; alt=&quot;The great aurora&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;other-approaches&quot;&gt;Other Approaches&lt;/h1&gt;
&lt;p&gt;We could find probability distributions empirically. Goldfish a Warp World deck, say, a thousand times, take note of the relevant stats prior to and after casting Warp World, and estimate the distributions empirically.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final Remarks&lt;/h1&gt;
&lt;p&gt;We end with a cautionary note. We know that adding more permanents to a Warp World deck usually yields a better outcome—that is, &lt;em&gt;the more permanents we have in the deck&lt;/em&gt;, &lt;em&gt;the more permanents we’ll likely reveal with Warp World&lt;/em&gt;. However, it would be inappropriate to simply compare mean differences to draw conclusions about different Warp World decks. That is because changing properties of Warp World decks will likely change the variance of their distributions. One possible solution is to use a &lt;strong&gt;standardized measure of the compound mean difference&lt;/strong&gt;–that is, the standardized measure of distance between the means of two &lt;em&gt;Pr&lt;/em&gt;(&lt;em&gt;x&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;) distributions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--small btn--light-outline&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="mtg" /><category term="math" /><category term="probability" /><category term="model" /></entry><entry><title type="html">Securing access to backends with HAproxy’s stick-tables: A guide for pfSense users</title><link href="http://localhost:4000/blog/Securing-backend-haproxy-pfsense/" rel="alternate" type="text/html" title="Securing access to backends with HAproxy’s stick-tables: A guide for pfSense users" /><published>2019-07-13T00:00:00-03:00</published><updated>2019-07-13T00:00:00-03:00</updated><id>http://localhost:4000/blog/Securing-backend-haproxy-pfsense</id><content type="html" xml:base="http://localhost:4000/blog/Securing-backend-haproxy-pfsense/">&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;
&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;June 23rd, 2020&lt;/strong&gt;: Moved this guide from Blogger to my website and converted to markdown.  Fixed typos I found.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;June 21st, 2020&lt;/strong&gt;: This guide stills works with &lt;strong&gt;pfsense version 2.4.5-RELEASE-p1&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;notice notice--info&quot;&gt;&lt;strong&gt;May 1st, 2020&lt;/strong&gt;: This guide still works with &lt;strong&gt;pfsense version 2.4.5-RELEASE&lt;/strong&gt; and the &lt;strong&gt;haproxy packaged version 0.60_4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is a rough guide on how to create and configure user lists and stick-tables using pfsense’s HAproxy package to protect access to a backend and limit the number of failed login attempts.  The guide is divided into two main sections.  In the first one, we’ll create a user list and add encrypted (SHA512) passwords for each of them.  Then, in the second section, we’ll create and configure stick-tables to limit the number of failed login attempts.&lt;/p&gt;

&lt;p&gt;Now, it’s fairly simple to accomplish all those things by manually changing HAproxy’s config file (e.g., &lt;a href=&quot;https://gist.github.com/Iristyle/5005653&quot;&gt;https://gist.github.com/Iristyle/5005653&lt;/a&gt;, &lt;a href=&quot;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&quot;&gt;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&lt;/a&gt;).  However, I found it difficult to find any sort of documentation on how to accomplish the same thing using only pfsense’s graphical user interface (GUI).  The GUI makes it very easy to implement and configure the core aspects of HAproxy (e.g., reverse proxy and load balancing) but at the same time, it seems to lack support for other features, such as adding basic authentication requests and using stick-tables to mitigate attempts to brute-force users’ credentials.  If that’s what you’d like to do, then read on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;The pre-requisites are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You’re running &lt;strong&gt;pfsense version 2.4.4-RELEASE-p3&lt;/strong&gt; or similar;&lt;/li&gt;
  &lt;li&gt;You’ve installed the &lt;strong&gt;HAproxy package version 0.59_19&lt;/strong&gt; or similar;&lt;/li&gt;
  &lt;li&gt;You’ve already added backends and frontends with HAproxy using subdomains (e.g., &lt;a href=&quot;https://blog.devita.co/pfsense-to-proxy-traffic-for-websites-using-pfsense/&quot;&gt;https://blog.devita.co/pfsense-to-proxy-traffic-for-websites-using-pfsense/&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Configure ACME SSL with HAproxy.  For example:&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/5Frn96oADOU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;basic-user-authentication&quot;&gt;Basic user authentication&lt;/h1&gt;
&lt;p&gt;This part of the tutorial is largely based on &lt;a href=&quot;https://hochwald.net/user-authentication-with-haproxy-on-pfsense/&quot;&gt;Joerg Hocwald’s guide&lt;/a&gt;. In HAproxy, it’s pretty simple to create a user list with encrypted passwords.  There is basically three steps involved: (a) user and password list creation, (b) adding those to the global settings, and (c) creating an access control list (ACL) and action for each backend.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a .txt file and write the following:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;userlist UserGroup
group is-admin
group is-user
user example01 password sha512-encrypted01 groups is-admin
user example02 password sha512-encrypted02 groups is-user
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userlist&lt;/code&gt; defines the name of your user list, which in this case we’re going to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserGroup&lt;/code&gt;.  Next, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group&lt;/code&gt; defines the group that each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; belongs to, which will be either a standard user (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is-user&lt;/code&gt;) or admin (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is-admin&lt;/code&gt;).  (You don’t need to define groups but it’s a nice way of restricting access to critical services.) Below groups, we have the list of all users, their (SHA-512 encrypted) passwords and the group they belong to.  You can add as many users as you want this way.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file.png&quot; alt=&quot;Userlist text file&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each user, create a SHA-512 encrypted password.  &lt;a href=&quot;https://lmgtfy.com/?q=how%20to%20create%20a%20sha-512%20password&amp;amp;s=g&quot;&gt;There are many ways of doing that.&lt;/a&gt;  If you’re running Debian (or any Linux distro), run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install whois&lt;/code&gt; in a terminal window, which has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkpasswd&lt;/code&gt; command that we’re going to user, and then run each of the followin commands, changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512-encrypted01&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512-encrypted02&lt;/code&gt; for the actual, &lt;em&gt;plain text&lt;/em&gt; password string of those respective users:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;printf &quot;sha512-encrypted01&quot; | mkpasswd --stdin --method=sha-512
printf &quot;sha512-encrypted02&quot; | mkpasswd --stdin --method=sha-512
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/sha-512_pass.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/sha-512_pass.png&quot; alt=&quot;mkpasswd output&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now copy each encrypted password and paste them over the respective &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512-encryptedXX&lt;/code&gt; string in the user list .txt file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file2.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/user-list-txt-file2.png&quot; alt=&quot;Edit the userlist with passwd&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to pfsense’s GUI and in &lt;strong&gt;Services &amp;gt; HAproxy&lt;/strong&gt;, go to the &lt;strong&gt;Settings tab&lt;/strong&gt;.  Now find &lt;strong&gt;Global Advanced pass thru&lt;/strong&gt; and paste the content from your user list .txt file. (If you’ve other things in the global pass thru, make sure to add the user list to the bottom of all other commands.  Otherwise, you might get a few errors when trying to apply the settings.) When you’re done, hit &lt;strong&gt;Save&lt;/strong&gt; and then &lt;strong&gt;Apply Settings&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/global-pass-thru.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/global-pass-thru.png&quot; alt=&quot;HAproxy global passthru&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now head to the &lt;strong&gt;Backend tab&lt;/strong&gt;.  We’re going to &lt;strong&gt;edit one of the backends&lt;/strong&gt; (e.g., www.domain.com).  In &lt;strong&gt;Access control lists and actions&lt;/strong&gt;, create a new ACL, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = UserAuth
Expression = Custom acl:
CS = blank
Not = no
Value = http_auth_group(UserGroup) is-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(If you want to restrict access to admin, then you need to change the value from is-user to is-admin.)  Then, in &lt;strong&gt;Actions&lt;/strong&gt;, create a new one as follows:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = http-request auth
Parameters = See below
Condition acl names = blank
Actions = blank
realm = realm User unless UserAuth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(As before, if you want to restrict access to admin, then in realm, change User for Admin.) Hit &lt;strong&gt;Save&lt;/strong&gt; and then &lt;strong&gt;Apply Settings&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_basicauth_001.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_basicauth_001.png&quot; alt=&quot;HAproxy ACL&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rinse and repeat for each backend you want to protect with basic user authentication.  Make sure to test your config before moving on to the next section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;stick-tables-to-protect-against-brute-force&quot;&gt;Stick-tables to protect against brute-force&lt;/h1&gt;
&lt;p&gt;In our case, access to each backend is secured by a basic http authentication request.  If the client does not provide correct credentials, it will be requested to enter new ones.  By default, HAproxy will do that forever, which is not something that sounds desirable to me because it allows clients to brute force their way into my services.  On HAproxy’s official blog, you’ll find a very instructive guide on how to protect your servers from bots, including a &lt;a href=&quot;https://www.haproxy.com/blog/bot-protection-with-haproxy/#brute-force-bots&quot;&gt;step-by-step procedure to help you mitigate brute-force attacks&lt;/a&gt;.  In their case, however, the authentication is associated to a particular /login page, instead of using HAproxy’s own http-request auth feature, and we’d like to use the latter instead.&lt;/p&gt;

&lt;p&gt;Fortunately, when a client provides incorrect credentials, the result is an &lt;strong&gt;http error code&lt;/strong&gt; (401) and because 4xx errors should be fairly uncommon in a properly configured server, we can use the rate of such errors (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_err_rate&lt;/code&gt;) as a marker of misuse/brute-force.  In HAproxy, a stick-table is used to keep track of a client’s IP address and both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_err_rate&lt;/code&gt; and the total number of errors (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http_err_cnt&lt;/code&gt;).  In pfsense’s GUI, however, there’s no point-and-click way of enabling/disabling this, so we’ll need to make use of backend pass thru and write custom access control lists and actions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit one of your &lt;strong&gt;backends&lt;/strong&gt; (e.g., &lt;strong&gt;www&lt;/strong&gt;.domain.com) and in &lt;strong&gt;Advanced Settings&lt;/strong&gt;, add the following to &lt;strong&gt;Backend pass thru&lt;/strong&gt;:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stick-table type ip size 1m expire 30m store conn_cur,conn_rate(3s),http_req_cnt,http_req_rate(10s),http_err_cnt,http_err_rate(20s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_001.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/backends_001.png&quot; alt=&quot;HAproxy backend passthru&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This will create a stick-table that will capture the IP address of each client (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type ip&lt;/code&gt;), will store up to 1MB of data (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size 1m&lt;/code&gt;), will expire after 30min it was last matched/created/refreshed (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expire 30m&lt;/code&gt;) and for each client (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;), it will store the # of connections and their rate over 3s, the # of http requests and their rate over 10s, and the # of http errors and their rate over 20s (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store conn_cur,conn_rate(3s),http_req_cnt,http_req_rate(10s),http_err_cnt,http_err_rate(20s)&lt;/code&gt;).  (We won’t use all those data but I figure you might find useful for other applications.  We’ll only use the last two.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now go the the &lt;strong&gt;Frontend tab&lt;/strong&gt; edit the &lt;strong&gt;www&lt;/strong&gt;.domain.com &lt;strong&gt;frontend&lt;/strong&gt; (or whichever frontend is associated with the backend you just edited).  Here, we’ll create a couple of ACLs and actions that will make use of the data from the stick-table.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In &lt;strong&gt;Default backend&lt;/strong&gt; / &lt;strong&gt;Access control lists and actions&lt;/strong&gt;, &lt;strong&gt;create a new ACL&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = acl-www-err-rate
Expression = Custom acl:
CS = blank
Not = no
Value = sc_http_err_rate(0) gt 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This acl applies to all clients that have more than 10 4xx errors over the last 10s.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, &lt;strong&gt;create another ACL&lt;/strong&gt;, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = acl-www-err-total
Expression = Custom acl:
CS = blank
Not = no
Value = sc_http_err_cnt(0) gt 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This acl applies to all clients that have more than 100 4xx errors stored on the stick-table (so, in the last 30min).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_002.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_002.png&quot; alt=&quot;HAproxy ACLs&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;strong&gt;Actions&lt;/strong&gt;, we will define what HAproxy will do in each of those cases.  First, however, we need to &lt;strong&gt;instruct HAproxy to track the correct backend stick-table&lt;/strong&gt;.  So, create a new action as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = Custom
Parameters = See below
Condition acl names = acl-www
customaction = http-request track-sc0 src table www.domain.com_ipvANY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The last sections, customaction, tells HAproxy to use the stick-table from the &lt;strong&gt;www&lt;/strong&gt;.domain.com backend.  By default, that table is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{backend-name}_ipvANY&lt;/code&gt;, so edit it accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, we’re going to &lt;em&gt;deny requests&lt;/em&gt; from acl-&lt;strong&gt;subdomain&lt;/strong&gt;-err-total, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = http-request deny
Parameters = See below
Condition acl names = acl-www-err-total
denystatus = 403
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This will return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Forbidden error&lt;/code&gt; to clients that have more than 100 errors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Also, we’re going to &lt;em&gt;drop connections&lt;/em&gt; from clients that have a high error rate, as follows:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Action = Custom
Parameters = See below
Condition acl names = acl-www-err-rate
customaction = http-request silent-drop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This will cause the client to wait for a reply from our server but our server will never send one, so the client will hang in there until it gets a timeout.  This alone should be an effective way of dealing with brute-force attacks but I like the idea of completely denying access to persistent offenders.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now move your &lt;strong&gt;Use Backend&lt;/strong&gt; action to the bottom of the list and hit &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_003.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/frontends_003.png&quot; alt=&quot;HAproxy use backend bottom&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Apply settings&lt;/strong&gt; and check if it’s working correctly in the &lt;strong&gt;Stats tab&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_001.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_001.png&quot; alt=&quot;HAproxy stats tab&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_002.png&quot;&gt;&lt;img src=&quot;/assets/posts/2019-07-13-Securing-backend-haproxy-pfsense/stats_002.png&quot; alt=&quot;HAproxy stats tab&quot; class=&quot;PostImage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’d like to configure stick-tables for other subdomains, just repeat all the previous steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s it!  Let me remind you that the options described here were tuned to my own case and therefore, you should review them to make sure they’ll work for yours as well.  For example, you might want to set a shorter expire for a given stick-table than 30 min., or you may not want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http-request deny&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http-request silent-drop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Stick-tables are great and there are many other things you can do with them.  For example, you can use a similar procedure to implement other recommendations mentioned in &lt;a href=&quot;https://www.haproxy.com/blog/bot-protection-with-haproxy&quot;&gt;&lt;strong&gt;the official blog&lt;/strong&gt;&lt;/a&gt;.  This one has been working very well for me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn--light-outline btn--small&quot;&gt;top&lt;/a&gt;&lt;/p&gt;</content><author><name>Carlos Gomes</name></author><category term="blog" /><category term="haproxy" /><category term="homelab" /><category term="homeserver" /><category term="http" /><category term="pfsense" /></entry></feed>